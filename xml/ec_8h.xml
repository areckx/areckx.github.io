<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="ec_8h" kind="file" language="C++">
    <compoundname>ec.h</compoundname>
    <includes refid="opensslconf_8h" local="no">openssl/opensslconf.h</includes>
    <includes refid="asn1_8h" local="no">openssl/asn1.h</includes>
    <includes refid="symhacks_8h" local="no">openssl/symhacks.h</includes>
    <includes refid="bn_8h" local="no">openssl/bn.h</includes>
    <includedby refid="ecdh_8h" local="no">thirdparty/openssl/include/openssl/ecdh.h</includedby>
    <includedby refid="ecdsa_8h" local="no">thirdparty/openssl/include/openssl/ecdsa.h</includedby>
    <includedby refid="x509_8h" local="no">thirdparty/openssl/include/openssl/x509.h</includedby>
    <incdepgraph>
      <node id="82692">
        <label>stdarg.h</label>
      </node>
      <node id="82697">
        <label>openssl/opensslv.h</label>
        <link refid="opensslv_8h_source"/>
      </node>
      <node id="82700">
        <label>stdint.h</label>
      </node>
      <node id="82685">
        <label>thirdparty/openssl/include/openssl/ec.h</label>
        <link refid="ec_8h"/>
        <childnode refid="82686" relation="include">
        </childnode>
        <childnode refid="82687" relation="include">
        </childnode>
        <childnode refid="82699" relation="include">
        </childnode>
        <childnode refid="82701" relation="include">
        </childnode>
      </node>
      <node id="82694">
        <label>stdlib.h</label>
      </node>
      <node id="82690">
        <label>openssl/bio.h</label>
        <link refid="bio_8h_source"/>
        <childnode refid="82689" relation="include">
        </childnode>
        <childnode refid="82691" relation="include">
        </childnode>
        <childnode refid="82692" relation="include">
        </childnode>
        <childnode refid="82693" relation="include">
        </childnode>
        <childnode refid="82700" relation="include">
        </childnode>
      </node>
      <node id="82695">
        <label>openssl/stack.h</label>
        <link refid="stack_8h_source"/>
      </node>
      <node id="82701">
        <label>openssl/bn.h</label>
        <link refid="bn_8h_source"/>
        <childnode refid="82689" relation="include">
        </childnode>
        <childnode refid="82691" relation="include">
        </childnode>
        <childnode refid="82698" relation="include">
        </childnode>
        <childnode refid="82693" relation="include">
        </childnode>
      </node>
      <node id="82699">
        <label>openssl/symhacks.h</label>
        <link refid="symhacks_8h_source"/>
        <childnode refid="82689" relation="include">
        </childnode>
      </node>
      <node id="82687">
        <label>openssl/asn1.h</label>
        <link refid="asn1_8h_source"/>
        <childnode refid="82688" relation="include">
        </childnode>
        <childnode refid="82689" relation="include">
        </childnode>
        <childnode refid="82690" relation="include">
        </childnode>
        <childnode refid="82695" relation="include">
        </childnode>
        <childnode refid="82696" relation="include">
        </childnode>
        <childnode refid="82699" relation="include">
        </childnode>
        <childnode refid="82698" relation="include">
        </childnode>
        <childnode refid="82701" relation="include">
        </childnode>
      </node>
      <node id="82696">
        <label>openssl/safestack.h</label>
        <link refid="safestack_8h_source"/>
        <childnode refid="82695" relation="include">
        </childnode>
      </node>
      <node id="82688">
        <label>time.h</label>
      </node>
      <node id="82686">
        <label>openssl/opensslconf.h</label>
        <link refid="opensslconf_8h_source"/>
      </node>
      <node id="82689">
        <label>openssl/e_os2.h</label>
        <link refid="e__os2_8h_source"/>
        <childnode refid="82686" relation="include">
        </childnode>
      </node>
      <node id="82691">
        <label>stdio.h</label>
      </node>
      <node id="82698">
        <label>openssl/ossl_typ.h</label>
        <link refid="ossl__typ_8h_source"/>
        <childnode refid="82689" relation="include">
        </childnode>
      </node>
      <node id="82693">
        <label>openssl/crypto.h</label>
        <link refid="crypto_8h_source"/>
        <childnode refid="82694" relation="include">
        </childnode>
        <childnode refid="82689" relation="include">
        </childnode>
        <childnode refid="82691" relation="include">
        </childnode>
        <childnode refid="82695" relation="include">
        </childnode>
        <childnode refid="82696" relation="include">
        </childnode>
        <childnode refid="82697" relation="include">
        </childnode>
        <childnode refid="82698" relation="include">
        </childnode>
        <childnode refid="82699" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="82704">
        <label>thirdparty/openssl/include/openssl/engine.h</label>
        <link refid="engine_8h_source"/>
      </node>
      <node id="82715">
        <label>thirdparty/openssl/include/openssl/ts.h</label>
        <link refid="ts_8h_source"/>
      </node>
      <node id="82702">
        <label>thirdparty/openssl/include/openssl/ec.h</label>
        <link refid="ec_8h"/>
        <childnode refid="82703" relation="include">
        </childnode>
        <childnode refid="82718" relation="include">
        </childnode>
        <childnode refid="82705" relation="include">
        </childnode>
      </node>
      <node id="82707">
        <label>thirdparty/poppler/poppler/SignatureHandler.h</label>
        <link refid="_signature_handler_8h_source"/>
        <childnode refid="82708" relation="include">
        </childnode>
      </node>
      <node id="82711">
        <label>thirdparty/kQOAuth/kqoauthutils.cpp</label>
        <link refid="kqoauthutils_8cpp_source"/>
      </node>
      <node id="82713">
        <label>thirdparty/openssl/include/openssl/ssl3.h</label>
        <link refid="ssl3_8h_source"/>
        <childnode refid="82712" relation="include">
        </childnode>
      </node>
      <node id="82705">
        <label>thirdparty/openssl/include/openssl/x509.h</label>
        <link refid="x509_8h_source"/>
        <childnode refid="82706" relation="include">
        </childnode>
        <childnode refid="82704" relation="include">
        </childnode>
        <childnode refid="82709" relation="include">
        </childnode>
        <childnode refid="82710" relation="include">
        </childnode>
        <childnode refid="82714" relation="include">
        </childnode>
        <childnode refid="82712" relation="include">
        </childnode>
        <childnode refid="82715" relation="include">
        </childnode>
        <childnode refid="82716" relation="include">
        </childnode>
        <childnode refid="82717" relation="include">
        </childnode>
      </node>
      <node id="82716">
        <label>thirdparty/openssl/include/openssl/x509_vfy.h</label>
        <link refid="x509__vfy_8h_source"/>
        <childnode refid="82705" relation="include">
        </childnode>
      </node>
      <node id="82718">
        <label>thirdparty/openssl/include/openssl/ecdsa.h</label>
        <link refid="ecdsa_8h_source"/>
        <childnode refid="82704" relation="include">
        </childnode>
        <childnode refid="82705" relation="include">
        </childnode>
      </node>
      <node id="82710">
        <label>thirdparty/openssl/include/openssl/pem.h</label>
        <link refid="pem_8h_source"/>
        <childnode refid="82711" relation="include">
        </childnode>
        <childnode refid="82712" relation="include">
        </childnode>
      </node>
      <node id="82706">
        <label>thirdparty/openssl/include/openssl/cms.h</label>
        <link refid="cms_8h_source"/>
        <childnode refid="82707" relation="include">
        </childnode>
      </node>
      <node id="82712">
        <label>thirdparty/openssl/include/openssl/ssl.h</label>
        <link refid="ssl_8h_source"/>
        <childnode refid="82711" relation="include">
        </childnode>
        <childnode refid="82713" relation="include">
        </childnode>
      </node>
      <node id="82708">
        <label>thirdparty/poppler/poppler/SignatureHandler.cc</label>
        <link refid="_signature_handler_8cc_source"/>
      </node>
      <node id="82703">
        <label>thirdparty/openssl/include/openssl/ecdh.h</label>
        <link refid="ecdh_8h_source"/>
        <childnode refid="82704" relation="include">
        </childnode>
        <childnode refid="82705" relation="include">
        </childnode>
      </node>
      <node id="82717">
        <label>thirdparty/openssl/include/openssl/x509v3.h</label>
        <link refid="x509v3_8h_source"/>
        <childnode refid="82709" relation="include">
        </childnode>
        <childnode refid="82715" relation="include">
        </childnode>
      </node>
      <node id="82714">
        <label>thirdparty/openssl/include/openssl/pkcs12.h</label>
        <link refid="pkcs12_8h_source"/>
      </node>
      <node id="82709">
        <label>thirdparty/openssl/include/openssl/ocsp.h</label>
        <link refid="ocsp_8h_source"/>
      </node>
    </invincdepgraph>
    <innerclass refid="struct_e_c__builtin__curve" prot="public">EC_builtin_curve</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="ec_8h_1ac000b88bdf9b72c9aeb2ba5ab64a19d2" prot="public" static="no">
        <name>OPENSSL_ECC_MAX_FIELD_BITS</name>
        <initializer>661</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="101" column="10" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="101" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1a128f7f6f47c83fb872948a5b8d4473a0" prot="public" static="no">
        <name>OPENSSL_EC_NAMED_CURVE</name>
        <initializer>0x001</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="682" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="682" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1a992cf075363ba9be20d6ac0570b5b4e4" prot="public" static="no">
        <name>d2i_ECPKParameters_bio</name>
        <param><defname>bp</defname></param>
        <param><defname>x</defname></param>
        <initializer>ASN1_d2i_bio_of(EC_GROUP,NULL,d2i_ECPKParameters,bp,x)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="689" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="689" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1a1d904a5883eecaa878d0a4f1e18d47d9" prot="public" static="no">
        <name>i2d_ECPKParameters_bio</name>
        <param><defname>bp</defname></param>
        <param><defname>x</defname></param>
        <initializer>ASN1_i2d_bio_of_const(EC_GROUP,i2d_ECPKParameters,bp,x)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="690" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="690" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1ac006c519d23da15f318447d17ddaf112" prot="public" static="no">
        <name>d2i_ECPKParameters_fp</name>
        <param><defname>fp</defname></param>
        <param><defname>x</defname></param>
        <initializer>(EC_GROUP *)ASN1_d2i_fp(NULL, \
                (char *(*)())d2i_ECPKParameters,(fp),(unsigned char **)(x))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="691" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="691" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1a10931bc3af872d01755bdd45c05f4514" prot="public" static="no">
        <name>i2d_ECPKParameters_fp</name>
        <param><defname>fp</defname></param>
        <param><defname>x</defname></param>
        <initializer>ASN1_i2d_fp(i2d_ECPKParameters,(fp), \
		(unsigned char *)(x))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="693" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="693" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1aa2c1a1bb3ba7ae4075674a78119ce434" prot="public" static="no">
        <name>EC_PKEY_NO_PARAMETERS</name>
        <initializer>0x001</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="711" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="711" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1a7e23f8df3ca5c998f3adfa078ed64972" prot="public" static="no">
        <name>EC_PKEY_NO_PUBKEY</name>
        <initializer>0x002</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="712" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="712" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1aeb8b575d4c1013ab56a4b0bb41cea605" prot="public" static="no">
        <name>EC_FLAG_NON_FIPS_ALLOW</name>
        <initializer>0x1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="715" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="715" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1ad8d33a9cc078b1d6f441e2dbbc355477" prot="public" static="no">
        <name>EC_FLAG_FIPS_CHECKED</name>
        <initializer>0x2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="716" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="716" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1ab50582d543fdb830ac510da537565f2d" prot="public" static="no">
        <name>ECParameters_dup</name>
        <param><defname>x</defname></param>
        <initializer>ASN1_dup_of(EC_KEY,i2d_ECParameters,d2i_ECParameters,x)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="952" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="952" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1a16a1e96a0070c417eb563d17de83c2ac" prot="public" static="no">
        <name>EVP_PKEY_CTX_set_ec_paramgen_curve_nid</name>
        <param><defname>ctx</defname></param>
        <param><defname>nid</defname></param>
        <initializer>EVP_PKEY_CTX_ctrl(ctx, EVP_PKEY_EC, EVP_PKEY_OP_PARAMGEN, \
				EVP_PKEY_CTRL_EC_PARAMGEN_CURVE_NID, nid, NULL)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="962" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="962" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1ab4aef0e445bf99d5b9d7540f5edd09d7" prot="public" static="no">
        <name>EVP_PKEY_CTRL_EC_PARAMGEN_CURVE_NID</name>
        <initializer>(EVP_PKEY_ALG_CTRL + 1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="967" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="967" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1ab3887b2d38f223de6778fff1f8843d7c" prot="public" static="no">
        <name>EC_F_BN_TO_FELEM</name>
        <initializer>224</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="978" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="978" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1a9c64c39cf9a26c8627e01589f8eed632" prot="public" static="no">
        <name>EC_F_COMPUTE_WNAF</name>
        <initializer>143</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="979" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="979" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1a508cd832b00587d2ec48d9bb717d7255" prot="public" static="no">
        <name>EC_F_D2I_ECPARAMETERS</name>
        <initializer>144</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="980" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="980" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1a918a97c204417cdd62cc70ed2a818791" prot="public" static="no">
        <name>EC_F_D2I_ECPKPARAMETERS</name>
        <initializer>145</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="981" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="981" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1a8ff818332edea23aa0a7602de18c2f0a" prot="public" static="no">
        <name>EC_F_D2I_ECPRIVATEKEY</name>
        <initializer>146</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="982" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="982" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1a31d80bb8d88b7f57d2f8d3c6d77655fe" prot="public" static="no">
        <name>EC_F_DO_EC_KEY_PRINT</name>
        <initializer>221</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="983" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="983" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1abe0904a39cfeb203961c2585c0784dc1" prot="public" static="no">
        <name>EC_F_ECKEY_PARAM2TYPE</name>
        <initializer>223</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="984" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="984" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1a879f5c581229933f3093ade4ec425cb0" prot="public" static="no">
        <name>EC_F_ECKEY_PARAM_DECODE</name>
        <initializer>212</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="985" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="985" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1afc1415e6730009d5803a1c87c4d3deb3" prot="public" static="no">
        <name>EC_F_ECKEY_PRIV_DECODE</name>
        <initializer>213</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="986" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="986" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1a54d9cae54350c82ef92bb86415145d95" prot="public" static="no">
        <name>EC_F_ECKEY_PRIV_ENCODE</name>
        <initializer>214</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="987" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="987" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1a684d18523a6505b289ba87fdfbd3e2c9" prot="public" static="no">
        <name>EC_F_ECKEY_PUB_DECODE</name>
        <initializer>215</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="988" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="988" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1af849bb4386911cfc5f24226e8149efaf" prot="public" static="no">
        <name>EC_F_ECKEY_PUB_ENCODE</name>
        <initializer>216</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="989" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="989" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1ac0835310ca8275dafe996b14689914eb" prot="public" static="no">
        <name>EC_F_ECKEY_TYPE2PARAM</name>
        <initializer>220</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="990" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="990" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1a4c9f96362be67b9cc4b6d7632b3183a9" prot="public" static="no">
        <name>EC_F_ECPARAMETERS_PRINT</name>
        <initializer>147</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="991" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="991" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1a42b65607788efd77cfd10a39f1d59fbb" prot="public" static="no">
        <name>EC_F_ECPARAMETERS_PRINT_FP</name>
        <initializer>148</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="992" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="992" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1a3bd42558569578f6c668b16ca9f38a7d" prot="public" static="no">
        <name>EC_F_ECPKPARAMETERS_PRINT</name>
        <initializer>149</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="993" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="993" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1a93341132ad7649a05506aabb439adc0f" prot="public" static="no">
        <name>EC_F_ECPKPARAMETERS_PRINT_FP</name>
        <initializer>150</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="994" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="994" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1ad99ebde44657209546e124acbc9a5ca1" prot="public" static="no">
        <name>EC_F_ECP_NIST_MOD_192</name>
        <initializer>203</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="995" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="995" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1aa3d6a98da3d5b249eca7c5a337b64dde" prot="public" static="no">
        <name>EC_F_ECP_NIST_MOD_224</name>
        <initializer>204</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="996" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="996" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1a5d6a06696c022b76ef8deeaddc733142" prot="public" static="no">
        <name>EC_F_ECP_NIST_MOD_256</name>
        <initializer>205</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="997" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="997" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1a15354f7411b2b732b60981c56aedb62c" prot="public" static="no">
        <name>EC_F_ECP_NIST_MOD_521</name>
        <initializer>206</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="998" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="998" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1ab3e676c083e2375b64d6e77096d42a6b" prot="public" static="no">
        <name>EC_F_EC_ASN1_GROUP2CURVE</name>
        <initializer>153</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="999" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="999" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1a0197d4c89a9a79b1d93b66b2b0bb7163" prot="public" static="no">
        <name>EC_F_EC_ASN1_GROUP2FIELDID</name>
        <initializer>154</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="1000" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="1000" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1af18f92a5a029ce1798da099737876e13" prot="public" static="no">
        <name>EC_F_EC_ASN1_GROUP2PARAMETERS</name>
        <initializer>155</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="1001" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="1001" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1a862ab3c9a9c90c5860e900c6693a7183" prot="public" static="no">
        <name>EC_F_EC_ASN1_GROUP2PKPARAMETERS</name>
        <initializer>156</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="1002" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="1002" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1adcf4ae67464f62a6958ec6cb22e09bce" prot="public" static="no">
        <name>EC_F_EC_ASN1_PARAMETERS2GROUP</name>
        <initializer>157</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="1003" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="1003" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1a76dcc52e842b6cf671634c9551f06359" prot="public" static="no">
        <name>EC_F_EC_ASN1_PKPARAMETERS2GROUP</name>
        <initializer>158</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="1004" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="1004" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1a27d65051cad8f6cfda8903e423cd97a9" prot="public" static="no">
        <name>EC_F_EC_EX_DATA_SET_DATA</name>
        <initializer>211</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="1005" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="1005" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1ac45ce5c0c89c44eace1e27c559dcfd87" prot="public" static="no">
        <name>EC_F_EC_GF2M_MONTGOMERY_POINT_MULTIPLY</name>
        <initializer>208</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="1006" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="1006" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1a8eacde4e370d457458794aed75d75eea" prot="public" static="no">
        <name>EC_F_EC_GF2M_SIMPLE_GROUP_CHECK_DISCRIMINANT</name>
        <initializer>159</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="1007" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="1007" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1ae79501dc36ee561372b911f56a2e766e" prot="public" static="no">
        <name>EC_F_EC_GF2M_SIMPLE_GROUP_SET_CURVE</name>
        <initializer>195</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="1008" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="1008" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1ad759e809889bc4eddbaf531ba37c41e1" prot="public" static="no">
        <name>EC_F_EC_GF2M_SIMPLE_OCT2POINT</name>
        <initializer>160</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="1009" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="1009" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1a464bc387339aa9cbf723f717a8ead7e8" prot="public" static="no">
        <name>EC_F_EC_GF2M_SIMPLE_POINT2OCT</name>
        <initializer>161</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="1010" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="1010" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1a9f9d44b43f870219a7abc2f4ce5720c1" prot="public" static="no">
        <name>EC_F_EC_GF2M_SIMPLE_POINT_GET_AFFINE_COORDINATES</name>
        <initializer>162</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="1011" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="1011" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1abcac0df1ace1ea698fe4482c6b81447b" prot="public" static="no">
        <name>EC_F_EC_GF2M_SIMPLE_POINT_SET_AFFINE_COORDINATES</name>
        <initializer>163</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="1012" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="1012" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1aa90c713ee01ac0ebbbff3d075b071843" prot="public" static="no">
        <name>EC_F_EC_GF2M_SIMPLE_SET_COMPRESSED_COORDINATES</name>
        <initializer>164</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="1013" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="1013" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1a6831cf18f83e495297cc8ac0eec69bf6" prot="public" static="no">
        <name>EC_F_EC_GFP_MONT_FIELD_DECODE</name>
        <initializer>133</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="1014" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="1014" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1afa7e7ba724cd18086f9b0cd8f5461cf3" prot="public" static="no">
        <name>EC_F_EC_GFP_MONT_FIELD_ENCODE</name>
        <initializer>134</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="1015" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="1015" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1a453704404ba929d76967dbe8c8435b0c" prot="public" static="no">
        <name>EC_F_EC_GFP_MONT_FIELD_MUL</name>
        <initializer>131</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="1016" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="1016" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1a544c44c42d37c50a0f1254d8f06fe609" prot="public" static="no">
        <name>EC_F_EC_GFP_MONT_FIELD_SET_TO_ONE</name>
        <initializer>209</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="1017" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="1017" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1a63f665c9d7a3a0a7b4b16ed5edf2dbd7" prot="public" static="no">
        <name>EC_F_EC_GFP_MONT_FIELD_SQR</name>
        <initializer>132</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="1018" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="1018" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1a0bd2382cbc63645625b4d84dadd2a467" prot="public" static="no">
        <name>EC_F_EC_GFP_MONT_GROUP_SET_CURVE</name>
        <initializer>189</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="1019" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="1019" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1a74705da1faa05bb897c94b00ce86ff1c" prot="public" static="no">
        <name>EC_F_EC_GFP_MONT_GROUP_SET_CURVE_GFP</name>
        <initializer>135</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="1020" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="1020" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1a0891b82998435026d6ac95c20bdee8cf" prot="public" static="no">
        <name>EC_F_EC_GFP_NISTP224_GROUP_SET_CURVE</name>
        <initializer>225</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="1021" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="1021" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1ad1fd39354236a3275d23439d96af1381" prot="public" static="no">
        <name>EC_F_EC_GFP_NISTP224_POINTS_MUL</name>
        <initializer>228</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="1022" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="1022" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1a030b8407ba574a4c12a5684c1bb681e6" prot="public" static="no">
        <name>EC_F_EC_GFP_NISTP224_POINT_GET_AFFINE_COORDINATES</name>
        <initializer>226</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="1023" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="1023" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1a25dc27c9dd618ee9d0ae80e6fb0cc80b" prot="public" static="no">
        <name>EC_F_EC_GFP_NISTP256_GROUP_SET_CURVE</name>
        <initializer>230</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="1024" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="1024" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1a2a3965da101e566a4372bc65865a08ab" prot="public" static="no">
        <name>EC_F_EC_GFP_NISTP256_POINTS_MUL</name>
        <initializer>231</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="1025" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="1025" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1a1beec6b5fe53e69781727aabd1463abf" prot="public" static="no">
        <name>EC_F_EC_GFP_NISTP256_POINT_GET_AFFINE_COORDINATES</name>
        <initializer>232</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="1026" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="1026" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1a76cb96fb2b73f05face0d6a889de6b2b" prot="public" static="no">
        <name>EC_F_EC_GFP_NISTP521_GROUP_SET_CURVE</name>
        <initializer>233</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="1027" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="1027" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1a2d833351762fb3a2b9786f02f33278ab" prot="public" static="no">
        <name>EC_F_EC_GFP_NISTP521_POINTS_MUL</name>
        <initializer>234</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="1028" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="1028" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1aa4745e34f0429b9942e3ad4afb507dc7" prot="public" static="no">
        <name>EC_F_EC_GFP_NISTP521_POINT_GET_AFFINE_COORDINATES</name>
        <initializer>235</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="1029" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="1029" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1ab69307c6e002ff996a46e39215473924" prot="public" static="no">
        <name>EC_F_EC_GFP_NIST_FIELD_MUL</name>
        <initializer>200</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="1030" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="1030" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1a224ac679f7bc2c16c2e863dc419cfa22" prot="public" static="no">
        <name>EC_F_EC_GFP_NIST_FIELD_SQR</name>
        <initializer>201</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="1031" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="1031" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1ad81307a139d50cca061edc6eee7188df" prot="public" static="no">
        <name>EC_F_EC_GFP_NIST_GROUP_SET_CURVE</name>
        <initializer>202</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="1032" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="1032" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1a118e3a1d52bf70bc8e8aaeec8f8ad656" prot="public" static="no">
        <name>EC_F_EC_GFP_SIMPLE_GROUP_CHECK_DISCRIMINANT</name>
        <initializer>165</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="1033" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="1033" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1ab40082b56d918d4c263732b32c34ae67" prot="public" static="no">
        <name>EC_F_EC_GFP_SIMPLE_GROUP_SET_CURVE</name>
        <initializer>166</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="1034" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="1034" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1ae29607bbb5168e1a95f4cdb835be2e7b" prot="public" static="no">
        <name>EC_F_EC_GFP_SIMPLE_GROUP_SET_CURVE_GFP</name>
        <initializer>100</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="1035" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="1035" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1aabbd615694bcaee87707c8182e8bf415" prot="public" static="no">
        <name>EC_F_EC_GFP_SIMPLE_GROUP_SET_GENERATOR</name>
        <initializer>101</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="1036" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="1036" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1aff62aa0a853b8a0f9cb672ce8b3be071" prot="public" static="no">
        <name>EC_F_EC_GFP_SIMPLE_MAKE_AFFINE</name>
        <initializer>102</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="1037" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="1037" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1a7fb02c26cbc0725fceeaac52c61d3663" prot="public" static="no">
        <name>EC_F_EC_GFP_SIMPLE_OCT2POINT</name>
        <initializer>103</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="1038" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="1038" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1a3ab595ed579cee35df1b89c3b2828dd3" prot="public" static="no">
        <name>EC_F_EC_GFP_SIMPLE_POINT2OCT</name>
        <initializer>104</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="1039" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="1039" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1a07bc693cd1e4648b24a090acc4635bd8" prot="public" static="no">
        <name>EC_F_EC_GFP_SIMPLE_POINTS_MAKE_AFFINE</name>
        <initializer>137</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="1040" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="1040" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1a2c5a654dc5196e9ce83eb45c2dc18d79" prot="public" static="no">
        <name>EC_F_EC_GFP_SIMPLE_POINT_GET_AFFINE_COORDINATES</name>
        <initializer>167</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="1041" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="1041" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1a2961346ace6c069d368a54ab231f11d6" prot="public" static="no">
        <name>EC_F_EC_GFP_SIMPLE_POINT_GET_AFFINE_COORDINATES_GFP</name>
        <initializer>105</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="1042" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="1042" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1a0f174b2d3db9739514b175d3795b89f4" prot="public" static="no">
        <name>EC_F_EC_GFP_SIMPLE_POINT_SET_AFFINE_COORDINATES</name>
        <initializer>168</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="1043" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="1043" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1a0ab69dad9394400ea92dc2dc6fc8867a" prot="public" static="no">
        <name>EC_F_EC_GFP_SIMPLE_POINT_SET_AFFINE_COORDINATES_GFP</name>
        <initializer>128</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="1044" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="1044" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1af4db73e9a37359586440992d6bae1df5" prot="public" static="no">
        <name>EC_F_EC_GFP_SIMPLE_SET_COMPRESSED_COORDINATES</name>
        <initializer>169</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="1045" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="1045" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1a7254bc92b8fba349d1c4e418e27d7032" prot="public" static="no">
        <name>EC_F_EC_GFP_SIMPLE_SET_COMPRESSED_COORDINATES_GFP</name>
        <initializer>129</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="1046" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="1046" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1a75a7f4007a1bbcac2a9442ea9a8b21ef" prot="public" static="no">
        <name>EC_F_EC_GROUP_CHECK</name>
        <initializer>170</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="1047" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="1047" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1a781effa296f5b5e75da27699979e0dd3" prot="public" static="no">
        <name>EC_F_EC_GROUP_CHECK_DISCRIMINANT</name>
        <initializer>171</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="1048" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="1048" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1aa68487dc6e8125a1e15ce810bf5f7df9" prot="public" static="no">
        <name>EC_F_EC_GROUP_COPY</name>
        <initializer>106</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="1049" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="1049" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1ad594165e9845383842a261f8a114eb9b" prot="public" static="no">
        <name>EC_F_EC_GROUP_GET0_GENERATOR</name>
        <initializer>139</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="1050" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="1050" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1a6a31b2bf95e8aa8da3b5d6b23e3e98e9" prot="public" static="no">
        <name>EC_F_EC_GROUP_GET_COFACTOR</name>
        <initializer>140</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="1051" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="1051" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1aae995ebf5aaac0b326c27060ca9b2f89" prot="public" static="no">
        <name>EC_F_EC_GROUP_GET_CURVE_GF2M</name>
        <initializer>172</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="1052" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="1052" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1ad861da215c584b047e45bea20dca3bd5" prot="public" static="no">
        <name>EC_F_EC_GROUP_GET_CURVE_GFP</name>
        <initializer>130</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="1053" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="1053" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1af0b174561d65a8a0adaee0f092b0252e" prot="public" static="no">
        <name>EC_F_EC_GROUP_GET_DEGREE</name>
        <initializer>173</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="1054" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="1054" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1a1960251055c4adab3edf0b6dbaa3ea10" prot="public" static="no">
        <name>EC_F_EC_GROUP_GET_ORDER</name>
        <initializer>141</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="1055" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="1055" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1aa35fe8533ec12de26fedd3f1726d2b63" prot="public" static="no">
        <name>EC_F_EC_GROUP_GET_PENTANOMIAL_BASIS</name>
        <initializer>193</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="1056" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="1056" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1ac197be014d68b7eba4e5075da8ce4a08" prot="public" static="no">
        <name>EC_F_EC_GROUP_GET_TRINOMIAL_BASIS</name>
        <initializer>194</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="1057" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="1057" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1af11f82fe485664113f1fda9ea91976cd" prot="public" static="no">
        <name>EC_F_EC_GROUP_NEW</name>
        <initializer>108</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="1058" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="1058" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1a85f9dbc2b0a4b145461de83d3d39ae0c" prot="public" static="no">
        <name>EC_F_EC_GROUP_NEW_BY_CURVE_NAME</name>
        <initializer>174</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="1059" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="1059" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1ad2c34273741e95cff4ffa0c460685cf9" prot="public" static="no">
        <name>EC_F_EC_GROUP_NEW_FROM_DATA</name>
        <initializer>175</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="1060" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="1060" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1aef97768c854ea4c72a263b85b6bba90e" prot="public" static="no">
        <name>EC_F_EC_GROUP_PRECOMPUTE_MULT</name>
        <initializer>142</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="1061" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="1061" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1a59537bcc1a9cdf1065a1691e734702a8" prot="public" static="no">
        <name>EC_F_EC_GROUP_SET_CURVE_GF2M</name>
        <initializer>176</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="1062" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="1062" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1a2a06b5fff0dc2a2df3e62f91d65a7665" prot="public" static="no">
        <name>EC_F_EC_GROUP_SET_CURVE_GFP</name>
        <initializer>109</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="1063" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="1063" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1ac929cd38f5fbab2087b3f37cc5be0866" prot="public" static="no">
        <name>EC_F_EC_GROUP_SET_EXTRA_DATA</name>
        <initializer>110</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="1064" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="1064" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1a1854a75e50cf9eab1da16b691697f5af" prot="public" static="no">
        <name>EC_F_EC_GROUP_SET_GENERATOR</name>
        <initializer>111</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="1065" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="1065" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1a5340ab0619fbcadf386a7ff07fe310ba" prot="public" static="no">
        <name>EC_F_EC_KEY_CHECK_KEY</name>
        <initializer>177</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="1066" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="1066" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1aefa7a9009edde2dfe338593c8a5eb105" prot="public" static="no">
        <name>EC_F_EC_KEY_COPY</name>
        <initializer>178</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="1067" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="1067" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1a4b9499e4cb3b7b77d03806fb369d5977" prot="public" static="no">
        <name>EC_F_EC_KEY_GENERATE_KEY</name>
        <initializer>179</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="1068" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="1068" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1ae32355b8be51e24aa6e76e9e6d2a92c7" prot="public" static="no">
        <name>EC_F_EC_KEY_NEW</name>
        <initializer>182</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="1069" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="1069" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1ab7ed1b50137dee2d3d6f86498bcab233" prot="public" static="no">
        <name>EC_F_EC_KEY_PRINT</name>
        <initializer>180</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="1070" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="1070" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1a6dcce326c2683ae432b7210012a7b71a" prot="public" static="no">
        <name>EC_F_EC_KEY_PRINT_FP</name>
        <initializer>181</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="1071" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="1071" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1a48f6fece7baadb8249bab25a131a5963" prot="public" static="no">
        <name>EC_F_EC_KEY_SET_PUBLIC_KEY_AFFINE_COORDINATES</name>
        <initializer>229</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="1072" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="1072" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1a6708e9179caf599f2ea78b1229dbb2ff" prot="public" static="no">
        <name>EC_F_EC_POINTS_MAKE_AFFINE</name>
        <initializer>136</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="1073" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="1073" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1a1148bf59b4ea172b5b7500419dfe0a5a" prot="public" static="no">
        <name>EC_F_EC_POINT_ADD</name>
        <initializer>112</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="1074" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="1074" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1ac2f0af5fe4380fa1dc5be71215182327" prot="public" static="no">
        <name>EC_F_EC_POINT_CMP</name>
        <initializer>113</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="1075" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="1075" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1a35d8dad346a3a3096e746f2c586a3391" prot="public" static="no">
        <name>EC_F_EC_POINT_COPY</name>
        <initializer>114</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="1076" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="1076" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1a01123d86086cc610c2fe35214b538fa5" prot="public" static="no">
        <name>EC_F_EC_POINT_DBL</name>
        <initializer>115</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="1077" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="1077" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1aa03a03b4196cbce438491e4a7fc193ed" prot="public" static="no">
        <name>EC_F_EC_POINT_GET_AFFINE_COORDINATES_GF2M</name>
        <initializer>183</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="1078" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="1078" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1aa333503c1642f62d226af4cd64319c33" prot="public" static="no">
        <name>EC_F_EC_POINT_GET_AFFINE_COORDINATES_GFP</name>
        <initializer>116</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="1079" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="1079" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1ad073004586bf47b7d857d37f8a94c928" prot="public" static="no">
        <name>EC_F_EC_POINT_GET_JPROJECTIVE_COORDINATES_GFP</name>
        <initializer>117</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="1080" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="1080" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1a83e3653c39f7d16e8e9c40fc177da7a4" prot="public" static="no">
        <name>EC_F_EC_POINT_INVERT</name>
        <initializer>210</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="1081" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="1081" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1af7be06ff4c668edc3dce73f3da352769" prot="public" static="no">
        <name>EC_F_EC_POINT_IS_AT_INFINITY</name>
        <initializer>118</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="1082" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="1082" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1a3ced9e97b662d78243fb82ab88691212" prot="public" static="no">
        <name>EC_F_EC_POINT_IS_ON_CURVE</name>
        <initializer>119</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="1083" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="1083" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1a55a4c5bc11f7f283e019ab57617c256b" prot="public" static="no">
        <name>EC_F_EC_POINT_MAKE_AFFINE</name>
        <initializer>120</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="1084" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="1084" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1a9acfa8a97bd4c52d404e03d4ac388a7f" prot="public" static="no">
        <name>EC_F_EC_POINT_MUL</name>
        <initializer>184</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="1085" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="1085" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1a9a42442fe28fea0c44f825afd3fd34b9" prot="public" static="no">
        <name>EC_F_EC_POINT_NEW</name>
        <initializer>121</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="1086" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="1086" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1a044df27956b9f2f70f1db4e6442268df" prot="public" static="no">
        <name>EC_F_EC_POINT_OCT2POINT</name>
        <initializer>122</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="1087" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="1087" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1a258610013d9faaf40b42961897922caf" prot="public" static="no">
        <name>EC_F_EC_POINT_POINT2OCT</name>
        <initializer>123</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="1088" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="1088" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1a7d1169fd8798dc546d0251e4811e05c0" prot="public" static="no">
        <name>EC_F_EC_POINT_SET_AFFINE_COORDINATES_GF2M</name>
        <initializer>185</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="1089" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="1089" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1a737face7457b924c90c0f5d03487017d" prot="public" static="no">
        <name>EC_F_EC_POINT_SET_AFFINE_COORDINATES_GFP</name>
        <initializer>124</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="1090" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="1090" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1a73c9372f900dce57b940a0df6e19ad94" prot="public" static="no">
        <name>EC_F_EC_POINT_SET_COMPRESSED_COORDINATES_GF2M</name>
        <initializer>186</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="1091" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="1091" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1a6ee327926476a88d803f42aa6ca81eec" prot="public" static="no">
        <name>EC_F_EC_POINT_SET_COMPRESSED_COORDINATES_GFP</name>
        <initializer>125</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="1092" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="1092" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1a5aede489eb84c88def7127fbcdd11402" prot="public" static="no">
        <name>EC_F_EC_POINT_SET_JPROJECTIVE_COORDINATES_GFP</name>
        <initializer>126</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="1093" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="1093" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1aa1bbadc6b5f1e5e7ac8203fd75407728" prot="public" static="no">
        <name>EC_F_EC_POINT_SET_TO_INFINITY</name>
        <initializer>127</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="1094" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="1094" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1a74e3d9cc2ce112284deb23fad564a417" prot="public" static="no">
        <name>EC_F_EC_PRE_COMP_DUP</name>
        <initializer>207</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="1095" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="1095" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1a2352673911fb4e921e66bf72b587d008" prot="public" static="no">
        <name>EC_F_EC_PRE_COMP_NEW</name>
        <initializer>196</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="1096" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="1096" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1ad1379ebbdae1be29bcaaa340c7b72e53" prot="public" static="no">
        <name>EC_F_EC_WNAF_MUL</name>
        <initializer>187</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="1097" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="1097" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1af6b267f2ad87cd01caecd9def4db5ec1" prot="public" static="no">
        <name>EC_F_EC_WNAF_PRECOMPUTE_MULT</name>
        <initializer>188</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="1098" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="1098" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1ad2b38ecbeb9e1367f67ab926b43e6f8d" prot="public" static="no">
        <name>EC_F_I2D_ECPARAMETERS</name>
        <initializer>190</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="1099" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="1099" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1a8a1d25937f6bb617ff288eaba65609a5" prot="public" static="no">
        <name>EC_F_I2D_ECPKPARAMETERS</name>
        <initializer>191</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="1100" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="1100" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1a758acc31941ae3a43728e0e97fd1bb16" prot="public" static="no">
        <name>EC_F_I2D_ECPRIVATEKEY</name>
        <initializer>192</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="1101" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="1101" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1a23acc16d330059e660e5aa48092c3773" prot="public" static="no">
        <name>EC_F_I2O_ECPUBLICKEY</name>
        <initializer>151</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="1102" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="1102" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1a65bc0ca7f30db86891616298d32b284c" prot="public" static="no">
        <name>EC_F_NISTP224_PRE_COMP_NEW</name>
        <initializer>227</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="1103" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="1103" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1a0f8ce68ca0a5bbfd703c311473b9f1ac" prot="public" static="no">
        <name>EC_F_NISTP256_PRE_COMP_NEW</name>
        <initializer>236</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="1104" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="1104" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1ae4330b5ed9251a07e54fa2ffd248b7a4" prot="public" static="no">
        <name>EC_F_NISTP521_PRE_COMP_NEW</name>
        <initializer>237</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="1105" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="1105" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1a1c9e39cc779feaef98fadb4ea1eef6f0" prot="public" static="no">
        <name>EC_F_O2I_ECPUBLICKEY</name>
        <initializer>152</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="1106" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="1106" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1a6711c39cc4d75f50a6e3bee77df98902" prot="public" static="no">
        <name>EC_F_OLD_EC_PRIV_DECODE</name>
        <initializer>222</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="1107" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="1107" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1a7ddca3d4162d5e27c68e7d535b01dc20" prot="public" static="no">
        <name>EC_F_PKEY_EC_CTRL</name>
        <initializer>197</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="1108" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="1108" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1a4db610c1925d90ddb023d9cd5bae9760" prot="public" static="no">
        <name>EC_F_PKEY_EC_CTRL_STR</name>
        <initializer>198</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="1109" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="1109" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1a8200fad17d747633c2796e8bea1a9e58" prot="public" static="no">
        <name>EC_F_PKEY_EC_DERIVE</name>
        <initializer>217</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="1110" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="1110" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1a4ae24437f9edd231952c445c0b945e4d" prot="public" static="no">
        <name>EC_F_PKEY_EC_KEYGEN</name>
        <initializer>199</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="1111" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="1111" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1accfe9237105c4cfcead41f79f3c76c7f" prot="public" static="no">
        <name>EC_F_PKEY_EC_PARAMGEN</name>
        <initializer>219</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="1112" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="1112" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1addddbc8bdb4da4884e0a3f7b89dea21b" prot="public" static="no">
        <name>EC_F_PKEY_EC_SIGN</name>
        <initializer>218</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="1113" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="1113" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1a3ef6c6e2e2577e6c62a1cc293e7d0286" prot="public" static="no">
        <name>EC_R_ASN1_ERROR</name>
        <initializer>115</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="1116" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="1116" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1ad0757ba194ce17f433016399b9b50064" prot="public" static="no">
        <name>EC_R_ASN1_UNKNOWN_FIELD</name>
        <initializer>116</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="1117" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="1117" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1ac62d914f8f15ce408d0550e5ed247c89" prot="public" static="no">
        <name>EC_R_BIGNUM_OUT_OF_RANGE</name>
        <initializer>144</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="1118" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="1118" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1ade5921d882637b6bb2e54cb26cce81f0" prot="public" static="no">
        <name>EC_R_BUFFER_TOO_SMALL</name>
        <initializer>100</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="1119" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="1119" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1a8c6567fc0bdafa439070cefe332cfcef" prot="public" static="no">
        <name>EC_R_COORDINATES_OUT_OF_RANGE</name>
        <initializer>146</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="1120" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="1120" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1a41225282e009f9c224ee9d3be23350c7" prot="public" static="no">
        <name>EC_R_D2I_ECPKPARAMETERS_FAILURE</name>
        <initializer>117</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="1121" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="1121" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1ada9c802f4e7722f362847ac42ff10a0e" prot="public" static="no">
        <name>EC_R_DECODE_ERROR</name>
        <initializer>142</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="1122" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="1122" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1aa6252891045b6c6fe00c8265d7a5ad52" prot="public" static="no">
        <name>EC_R_DISCRIMINANT_IS_ZERO</name>
        <initializer>118</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="1123" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="1123" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1a2ec36c4d117616be591f481a9a3a5d67" prot="public" static="no">
        <name>EC_R_EC_GROUP_NEW_BY_NAME_FAILURE</name>
        <initializer>119</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="1124" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="1124" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1a1a7f7318eefa19988214341d8ea03a3b" prot="public" static="no">
        <name>EC_R_FIELD_TOO_LARGE</name>
        <initializer>143</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="1125" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="1125" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1a48172aa09df9c002392224960181f46d" prot="public" static="no">
        <name>EC_R_GF2M_NOT_SUPPORTED</name>
        <initializer>147</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="1126" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="1126" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1acab92ca9af883109a957c6f2bcb01336" prot="public" static="no">
        <name>EC_R_GROUP2PKPARAMETERS_FAILURE</name>
        <initializer>120</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="1127" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="1127" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1a4cdba8cbbb802acbfcf3eafbbd7db2e7" prot="public" static="no">
        <name>EC_R_I2D_ECPKPARAMETERS_FAILURE</name>
        <initializer>121</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="1128" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="1128" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1af07a305f4e503873bfb5c4ffd779d87b" prot="public" static="no">
        <name>EC_R_INCOMPATIBLE_OBJECTS</name>
        <initializer>101</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="1129" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="1129" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1a28bf617987d2a0c044d3a7a2fe0677e4" prot="public" static="no">
        <name>EC_R_INVALID_ARGUMENT</name>
        <initializer>112</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="1130" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="1130" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1a8efbe827cf57dc6e4a6b8048f37b947a" prot="public" static="no">
        <name>EC_R_INVALID_COMPRESSED_POINT</name>
        <initializer>110</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="1131" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="1131" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1aec6e02780b80bb530895674afb0514ad" prot="public" static="no">
        <name>EC_R_INVALID_COMPRESSION_BIT</name>
        <initializer>109</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="1132" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="1132" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1ab01297814667877221eef805fa0f3ef0" prot="public" static="no">
        <name>EC_R_INVALID_CURVE</name>
        <initializer>141</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="1133" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="1133" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1a47055ffaf9dada1a0ba65e2b6a589b8b" prot="public" static="no">
        <name>EC_R_INVALID_DIGEST_TYPE</name>
        <initializer>138</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="1134" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="1134" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1aa18ea533c76b19757571442f6ba0687d" prot="public" static="no">
        <name>EC_R_INVALID_ENCODING</name>
        <initializer>102</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="1135" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="1135" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1a2be40db377e25dc6e1c04f9b5fbe3c29" prot="public" static="no">
        <name>EC_R_INVALID_FIELD</name>
        <initializer>103</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="1136" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="1136" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1a8e95795d51e7634d4370147919d40ef4" prot="public" static="no">
        <name>EC_R_INVALID_FORM</name>
        <initializer>104</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="1137" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="1137" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1aa8509766cbfca731bf1448e38385b95c" prot="public" static="no">
        <name>EC_R_INVALID_GROUP_ORDER</name>
        <initializer>122</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="1138" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="1138" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1a946e62c6cfa336f0e676ba0a69a8d459" prot="public" static="no">
        <name>EC_R_INVALID_PENTANOMIAL_BASIS</name>
        <initializer>132</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="1139" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="1139" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1ae05b806dc69aad509760095e35ec9e94" prot="public" static="no">
        <name>EC_R_INVALID_PRIVATE_KEY</name>
        <initializer>123</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="1140" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="1140" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1ae940b748d1dcb7716a8a1352e78781f3" prot="public" static="no">
        <name>EC_R_INVALID_TRINOMIAL_BASIS</name>
        <initializer>137</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="1141" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="1141" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1ab79d438cbdfde68a92fbffdaa38f3f1d" prot="public" static="no">
        <name>EC_R_KEYS_NOT_SET</name>
        <initializer>140</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="1142" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="1142" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1a1582dd38a1ce275347288adcc524dbad" prot="public" static="no">
        <name>EC_R_MISSING_PARAMETERS</name>
        <initializer>124</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="1143" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="1143" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1a2b62b2919445cf3506921aba097b9310" prot="public" static="no">
        <name>EC_R_MISSING_PRIVATE_KEY</name>
        <initializer>125</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="1144" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="1144" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1a098a681f75299b3e9ac11d2187f77744" prot="public" static="no">
        <name>EC_R_NOT_A_NIST_PRIME</name>
        <initializer>135</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="1145" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="1145" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1af2946630df78aa62325d54ad3004ced7" prot="public" static="no">
        <name>EC_R_NOT_A_SUPPORTED_NIST_PRIME</name>
        <initializer>136</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="1146" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="1146" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1a8fc8970f32dd6bc8ca8ccac443f60fba" prot="public" static="no">
        <name>EC_R_NOT_IMPLEMENTED</name>
        <initializer>126</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="1147" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="1147" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1acee6d8b2c78081446cad94a7953d86fa" prot="public" static="no">
        <name>EC_R_NOT_INITIALIZED</name>
        <initializer>111</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="1148" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="1148" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1a3c25d0031634f2519ab12d205917c210" prot="public" static="no">
        <name>EC_R_NO_FIELD_MOD</name>
        <initializer>133</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="1149" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="1149" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1a4200cd70b7ae40ff70a448c5acbf9141" prot="public" static="no">
        <name>EC_R_NO_PARAMETERS_SET</name>
        <initializer>139</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="1150" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="1150" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1a51dad7388912312713b73ce69ec6456e" prot="public" static="no">
        <name>EC_R_PASSED_NULL_PARAMETER</name>
        <initializer>134</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="1151" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="1151" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1aa53d2d16201c4700213ef44b9ccac354" prot="public" static="no">
        <name>EC_R_PKPARAMETERS2GROUP_FAILURE</name>
        <initializer>127</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="1152" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="1152" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1ac3b9eadc9fc72d202613f930ee4d090d" prot="public" static="no">
        <name>EC_R_POINT_AT_INFINITY</name>
        <initializer>106</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="1153" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="1153" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1ac85f1ef389fc28cf11a6f1bb8c695cd0" prot="public" static="no">
        <name>EC_R_POINT_IS_NOT_ON_CURVE</name>
        <initializer>107</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="1154" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="1154" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1a81771951e2ff7707325db46caee2048d" prot="public" static="no">
        <name>EC_R_SLOT_FULL</name>
        <initializer>108</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="1155" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="1155" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1a781187e409679e043e25712024fd5718" prot="public" static="no">
        <name>EC_R_UNDEFINED_GENERATOR</name>
        <initializer>113</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="1156" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="1156" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1ab1c67b4586f40b8269ca7c02f251e5bc" prot="public" static="no">
        <name>EC_R_UNDEFINED_ORDER</name>
        <initializer>128</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="1157" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="1157" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1a4d3b5409984feedd0771ae97c638e111" prot="public" static="no">
        <name>EC_R_UNKNOWN_GROUP</name>
        <initializer>129</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="1158" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="1158" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1ae6ead66546f45f2f2ce565125150a188" prot="public" static="no">
        <name>EC_R_UNKNOWN_ORDER</name>
        <initializer>114</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="1159" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="1159" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1a3adece248a9a84b75232aa60c9a2ddfb" prot="public" static="no">
        <name>EC_R_UNSUPPORTED_FIELD</name>
        <initializer>131</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="1160" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="1160" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1ad2236e6ae10c807ab5069f3622368dbe" prot="public" static="no">
        <name>EC_R_WRONG_CURVE_PARAMETERS</name>
        <initializer>145</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="1161" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="1161" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ec_8h_1ae4f9487fb7263ea0219eb4425862a401" prot="public" static="no">
        <name>EC_R_WRONG_ORDER</name>
        <initializer>130</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="1162" column="9" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="1162" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="ec_8h_1aa2c7ec2902c397d59393d357921e14b5" prot="public" static="no">
        <name>point_conversion_form_t</name>
        <enumvalue id="ec_8h_1aa2c7ec2902c397d59393d357921e14b5a5ca3242771ea537db8de597535d7e93b" prot="public">
          <name>POINT_CONVERSION_COMPRESSED</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>the point is encoded as z||x, where the octet z specifies which solution of the quadratic equation y is </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="ec_8h_1aa2c7ec2902c397d59393d357921e14b5a32895bf2cf57d0d9ae0cea7bcaa7d3d8" prot="public">
          <name>POINT_CONVERSION_UNCOMPRESSED</name>
          <initializer>= 4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>the point is encoded as z||x||y, where z is the octet 0x02 </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="ec_8h_1aa2c7ec2902c397d59393d357921e14b5aceef1aa5a423148d080037f4cec84264" prot="public">
          <name>POINT_CONVERSION_HYBRID</name>
          <initializer>= 6</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>the point is encoded as z||x||y, where the octet z specifies which solution of the quadratic equation y is </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Enum for the point conversion form as defined in X9.62 (ECDSA) for the encoding of a elliptic curve point (x,y) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="106" column="1" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="106" bodyend="115"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="ec_8h_1aeb4d9daf18f9bdcdb57abb1d97aa86c0" prot="public" static="no">
        <type>struct ec_method_st</type>
        <definition>typedef struct ec_method_st EC_METHOD</definition>
        <argsstring></argsstring>
        <name>EC_METHOD</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="21" column="1" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="118" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="ec_8h_1aca3c2dfa5546740e0f575013960a598a" prot="public" static="no">
        <type>struct ec_group_st</type>
        <definition>typedef struct ec_group_st EC_GROUP</definition>
        <argsstring></argsstring>
        <name>EC_GROUP</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="21" column="1" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="120" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="ec_8h_1ab372a34de16c42eb0ccfa63be0ad985f" prot="public" static="no">
        <type>struct ec_point_st</type>
        <definition>typedef struct ec_point_st EC_POINT</definition>
        <argsstring></argsstring>
        <name>EC_POINT</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="21" column="1" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="131" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="ec_8h_1a1aeb94b8d0330e1983432f5b32540e41" prot="public" static="no">
        <type>struct ecpk_parameters_st</type>
        <definition>typedef struct ecpk_parameters_st ECPKPARAMETERS</definition>
        <argsstring></argsstring>
        <name>ECPKPARAMETERS</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="678" column="1" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="684" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="ec_8h_1a756878ae60b2fc17d4217e77ffe5e0d3" prot="public" static="no">
        <type>struct ec_key_st</type>
        <definition>typedef struct ec_key_st EC_KEY</definition>
        <argsstring></argsstring>
        <name>EC_KEY</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="700" column="1" bodyfile="thirdparty/openssl/include/openssl/ec.h" bodystart="708" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="ec_8h_1a47854d982d019f83125aa4e6ef036821" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const EC_METHOD *</type>
        <definition>const EC_METHOD* EC_GFp_simple_method</definition>
        <argsstring>(void)</argsstring>
        <name>EC_GFp_simple_method</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the basic GFp ec methods which provides the basis for the optimized methods. <simplesect kind="return"><para>EC_METHOD object </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="142" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ec_8h_1a7a8e1d901f401872fbd10e34e06931a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const EC_METHOD *</type>
        <definition>const EC_METHOD* EC_GFp_mont_method</definition>
        <argsstring>(void)</argsstring>
        <name>EC_GFp_mont_method</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns GFp methods using montgomery multiplication. <simplesect kind="return"><para>EC_METHOD object </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="147" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ec_8h_1a917068e9447a5fb3e0e57fe145434457" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const EC_METHOD *</type>
        <definition>const EC_METHOD* EC_GFp_nist_method</definition>
        <argsstring>(void)</argsstring>
        <name>EC_GFp_nist_method</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns GFp methods using optimized methods for NIST recommended curves <simplesect kind="return"><para>EC_METHOD object </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="152" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ec_8h_1a55ff94865f61912a6e8005c7760caad3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const EC_METHOD *</type>
        <definition>const EC_METHOD* EC_GFp_nistp224_method</definition>
        <argsstring>(void)</argsstring>
        <name>EC_GFp_nistp224_method</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns 64-bit optimized methods for nistp224 <simplesect kind="return"><para>EC_METHOD object </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="158" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ec_8h_1aa73de2ab4fa62847f3fea1535593554a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const EC_METHOD *</type>
        <definition>const EC_METHOD* EC_GFp_nistp256_method</definition>
        <argsstring>(void)</argsstring>
        <name>EC_GFp_nistp256_method</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns 64-bit optimized methods for nistp256 <simplesect kind="return"><para>EC_METHOD object </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="163" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ec_8h_1a9c7875cf81c23acd85c3c6dd6ef8e48a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const EC_METHOD *</type>
        <definition>const EC_METHOD* EC_GFp_nistp521_method</definition>
        <argsstring>(void)</argsstring>
        <name>EC_GFp_nistp521_method</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns 64-bit optimized methods for nistp521 <simplesect kind="return"><para>EC_METHOD object </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="168" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ec_8h_1a96775dd6b184658d4d78d60a1175a5c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const EC_METHOD *</type>
        <definition>const EC_METHOD* EC_GF2m_simple_method</definition>
        <argsstring>(void)</argsstring>
        <name>EC_GF2m_simple_method</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the basic GF2m ec method <simplesect kind="return"><para>EC_METHOD object </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="179" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ec_8h_1a6b0da5be060245029f26047f14c6dfb8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>EC_GROUP *</type>
        <definition>EC_GROUP* EC_GROUP_new</definition>
        <argsstring>(const EC_METHOD *meth)</argsstring>
        <name>EC_GROUP_new</name>
        <param>
          <type>const EC_METHOD *</type>
          <declname>meth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a new EC_GROUP object <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>meth</parametername>
</parameternamelist>
<parameterdescription>
<para>EC_METHOD to use </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>newly created EC_GROUP object or NULL in case of an error. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="192" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ec_8h_1a7d7ba223c4dffba134c295ff77e56a90" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EC_GROUP_free</definition>
        <argsstring>(EC_GROUP *group)</argsstring>
        <name>EC_GROUP_free</name>
        <param>
          <type>EC_GROUP *</type>
          <declname>group</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Frees a EC_GROUP object <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group</parametername>
</parameternamelist>
<parameterdescription>
<para>EC_GROUP object to be freed. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="197" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ec_8h_1a1178dd4601435705cde07e2c6a6b7e65" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EC_GROUP_clear_free</definition>
        <argsstring>(EC_GROUP *group)</argsstring>
        <name>EC_GROUP_clear_free</name>
        <param>
          <type>EC_GROUP *</type>
          <declname>group</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Clears and frees a EC_GROUP object <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group</parametername>
</parameternamelist>
<parameterdescription>
<para>EC_GROUP object to be cleared and freed. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="202" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ec_8h_1a52e96363198298a40bf003fcd6b87079" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EC_GROUP_copy</definition>
        <argsstring>(EC_GROUP *dst, const EC_GROUP *src)</argsstring>
        <name>EC_GROUP_copy</name>
        <param>
          <type>EC_GROUP *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const EC_GROUP *</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Copies EC_GROUP objects. Note: both EC_GROUPs must use the same EC_METHOD. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>destination EC_GROUP object </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>source EC_GROUP object </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 on success and 0 if an error occurred. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="209" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ec_8h_1ace0ab0bff19e37298b7dc761dd5745ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>EC_GROUP *</type>
        <definition>EC_GROUP* EC_GROUP_dup</definition>
        <argsstring>(const EC_GROUP *src)</argsstring>
        <name>EC_GROUP_dup</name>
        <param>
          <type>const EC_GROUP *</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a new EC_GROUP object and copies the copies the content form src to the newly created EC_KEY object <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>source EC_GROUP object </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>newly created EC_GROUP object or NULL in case of an error. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="216" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ec_8h_1a6b6b8cb2be5077740d0c4b0356b3cf29" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const EC_METHOD *</type>
        <definition>const EC_METHOD* EC_GROUP_method_of</definition>
        <argsstring>(const EC_GROUP *group)</argsstring>
        <name>EC_GROUP_method_of</name>
        <param>
          <type>const EC_GROUP *</type>
          <declname>group</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the EC_METHOD of the EC_GROUP object. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group</parametername>
</parameternamelist>
<parameterdescription>
<para>EC_GROUP object </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>EC_METHOD used in this EC_GROUP object. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="222" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ec_8h_1ae220108aa1330e370261a9d74ba99115" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EC_METHOD_get_field_type</definition>
        <argsstring>(const EC_METHOD *meth)</argsstring>
        <name>EC_METHOD_get_field_type</name>
        <param>
          <type>const EC_METHOD *</type>
          <declname>meth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the field type of the EC_METHOD. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>meth</parametername>
</parameternamelist>
<parameterdescription>
<para>EC_METHOD object </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>NID of the underlying field type OID. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="228" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ec_8h_1a550afc547a3b002fdd3a15acb30cbcaf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EC_GROUP_set_generator</definition>
        <argsstring>(EC_GROUP *group, const EC_POINT *generator, const BIGNUM *order, const BIGNUM *cofactor)</argsstring>
        <name>EC_GROUP_set_generator</name>
        <param>
          <type>EC_GROUP *</type>
          <declname>group</declname>
        </param>
        <param>
          <type>const EC_POINT *</type>
          <declname>generator</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>order</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>cofactor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the generator and it&apos;s order/cofactor of a EC_GROUP object. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group</parametername>
</parameternamelist>
<parameterdescription>
<para>EC_GROUP object </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>generator</parametername>
</parameternamelist>
<parameterdescription>
<para>EC_POINT object with the generator. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>order</parametername>
</parameternamelist>
<parameterdescription>
<para>the order of the group generated by the generator. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cofactor</parametername>
</parameternamelist>
<parameterdescription>
<para>the index of the sub-group generated by the generator in the group of all points on the elliptic curve. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 on success and 0 if an error occured </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="238" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ec_8h_1a88c353d1d7b4ea73dd3e5882ef834d8e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const EC_POINT *</type>
        <definition>const EC_POINT* EC_GROUP_get0_generator</definition>
        <argsstring>(const EC_GROUP *group)</argsstring>
        <name>EC_GROUP_get0_generator</name>
        <param>
          <type>const EC_GROUP *</type>
          <declname>group</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the generator of a EC_GROUP object. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group</parametername>
</parameternamelist>
<parameterdescription>
<para>EC_GROUP object </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the currently used generator (possibly NULL). </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="244" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ec_8h_1a9fde5580033494df052db8ec6675889e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EC_GROUP_get_order</definition>
        <argsstring>(const EC_GROUP *group, BIGNUM *order, BN_CTX *ctx)</argsstring>
        <name>EC_GROUP_get_order</name>
        <param>
          <type>const EC_GROUP *</type>
          <declname>group</declname>
        </param>
        <param>
          <type><ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>order</declname>
        </param>
        <param>
          <type>BN_CTX *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets the order of a EC_GROUP <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group</parametername>
</parameternamelist>
<parameterdescription>
<para>EC_GROUP object </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>order</parametername>
</parameternamelist>
<parameterdescription>
<para>BIGNUM to which the order is copied </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>BN_CTX object (optional) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 on success and 0 if an error occured </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="252" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ec_8h_1a5a106d1e916a24a63c6b679701e2149b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EC_GROUP_get_cofactor</definition>
        <argsstring>(const EC_GROUP *group, BIGNUM *cofactor, BN_CTX *ctx)</argsstring>
        <name>EC_GROUP_get_cofactor</name>
        <param>
          <type>const EC_GROUP *</type>
          <declname>group</declname>
        </param>
        <param>
          <type><ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>cofactor</declname>
        </param>
        <param>
          <type>BN_CTX *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets the cofactor of a EC_GROUP <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group</parametername>
</parameternamelist>
<parameterdescription>
<para>EC_GROUP object </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cofactor</parametername>
</parameternamelist>
<parameterdescription>
<para>BIGNUM to which the cofactor is copied </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>BN_CTX object (optional) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 on success and 0 if an error occured </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="260" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ec_8h_1a6824a6e0ef31c9ae9b37d2e3297ffe3b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EC_GROUP_set_curve_name</definition>
        <argsstring>(EC_GROUP *group, int nid)</argsstring>
        <name>EC_GROUP_set_curve_name</name>
        <param>
          <type>EC_GROUP *</type>
          <declname>group</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the name of a EC_GROUP object <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group</parametername>
</parameternamelist>
<parameterdescription>
<para>EC_GROUP object </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nid</parametername>
</parameternamelist>
<parameterdescription>
<para>NID of the curve name OID </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="266" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ec_8h_1ad879da642bb1dc732063a5dc2e920232" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EC_GROUP_get_curve_name</definition>
        <argsstring>(const EC_GROUP *group)</argsstring>
        <name>EC_GROUP_get_curve_name</name>
        <param>
          <type>const EC_GROUP *</type>
          <declname>group</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the curve name of a EC_GROUP object <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group</parametername>
</parameternamelist>
<parameterdescription>
<para>EC_GROUP object </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>NID of the curve name OID or 0 if not set. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="272" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ec_8h_1a9445d7b606720a8741218b80c545d6d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EC_GROUP_set_asn1_flag</definition>
        <argsstring>(EC_GROUP *group, int flag)</argsstring>
        <name>EC_GROUP_set_asn1_flag</name>
        <param>
          <type>EC_GROUP *</type>
          <declname>group</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="274" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ec_8h_1a713c16d979afbfdcb4c576fc27a063f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EC_GROUP_get_asn1_flag</definition>
        <argsstring>(const EC_GROUP *group)</argsstring>
        <name>EC_GROUP_get_asn1_flag</name>
        <param>
          <type>const EC_GROUP *</type>
          <declname>group</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="275" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ec_8h_1a45ebb4cf75da21493521c5f79db202b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EC_GROUP_set_point_conversion_form</definition>
        <argsstring>(EC_GROUP *group, point_conversion_form_t form)</argsstring>
        <name>EC_GROUP_set_point_conversion_form</name>
        <param>
          <type>EC_GROUP *</type>
          <declname>group</declname>
        </param>
        <param>
          <type>point_conversion_form_t</type>
          <declname>form</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="277" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ec_8h_1af903209f10384f0799651c5150ecd455" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>point_conversion_form_t</type>
        <definition>point_conversion_form_t EC_GROUP_get_point_conversion_form</definition>
        <argsstring>(const EC_GROUP *)</argsstring>
        <name>EC_GROUP_get_point_conversion_form</name>
        <param>
          <type>const EC_GROUP *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="278" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ec_8h_1a6e8b6977697ca0371a9bcb10d8a5d295" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned char *</type>
        <definition>unsigned char* EC_GROUP_get0_seed</definition>
        <argsstring>(const EC_GROUP *x)</argsstring>
        <name>EC_GROUP_get0_seed</name>
        <param>
          <type>const EC_GROUP *</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="280" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ec_8h_1af91deb8c1b1dabe0071188803c8724bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t EC_GROUP_get_seed_len</definition>
        <argsstring>(const EC_GROUP *)</argsstring>
        <name>EC_GROUP_get_seed_len</name>
        <param>
          <type>const EC_GROUP *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="281" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ec_8h_1af54a80a6c09aaf43b8a9a12422922256" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t EC_GROUP_set_seed</definition>
        <argsstring>(EC_GROUP *, const unsigned char *, size_t len)</argsstring>
        <name>EC_GROUP_set_seed</name>
        <param>
          <type>EC_GROUP *</type>
        </param>
        <param>
          <type>const unsigned char *</type>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="282" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ec_8h_1a98282bf92b8a941ca7d2eea903cad7a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EC_GROUP_set_curve_GFp</definition>
        <argsstring>(EC_GROUP *group, const BIGNUM *p, const BIGNUM *a, const BIGNUM *b, BN_CTX *ctx)</argsstring>
        <name>EC_GROUP_set_curve_GFp</name>
        <param>
          <type>EC_GROUP *</type>
          <declname>group</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>BN_CTX *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the parameter of a ec over GFp defined by y^2 = x^3 + a*x + b <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group</parametername>
</parameternamelist>
<parameterdescription>
<para>EC_GROUP object </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>BIGNUM with the prime number </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>BIGNUM with parameter a of the equation </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>BIGNUM with parameter b of the equation </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>BN_CTX object (optional) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 on success and 0 if an error occured </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="292" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ec_8h_1aef112086ee1f07bfe08c8f0b9a6c1e2b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EC_GROUP_get_curve_GFp</definition>
        <argsstring>(const EC_GROUP *group, BIGNUM *p, BIGNUM *a, BIGNUM *b, BN_CTX *ctx)</argsstring>
        <name>EC_GROUP_get_curve_GFp</name>
        <param>
          <type>const EC_GROUP *</type>
          <declname>group</declname>
        </param>
        <param>
          <type><ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>BN_CTX *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets the parameter of the ec over GFp defined by y^2 = x^3 + a*x + b <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group</parametername>
</parameternamelist>
<parameterdescription>
<para>EC_GROUP object </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>BIGNUM for the prime number </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>BIGNUM for parameter a of the equation </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>BIGNUM for parameter b of the equation </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>BN_CTX object (optional) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 on success and 0 if an error occured </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="302" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ec_8h_1ac46b9985b505e5184b34020bfd64eab5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EC_GROUP_set_curve_GF2m</definition>
        <argsstring>(EC_GROUP *group, const BIGNUM *p, const BIGNUM *a, const BIGNUM *b, BN_CTX *ctx)</argsstring>
        <name>EC_GROUP_set_curve_GF2m</name>
        <param>
          <type>EC_GROUP *</type>
          <declname>group</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>BN_CTX *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the parameter of a ec over GF2m defined by y^2 + x*y = x^3 + a*x^2 + b <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group</parametername>
</parameternamelist>
<parameterdescription>
<para>EC_GROUP object </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>BIGNUM with the polynomial defining the underlying field </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>BIGNUM with parameter a of the equation </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>BIGNUM with parameter b of the equation </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>BN_CTX object (optional) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 on success and 0 if an error occured </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="313" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ec_8h_1a16bd692ca15f5aa2084779a46a450ae7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EC_GROUP_get_curve_GF2m</definition>
        <argsstring>(const EC_GROUP *group, BIGNUM *p, BIGNUM *a, BIGNUM *b, BN_CTX *ctx)</argsstring>
        <name>EC_GROUP_get_curve_GF2m</name>
        <param>
          <type>const EC_GROUP *</type>
          <declname>group</declname>
        </param>
        <param>
          <type><ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>BN_CTX *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets the parameter of the ec over GF2m defined by y^2 + x*y = x^3 + a*x^2 + b <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group</parametername>
</parameternamelist>
<parameterdescription>
<para>EC_GROUP object </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>BIGNUM for the polynomial defining the underlying field </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>BIGNUM for parameter a of the equation </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>BIGNUM for parameter b of the equation </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>BN_CTX object (optional) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 on success and 0 if an error occured </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="323" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ec_8h_1adbecc2842cfc5c491c037b3b9a6bbbf1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EC_GROUP_get_degree</definition>
        <argsstring>(const EC_GROUP *group)</argsstring>
        <name>EC_GROUP_get_degree</name>
        <param>
          <type>const EC_GROUP *</type>
          <declname>group</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the number of bits needed to represent a field element <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group</parametername>
</parameternamelist>
<parameterdescription>
<para>EC_GROUP object </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>number of bits needed to represent a field element </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="329" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ec_8h_1aa35f3a5ecdb862ded17af260fe236477" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EC_GROUP_check</definition>
        <argsstring>(const EC_GROUP *group, BN_CTX *ctx)</argsstring>
        <name>EC_GROUP_check</name>
        <param>
          <type>const EC_GROUP *</type>
          <declname>group</declname>
        </param>
        <param>
          <type>BN_CTX *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Checks whether the parameter in the EC_GROUP define a valid ec group <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group</parametername>
</parameternamelist>
<parameterdescription>
<para>EC_GROUP object </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>BN_CTX object (optional) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if group is a valid ec group and 0 otherwise </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="336" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ec_8h_1a646042182021793fd592230605d82c65" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EC_GROUP_check_discriminant</definition>
        <argsstring>(const EC_GROUP *group, BN_CTX *ctx)</argsstring>
        <name>EC_GROUP_check_discriminant</name>
        <param>
          <type>const EC_GROUP *</type>
          <declname>group</declname>
        </param>
        <param>
          <type>BN_CTX *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Checks whether the discriminant of the elliptic curve is zero or not <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group</parametername>
</parameternamelist>
<parameterdescription>
<para>EC_GROUP object </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>BN_CTX object (optional) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the discriminant is not zero and 0 otherwise </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="343" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ec_8h_1af4ed5b276be23d01ada81ca05ffbd1df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EC_GROUP_cmp</definition>
        <argsstring>(const EC_GROUP *a, const EC_GROUP *b, BN_CTX *ctx)</argsstring>
        <name>EC_GROUP_cmp</name>
        <param>
          <type>const EC_GROUP *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const EC_GROUP *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>BN_CTX *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compares two EC_GROUP objects <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>first EC_GROUP object </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>second EC_GROUP object </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>BN_CTX object (optional) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if both groups are equal and 1 otherwise </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="351" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ec_8h_1a3a06d1d822e5d010a32e3c16a8026ce4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>EC_GROUP *</type>
        <definition>EC_GROUP* EC_GROUP_new_curve_GFp</definition>
        <argsstring>(const BIGNUM *p, const BIGNUM *a, const BIGNUM *b, BN_CTX *ctx)</argsstring>
        <name>EC_GROUP_new_curve_GFp</name>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>BN_CTX *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a new EC_GROUP object with the specified parameters defined over GFp (defined by the equation y^2 = x^3 + a*x + b) <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>BIGNUM with the prime number </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>BIGNUM with the parameter a of the equation </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>BIGNUM with the parameter b of the equation </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>BN_CTX object (optional) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>newly created EC_GROUP object with the specified parameters </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="364" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ec_8h_1a2c44e77990e7d6e0ea5f39993cd93f56" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>EC_GROUP *</type>
        <definition>EC_GROUP* EC_GROUP_new_curve_GF2m</definition>
        <argsstring>(const BIGNUM *p, const BIGNUM *a, const BIGNUM *b, BN_CTX *ctx)</argsstring>
        <name>EC_GROUP_new_curve_GF2m</name>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>BN_CTX *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a new EC_GROUP object with the specified parameters defined over GF2m (defined by the equation y^2 + x*y = x^3 + a*x^2 + b) <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>BIGNUM with the polynomial defining the underlying field </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>BIGNUM with the parameter a of the equation </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>BIGNUM with the parameter b of the equation </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>BN_CTX object (optional) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>newly created EC_GROUP object with the specified parameters </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="374" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ec_8h_1af1835d9d4df427dab59138519c295a1e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>EC_GROUP *</type>
        <definition>EC_GROUP* EC_GROUP_new_by_curve_name</definition>
        <argsstring>(int nid)</argsstring>
        <name>EC_GROUP_new_by_curve_name</name>
        <param>
          <type>int</type>
          <declname>nid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a EC_GROUP object with a curve specified by a NID <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nid</parametername>
</parameternamelist>
<parameterdescription>
<para>NID of the OID of the curve name </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>newly created EC_GROUP object with specified curve or NULL if an error occurred </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="381" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ec_8h_1a5a98d23f4764f1289c9071715c7f5ff4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t EC_get_builtin_curves</definition>
        <argsstring>(EC_builtin_curve *r, size_t nitems)</argsstring>
        <name>EC_get_builtin_curves</name>
        <param>
          <type><ref refid="struct_e_c__builtin__curve" kindref="compound">EC_builtin_curve</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nitems</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="397" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ec_8h_1a81baecc872e63a5fd0b35853b3c744ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>EC_POINT *</type>
        <definition>EC_POINT* EC_POINT_new</definition>
        <argsstring>(const EC_GROUP *group)</argsstring>
        <name>EC_POINT_new</name>
        <param>
          <type>const EC_GROUP *</type>
          <declname>group</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a new EC_POINT object for the specified EC_GROUP <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group</parametername>
</parameternamelist>
<parameterdescription>
<para>EC_GROUP the underlying EC_GROUP object </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>newly created EC_POINT object or NULL if an error occurred </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="408" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ec_8h_1a7defc41c1babb9e601de2d50c9fc81b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EC_POINT_free</definition>
        <argsstring>(EC_POINT *point)</argsstring>
        <name>EC_POINT_free</name>
        <param>
          <type>EC_POINT *</type>
          <declname>point</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Frees a EC_POINT object <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>point</parametername>
</parameternamelist>
<parameterdescription>
<para>EC_POINT object to be freed </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="413" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ec_8h_1ab273da7254e66dd8b6dca847d664421b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EC_POINT_clear_free</definition>
        <argsstring>(EC_POINT *point)</argsstring>
        <name>EC_POINT_clear_free</name>
        <param>
          <type>EC_POINT *</type>
          <declname>point</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Clears and frees a EC_POINT object <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>point</parametername>
</parameternamelist>
<parameterdescription>
<para>EC_POINT object to be cleared and freed </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="418" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ec_8h_1a7d68b27ae092a2257f696b19bf38127f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EC_POINT_copy</definition>
        <argsstring>(EC_POINT *dst, const EC_POINT *src)</argsstring>
        <name>EC_POINT_copy</name>
        <param>
          <type>EC_POINT *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const EC_POINT *</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Copies EC_POINT object <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>destination EC_POINT object </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>source EC_POINT object </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 on success and 0 if an error occured </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="425" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ec_8h_1ad84108f54596e84282cbd38044d27b33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>EC_POINT *</type>
        <definition>EC_POINT* EC_POINT_dup</definition>
        <argsstring>(const EC_POINT *src, const EC_GROUP *group)</argsstring>
        <name>EC_POINT_dup</name>
        <param>
          <type>const EC_POINT *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const EC_GROUP *</type>
          <declname>group</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a new EC_POINT object and copies the content of the supplied EC_POINT <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>source EC_POINT object </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>group</parametername>
</parameternamelist>
<parameterdescription>
<para>underlying the EC_GROUP object </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>newly created EC_POINT object or NULL if an error occurred </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="433" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ec_8h_1affe0b0f410c7cd98fda4844494185a92" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const EC_METHOD *</type>
        <definition>const EC_METHOD* EC_POINT_method_of</definition>
        <argsstring>(const EC_POINT *point)</argsstring>
        <name>EC_POINT_method_of</name>
        <param>
          <type>const EC_POINT *</type>
          <declname>point</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the EC_METHOD used in EC_POINT object <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>point</parametername>
</parameternamelist>
<parameterdescription>
<para>EC_POINT object </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the EC_METHOD used </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="439" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ec_8h_1ab9b609808248217ad944c7f549e82ced" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EC_POINT_set_to_infinity</definition>
        <argsstring>(const EC_GROUP *group, EC_POINT *point)</argsstring>
        <name>EC_POINT_set_to_infinity</name>
        <param>
          <type>const EC_GROUP *</type>
          <declname>group</declname>
        </param>
        <param>
          <type>EC_POINT *</type>
          <declname>point</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets a point to infinity (neutral element) <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group</parametername>
</parameternamelist>
<parameterdescription>
<para>underlying EC_GROUP object </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>point</parametername>
</parameternamelist>
<parameterdescription>
<para>EC_POINT to set to infinity </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 on success and 0 if an error occured </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="446" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ec_8h_1a3cc25ee05786feb764c1f56a4feee142" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EC_POINT_set_Jprojective_coordinates_GFp</definition>
        <argsstring>(const EC_GROUP *group, EC_POINT *p, const BIGNUM *x, const BIGNUM *y, const BIGNUM *z, BN_CTX *ctx)</argsstring>
        <name>EC_POINT_set_Jprojective_coordinates_GFp</name>
        <param>
          <type>const EC_GROUP *</type>
          <declname>group</declname>
        </param>
        <param>
          <type>EC_POINT *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>z</declname>
        </param>
        <param>
          <type>BN_CTX *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the jacobian projective coordinates of a EC_POINT over GFp <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group</parametername>
</parameternamelist>
<parameterdescription>
<para>underlying EC_GROUP object </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>EC_POINT object </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>BIGNUM with the x-coordinate </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>BIGNUM with the y-coordinate </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>z</parametername>
</parameternamelist>
<parameterdescription>
<para>BIGNUM with the z-coordinate </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>BN_CTX object (optional) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 on success and 0 if an error occured </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="457" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ec_8h_1ad6ddddeca803f1ae98b91afd73b15c00" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EC_POINT_get_Jprojective_coordinates_GFp</definition>
        <argsstring>(const EC_GROUP *group, const EC_POINT *p, BIGNUM *x, BIGNUM *y, BIGNUM *z, BN_CTX *ctx)</argsstring>
        <name>EC_POINT_get_Jprojective_coordinates_GFp</name>
        <param>
          <type>const EC_GROUP *</type>
          <declname>group</declname>
        </param>
        <param>
          <type>const EC_POINT *</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>z</declname>
        </param>
        <param>
          <type>BN_CTX *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets the jacobian projective coordinates of a EC_POINT over GFp <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group</parametername>
</parameternamelist>
<parameterdescription>
<para>underlying EC_GROUP object </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>EC_POINT object </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>BIGNUM for the x-coordinate </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>BIGNUM for the y-coordinate </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>z</parametername>
</parameternamelist>
<parameterdescription>
<para>BIGNUM for the z-coordinate </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>BN_CTX object (optional) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 on success and 0 if an error occured </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="469" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ec_8h_1ae8f342d3176b5ee2e53d908807b7c00f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EC_POINT_set_affine_coordinates_GFp</definition>
        <argsstring>(const EC_GROUP *group, EC_POINT *p, const BIGNUM *x, const BIGNUM *y, BN_CTX *ctx)</argsstring>
        <name>EC_POINT_set_affine_coordinates_GFp</name>
        <param>
          <type>const EC_GROUP *</type>
          <declname>group</declname>
        </param>
        <param>
          <type>EC_POINT *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>BN_CTX *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the affine coordinates of a EC_POINT over GFp <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group</parametername>
</parameternamelist>
<parameterdescription>
<para>underlying EC_GROUP object </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>EC_POINT object </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>BIGNUM with the x-coordinate </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>BIGNUM with the y-coordinate </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>BN_CTX object (optional) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 on success and 0 if an error occured </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="480" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ec_8h_1a8264122cb788ec66cc4ce3cd38f9176a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EC_POINT_get_affine_coordinates_GFp</definition>
        <argsstring>(const EC_GROUP *group, const EC_POINT *p, BIGNUM *x, BIGNUM *y, BN_CTX *ctx)</argsstring>
        <name>EC_POINT_get_affine_coordinates_GFp</name>
        <param>
          <type>const EC_GROUP *</type>
          <declname>group</declname>
        </param>
        <param>
          <type>const EC_POINT *</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>BN_CTX *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets the affine coordinates of a EC_POINT over GFp <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group</parametername>
</parameternamelist>
<parameterdescription>
<para>underlying EC_GROUP object </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>EC_POINT object </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>BIGNUM for the x-coordinate </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>BIGNUM for the y-coordinate </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>BN_CTX object (optional) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 on success and 0 if an error occured </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="491" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ec_8h_1a83d2bd3c4fb9632cb74c43816c74743e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EC_POINT_set_compressed_coordinates_GFp</definition>
        <argsstring>(const EC_GROUP *group, EC_POINT *p, const BIGNUM *x, int y_bit, BN_CTX *ctx)</argsstring>
        <name>EC_POINT_set_compressed_coordinates_GFp</name>
        <param>
          <type>const EC_GROUP *</type>
          <declname>group</declname>
        </param>
        <param>
          <type>EC_POINT *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>y_bit</declname>
        </param>
        <param>
          <type>BN_CTX *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the x9.62 compressed coordinates of a EC_POINT over GFp <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group</parametername>
</parameternamelist>
<parameterdescription>
<para>underlying EC_GROUP object </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>EC_POINT object </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>BIGNUM with x-coordinate </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y_bit</parametername>
</parameternamelist>
<parameterdescription>
<para>integer with the y-Bit (either 0 or 1) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>BN_CTX object (optional) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 on success and 0 if an error occured </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="502" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ec_8h_1ae8f164bb507b3d63bf55cc0c89401699" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EC_POINT_set_affine_coordinates_GF2m</definition>
        <argsstring>(const EC_GROUP *group, EC_POINT *p, const BIGNUM *x, const BIGNUM *y, BN_CTX *ctx)</argsstring>
        <name>EC_POINT_set_affine_coordinates_GF2m</name>
        <param>
          <type>const EC_GROUP *</type>
          <declname>group</declname>
        </param>
        <param>
          <type>EC_POINT *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>BN_CTX *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the affine coordinates of a EC_POINT over GF2m <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group</parametername>
</parameternamelist>
<parameterdescription>
<para>underlying EC_GROUP object </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>EC_POINT object </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>BIGNUM with the x-coordinate </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>BIGNUM with the y-coordinate </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>BN_CTX object (optional) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 on success and 0 if an error occured </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="513" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ec_8h_1a060b162a3954ad7a5263f5b1ac89c667" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EC_POINT_get_affine_coordinates_GF2m</definition>
        <argsstring>(const EC_GROUP *group, const EC_POINT *p, BIGNUM *x, BIGNUM *y, BN_CTX *ctx)</argsstring>
        <name>EC_POINT_get_affine_coordinates_GF2m</name>
        <param>
          <type>const EC_GROUP *</type>
          <declname>group</declname>
        </param>
        <param>
          <type>const EC_POINT *</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>BN_CTX *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets the affine coordinates of a EC_POINT over GF2m <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group</parametername>
</parameternamelist>
<parameterdescription>
<para>underlying EC_GROUP object </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>EC_POINT object </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>BIGNUM for the x-coordinate </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>BIGNUM for the y-coordinate </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>BN_CTX object (optional) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 on success and 0 if an error occured </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="524" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ec_8h_1a7219b366ee69f9209164ee835fe40ff2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EC_POINT_set_compressed_coordinates_GF2m</definition>
        <argsstring>(const EC_GROUP *group, EC_POINT *p, const BIGNUM *x, int y_bit, BN_CTX *ctx)</argsstring>
        <name>EC_POINT_set_compressed_coordinates_GF2m</name>
        <param>
          <type>const EC_GROUP *</type>
          <declname>group</declname>
        </param>
        <param>
          <type>EC_POINT *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>y_bit</declname>
        </param>
        <param>
          <type>BN_CTX *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the x9.62 compressed coordinates of a EC_POINT over GF2m <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group</parametername>
</parameternamelist>
<parameterdescription>
<para>underlying EC_GROUP object </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>EC_POINT object </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>BIGNUM with x-coordinate </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y_bit</parametername>
</parameternamelist>
<parameterdescription>
<para>integer with the y-Bit (either 0 or 1) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>BN_CTX object (optional) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 on success and 0 if an error occured </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="535" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ec_8h_1aa71bd1bfa2f9321ed09eb05a8ff4a88d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t EC_POINT_point2oct</definition>
        <argsstring>(const EC_GROUP *group, const EC_POINT *p, point_conversion_form_t form, unsigned char *buf, size_t len, BN_CTX *ctx)</argsstring>
        <name>EC_POINT_point2oct</name>
        <param>
          <type>const EC_GROUP *</type>
          <declname>group</declname>
        </param>
        <param>
          <type>const EC_POINT *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>point_conversion_form_t</type>
          <declname>form</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <param>
          <type>BN_CTX *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Encodes a EC_POINT object to a octet string <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group</parametername>
</parameternamelist>
<parameterdescription>
<para>underlying EC_GROUP object </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>EC_POINT object </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>form</parametername>
</parameternamelist>
<parameterdescription>
<para>point conversion form </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>memory buffer for the result. If NULL the function returns required buffer size. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the memory buffer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>BN_CTX object (optional) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the length of the encoded octet string or 0 if an error occurred </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="548" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ec_8h_1a3e3f20867863cf24f2009e2e81f3a47c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EC_POINT_oct2point</definition>
        <argsstring>(const EC_GROUP *group, EC_POINT *p, const unsigned char *buf, size_t len, BN_CTX *ctx)</argsstring>
        <name>EC_POINT_oct2point</name>
        <param>
          <type>const EC_GROUP *</type>
          <declname>group</declname>
        </param>
        <param>
          <type>EC_POINT *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <param>
          <type>BN_CTX *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Decodes a EC_POINT from a octet string <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group</parametername>
</parameternamelist>
<parameterdescription>
<para>underlying EC_GROUP object </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>EC_POINT object </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>memory buffer with the encoded ec point </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the encoded ec point </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>BN_CTX object (optional) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 on success and 0 if an error occured </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="560" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ec_8h_1a70b9f59a0fa43f132328d2bc91670d8c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
        <definition>BIGNUM* EC_POINT_point2bn</definition>
        <argsstring>(const EC_GROUP *, const EC_POINT *, point_conversion_form_t form, BIGNUM *, BN_CTX *)</argsstring>
        <name>EC_POINT_point2bn</name>
        <param>
          <type>const EC_GROUP *</type>
        </param>
        <param>
          <type>const EC_POINT *</type>
        </param>
        <param>
          <type>point_conversion_form_t</type>
          <declname>form</declname>
        </param>
        <param>
          <type><ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
        </param>
        <param>
          <type>BN_CTX *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="564" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ec_8h_1a78a6760e98fb402ad34aebfb053abe9a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>EC_POINT *</type>
        <definition>EC_POINT* EC_POINT_bn2point</definition>
        <argsstring>(const EC_GROUP *, const BIGNUM *, EC_POINT *, BN_CTX *)</argsstring>
        <name>EC_POINT_bn2point</name>
        <param>
          <type>const EC_GROUP *</type>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
        </param>
        <param>
          <type>EC_POINT *</type>
        </param>
        <param>
          <type>BN_CTX *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="566" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ec_8h_1adebb244ecd042129e1e86e89f4e49cc5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* EC_POINT_point2hex</definition>
        <argsstring>(const EC_GROUP *, const EC_POINT *, point_conversion_form_t form, BN_CTX *)</argsstring>
        <name>EC_POINT_point2hex</name>
        <param>
          <type>const EC_GROUP *</type>
        </param>
        <param>
          <type>const EC_POINT *</type>
        </param>
        <param>
          <type>point_conversion_form_t</type>
          <declname>form</declname>
        </param>
        <param>
          <type>BN_CTX *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="568" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ec_8h_1a94f7fe7292c1155be6f1ca49f651736b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>EC_POINT *</type>
        <definition>EC_POINT* EC_POINT_hex2point</definition>
        <argsstring>(const EC_GROUP *, const char *, EC_POINT *, BN_CTX *)</argsstring>
        <name>EC_POINT_hex2point</name>
        <param>
          <type>const EC_GROUP *</type>
        </param>
        <param>
          <type>const char *</type>
        </param>
        <param>
          <type>EC_POINT *</type>
        </param>
        <param>
          <type>BN_CTX *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="570" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ec_8h_1a4446fae62859bd96eb52388ad5d1ceb6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EC_POINT_add</definition>
        <argsstring>(const EC_GROUP *group, EC_POINT *r, const EC_POINT *a, const EC_POINT *b, BN_CTX *ctx)</argsstring>
        <name>EC_POINT_add</name>
        <param>
          <type>const EC_GROUP *</type>
          <declname>group</declname>
        </param>
        <param>
          <type>EC_POINT *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const EC_POINT *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const EC_POINT *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>BN_CTX *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Computes the sum of two EC_POINT <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group</parametername>
</parameternamelist>
<parameterdescription>
<para>underlying EC_GROUP object </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>r</parametername>
</parameternamelist>
<parameterdescription>
<para>EC_POINT object for the result (r = a + b) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>EC_POINT object with the first summand </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>EC_POINT object with the second summand </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>BN_CTX object (optional) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 on success and 0 if an error occured </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="586" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ec_8h_1aa89c17c5a219df05db3ba7d0e36baf28" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EC_POINT_dbl</definition>
        <argsstring>(const EC_GROUP *group, EC_POINT *r, const EC_POINT *a, BN_CTX *ctx)</argsstring>
        <name>EC_POINT_dbl</name>
        <param>
          <type>const EC_GROUP *</type>
          <declname>group</declname>
        </param>
        <param>
          <type>EC_POINT *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const EC_POINT *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>BN_CTX *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Computes the double of a EC_POINT <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group</parametername>
</parameternamelist>
<parameterdescription>
<para>underlying EC_GROUP object </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>r</parametername>
</parameternamelist>
<parameterdescription>
<para>EC_POINT object for the result (r = 2 * a) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>EC_POINT object </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>BN_CTX object (optional) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 on success and 0 if an error occured </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="595" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ec_8h_1a8b393e9e150559366e90766cba2b7aff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EC_POINT_invert</definition>
        <argsstring>(const EC_GROUP *group, EC_POINT *a, BN_CTX *ctx)</argsstring>
        <name>EC_POINT_invert</name>
        <param>
          <type>const EC_GROUP *</type>
          <declname>group</declname>
        </param>
        <param>
          <type>EC_POINT *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>BN_CTX *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Computes the inverse of a EC_POINT <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group</parametername>
</parameternamelist>
<parameterdescription>
<para>underlying EC_GROUP object </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>EC_POINT object to be inverted (it&apos;s used for the result as well) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>BN_CTX object (optional) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 on success and 0 if an error occured </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="603" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ec_8h_1a91bd56d348b10a2d4f2962ff3f3ad779" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EC_POINT_is_at_infinity</definition>
        <argsstring>(const EC_GROUP *group, const EC_POINT *p)</argsstring>
        <name>EC_POINT_is_at_infinity</name>
        <param>
          <type>const EC_GROUP *</type>
          <declname>group</declname>
        </param>
        <param>
          <type>const EC_POINT *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Checks whether the point is the neutral element of the group <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group</parametername>
</parameternamelist>
<parameterdescription>
<para>the underlying EC_GROUP object </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>EC_POINT object </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the point is the neutral element and 0 otherwise </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="610" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ec_8h_1af660a86663573eb127f71971ead74a60" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EC_POINT_is_on_curve</definition>
        <argsstring>(const EC_GROUP *group, const EC_POINT *point, BN_CTX *ctx)</argsstring>
        <name>EC_POINT_is_on_curve</name>
        <param>
          <type>const EC_GROUP *</type>
          <declname>group</declname>
        </param>
        <param>
          <type>const EC_POINT *</type>
          <declname>point</declname>
        </param>
        <param>
          <type>BN_CTX *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Checks whether the point is on the curve <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group</parametername>
</parameternamelist>
<parameterdescription>
<para>underlying EC_GROUP object </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>point</parametername>
</parameternamelist>
<parameterdescription>
<para>EC_POINT object to check </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>BN_CTX object (optional) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if point if on the curve and 0 otherwise </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="618" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ec_8h_1af726a3b6a85e51452a23318e82f9c070" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EC_POINT_cmp</definition>
        <argsstring>(const EC_GROUP *group, const EC_POINT *a, const EC_POINT *b, BN_CTX *ctx)</argsstring>
        <name>EC_POINT_cmp</name>
        <param>
          <type>const EC_GROUP *</type>
          <declname>group</declname>
        </param>
        <param>
          <type>const EC_POINT *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const EC_POINT *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>BN_CTX *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compares two EC_POINTs <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group</parametername>
</parameternamelist>
<parameterdescription>
<para>underlying EC_GROUP object </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>first EC_POINT object </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>second EC_POINT object </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>BN_CTX object (optional) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if both points are equal and a value != 0 otherwise </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="627" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ec_8h_1af09c338922571bf659665d57ec8930fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EC_POINT_make_affine</definition>
        <argsstring>(const EC_GROUP *group, EC_POINT *point, BN_CTX *ctx)</argsstring>
        <name>EC_POINT_make_affine</name>
        <param>
          <type>const EC_GROUP *</type>
          <declname>group</declname>
        </param>
        <param>
          <type>EC_POINT *</type>
          <declname>point</declname>
        </param>
        <param>
          <type>BN_CTX *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="629" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ec_8h_1a15f29fc6fdde182c05c6c944226af4e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EC_POINTs_make_affine</definition>
        <argsstring>(const EC_GROUP *group, size_t num, EC_POINT *points[], BN_CTX *ctx)</argsstring>
        <name>EC_POINTs_make_affine</name>
        <param>
          <type>const EC_GROUP *</type>
          <declname>group</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num</declname>
        </param>
        <param>
          <type>EC_POINT *</type>
          <declname>points</declname>
          <array>[]</array>
        </param>
        <param>
          <type>BN_CTX *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="630" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ec_8h_1a28b4e5c74698406de748f430c515e22e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EC_POINTs_mul</definition>
        <argsstring>(const EC_GROUP *group, EC_POINT *r, const BIGNUM *n, size_t num, const EC_POINT *p[], const BIGNUM *m[], BN_CTX *ctx)</argsstring>
        <name>EC_POINTs_mul</name>
        <param>
          <type>const EC_GROUP *</type>
          <declname>group</declname>
        </param>
        <param>
          <type>EC_POINT *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num</declname>
        </param>
        <param>
          <type>const EC_POINT *</type>
          <declname>p</declname>
          <array>[]</array>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>m</declname>
          <array>[]</array>
        </param>
        <param>
          <type>BN_CTX *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Computes r = generator * n sum_{i=0}^{num-1} p[i] * m[i] <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group</parametername>
</parameternamelist>
<parameterdescription>
<para>underlying EC_GROUP object </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>r</parametername>
</parameternamelist>
<parameterdescription>
<para>EC_POINT object for the result </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>BIGNUM with the multiplier for the group generator (optional) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num</parametername>
</parameternamelist>
<parameterdescription>
<para>number futher summands </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>array of size num of EC_POINT objects </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>array of size num of BIGNUM objects </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>BN_CTX object (optional) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 on success and 0 if an error occured </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="642" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ec_8h_1a5e5532068774ce6da8ca68ac627176a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EC_POINT_mul</definition>
        <argsstring>(const EC_GROUP *group, EC_POINT *r, const BIGNUM *n, const EC_POINT *q, const BIGNUM *m, BN_CTX *ctx)</argsstring>
        <name>EC_POINT_mul</name>
        <param>
          <type>const EC_GROUP *</type>
          <declname>group</declname>
        </param>
        <param>
          <type>EC_POINT *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const EC_POINT *</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>BN_CTX *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Computes r = generator * n + q * m <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group</parametername>
</parameternamelist>
<parameterdescription>
<para>underlying EC_GROUP object </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>r</parametername>
</parameternamelist>
<parameterdescription>
<para>EC_POINT object for the result </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>BIGNUM with the multiplier for the group generator (optional) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>q</parametername>
</parameternamelist>
<parameterdescription>
<para>EC_POINT object with the first factor of the second summand </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>BIGNUM with the second factor of the second summand </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>BN_CTX object (optional) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 on success and 0 if an error occured </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="653" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ec_8h_1a789a49ef200f689fcddd25c170340210" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EC_GROUP_precompute_mult</definition>
        <argsstring>(EC_GROUP *group, BN_CTX *ctx)</argsstring>
        <name>EC_GROUP_precompute_mult</name>
        <param>
          <type>EC_GROUP *</type>
          <declname>group</declname>
        </param>
        <param>
          <type>BN_CTX *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Stores multiples of generator for faster point multiplication <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group</parametername>
</parameternamelist>
<parameterdescription>
<para>EC_GROUP object </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>BN_CTX object (optional) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 on success and 0 if an error occured </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="660" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ec_8h_1ae402680fadde039ffadb08dacb09ab6a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EC_GROUP_have_precompute_mult</definition>
        <argsstring>(const EC_GROUP *group)</argsstring>
        <name>EC_GROUP_have_precompute_mult</name>
        <param>
          <type>const EC_GROUP *</type>
          <declname>group</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Reports whether a precomputation has been done <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group</parametername>
</parameternamelist>
<parameterdescription>
<para>EC_GROUP object </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if a pre-computation has been done and 0 otherwise </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="666" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ec_8h_1ab1f28f8ce89fbabc97d96d2eb9dc4d54" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EC_GROUP_get_basis_type</definition>
        <argsstring>(const EC_GROUP *)</argsstring>
        <name>EC_GROUP_get_basis_type</name>
        <param>
          <type>const EC_GROUP *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="675" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ec_8h_1ae1f3e2e8676d06f15e953914d911b8c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EC_GROUP_get_trinomial_basis</definition>
        <argsstring>(const EC_GROUP *, unsigned int *k)</argsstring>
        <name>EC_GROUP_get_trinomial_basis</name>
        <param>
          <type>const EC_GROUP *</type>
        </param>
        <param>
          <type>unsigned int *</type>
          <declname>k</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="677" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ec_8h_1a059c37cc15312afc64b114f1c3f25dae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EC_GROUP_get_pentanomial_basis</definition>
        <argsstring>(const EC_GROUP *, unsigned int *k1, unsigned int *k2, unsigned int *k3)</argsstring>
        <name>EC_GROUP_get_pentanomial_basis</name>
        <param>
          <type>const EC_GROUP *</type>
        </param>
        <param>
          <type>unsigned int *</type>
          <declname>k1</declname>
        </param>
        <param>
          <type>unsigned int *</type>
          <declname>k2</declname>
        </param>
        <param>
          <type>unsigned int *</type>
          <declname>k3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="678" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ec_8h_1a802ab415c71434884e409602a2236227" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>EC_GROUP *</type>
        <definition>EC_GROUP* d2i_ECPKParameters</definition>
        <argsstring>(EC_GROUP **, const unsigned char **in, long len)</argsstring>
        <name>d2i_ECPKParameters</name>
        <param>
          <type>EC_GROUP **</type>
        </param>
        <param>
          <type>const unsigned char **</type>
          <declname>in</declname>
        </param>
        <param>
          <type>long</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="686" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ec_8h_1a350983f1a30a78ffcb6fc5b8792dc984" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int i2d_ECPKParameters</definition>
        <argsstring>(const EC_GROUP *, unsigned char **out)</argsstring>
        <name>i2d_ECPKParameters</name>
        <param>
          <type>const EC_GROUP *</type>
        </param>
        <param>
          <type>unsigned char **</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="687" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ec_8h_1a55223e5c3b5dd4548b74a7b988f314fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ECPKParameters_print</definition>
        <argsstring>(BIO *bp, const EC_GROUP *x, int off)</argsstring>
        <name>ECPKParameters_print</name>
        <param>
          <type><ref refid="structbio__st" kindref="compound">BIO</ref> *</type>
          <declname>bp</declname>
        </param>
        <param>
          <type>const EC_GROUP *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>off</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="697" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ec_8h_1ac716de25f0ace9de656b91fe40ccabdc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ECPKParameters_print_fp</definition>
        <argsstring>(FILE *fp, const EC_GROUP *x, int off)</argsstring>
        <name>ECPKParameters_print_fp</name>
        <param>
          <type>FILE *</type>
          <declname>fp</declname>
        </param>
        <param>
          <type>const EC_GROUP *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>off</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="700" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ec_8h_1ad45e4b316aefae25a6c9de0b58048717" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>EC_KEY *</type>
        <definition>EC_KEY* EC_KEY_new</definition>
        <argsstring>(void)</argsstring>
        <name>EC_KEY_new</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a new EC_KEY object. <simplesect kind="return"><para>EC_KEY object or NULL if an error occurred. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="721" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ec_8h_1a5b4a188cc74a23b9247a7de9042cf4cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EC_KEY_get_flags</definition>
        <argsstring>(const EC_KEY *key)</argsstring>
        <name>EC_KEY_get_flags</name>
        <param>
          <type>const EC_KEY *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="723" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ec_8h_1aec9e801f9654053959674c16dca8ca6a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EC_KEY_set_flags</definition>
        <argsstring>(EC_KEY *key, int flags)</argsstring>
        <name>EC_KEY_set_flags</name>
        <param>
          <type>EC_KEY *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="725" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ec_8h_1a3b8ca878121dd48402bf1ae9c6adee81" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EC_KEY_clear_flags</definition>
        <argsstring>(EC_KEY *key, int flags)</argsstring>
        <name>EC_KEY_clear_flags</name>
        <param>
          <type>EC_KEY *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="727" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ec_8h_1a182a5987df69a31238f78634f6d57e8d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>EC_KEY *</type>
        <definition>EC_KEY* EC_KEY_new_by_curve_name</definition>
        <argsstring>(int nid)</argsstring>
        <name>EC_KEY_new_by_curve_name</name>
        <param>
          <type>int</type>
          <declname>nid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a new EC_KEY object using a named curve as underlying EC_GROUP object. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nid</parametername>
</parameternamelist>
<parameterdescription>
<para>NID of the named curve. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>EC_KEY object or NULL if an error occurred. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="734" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ec_8h_1af3759e18dd8bf0c3144527c0377668a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EC_KEY_free</definition>
        <argsstring>(EC_KEY *key)</argsstring>
        <name>EC_KEY_free</name>
        <param>
          <type>EC_KEY *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Frees a EC_KEY object. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>EC_KEY object to be freed. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="739" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ec_8h_1a1b36047c8a06bad7a13aab8032db0184" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>EC_KEY *</type>
        <definition>EC_KEY* EC_KEY_copy</definition>
        <argsstring>(EC_KEY *dst, const EC_KEY *src)</argsstring>
        <name>EC_KEY_copy</name>
        <param>
          <type>EC_KEY *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const EC_KEY *</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Copies a EC_KEY object. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>destination EC_KEY object </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>src EC_KEY object </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>dst or NULL if an error occurred. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="746" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ec_8h_1a92372abf07b5db2253d8cf2390d650fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>EC_KEY *</type>
        <definition>EC_KEY* EC_KEY_dup</definition>
        <argsstring>(const EC_KEY *src)</argsstring>
        <name>EC_KEY_dup</name>
        <param>
          <type>const EC_KEY *</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a new EC_KEY object and copies the content from src to it. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>the source EC_KEY object </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>newly created EC_KEY object or NULL if an error occurred. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="752" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ec_8h_1a1f923363d83750e2d994ddcb494e011d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EC_KEY_up_ref</definition>
        <argsstring>(EC_KEY *key)</argsstring>
        <name>EC_KEY_up_ref</name>
        <param>
          <type>EC_KEY *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Increases the internal reference count of a EC_KEY object. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>EC_KEY object </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 on success and 0 if an error occurred. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="758" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ec_8h_1aa11ad233e9c9a49d34d33e2feef70c33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const EC_GROUP *</type>
        <definition>const EC_GROUP* EC_KEY_get0_group</definition>
        <argsstring>(const EC_KEY *key)</argsstring>
        <name>EC_KEY_get0_group</name>
        <param>
          <type>const EC_KEY *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the EC_GROUP object of a EC_KEY object <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>EC_KEY object </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the EC_GROUP object (possibly NULL). </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="764" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ec_8h_1a384a92a00677065b4d2d3a5cc56f1e5b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EC_KEY_set_group</definition>
        <argsstring>(EC_KEY *key, const EC_GROUP *group)</argsstring>
        <name>EC_KEY_set_group</name>
        <param>
          <type>EC_KEY *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const EC_GROUP *</type>
          <declname>group</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the EC_GROUP of a EC_KEY object. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>EC_KEY object </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>group</parametername>
</parameternamelist>
<parameterdescription>
<para>EC_GROUP to use in the EC_KEY object (note: the EC_KEY object will use an own copy of the EC_GROUP). </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 on success and 0 if an error occurred. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="772" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ec_8h_1ab41d893f425f8a2cd22cb9bbc83a85be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
        <definition>const BIGNUM* EC_KEY_get0_private_key</definition>
        <argsstring>(const EC_KEY *key)</argsstring>
        <name>EC_KEY_get0_private_key</name>
        <param>
          <type>const EC_KEY *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the private key of a EC_KEY object. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>EC_KEY object </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a BIGNUM with the private key (possibly NULL). </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="778" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ec_8h_1ac71ebd801dd40f9b9c42b61aff685f3d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EC_KEY_set_private_key</definition>
        <argsstring>(EC_KEY *key, const BIGNUM *prv)</argsstring>
        <name>EC_KEY_set_private_key</name>
        <param>
          <type>EC_KEY *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>prv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the private key of a EC_KEY object. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>EC_KEY object </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prv</parametername>
</parameternamelist>
<parameterdescription>
<para>BIGNUM with the private key (note: the EC_KEY object will use an own copy of the BIGNUM). </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 on success and 0 if an error occurred. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="786" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ec_8h_1a4801169f999e2527d5368ec2a8cfc20a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const EC_POINT *</type>
        <definition>const EC_POINT* EC_KEY_get0_public_key</definition>
        <argsstring>(const EC_KEY *key)</argsstring>
        <name>EC_KEY_get0_public_key</name>
        <param>
          <type>const EC_KEY *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the public key of a EC_KEY object. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>the EC_KEY object </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a EC_POINT object with the public key (possibly NULL) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="792" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ec_8h_1ab3456a0d8ea13abb1e0c4c79fa0fef48" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EC_KEY_set_public_key</definition>
        <argsstring>(EC_KEY *key, const EC_POINT *pub)</argsstring>
        <name>EC_KEY_set_public_key</name>
        <param>
          <type>EC_KEY *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const EC_POINT *</type>
          <declname>pub</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the public key of a EC_KEY object. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>EC_KEY object </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pub</parametername>
</parameternamelist>
<parameterdescription>
<para>EC_POINT object with the public key (note: the EC_KEY object will use an own copy of the EC_POINT object). </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 on success and 0 if an error occurred. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="800" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ec_8h_1a06f95c943ca195b0f6f22ddcbf173d7a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned</type>
        <definition>unsigned EC_KEY_get_enc_flags</definition>
        <argsstring>(const EC_KEY *key)</argsstring>
        <name>EC_KEY_get_enc_flags</name>
        <param>
          <type>const EC_KEY *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="802" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ec_8h_1ac10949e7a5c1ec68ea8d400dd2d36000" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EC_KEY_set_enc_flags</definition>
        <argsstring>(EC_KEY *eckey, unsigned int flags)</argsstring>
        <name>EC_KEY_set_enc_flags</name>
        <param>
          <type>EC_KEY *</type>
          <declname>eckey</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="803" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ec_8h_1ad5b0e23b0e2cbcb3390bc4772cca2cf8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>point_conversion_form_t</type>
        <definition>point_conversion_form_t EC_KEY_get_conv_form</definition>
        <argsstring>(const EC_KEY *key)</argsstring>
        <name>EC_KEY_get_conv_form</name>
        <param>
          <type>const EC_KEY *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="804" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ec_8h_1a37f9b4e6ced97d63032dd168f4b46ec6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EC_KEY_set_conv_form</definition>
        <argsstring>(EC_KEY *eckey, point_conversion_form_t cform)</argsstring>
        <name>EC_KEY_set_conv_form</name>
        <param>
          <type>EC_KEY *</type>
          <declname>eckey</declname>
        </param>
        <param>
          <type>point_conversion_form_t</type>
          <declname>cform</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="805" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ec_8h_1aa910a54c3b12f122c401b9d4a78c00a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* EC_KEY_get_key_method_data</definition>
        <argsstring>(EC_KEY *key, void *(*dup_func)(void *), void(*free_func)(void *), void(*clear_free_func)(void *))</argsstring>
        <name>EC_KEY_get_key_method_data</name>
        <param>
          <type>EC_KEY *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>void *(*)(void *)</type>
          <declname>dup_func</declname>
        </param>
        <param>
          <type>void(*)(void *)</type>
          <declname>free_func</declname>
        </param>
        <param>
          <type>void(*)(void *)</type>
          <declname>clear_free_func</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="807" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ec_8h_1addec39a945797fb43c789074526ed707" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* EC_KEY_insert_key_method_data</definition>
        <argsstring>(EC_KEY *key, void *data, void *(*dup_func)(void *), void(*free_func)(void *), void(*clear_free_func)(void *))</argsstring>
        <name>EC_KEY_insert_key_method_data</name>
        <param>
          <type>EC_KEY *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>void *(*)(void *)</type>
          <declname>dup_func</declname>
        </param>
        <param>
          <type>void(*)(void *)</type>
          <declname>free_func</declname>
        </param>
        <param>
          <type>void(*)(void *)</type>
          <declname>clear_free_func</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the key method data of an EC_KEY object, if none has yet been set. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>EC_KEY object </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>opaque data to install. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dup_func</parametername>
</parameternamelist>
<parameterdescription>
<para>a function that duplicates |data|. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>free_func</parametername>
</parameternamelist>
<parameterdescription>
<para>a function that frees |data|. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>clear_free_func</parametername>
</parameternamelist>
<parameterdescription>
<para>a function that wipes and frees |data|. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the previously set data pointer, or NULL if |data| was inserted. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="817" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ec_8h_1a61442aff8380ca427e0a3b800e6d8576" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EC_KEY_set_asn1_flag</definition>
        <argsstring>(EC_KEY *eckey, int asn1_flag)</argsstring>
        <name>EC_KEY_set_asn1_flag</name>
        <param>
          <type>EC_KEY *</type>
          <declname>eckey</declname>
        </param>
        <param>
          <type>int</type>
          <declname>asn1_flag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="820" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ec_8h_1aefece09de34104498a65198e3b0d1f43" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EC_KEY_precompute_mult</definition>
        <argsstring>(EC_KEY *key, BN_CTX *ctx)</argsstring>
        <name>EC_KEY_precompute_mult</name>
        <param>
          <type>EC_KEY *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>BN_CTX *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a table of pre-computed multiples of the generator to accelerate further EC_KEY operations. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>EC_KEY object </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>BN_CTX object (optional) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 on success and 0 if an error occurred. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="828" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ec_8h_1a690c3227c776f6b53a004e22d03055da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EC_KEY_generate_key</definition>
        <argsstring>(EC_KEY *key)</argsstring>
        <name>EC_KEY_generate_key</name>
        <param>
          <type>EC_KEY *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a new ec private (and optional a new public) key. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>EC_KEY object </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 on success and 0 if an error occurred. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="834" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ec_8h_1af95a20fbf391a4dd8ef484a4c2bc6f6b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EC_KEY_check_key</definition>
        <argsstring>(const EC_KEY *key)</argsstring>
        <name>EC_KEY_check_key</name>
        <param>
          <type>const EC_KEY *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Verifies that a private and/or public key is valid. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>the EC_KEY object </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 on success and 0 otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="840" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ec_8h_1a41a2cd29a7c9538e53c47631d8ece192" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EC_KEY_set_public_key_affine_coordinates</definition>
        <argsstring>(EC_KEY *key, BIGNUM *x, BIGNUM *y)</argsstring>
        <name>EC_KEY_set_public_key_affine_coordinates</name>
        <param>
          <type>EC_KEY *</type>
          <declname>key</declname>
        </param>
        <param>
          <type><ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets a public key from affine coordindates performing neccessary NIST PKV tests. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>the EC_KEY object </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>public key x coordinate </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>public key y coordinate </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 on success and 0 otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="849" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ec_8h_1aeaa259adce95b0937cf6bf5cd2221639" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>EC_KEY *</type>
        <definition>EC_KEY* d2i_ECPrivateKey</definition>
        <argsstring>(EC_KEY **key, const unsigned char **in, long len)</argsstring>
        <name>d2i_ECPrivateKey</name>
        <param>
          <type>EC_KEY **</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const unsigned char **</type>
          <declname>in</declname>
        </param>
        <param>
          <type>long</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Decodes a private key from a memory buffer. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>a pointer to a EC_KEY object which should be used (or NULL) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>in</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to memory with the DER encoded private key </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the DER encoded private key </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the decoded private key or NULL if an error occurred. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="862" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ec_8h_1ae714ab3e64494618b04e190bffa88030" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int i2d_ECPrivateKey</definition>
        <argsstring>(EC_KEY *key, unsigned char **out)</argsstring>
        <name>i2d_ECPrivateKey</name>
        <param>
          <type>EC_KEY *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>unsigned char **</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Encodes a private key object and stores the result in a buffer. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>the EC_KEY object to encode </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>the buffer for the result (if NULL the function returns number of bytes needed). </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 on success and 0 if an error occurred. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="870" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ec_8h_1a3d6ca0445722d1eed1f5ee5ca2977275" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>EC_KEY *</type>
        <definition>EC_KEY* d2i_ECParameters</definition>
        <argsstring>(EC_KEY **key, const unsigned char **in, long len)</argsstring>
        <name>d2i_ECParameters</name>
        <param>
          <type>EC_KEY **</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const unsigned char **</type>
          <declname>in</declname>
        </param>
        <param>
          <type>long</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Decodes ec parameter from a memory buffer. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>a pointer to a EC_KEY object which should be used (or NULL) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>in</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to memory with the DER encoded ec parameters </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the DER encoded ec parameters </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a EC_KEY object with the decoded parameters or NULL if an error occurred. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="884" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ec_8h_1aa440bd0b75085e6832a72fd0e9ea305c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int i2d_ECParameters</definition>
        <argsstring>(EC_KEY *key, unsigned char **out)</argsstring>
        <name>i2d_ECParameters</name>
        <param>
          <type>EC_KEY *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>unsigned char **</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Encodes ec parameter and stores the result in a buffer. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>the EC_KEY object with ec paramters to encode </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>the buffer for the result (if NULL the function returns number of bytes needed). </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 on success and 0 if an error occurred. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="892" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ec_8h_1a628017a03d4a4600b9f62ccb56699239" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>EC_KEY *</type>
        <definition>EC_KEY* o2i_ECPublicKey</definition>
        <argsstring>(EC_KEY **key, const unsigned char **in, long len)</argsstring>
        <name>o2i_ECPublicKey</name>
        <param>
          <type>EC_KEY **</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const unsigned char **</type>
          <declname>in</declname>
        </param>
        <param>
          <type>long</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Decodes a ec public key from a octet string. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>a pointer to a EC_KEY object which should be used </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>in</parametername>
</parameternamelist>
<parameterdescription>
<para>memory buffer with the encoded public key </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the encoded public key </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>EC_KEY object with decoded public key or NULL if an error occurred. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="907" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ec_8h_1a1a93f5739c093586ef83517b52b44a0c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int i2o_ECPublicKey</definition>
        <argsstring>(EC_KEY *key, unsigned char **out)</argsstring>
        <name>i2o_ECPublicKey</name>
        <param>
          <type>EC_KEY *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>unsigned char **</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Encodes a ec public key in an octet string. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>the EC_KEY object with the public key </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>the buffer for the result (if NULL the function returns number of bytes needed). </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 on success and 0 if an error occurred </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="915" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ec_8h_1a480080cf7f9211c14cacb184a88cde0e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ECParameters_print</definition>
        <argsstring>(BIO *bp, const EC_KEY *key)</argsstring>
        <name>ECParameters_print</name>
        <param>
          <type><ref refid="structbio__st" kindref="compound">BIO</ref> *</type>
          <declname>bp</declname>
        </param>
        <param>
          <type>const EC_KEY *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Prints out the ec parameters on human readable form. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bp</parametername>
</parameternamelist>
<parameterdescription>
<para>BIO object to which the information is printed </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>EC_KEY object </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 on success and 0 if an error occurred </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="923" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ec_8h_1af055ae0950697ab1c87eb1e04fd496f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EC_KEY_print</definition>
        <argsstring>(BIO *bp, const EC_KEY *key, int off)</argsstring>
        <name>EC_KEY_print</name>
        <param>
          <type><ref refid="structbio__st" kindref="compound">BIO</ref> *</type>
          <declname>bp</declname>
        </param>
        <param>
          <type>const EC_KEY *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>int</type>
          <declname>off</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Prints out the contents of a EC_KEY object <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bp</parametername>
</parameternamelist>
<parameterdescription>
<para>BIO object to which the information is printed </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>EC_KEY object </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>off</parametername>
</parameternamelist>
<parameterdescription>
<para>line offset </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 on success and 0 if an error occurred </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="931" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ec_8h_1a3d2fe308128d8394623b3860a0c80245" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ECParameters_print_fp</definition>
        <argsstring>(FILE *fp, const EC_KEY *key)</argsstring>
        <name>ECParameters_print_fp</name>
        <param>
          <type>FILE *</type>
          <declname>fp</declname>
        </param>
        <param>
          <type>const EC_KEY *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Prints out the ec parameters on human readable form. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fp</parametername>
</parameternamelist>
<parameterdescription>
<para>file descriptor to which the information is printed </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>EC_KEY object </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 on success and 0 if an error occurred </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="940" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ec_8h_1a7603d548e8de1a8aed8844c9b6e23f5b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EC_KEY_print_fp</definition>
        <argsstring>(FILE *fp, const EC_KEY *key, int off)</argsstring>
        <name>EC_KEY_print_fp</name>
        <param>
          <type>FILE *</type>
          <declname>fp</declname>
        </param>
        <param>
          <type>const EC_KEY *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>int</type>
          <declname>off</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Prints out the contents of a EC_KEY object <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fp</parametername>
</parameternamelist>
<parameterdescription>
<para>file descriptor to which the information is printed </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>EC_KEY object </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>off</parametername>
</parameternamelist>
<parameterdescription>
<para>line offset </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 on success and 0 if an error occurred </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="948" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ec_8h_1ae6a0ff0edac2b78942e908eda6720b78" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ERR_load_EC_strings</definition>
        <argsstring>(void)</argsstring>
        <name>ERR_load_EC_strings</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/ec.h" line="973" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>crypto/ec/ec.h<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>Originally<sp/>written<sp/>by<sp/>Bodo<sp/>Moeller<sp/>for<sp/>the<sp/>OpenSSL<sp/>project.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*/</highlight></codeline>
<codeline lineno="9"><highlight class="comment">/*<sp/>====================================================================</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>1998-2005<sp/>The<sp/>OpenSSL<sp/>Project.<sp/><sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>1.<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.<sp/></highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>2.<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>the<sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>distribution.</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>3.<sp/>All<sp/>advertising<sp/>materials<sp/>mentioning<sp/>features<sp/>or<sp/>use<sp/>of<sp/>this</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>software<sp/>must<sp/>display<sp/>the<sp/>following<sp/>acknowledgment:</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>&quot;This<sp/>product<sp/>includes<sp/>software<sp/>developed<sp/>by<sp/>the<sp/>OpenSSL<sp/>Project</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>for<sp/>use<sp/>in<sp/>the<sp/>OpenSSL<sp/>Toolkit.<sp/>(http://www.openssl.org/)&quot;</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>4.<sp/>The<sp/>names<sp/>&quot;OpenSSL<sp/>Toolkit&quot;<sp/>and<sp/>&quot;OpenSSL<sp/>Project&quot;<sp/>must<sp/>not<sp/>be<sp/>used<sp/>to</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from<sp/>this<sp/>software<sp/>without</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>prior<sp/>written<sp/>permission.<sp/>For<sp/>written<sp/>permission,<sp/>please<sp/>contact</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>openssl-core@openssl.org.</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/>*<sp/>5.<sp/>Products<sp/>derived<sp/>from<sp/>this<sp/>software<sp/>may<sp/>not<sp/>be<sp/>called<sp/>&quot;OpenSSL&quot;</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>nor<sp/>may<sp/>&quot;OpenSSL&quot;<sp/>appear<sp/>in<sp/>their<sp/>names<sp/>without<sp/>prior<sp/>written</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>permission<sp/>of<sp/>the<sp/>OpenSSL<sp/>Project.</highlight></codeline>
<codeline lineno="37"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="38"><highlight class="comment"><sp/>*<sp/>6.<sp/>Redistributions<sp/>of<sp/>any<sp/>form<sp/>whatsoever<sp/>must<sp/>retain<sp/>the<sp/>following</highlight></codeline>
<codeline lineno="39"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>acknowledgment:</highlight></codeline>
<codeline lineno="40"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>&quot;This<sp/>product<sp/>includes<sp/>software<sp/>developed<sp/>by<sp/>the<sp/>OpenSSL<sp/>Project</highlight></codeline>
<codeline lineno="41"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>for<sp/>use<sp/>in<sp/>the<sp/>OpenSSL<sp/>Toolkit<sp/>(http://www.openssl.org/)&quot;</highlight></codeline>
<codeline lineno="42"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="43"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>OpenSSL<sp/>PROJECT<sp/>``AS<sp/>IS&apos;&apos;<sp/>AND<sp/>ANY</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/>*<sp/>EXPRESSED<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>THE</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/>*<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/>*<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/><sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>OpenSSL<sp/>PROJECT<sp/>OR</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/>*<sp/>ITS<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/>*<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/>*<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;</highlight></codeline>
<codeline lineno="50"><highlight class="comment"><sp/>*<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)</highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/>*<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,</highlight></codeline>
<codeline lineno="52"><highlight class="comment"><sp/>*<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)</highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/>*<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED</highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/>*<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/>*<sp/>====================================================================</highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="57"><highlight class="comment"><sp/>*<sp/>This<sp/>product<sp/>includes<sp/>cryptographic<sp/>software<sp/>written<sp/>by<sp/>Eric<sp/>Young</highlight></codeline>
<codeline lineno="58"><highlight class="comment"><sp/>*<sp/>(eay@cryptsoft.com).<sp/><sp/>This<sp/>product<sp/>includes<sp/>software<sp/>written<sp/>by<sp/>Tim</highlight></codeline>
<codeline lineno="59"><highlight class="comment"><sp/>*<sp/>Hudson<sp/>(tjh@cryptsoft.com).</highlight></codeline>
<codeline lineno="60"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="61"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>====================================================================</highlight></codeline>
<codeline lineno="63"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>2002<sp/>Sun<sp/>Microsystems,<sp/>Inc.<sp/>ALL<sp/>RIGHTS<sp/>RESERVED.</highlight></codeline>
<codeline lineno="64"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="65"><highlight class="comment"><sp/>*<sp/>Portions<sp/>of<sp/>the<sp/>attached<sp/>software<sp/>(&quot;Contribution&quot;)<sp/>are<sp/>developed<sp/>by<sp/></highlight></codeline>
<codeline lineno="66"><highlight class="comment"><sp/>*<sp/>SUN<sp/>MICROSYSTEMS,<sp/>INC.,<sp/>and<sp/>are<sp/>contributed<sp/>to<sp/>the<sp/>OpenSSL<sp/>project.</highlight></codeline>
<codeline lineno="67"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="68"><highlight class="comment"><sp/>*<sp/>The<sp/>Contribution<sp/>is<sp/>licensed<sp/>pursuant<sp/>to<sp/>the<sp/>OpenSSL<sp/>open<sp/>source</highlight></codeline>
<codeline lineno="69"><highlight class="comment"><sp/>*<sp/>license<sp/>provided<sp/>above.</highlight></codeline>
<codeline lineno="70"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="71"><highlight class="comment"><sp/>*<sp/>The<sp/>elliptic<sp/>curve<sp/>binary<sp/>polynomial<sp/>software<sp/>is<sp/>originally<sp/>written<sp/>by<sp/></highlight></codeline>
<codeline lineno="72"><highlight class="comment"><sp/>*<sp/>Sheueling<sp/>Chang<sp/>Shantz<sp/>and<sp/>Douglas<sp/>Stebila<sp/>of<sp/>Sun<sp/>Microsystems<sp/>Laboratories.</highlight></codeline>
<codeline lineno="73"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="74"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>HEADER_EC_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>HEADER_EC_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;openssl/opensslconf.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>OPENSSL_NO_EC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="preprocessor">#error<sp/>EC<sp/>is<sp/>disabled.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;openssl/asn1.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;openssl/symhacks.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>OPENSSL_NO_DEPRECATED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;openssl/bn.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/><sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(__SUNPRO_C)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>if<sp/>__SUNPRO_C<sp/>&gt;=<sp/>0x520</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>pragma<sp/>error_messages<sp/>(off,E_ARRAY_OF_INCOMPLETE_NONAME,E_ARRAY_OF_INCOMPLETE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>OPENSSL_ECC_MAX_FIELD_BITS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>OPENSSL_ECC_MAX_FIELD_BITS<sp/>661</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>POINT_CONVERSION_COMPRESSED<sp/>=<sp/>2,</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>POINT_CONVERSION_UNCOMPRESSED<sp/>=<sp/>4,</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>POINT_CONVERSION_HYBRID<sp/>=<sp/>6</highlight></codeline>
<codeline lineno="115"><highlight class="normal">}<sp/>point_conversion_form_t;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ec_method_st<sp/>EC_METHOD;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ec_group_st</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="122"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>EC_METHOD<sp/>*meth;</highlight></codeline>
<codeline lineno="123"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>--<sp/>field<sp/>definition</highlight></codeline>
<codeline lineno="124"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>--<sp/>curve<sp/>coefficients</highlight></codeline>
<codeline lineno="125"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>--<sp/>optional<sp/>generator<sp/>with<sp/>associated<sp/>information<sp/>(order,<sp/>cofactor)</highlight></codeline>
<codeline lineno="126"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>--<sp/>optional<sp/>extra<sp/>data<sp/>(precomputed<sp/>table<sp/>for<sp/>fast<sp/>computation<sp/>of<sp/>multiples<sp/>of<sp/>generator)</highlight></codeline>
<codeline lineno="127"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>--<sp/>ASN1<sp/>stuff</highlight></codeline>
<codeline lineno="128"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>EC_GROUP;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ec_point_st<sp/>EC_POINT;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="comment">/********************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EC_METHODs<sp/>for<sp/>curves<sp/>over<sp/>GF(p)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="comment">/********************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="keyword">const</highlight><highlight class="normal"><sp/>EC_METHOD<sp/>*EC_GFp_simple_method(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="keyword">const</highlight><highlight class="normal"><sp/>EC_METHOD<sp/>*EC_GFp_mont_method(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="keyword">const</highlight><highlight class="normal"><sp/>EC_METHOD<sp/>*EC_GFp_nist_method(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>OPENSSL_NO_EC_NISTP_64_GCC_128</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="keyword">const</highlight><highlight class="normal"><sp/>EC_METHOD<sp/>*EC_GFp_nistp224_method(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="keyword">const</highlight><highlight class="normal"><sp/>EC_METHOD<sp/>*EC_GFp_nistp256_method(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="keyword">const</highlight><highlight class="normal"><sp/>EC_METHOD<sp/>*EC_GFp_nistp521_method(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>OPENSSL_NO_EC2M</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight><highlight class="comment">/********************************************************************/</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EC_METHOD<sp/>for<sp/>curves<sp/>over<sp/>GF(2^m)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight><highlight class="comment">/********************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="keyword">const</highlight><highlight class="normal"><sp/>EC_METHOD<sp/>*EC_GF2m_simple_method(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight><highlight class="comment">/********************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EC_GROUP<sp/>functions<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight><highlight class="comment">/********************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal">EC_GROUP<sp/>*EC_GROUP_new(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>EC_METHOD<sp/>*meth);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EC_GROUP_free(EC_GROUP<sp/>*group);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EC_GROUP_clear_free(EC_GROUP<sp/>*group);</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EC_GROUP_copy(EC_GROUP<sp/>*dst,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>EC_GROUP<sp/>*src);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal">EC_GROUP<sp/>*EC_GROUP_dup(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>EC_GROUP<sp/>*src);</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="keyword">const</highlight><highlight class="normal"><sp/>EC_METHOD<sp/>*EC_GROUP_method_of(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>EC_GROUP<sp/>*group);</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EC_METHOD_get_field_type(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>EC_METHOD<sp/>*meth);</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EC_GROUP_set_generator(EC_GROUP<sp/>*group,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>EC_POINT<sp/>*generator,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*order,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*cofactor);</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="keyword">const</highlight><highlight class="normal"><sp/>EC_POINT<sp/>*EC_GROUP_get0_generator(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>EC_GROUP<sp/>*group);</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EC_GROUP_get_order(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>EC_GROUP<sp/>*group,<sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*order,<sp/>BN_CTX<sp/>*ctx);</highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EC_GROUP_get_cofactor(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>EC_GROUP<sp/>*group,<sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*cofactor,<sp/>BN_CTX<sp/>*ctx);</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EC_GROUP_set_curve_name(EC_GROUP<sp/>*group,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nid);</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EC_GROUP_get_curve_name(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>EC_GROUP<sp/>*group);</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EC_GROUP_set_asn1_flag(EC_GROUP<sp/>*group,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flag);</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EC_GROUP_get_asn1_flag(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>EC_GROUP<sp/>*group);</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EC_GROUP_set_point_conversion_form(EC_GROUP<sp/>*group,<sp/>point_conversion_form_t<sp/>form);</highlight></codeline>
<codeline lineno="278"><highlight class="normal">point_conversion_form_t<sp/>EC_GROUP_get_point_conversion_form(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>EC_GROUP<sp/>*);</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*EC_GROUP_get0_seed(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>EC_GROUP<sp/>*x);</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>EC_GROUP_get_seed_len(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>EC_GROUP<sp/>*);</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>EC_GROUP_set_seed(EC_GROUP<sp/>*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EC_GROUP_set_curve_GFp(EC_GROUP<sp/>*group,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*p,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*b,<sp/>BN_CTX<sp/>*ctx);</highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EC_GROUP_get_curve_GFp(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>EC_GROUP<sp/>*group,<sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*p,<sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*a,<sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*b,<sp/>BN_CTX<sp/>*ctx);</highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>OPENSSL_NO_EC2M</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EC_GROUP_set_curve_GF2m(EC_GROUP<sp/>*group,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*p,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*b,<sp/>BN_CTX<sp/>*ctx);</highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EC_GROUP_get_curve_GF2m(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>EC_GROUP<sp/>*group,<sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*p,<sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*a,<sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*b,<sp/>BN_CTX<sp/>*ctx);</highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EC_GROUP_get_degree(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>EC_GROUP<sp/>*group);</highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EC_GROUP_check(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>EC_GROUP<sp/>*group,<sp/>BN_CTX<sp/>*ctx);</highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EC_GROUP_check_discriminant(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>EC_GROUP<sp/>*group,<sp/>BN_CTX<sp/>*ctx);</highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EC_GROUP_cmp(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>EC_GROUP<sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>EC_GROUP<sp/>*b,<sp/>BN_CTX<sp/>*ctx);</highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>EC_GROUP_new_GF*()<sp/>calls<sp/>EC_GROUP_new()<sp/>and<sp/>EC_GROUP_set_GF*()</highlight></codeline>
<codeline lineno="354"><highlight class="comment"><sp/>*<sp/>after<sp/>choosing<sp/>an<sp/>appropriate<sp/>EC_METHOD<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal">EC_GROUP<sp/>*EC_GROUP_new_curve_GFp(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*p,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*b,<sp/>BN_CTX<sp/>*ctx);</highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>OPENSSL_NO_EC2M</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal">EC_GROUP<sp/>*EC_GROUP_new_curve_GF2m(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*p,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*b,<sp/>BN_CTX<sp/>*ctx);</highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal">EC_GROUP<sp/>*EC_GROUP_new_by_curve_name(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nid);</highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight><highlight class="comment">/********************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>handling<sp/>of<sp/>internal<sp/>curves<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight><highlight class="comment">/********************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight></codeline>
<codeline lineno="388" refid="struct_e_c__builtin__curve" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nid;</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*comment;</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><ref refid="struct_e_c__builtin__curve" kindref="compound">EC_builtin_curve</ref>;</highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>EC_builtin_curves(EC_builtin_curve<sp/>*r,<sp/>size_t<sp/>size)<sp/>returns<sp/>number<sp/></highlight></codeline>
<codeline lineno="394"><highlight class="comment"><sp/>*<sp/>of<sp/>all<sp/>available<sp/>curves<sp/>or<sp/>zero<sp/>if<sp/>a<sp/>error<sp/>occurred.<sp/></highlight></codeline>
<codeline lineno="395"><highlight class="comment"><sp/>*<sp/>In<sp/>case<sp/>r<sp/>ist<sp/>not<sp/>zero<sp/>nitems<sp/>EC_builtin_curve<sp/>structures<sp/></highlight></codeline>
<codeline lineno="396"><highlight class="comment"><sp/>*<sp/>are<sp/>filled<sp/>with<sp/>the<sp/>data<sp/>of<sp/>the<sp/>first<sp/>nitems<sp/>internal<sp/>groups<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>EC_get_builtin_curves(<ref refid="struct_e_c__builtin__curve" kindref="compound">EC_builtin_curve</ref><sp/>*r,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nitems);</highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight><highlight class="comment">/********************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EC_POINT<sp/>functions<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight><highlight class="comment">/********************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal">EC_POINT<sp/>*EC_POINT_new(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>EC_GROUP<sp/>*group);</highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EC_POINT_free(EC_POINT<sp/>*point);</highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EC_POINT_clear_free(EC_POINT<sp/>*point);</highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EC_POINT_copy(EC_POINT<sp/>*dst,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>EC_POINT<sp/>*src);</highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal">EC_POINT<sp/>*EC_POINT_dup(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>EC_POINT<sp/>*src,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>EC_GROUP<sp/>*group);</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="439"><highlight class="keyword">const</highlight><highlight class="normal"><sp/>EC_METHOD<sp/>*EC_POINT_method_of(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>EC_POINT<sp/>*point);</highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EC_POINT_set_to_infinity(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>EC_GROUP<sp/>*group,<sp/>EC_POINT<sp/>*point);</highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EC_POINT_set_Jprojective_coordinates_GFp(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>EC_GROUP<sp/>*group,<sp/>EC_POINT<sp/>*p,</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*y,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*z,<sp/>BN_CTX<sp/>*ctx);</highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EC_POINT_get_Jprojective_coordinates_GFp(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>EC_GROUP<sp/>*group,</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>EC_POINT<sp/>*p,<sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*x,<sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*y,<sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*z,<sp/>BN_CTX<sp/>*ctx);</highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EC_POINT_set_affine_coordinates_GFp(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>EC_GROUP<sp/>*group,<sp/>EC_POINT<sp/>*p,</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*y,<sp/>BN_CTX<sp/>*ctx);</highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EC_POINT_get_affine_coordinates_GFp(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>EC_GROUP<sp/>*group,</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>EC_POINT<sp/>*p,<sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*x,<sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*y,<sp/>BN_CTX<sp/>*ctx);</highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EC_POINT_set_compressed_coordinates_GFp(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>EC_GROUP<sp/>*group,<sp/>EC_POINT<sp/>*p,</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y_bit,<sp/>BN_CTX<sp/>*ctx);</highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>OPENSSL_NO_EC2M</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EC_POINT_set_affine_coordinates_GF2m(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>EC_GROUP<sp/>*group,<sp/>EC_POINT<sp/>*p,</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*y,<sp/>BN_CTX<sp/>*ctx);</highlight></codeline>
<codeline lineno="515"><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EC_POINT_get_affine_coordinates_GF2m(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>EC_GROUP<sp/>*group,</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>EC_POINT<sp/>*p,<sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*x,<sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*y,<sp/>BN_CTX<sp/>*ctx);</highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EC_POINT_set_compressed_coordinates_GF2m(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>EC_GROUP<sp/>*group,<sp/>EC_POINT<sp/>*p,</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y_bit,<sp/>BN_CTX<sp/>*ctx);</highlight></codeline>
<codeline lineno="537"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight></codeline>
<codeline lineno="548"><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>EC_POINT_point2oct(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>EC_GROUP<sp/>*group,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>EC_POINT<sp/>*p,</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/>point_conversion_form_t<sp/>form,</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buf,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len,<sp/>BN_CTX<sp/>*ctx);</highlight></codeline>
<codeline lineno="551"><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EC_POINT_oct2point(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>EC_GROUP<sp/>*group,<sp/>EC_POINT<sp/>*p,</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buf,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len,<sp/>BN_CTX<sp/>*ctx);</highlight></codeline>
<codeline lineno="562"><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>other<sp/>interfaces<sp/>to<sp/>point2oct/oct2point:<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="564"><highlight class="normal"><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*EC_POINT_point2bn(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>EC_GROUP<sp/>*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>EC_POINT<sp/>*,</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/>point_conversion_form_t<sp/>form,<sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*,<sp/>BN_CTX<sp/>*);</highlight></codeline>
<codeline lineno="566"><highlight class="normal">EC_POINT<sp/>*EC_POINT_bn2point(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>EC_GROUP<sp/>*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*,</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/>EC_POINT<sp/>*,<sp/>BN_CTX<sp/>*);</highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*EC_POINT_point2hex(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>EC_GROUP<sp/>*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>EC_POINT<sp/>*,</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/>point_conversion_form_t<sp/>form,<sp/>BN_CTX<sp/>*);</highlight></codeline>
<codeline lineno="570"><highlight class="normal">EC_POINT<sp/>*EC_POINT_hex2point(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>EC_GROUP<sp/>*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/>EC_POINT<sp/>*,<sp/>BN_CTX<sp/>*);</highlight></codeline>
<codeline lineno="572"><highlight class="normal"></highlight></codeline>
<codeline lineno="573"><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal"></highlight><highlight class="comment">/********************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="575"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>functions<sp/>for<sp/>doing<sp/>EC_POINT<sp/>arithmetic<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal"></highlight><highlight class="comment">/********************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"></highlight></codeline>
<codeline lineno="586"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EC_POINT_add(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>EC_GROUP<sp/>*group,<sp/>EC_POINT<sp/>*r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>EC_POINT<sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>EC_POINT<sp/>*b,<sp/>BN_CTX<sp/>*ctx);</highlight></codeline>
<codeline lineno="587"><highlight class="normal"></highlight></codeline>
<codeline lineno="595"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EC_POINT_dbl(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>EC_GROUP<sp/>*group,<sp/>EC_POINT<sp/>*r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>EC_POINT<sp/>*a,<sp/>BN_CTX<sp/>*ctx);</highlight></codeline>
<codeline lineno="596"><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EC_POINT_invert(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>EC_GROUP<sp/>*group,<sp/>EC_POINT<sp/>*a,<sp/>BN_CTX<sp/>*ctx);</highlight></codeline>
<codeline lineno="604"><highlight class="normal"></highlight></codeline>
<codeline lineno="610"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EC_POINT_is_at_infinity(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>EC_GROUP<sp/>*group,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>EC_POINT<sp/>*p);</highlight></codeline>
<codeline lineno="611"><highlight class="normal"></highlight></codeline>
<codeline lineno="618"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EC_POINT_is_on_curve(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>EC_GROUP<sp/>*group,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>EC_POINT<sp/>*point,<sp/>BN_CTX<sp/>*ctx);</highlight></codeline>
<codeline lineno="619"><highlight class="normal"></highlight></codeline>
<codeline lineno="627"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EC_POINT_cmp(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>EC_GROUP<sp/>*group,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>EC_POINT<sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>EC_POINT<sp/>*b,<sp/>BN_CTX<sp/>*ctx);</highlight></codeline>
<codeline lineno="628"><highlight class="normal"></highlight></codeline>
<codeline lineno="629"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EC_POINT_make_affine(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>EC_GROUP<sp/>*group,<sp/>EC_POINT<sp/>*point,<sp/>BN_CTX<sp/>*ctx);</highlight></codeline>
<codeline lineno="630"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EC_POINTs_make_affine(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>EC_GROUP<sp/>*group,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>num,<sp/>EC_POINT<sp/>*points[],<sp/>BN_CTX<sp/>*ctx);</highlight></codeline>
<codeline lineno="631"><highlight class="normal"></highlight></codeline>
<codeline lineno="642"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EC_POINTs_mul(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>EC_GROUP<sp/>*group,<sp/>EC_POINT<sp/>*r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*n,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>num,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>EC_POINT<sp/>*p[],<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*m[],<sp/>BN_CTX<sp/>*ctx);</highlight></codeline>
<codeline lineno="643"><highlight class="normal"></highlight></codeline>
<codeline lineno="653"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EC_POINT_mul(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>EC_GROUP<sp/>*group,<sp/>EC_POINT<sp/>*r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*n,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>EC_POINT<sp/>*q,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*m,<sp/>BN_CTX<sp/>*ctx);</highlight></codeline>
<codeline lineno="654"><highlight class="normal"></highlight></codeline>
<codeline lineno="660"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EC_GROUP_precompute_mult(EC_GROUP<sp/>*group,<sp/>BN_CTX<sp/>*ctx);</highlight></codeline>
<codeline lineno="661"><highlight class="normal"></highlight></codeline>
<codeline lineno="666"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EC_GROUP_have_precompute_mult(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>EC_GROUP<sp/>*group);</highlight></codeline>
<codeline lineno="667"><highlight class="normal"></highlight></codeline>
<codeline lineno="668"><highlight class="normal"></highlight></codeline>
<codeline lineno="669"><highlight class="normal"></highlight><highlight class="comment">/********************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="670"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASN1<sp/>stuff<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="671"><highlight class="normal"></highlight><highlight class="comment">/********************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="672"><highlight class="normal"></highlight></codeline>
<codeline lineno="673"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>EC_GROUP_get_basis_type()<sp/>returns<sp/>the<sp/>NID<sp/>of<sp/>the<sp/>basis<sp/>type</highlight></codeline>
<codeline lineno="674"><highlight class="comment"><sp/>*<sp/>used<sp/>to<sp/>represent<sp/>the<sp/>field<sp/>elements<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="675"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EC_GROUP_get_basis_type(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>EC_GROUP<sp/>*);</highlight></codeline>
<codeline lineno="676"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>OPENSSL_NO_EC2M</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="677"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EC_GROUP_get_trinomial_basis(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>EC_GROUP<sp/>*,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*k);</highlight></codeline>
<codeline lineno="678"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EC_GROUP_get_pentanomial_basis(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>EC_GROUP<sp/>*,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*k1,<sp/></highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*k2,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*k3);</highlight></codeline>
<codeline lineno="680"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="681"><highlight class="normal"></highlight></codeline>
<codeline lineno="682"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>OPENSSL_EC_NAMED_CURVE<sp/><sp/>0x001</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="683"><highlight class="normal"></highlight></codeline>
<codeline lineno="684"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ecpk_parameters_st<sp/>ECPKPARAMETERS;</highlight></codeline>
<codeline lineno="685"><highlight class="normal"></highlight></codeline>
<codeline lineno="686"><highlight class="normal">EC_GROUP<sp/>*d2i_ECPKParameters(EC_GROUP<sp/>**,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**in,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="687"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i2d_ECPKParameters(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>EC_GROUP<sp/>*,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**out);</highlight></codeline>
<codeline lineno="688"><highlight class="normal"></highlight></codeline>
<codeline lineno="689"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>d2i_ECPKParameters_bio(bp,x)<sp/>ASN1_d2i_bio_of(EC_GROUP,NULL,d2i_ECPKParameters,bp,x)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="690"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>i2d_ECPKParameters_bio(bp,x)<sp/>ASN1_i2d_bio_of_const(EC_GROUP,i2d_ECPKParameters,bp,x)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="691"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>d2i_ECPKParameters_fp(fp,x)<sp/>(EC_GROUP<sp/>*)ASN1_d2i_fp(NULL,<sp/>\</highlight></codeline>
<codeline lineno="692"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(char<sp/>*(*)())d2i_ECPKParameters,(fp),(unsigned<sp/>char<sp/>**)(x))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="693"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>i2d_ECPKParameters_fp(fp,x)<sp/>ASN1_i2d_fp(i2d_ECPKParameters,(fp),<sp/>\</highlight></codeline>
<codeline lineno="694"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(unsigned<sp/>char<sp/>*)(x))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="695"><highlight class="normal"></highlight></codeline>
<codeline lineno="696"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>OPENSSL_NO_BIO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="697"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>ECPKParameters_print(<ref refid="structbio__st" kindref="compound">BIO</ref><sp/>*bp,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>EC_GROUP<sp/>*x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>off);</highlight></codeline>
<codeline lineno="698"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="699"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>OPENSSL_NO_FP_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="700"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>ECPKParameters_print_fp(FILE<sp/>*fp,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>EC_GROUP<sp/>*x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>off);</highlight></codeline>
<codeline lineno="701"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="702"><highlight class="normal"></highlight></codeline>
<codeline lineno="703"><highlight class="normal"></highlight></codeline>
<codeline lineno="704"><highlight class="normal"></highlight><highlight class="comment">/********************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="705"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EC_KEY<sp/>functions<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="706"><highlight class="normal"></highlight><highlight class="comment">/********************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="707"><highlight class="normal"></highlight></codeline>
<codeline lineno="708"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ec_key_st<sp/>EC_KEY;</highlight></codeline>
<codeline lineno="709"><highlight class="normal"></highlight></codeline>
<codeline lineno="710"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>some<sp/>values<sp/>for<sp/>the<sp/>encoding_flag<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="711"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_PKEY_NO_PARAMETERS<sp/><sp/><sp/>0x001</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="712"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_PKEY_NO_PUBKEY<sp/><sp/><sp/>0x002</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="713"><highlight class="normal"></highlight></codeline>
<codeline lineno="714"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>some<sp/>values<sp/>for<sp/>the<sp/>flags<sp/>field<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="715"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_FLAG_NON_FIPS_ALLOW<sp/><sp/>0x1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="716"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_FLAG_FIPS_CHECKED<sp/><sp/><sp/><sp/>0x2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="717"><highlight class="normal"></highlight></codeline>
<codeline lineno="721"><highlight class="normal">EC_KEY<sp/>*EC_KEY_new(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="722"><highlight class="normal"></highlight></codeline>
<codeline lineno="723"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EC_KEY_get_flags(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>EC_KEY<sp/>*key);</highlight></codeline>
<codeline lineno="724"><highlight class="normal"></highlight></codeline>
<codeline lineno="725"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EC_KEY_set_flags(EC_KEY<sp/>*key,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flags);</highlight></codeline>
<codeline lineno="726"><highlight class="normal"></highlight></codeline>
<codeline lineno="727"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EC_KEY_clear_flags(EC_KEY<sp/>*key,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flags);</highlight></codeline>
<codeline lineno="728"><highlight class="normal"></highlight></codeline>
<codeline lineno="734"><highlight class="normal">EC_KEY<sp/>*EC_KEY_new_by_curve_name(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nid);</highlight></codeline>
<codeline lineno="735"><highlight class="normal"></highlight></codeline>
<codeline lineno="739"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EC_KEY_free(EC_KEY<sp/>*key);</highlight></codeline>
<codeline lineno="740"><highlight class="normal"></highlight></codeline>
<codeline lineno="746"><highlight class="normal">EC_KEY<sp/>*EC_KEY_copy(EC_KEY<sp/>*dst,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>EC_KEY<sp/>*src);</highlight></codeline>
<codeline lineno="747"><highlight class="normal"></highlight></codeline>
<codeline lineno="752"><highlight class="normal">EC_KEY<sp/>*EC_KEY_dup(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>EC_KEY<sp/>*src);</highlight></codeline>
<codeline lineno="753"><highlight class="normal"></highlight></codeline>
<codeline lineno="758"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EC_KEY_up_ref(EC_KEY<sp/>*key);</highlight></codeline>
<codeline lineno="759"><highlight class="normal"></highlight></codeline>
<codeline lineno="764"><highlight class="keyword">const</highlight><highlight class="normal"><sp/>EC_GROUP<sp/>*EC_KEY_get0_group(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>EC_KEY<sp/>*key);</highlight></codeline>
<codeline lineno="765"><highlight class="normal"></highlight></codeline>
<codeline lineno="772"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EC_KEY_set_group(EC_KEY<sp/>*key,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>EC_GROUP<sp/>*group);</highlight></codeline>
<codeline lineno="773"><highlight class="normal"></highlight></codeline>
<codeline lineno="778"><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*EC_KEY_get0_private_key(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>EC_KEY<sp/>*key);</highlight></codeline>
<codeline lineno="779"><highlight class="normal"></highlight></codeline>
<codeline lineno="786"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EC_KEY_set_private_key(EC_KEY<sp/>*key,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*prv);</highlight></codeline>
<codeline lineno="787"><highlight class="normal"></highlight></codeline>
<codeline lineno="792"><highlight class="keyword">const</highlight><highlight class="normal"><sp/>EC_POINT<sp/>*EC_KEY_get0_public_key(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>EC_KEY<sp/>*key);</highlight></codeline>
<codeline lineno="793"><highlight class="normal"></highlight></codeline>
<codeline lineno="800"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EC_KEY_set_public_key(EC_KEY<sp/>*key,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>EC_POINT<sp/>*pub);</highlight></codeline>
<codeline lineno="801"><highlight class="normal"></highlight></codeline>
<codeline lineno="802"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>EC_KEY_get_enc_flags(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>EC_KEY<sp/>*key);</highlight></codeline>
<codeline lineno="803"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EC_KEY_set_enc_flags(EC_KEY<sp/>*eckey,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flags);</highlight></codeline>
<codeline lineno="804"><highlight class="normal">point_conversion_form_t<sp/>EC_KEY_get_conv_form(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>EC_KEY<sp/>*key);</highlight></codeline>
<codeline lineno="805"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EC_KEY_set_conv_form(EC_KEY<sp/>*eckey,<sp/>point_conversion_form_t<sp/>cform);</highlight></codeline>
<codeline lineno="806"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>functions<sp/>to<sp/>set/get<sp/>method<sp/>specific<sp/>data<sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="807"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*EC_KEY_get_key_method_data(EC_KEY<sp/>*key,<sp/></highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*(*dup_func)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*),<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*free_func)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*),<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*clear_free_func)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*));</highlight></codeline>
<codeline lineno="817"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*EC_KEY_insert_key_method_data(EC_KEY<sp/>*key,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*(*dup_func)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*),<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*free_func)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*),<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*clear_free_func)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*));</highlight></codeline>
<codeline lineno="819"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>wrapper<sp/>functions<sp/>for<sp/>the<sp/>underlying<sp/>EC_GROUP<sp/>object<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="820"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EC_KEY_set_asn1_flag(EC_KEY<sp/>*eckey,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>asn1_flag);</highlight></codeline>
<codeline lineno="821"><highlight class="normal"></highlight></codeline>
<codeline lineno="828"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EC_KEY_precompute_mult(EC_KEY<sp/>*key,<sp/>BN_CTX<sp/>*ctx);</highlight></codeline>
<codeline lineno="829"><highlight class="normal"></highlight></codeline>
<codeline lineno="834"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EC_KEY_generate_key(EC_KEY<sp/>*key);</highlight></codeline>
<codeline lineno="835"><highlight class="normal"></highlight></codeline>
<codeline lineno="840"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EC_KEY_check_key(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>EC_KEY<sp/>*key);</highlight></codeline>
<codeline lineno="841"><highlight class="normal"></highlight></codeline>
<codeline lineno="849"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EC_KEY_set_public_key_affine_coordinates(EC_KEY<sp/>*key,<sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*x,<sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*y);</highlight></codeline>
<codeline lineno="850"><highlight class="normal"></highlight></codeline>
<codeline lineno="851"><highlight class="normal"></highlight></codeline>
<codeline lineno="852"><highlight class="normal"></highlight><highlight class="comment">/********************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="853"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>de-<sp/>and<sp/>encoding<sp/>functions<sp/>for<sp/>SEC1<sp/>ECPrivateKey<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="854"><highlight class="normal"></highlight><highlight class="comment">/********************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="855"><highlight class="normal"></highlight></codeline>
<codeline lineno="862"><highlight class="normal">EC_KEY<sp/>*d2i_ECPrivateKey(EC_KEY<sp/>**key,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**in,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="863"><highlight class="normal"></highlight></codeline>
<codeline lineno="870"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i2d_ECPrivateKey(EC_KEY<sp/>*key,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**out);</highlight></codeline>
<codeline lineno="871"><highlight class="normal"></highlight></codeline>
<codeline lineno="872"><highlight class="normal"></highlight></codeline>
<codeline lineno="873"><highlight class="normal"></highlight><highlight class="comment">/********************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="874"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>de-<sp/>and<sp/>encoding<sp/>functions<sp/>for<sp/>EC<sp/>parameters<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="875"><highlight class="normal"></highlight><highlight class="comment">/********************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="876"><highlight class="normal"></highlight></codeline>
<codeline lineno="884"><highlight class="normal">EC_KEY<sp/>*d2i_ECParameters(EC_KEY<sp/>**key,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**in,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="885"><highlight class="normal"></highlight></codeline>
<codeline lineno="892"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i2d_ECParameters(EC_KEY<sp/>*key,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**out);</highlight></codeline>
<codeline lineno="893"><highlight class="normal"></highlight></codeline>
<codeline lineno="894"><highlight class="normal"></highlight></codeline>
<codeline lineno="895"><highlight class="normal"></highlight><highlight class="comment">/********************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="896"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>de-<sp/>and<sp/>encoding<sp/>functions<sp/>for<sp/>EC<sp/>public<sp/>key<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="897"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(octet<sp/>string,<sp/>not<sp/>DER<sp/>--<sp/>hence<sp/>&apos;o2i&apos;<sp/>and<sp/>&apos;i2o&apos;)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="898"><highlight class="normal"></highlight><highlight class="comment">/********************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="899"><highlight class="normal"></highlight></codeline>
<codeline lineno="907"><highlight class="normal">EC_KEY<sp/>*o2i_ECPublicKey(EC_KEY<sp/>**key,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**in,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="908"><highlight class="normal"></highlight></codeline>
<codeline lineno="915"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i2o_ECPublicKey(EC_KEY<sp/>*key,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**out);</highlight></codeline>
<codeline lineno="916"><highlight class="normal"></highlight></codeline>
<codeline lineno="917"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>OPENSSL_NO_BIO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="918"><highlight class="normal"></highlight></codeline>
<codeline lineno="923"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ECParameters_print(<ref refid="structbio__st" kindref="compound">BIO</ref><sp/>*bp,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>EC_KEY<sp/>*key);</highlight></codeline>
<codeline lineno="924"><highlight class="normal"></highlight></codeline>
<codeline lineno="931"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EC_KEY_print(<ref refid="structbio__st" kindref="compound">BIO</ref><sp/>*bp,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>EC_KEY<sp/>*key,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>off);</highlight></codeline>
<codeline lineno="932"><highlight class="normal"></highlight></codeline>
<codeline lineno="933"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="934"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>OPENSSL_NO_FP_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="935"><highlight class="normal"></highlight></codeline>
<codeline lineno="940"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ECParameters_print_fp(FILE<sp/>*fp,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>EC_KEY<sp/>*key);</highlight></codeline>
<codeline lineno="941"><highlight class="normal"></highlight></codeline>
<codeline lineno="948"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EC_KEY_print_fp(FILE<sp/>*fp,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>EC_KEY<sp/>*key,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>off);</highlight></codeline>
<codeline lineno="949"><highlight class="normal"></highlight></codeline>
<codeline lineno="950"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="951"><highlight class="normal"></highlight></codeline>
<codeline lineno="952"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ECParameters_dup(x)<sp/>ASN1_dup_of(EC_KEY,i2d_ECParameters,d2i_ECParameters,x)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="953"><highlight class="normal"></highlight></codeline>
<codeline lineno="954"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="955"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__SUNPRO_C)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="956"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>if<sp/>__SUNPRO_C<sp/>&gt;=<sp/>0x520</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="957"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>pragma<sp/>error_messages<sp/>(default,E_ARRAY_OF_INCOMPLETE_NONAME,E_ARRAY_OF_INCOMPLETE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="958"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="959"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="960"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="961"><highlight class="normal"></highlight></codeline>
<codeline lineno="962"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_PKEY_CTX_set_ec_paramgen_curve_nid(ctx,<sp/>nid)<sp/>\</highlight></codeline>
<codeline lineno="963"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>EVP_PKEY_CTX_ctrl(ctx,<sp/>EVP_PKEY_EC,<sp/>EVP_PKEY_OP_PARAMGEN,<sp/>\</highlight></codeline>
<codeline lineno="964"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EVP_PKEY_CTRL_EC_PARAMGEN_CURVE_NID,<sp/>nid,<sp/>NULL)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="965"><highlight class="normal"></highlight></codeline>
<codeline lineno="966"><highlight class="normal"></highlight></codeline>
<codeline lineno="967"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVP_PKEY_CTRL_EC_PARAMGEN_CURVE_NID<sp/><sp/><sp/><sp/><sp/>(EVP_PKEY_ALG_CTRL<sp/>+<sp/>1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="968"><highlight class="normal"></highlight></codeline>
<codeline lineno="969"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>BEGIN<sp/>ERROR<sp/>CODES<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="970"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>The<sp/>following<sp/>lines<sp/>are<sp/>auto<sp/>generated<sp/>by<sp/>the<sp/>script<sp/>mkerr.pl.<sp/>Any<sp/>changes</highlight></codeline>
<codeline lineno="971"><highlight class="comment"><sp/>*<sp/>made<sp/>after<sp/>this<sp/>point<sp/>may<sp/>be<sp/>overwritten<sp/>when<sp/>the<sp/>script<sp/>is<sp/>next<sp/>run.</highlight></codeline>
<codeline lineno="972"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="973"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ERR_load_EC_strings(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="974"><highlight class="normal"></highlight></codeline>
<codeline lineno="975"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Error<sp/>codes<sp/>for<sp/>the<sp/>EC<sp/>functions.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="976"><highlight class="normal"></highlight></codeline>
<codeline lineno="977"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Function<sp/>codes.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="978"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_F_BN_TO_FELEM<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>224</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="979"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_F_COMPUTE_WNAF<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>143</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="980"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_F_D2I_ECPARAMETERS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>144</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="981"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_F_D2I_ECPKPARAMETERS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>145</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="982"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_F_D2I_ECPRIVATEKEY<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>146</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="983"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_F_DO_EC_KEY_PRINT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>221</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="984"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_F_ECKEY_PARAM2TYPE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>223</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="985"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_F_ECKEY_PARAM_DECODE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>212</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="986"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_F_ECKEY_PRIV_DECODE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>213</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="987"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_F_ECKEY_PRIV_ENCODE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>214</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="988"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_F_ECKEY_PUB_DECODE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>215</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="989"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_F_ECKEY_PUB_ENCODE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>216</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="990"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_F_ECKEY_TYPE2PARAM<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>220</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="991"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_F_ECPARAMETERS_PRINT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>147</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="992"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_F_ECPARAMETERS_PRINT_FP<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>148</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="993"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_F_ECPKPARAMETERS_PRINT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>149</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="994"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_F_ECPKPARAMETERS_PRINT_FP<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>150</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="995"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_F_ECP_NIST_MOD_192<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>203</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="996"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_F_ECP_NIST_MOD_224<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>204</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="997"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_F_ECP_NIST_MOD_256<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>205</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="998"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_F_ECP_NIST_MOD_521<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>206</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="999"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_F_EC_ASN1_GROUP2CURVE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>153</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1000"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_F_EC_ASN1_GROUP2FIELDID<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>154</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1001"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_F_EC_ASN1_GROUP2PARAMETERS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>155</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1002"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_F_EC_ASN1_GROUP2PKPARAMETERS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>156</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1003"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_F_EC_ASN1_PARAMETERS2GROUP<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>157</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1004"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_F_EC_ASN1_PKPARAMETERS2GROUP<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>158</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1005"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_F_EC_EX_DATA_SET_DATA<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>211</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1006"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_F_EC_GF2M_MONTGOMERY_POINT_MULTIPLY<sp/><sp/><sp/><sp/><sp/><sp/><sp/>208</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1007"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_F_EC_GF2M_SIMPLE_GROUP_CHECK_DISCRIMINANT<sp/><sp/><sp/><sp/><sp/>159</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1008"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_F_EC_GF2M_SIMPLE_GROUP_SET_CURVE<sp/><sp/><sp/><sp/><sp/><sp/>195</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1009"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_F_EC_GF2M_SIMPLE_OCT2POINT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>160</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1010"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_F_EC_GF2M_SIMPLE_POINT2OCT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>161</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1011"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_F_EC_GF2M_SIMPLE_POINT_GET_AFFINE_COORDINATES<sp/>162</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1012"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_F_EC_GF2M_SIMPLE_POINT_SET_AFFINE_COORDINATES<sp/>163</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1013"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_F_EC_GF2M_SIMPLE_SET_COMPRESSED_COORDINATES<sp/><sp/><sp/>164</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1014"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_F_EC_GFP_MONT_FIELD_DECODE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>133</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1015"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_F_EC_GFP_MONT_FIELD_ENCODE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>134</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1016"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_F_EC_GFP_MONT_FIELD_MUL<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>131</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1017"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_F_EC_GFP_MONT_FIELD_SET_TO_ONE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>209</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1018"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_F_EC_GFP_MONT_FIELD_SQR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>132</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1019"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_F_EC_GFP_MONT_GROUP_SET_CURVE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>189</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1020"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_F_EC_GFP_MONT_GROUP_SET_CURVE_GFP<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>135</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1021"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_F_EC_GFP_NISTP224_GROUP_SET_CURVE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>225</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1022"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_F_EC_GFP_NISTP224_POINTS_MUL<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>228</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1023"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_F_EC_GFP_NISTP224_POINT_GET_AFFINE_COORDINATES<sp/>226</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1024"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_F_EC_GFP_NISTP256_GROUP_SET_CURVE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>230</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1025"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_F_EC_GFP_NISTP256_POINTS_MUL<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>231</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1026"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_F_EC_GFP_NISTP256_POINT_GET_AFFINE_COORDINATES<sp/>232</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1027"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_F_EC_GFP_NISTP521_GROUP_SET_CURVE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>233</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1028"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_F_EC_GFP_NISTP521_POINTS_MUL<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>234</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1029"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_F_EC_GFP_NISTP521_POINT_GET_AFFINE_COORDINATES<sp/>235</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1030"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_F_EC_GFP_NIST_FIELD_MUL<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>200</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1031"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_F_EC_GFP_NIST_FIELD_SQR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>201</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1032"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_F_EC_GFP_NIST_GROUP_SET_CURVE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>202</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1033"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_F_EC_GFP_SIMPLE_GROUP_CHECK_DISCRIMINANT<sp/><sp/>165</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1034"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_F_EC_GFP_SIMPLE_GROUP_SET_CURVE<sp/><sp/><sp/><sp/><sp/><sp/><sp/>166</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1035"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_F_EC_GFP_SIMPLE_GROUP_SET_CURVE_GFP<sp/><sp/><sp/><sp/><sp/><sp/><sp/>100</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1036"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_F_EC_GFP_SIMPLE_GROUP_SET_GENERATOR<sp/><sp/><sp/><sp/><sp/><sp/><sp/>101</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1037"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_F_EC_GFP_SIMPLE_MAKE_AFFINE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>102</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1038"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_F_EC_GFP_SIMPLE_OCT2POINT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>103</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1039"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_F_EC_GFP_SIMPLE_POINT2OCT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>104</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1040"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_F_EC_GFP_SIMPLE_POINTS_MAKE_AFFINE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>137</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1041"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_F_EC_GFP_SIMPLE_POINT_GET_AFFINE_COORDINATES<sp/><sp/>167</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1042"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_F_EC_GFP_SIMPLE_POINT_GET_AFFINE_COORDINATES_GFP<sp/>105</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1043"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_F_EC_GFP_SIMPLE_POINT_SET_AFFINE_COORDINATES<sp/><sp/>168</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1044"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_F_EC_GFP_SIMPLE_POINT_SET_AFFINE_COORDINATES_GFP<sp/>128</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1045"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_F_EC_GFP_SIMPLE_SET_COMPRESSED_COORDINATES<sp/><sp/><sp/><sp/>169</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1046"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_F_EC_GFP_SIMPLE_SET_COMPRESSED_COORDINATES_GFP<sp/>129</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1047"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_F_EC_GROUP_CHECK<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>170</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1048"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_F_EC_GROUP_CHECK_DISCRIMINANT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>171</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1049"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_F_EC_GROUP_COPY<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>106</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1050"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_F_EC_GROUP_GET0_GENERATOR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>139</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1051"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_F_EC_GROUP_GET_COFACTOR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>140</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1052"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_F_EC_GROUP_GET_CURVE_GF2M<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>172</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1053"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_F_EC_GROUP_GET_CURVE_GFP<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>130</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1054"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_F_EC_GROUP_GET_DEGREE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>173</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1055"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_F_EC_GROUP_GET_ORDER<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>141</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1056"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_F_EC_GROUP_GET_PENTANOMIAL_BASIS<sp/><sp/><sp/><sp/><sp/><sp/>193</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1057"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_F_EC_GROUP_GET_TRINOMIAL_BASIS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>194</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1058"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_F_EC_GROUP_NEW<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>108</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1059"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_F_EC_GROUP_NEW_BY_CURVE_NAME<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>174</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1060"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_F_EC_GROUP_NEW_FROM_DATA<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>175</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1061"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_F_EC_GROUP_PRECOMPUTE_MULT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>142</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1062"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_F_EC_GROUP_SET_CURVE_GF2M<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>176</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1063"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_F_EC_GROUP_SET_CURVE_GFP<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>109</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1064"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_F_EC_GROUP_SET_EXTRA_DATA<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>110</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1065"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_F_EC_GROUP_SET_GENERATOR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>111</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1066"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_F_EC_KEY_CHECK_KEY<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>177</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1067"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_F_EC_KEY_COPY<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>178</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1068"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_F_EC_KEY_GENERATE_KEY<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>179</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1069"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_F_EC_KEY_NEW<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>182</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1070"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_F_EC_KEY_PRINT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>180</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1071"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_F_EC_KEY_PRINT_FP<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>181</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1072"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_F_EC_KEY_SET_PUBLIC_KEY_AFFINE_COORDINATES<sp/><sp/><sp/><sp/>229</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1073"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_F_EC_POINTS_MAKE_AFFINE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>136</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1074"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_F_EC_POINT_ADD<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>112</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1075"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_F_EC_POINT_CMP<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>113</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1076"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_F_EC_POINT_COPY<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>114</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1077"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_F_EC_POINT_DBL<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>115</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1078"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_F_EC_POINT_GET_AFFINE_COORDINATES_GF2M<sp/><sp/><sp/><sp/>183</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1079"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_F_EC_POINT_GET_AFFINE_COORDINATES_GFP<sp/><sp/><sp/><sp/><sp/>116</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1080"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_F_EC_POINT_GET_JPROJECTIVE_COORDINATES_GFP<sp/><sp/><sp/><sp/>117</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1081"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_F_EC_POINT_INVERT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>210</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1082"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_F_EC_POINT_IS_AT_INFINITY<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>118</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1083"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_F_EC_POINT_IS_ON_CURVE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>119</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1084"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_F_EC_POINT_MAKE_AFFINE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>120</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1085"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_F_EC_POINT_MUL<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>184</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1086"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_F_EC_POINT_NEW<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>121</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1087"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_F_EC_POINT_OCT2POINT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>122</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1088"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_F_EC_POINT_POINT2OCT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>123</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1089"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_F_EC_POINT_SET_AFFINE_COORDINATES_GF2M<sp/><sp/><sp/><sp/>185</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1090"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_F_EC_POINT_SET_AFFINE_COORDINATES_GFP<sp/><sp/><sp/><sp/><sp/>124</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1091"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_F_EC_POINT_SET_COMPRESSED_COORDINATES_GF2M<sp/><sp/><sp/><sp/>186</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1092"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_F_EC_POINT_SET_COMPRESSED_COORDINATES_GFP<sp/><sp/><sp/><sp/><sp/>125</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1093"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_F_EC_POINT_SET_JPROJECTIVE_COORDINATES_GFP<sp/><sp/><sp/><sp/>126</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1094"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_F_EC_POINT_SET_TO_INFINITY<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>127</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1095"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_F_EC_PRE_COMP_DUP<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>207</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1096"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_F_EC_PRE_COMP_NEW<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>196</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1097"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_F_EC_WNAF_MUL<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>187</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1098"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_F_EC_WNAF_PRECOMPUTE_MULT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>188</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1099"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_F_I2D_ECPARAMETERS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>190</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1100"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_F_I2D_ECPKPARAMETERS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>191</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1101"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_F_I2D_ECPRIVATEKEY<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>192</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1102"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_F_I2O_ECPUBLICKEY<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>151</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1103"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_F_NISTP224_PRE_COMP_NEW<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>227</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1104"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_F_NISTP256_PRE_COMP_NEW<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>236</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1105"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_F_NISTP521_PRE_COMP_NEW<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>237</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1106"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_F_O2I_ECPUBLICKEY<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>152</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1107"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_F_OLD_EC_PRIV_DECODE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>222</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1108"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_F_PKEY_EC_CTRL<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>197</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1109"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_F_PKEY_EC_CTRL_STR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>198</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1110"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_F_PKEY_EC_DERIVE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>217</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1111"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_F_PKEY_EC_KEYGEN<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>199</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1112"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_F_PKEY_EC_PARAMGEN<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>219</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1113"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_F_PKEY_EC_SIGN<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>218</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1114"><highlight class="normal"></highlight></codeline>
<codeline lineno="1115"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Reason<sp/>codes.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1116"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_R_ASN1_ERROR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>115</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1117"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_R_ASN1_UNKNOWN_FIELD<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>116</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1118"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_R_BIGNUM_OUT_OF_RANGE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>144</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1119"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_R_BUFFER_TOO_SMALL<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>100</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1120"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_R_COORDINATES_OUT_OF_RANGE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>146</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1121"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_R_D2I_ECPKPARAMETERS_FAILURE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>117</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1122"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_R_DECODE_ERROR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>142</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1123"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_R_DISCRIMINANT_IS_ZERO<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>118</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1124"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_R_EC_GROUP_NEW_BY_NAME_FAILURE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>119</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1125"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_R_FIELD_TOO_LARGE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>143</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1126"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_R_GF2M_NOT_SUPPORTED<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>147</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1127"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_R_GROUP2PKPARAMETERS_FAILURE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>120</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1128"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_R_I2D_ECPKPARAMETERS_FAILURE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>121</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1129"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_R_INCOMPATIBLE_OBJECTS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>101</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1130"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_R_INVALID_ARGUMENT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>112</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1131"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_R_INVALID_COMPRESSED_POINT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>110</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1132"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_R_INVALID_COMPRESSION_BIT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>109</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1133"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_R_INVALID_CURVE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>141</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1134"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_R_INVALID_DIGEST_TYPE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>138</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1135"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_R_INVALID_ENCODING<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>102</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1136"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_R_INVALID_FIELD<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>103</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1137"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_R_INVALID_FORM<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>104</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1138"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_R_INVALID_GROUP_ORDER<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>122</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1139"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_R_INVALID_PENTANOMIAL_BASIS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>132</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1140"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_R_INVALID_PRIVATE_KEY<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>123</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1141"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_R_INVALID_TRINOMIAL_BASIS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>137</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1142"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_R_KEYS_NOT_SET<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>140</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1143"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_R_MISSING_PARAMETERS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>124</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1144"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_R_MISSING_PRIVATE_KEY<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>125</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1145"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_R_NOT_A_NIST_PRIME<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>135</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1146"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_R_NOT_A_SUPPORTED_NIST_PRIME<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>136</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1147"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_R_NOT_IMPLEMENTED<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>126</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1148"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_R_NOT_INITIALIZED<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>111</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1149"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_R_NO_FIELD_MOD<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>133</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1150"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_R_NO_PARAMETERS_SET<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>139</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1151"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_R_PASSED_NULL_PARAMETER<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>134</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1152"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_R_PKPARAMETERS2GROUP_FAILURE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>127</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1153"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_R_POINT_AT_INFINITY<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>106</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1154"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_R_POINT_IS_NOT_ON_CURVE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>107</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1155"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_R_SLOT_FULL<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>108</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1156"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_R_UNDEFINED_GENERATOR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>113</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1157"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_R_UNDEFINED_ORDER<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>128</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1158"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_R_UNKNOWN_GROUP<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>129</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1159"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_R_UNKNOWN_ORDER<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>114</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1160"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_R_UNSUPPORTED_FIELD<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>131</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1161"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_R_WRONG_CURVE_PARAMETERS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>145</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1162"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EC_R_WRONG_ORDER<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>130</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1163"><highlight class="normal"></highlight></codeline>
<codeline lineno="1164"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/><sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1165"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1167"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="thirdparty/openssl/include/openssl/ec.h"/>
  </compounddef>
</doxygen>
