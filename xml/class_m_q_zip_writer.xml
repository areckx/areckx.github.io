<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="class_m_q_zip_writer" kind="class" language="C++" prot="public">
    <compoundname>MQZipWriter</compoundname>
      <sectiondef kind="public-type">
      <memberdef kind="enum" id="class_m_q_zip_writer_1aca8ef7bd015c0c8d04bba8cd75351ee1" prot="public" static="no">
        <name>Status</name>
        <enumvalue id="class_m_q_zip_writer_1aca8ef7bd015c0c8d04bba8cd75351ee1a5b33fbf9f1d460e832eaa92b5ccd3c71" prot="public">
          <name>NoError</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_m_q_zip_writer_1aca8ef7bd015c0c8d04bba8cd75351ee1a13f6f14df35c3454b6f0d7c9832761f9" prot="public">
          <name>FileWriteError</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_m_q_zip_writer_1aca8ef7bd015c0c8d04bba8cd75351ee1afc7c54f603696824a9744c1b3181da11" prot="public">
          <name>FileOpenError</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_m_q_zip_writer_1aca8ef7bd015c0c8d04bba8cd75351ee1af469d2deff009bf3284015bd1038f0b3" prot="public">
          <name>FilePermissionsError</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_m_q_zip_writer_1aca8ef7bd015c0c8d04bba8cd75351ee1a43c4a7c560391adeb323b5ab54b31241" prot="public">
          <name>FileError</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/qzip/qzipwriter_p.h" line="78" column="1" bodyfile="thirdparty/qzip/qzipwriter_p.h" bodystart="78" bodyend="84"/>
      </memberdef>
      <memberdef kind="enum" id="class_m_q_zip_writer_1a62cb4f05e727c8bbfd1e59c127377675" prot="public" static="no">
        <name>CompressionPolicy</name>
        <enumvalue id="class_m_q_zip_writer_1a62cb4f05e727c8bbfd1e59c127377675a2a21f14717d58f9c93b8efde05e1d378" prot="public">
          <name>AlwaysCompress</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_m_q_zip_writer_1a62cb4f05e727c8bbfd1e59c127377675a03bf9b695d2d547f07c442211b367425" prot="public">
          <name>NeverCompress</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_m_q_zip_writer_1a62cb4f05e727c8bbfd1e59c127377675a3997d9ff50aee851c6a3e58b4f0e7ef5" prot="public">
          <name>AutoCompress</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/qzip/qzipwriter_p.h" line="88" column="1" bodyfile="thirdparty/qzip/qzipwriter_p.h" bodystart="88" bodyend="92"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_m_q_zip_writer_1a6a1168c92b66e084414af16b0405d67c" prot="private" static="no" mutable="no">
        <type><ref refid="class_m_q_zip_writer_private" kindref="compound">MQZipWriterPrivate</ref> *</type>
        <definition>MQZipWriterPrivate* MQZipWriter::d</definition>
        <argsstring></argsstring>
        <name>d</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/qzip/qzipwriter_p.h" line="110" column="1" bodyfile="thirdparty/qzip/qzipwriter_p.h" bodystart="110" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_m_q_zip_writer_1af533fca464fe2bac29083a27b2356f51" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>MQZipWriter::MQZipWriter</definition>
        <argsstring>(const QString &amp;fileName, QIODevice::OpenMode mode=(QIODevice::WriteOnly|QIODevice::Truncate))</argsstring>
        <name>MQZipWriter</name>
        <param>
          <type>const QString &amp;</type>
          <declname>fileName</declname>
        </param>
        <param>
          <type>QIODevice::OpenMode</type>
          <declname>mode</declname>
          <defval>(QIODevice::WriteOnly|QIODevice::Truncate)</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a new zip archive that operates on the <emphasis>archive</emphasis> filename. The file will be opened with the <emphasis>mode</emphasis>. <simplesect kind="see"><para>isValid() </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/qzip/qzipwriter_p.h" line="68" column="1" bodyfile="thirdparty/qzip/qzip.cpp" bodystart="1021" bodyend="1042"/>
      </memberdef>
      <memberdef kind="function" id="class_m_q_zip_writer_1a47881309d8438d2face8d740e17f0b4b" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>MQZipWriter::MQZipWriter</definition>
        <argsstring>(QIODevice *device)</argsstring>
        <name>MQZipWriter</name>
        <param>
          <type>QIODevice *</type>
          <declname>device</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a new zip archive that operates on the archive found in <emphasis>device</emphasis>. You have to open the device previous to calling the constructor and only a device that is readable will be scanned for zip filecontent. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/qzip/qzipwriter_p.h" line="70" column="1" bodyfile="thirdparty/qzip/qzip.cpp" bodystart="1049" bodyend="1053"/>
      </memberdef>
      <memberdef kind="function" id="class_m_q_zip_writer_1a2243a2d1603ad639f9747e060986f57f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>MQZipWriter::~MQZipWriter</definition>
        <argsstring>()</argsstring>
        <name>~MQZipWriter</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/qzip/qzipwriter_p.h" line="71" column="1" bodyfile="thirdparty/qzip/qzip.cpp" bodystart="1055" bodyend="1059"/>
      </memberdef>
      <memberdef kind="function" id="class_m_q_zip_writer_1ad2c9fc653181defe0f54bebd8e0ac21d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QIODevice *</type>
        <definition>QIODevice * MQZipWriter::device</definition>
        <argsstring>() const</argsstring>
        <name>device</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns device used for writing zip archive. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/qzip/qzipwriter_p.h" line="73" column="1" bodyfile="thirdparty/qzip/qzip.cpp" bodystart="1064" bodyend="1067"/>
      </memberdef>
      <memberdef kind="function" id="class_m_q_zip_writer_1a96cf59b1f12b11fcee87f1e4e6c647a9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool MQZipWriter::isWritable</definition>
        <argsstring>() const</argsstring>
        <name>isWritable</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns true if the user can write to the archive; otherwise returns false. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/qzip/qzipwriter_p.h" line="75" column="1" bodyfile="thirdparty/qzip/qzip.cpp" bodystart="1072" bodyend="1075"/>
      </memberdef>
      <memberdef kind="function" id="class_m_q_zip_writer_1ac3ed7d79e04aca62ecdb0f7222422ec2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool MQZipWriter::exists</definition>
        <argsstring>() const</argsstring>
        <name>exists</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns true if the file exists; otherwise returns false. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/qzip/qzipwriter_p.h" line="76" column="1" bodyfile="thirdparty/qzip/qzip.cpp" bodystart="1080" bodyend="1086"/>
      </memberdef>
      <memberdef kind="function" id="class_m_q_zip_writer_1a89cf6db4ed393de1791468e6aad7a99e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Status</type>
        <definition>MQZipWriter::Status MQZipWriter::status</definition>
        <argsstring>() const</argsstring>
        <name>status</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a status code indicating the first error that was met by <ref refid="class_q_zip_writer" kindref="compound">QZipWriter</ref>, or QZipWriter::NoError if no error occurred. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/qzip/qzipwriter_p.h" line="86" column="1" bodyfile="thirdparty/qzip/qzip.cpp" bodystart="1104" bodyend="1107"/>
      </memberdef>
      <memberdef kind="function" id="class_m_q_zip_writer_1ab4f5f12ae8df67674ec0f3d30d97313f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MQZipWriter::setCompressionPolicy</definition>
        <argsstring>(CompressionPolicy policy)</argsstring>
        <name>setCompressionPolicy</name>
        <param>
          <type>CompressionPolicy</type>
          <declname>policy</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the policy for compressing newly added files to the new <emphasis>policy</emphasis>.</para><para><simplesect kind="note"><para>the default policy is AlwaysCompress</para></simplesect>
<simplesect kind="see"><para><ref refid="class_m_q_zip_writer_1aa43250ac355d31da13d5eaa018d50c15" kindref="member">compressionPolicy()</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="class_m_q_zip_writer_1af6d89acc4efc589f0c90c985106e2b00" kindref="member">addFile()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/qzip/qzipwriter_p.h" line="94" column="1" bodyfile="thirdparty/qzip/qzip.cpp" bodystart="1125" bodyend="1128"/>
      </memberdef>
      <memberdef kind="function" id="class_m_q_zip_writer_1aa43250ac355d31da13d5eaa018d50c15" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>CompressionPolicy</type>
        <definition>MQZipWriter::CompressionPolicy MQZipWriter::compressionPolicy</definition>
        <argsstring>() const</argsstring>
        <name>compressionPolicy</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the currently set compression policy. <simplesect kind="see"><para><ref refid="class_m_q_zip_writer_1ab4f5f12ae8df67674ec0f3d30d97313f" kindref="member">setCompressionPolicy()</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="class_m_q_zip_writer_1af6d89acc4efc589f0c90c985106e2b00" kindref="member">addFile()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/qzip/qzipwriter_p.h" line="95" column="1" bodyfile="thirdparty/qzip/qzip.cpp" bodystart="1135" bodyend="1138"/>
      </memberdef>
      <memberdef kind="function" id="class_m_q_zip_writer_1af965ba3d12531a91ca0c83e25423a313" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MQZipWriter::setCreationPermissions</definition>
        <argsstring>(QFile::Permissions permissions)</argsstring>
        <name>setCreationPermissions</name>
        <param>
          <type>QFile::Permissions</type>
          <declname>permissions</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the permissions that will be used for newly added files.</para><para><simplesect kind="note"><para>the default permissions are QFile::ReadOwner | QFile::WriteOwner.</para></simplesect>
<simplesect kind="see"><para><ref refid="class_m_q_zip_writer_1a7ee2e99567e134f338093929469ab818" kindref="member">creationPermissions()</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="class_m_q_zip_writer_1af6d89acc4efc589f0c90c985106e2b00" kindref="member">addFile()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/qzip/qzipwriter_p.h" line="97" column="1" bodyfile="thirdparty/qzip/qzip.cpp" bodystart="1148" bodyend="1151"/>
      </memberdef>
      <memberdef kind="function" id="class_m_q_zip_writer_1a7ee2e99567e134f338093929469ab818" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QFile::Permissions</type>
        <definition>QFile::Permissions MQZipWriter::creationPermissions</definition>
        <argsstring>() const</argsstring>
        <name>creationPermissions</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the currently set creation permissions.</para><para><simplesect kind="see"><para><ref refid="class_m_q_zip_writer_1af965ba3d12531a91ca0c83e25423a313" kindref="member">setCreationPermissions()</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="class_m_q_zip_writer_1af6d89acc4efc589f0c90c985106e2b00" kindref="member">addFile()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/qzip/qzipwriter_p.h" line="98" column="1" bodyfile="thirdparty/qzip/qzip.cpp" bodystart="1159" bodyend="1162"/>
      </memberdef>
      <memberdef kind="function" id="class_m_q_zip_writer_1af6d89acc4efc589f0c90c985106e2b00" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MQZipWriter::addFile</definition>
        <argsstring>(const QString &amp;fileName, const QByteArray &amp;data)</argsstring>
        <name>addFile</name>
        <param>
          <type>const QString &amp;</type>
          <declname>fileName</declname>
        </param>
        <param>
          <type>const QByteArray &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add a file to the archive with <emphasis>data</emphasis> as the file contents. The file will be stored in the archive using the <emphasis>fileName</emphasis> which includes the full path in the archive.</para><para>The new file will get the file permissions based on the current creationPermissions and it will be compressed using the zip compression based on the current compression policy.</para><para><simplesect kind="see"><para><ref refid="class_m_q_zip_writer_1af965ba3d12531a91ca0c83e25423a313" kindref="member">setCreationPermissions()</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="class_m_q_zip_writer_1ab4f5f12ae8df67674ec0f3d30d97313f" kindref="member">setCompressionPolicy()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/qzip/qzipwriter_p.h" line="100" column="1" bodyfile="thirdparty/qzip/qzip.cpp" bodystart="1176" bodyend="1179"/>
      </memberdef>
      <memberdef kind="function" id="class_m_q_zip_writer_1a4233d3f0452f5c416c8f314e74308344" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MQZipWriter::addFile</definition>
        <argsstring>(const QString &amp;fileName, QIODevice *device)</argsstring>
        <name>addFile</name>
        <param>
          <type>const QString &amp;</type>
          <declname>fileName</declname>
        </param>
        <param>
          <type>QIODevice *</type>
          <declname>device</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add a file to the archive with <emphasis>device</emphasis> as the source of the contents. The contents returned from QIODevice::readAll() will be used as the filedata. The file will be stored in the archive using the <emphasis>fileName</emphasis> which includes the full path in the archive. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/qzip/qzipwriter_p.h" line="102" column="1" bodyfile="thirdparty/qzip/qzip.cpp" bodystart="1188" bodyend="1203"/>
      </memberdef>
      <memberdef kind="function" id="class_m_q_zip_writer_1a08703913c70762b5a649bad3be9e1c6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MQZipWriter::addDirectory</definition>
        <argsstring>(const QString &amp;dirName)</argsstring>
        <name>addDirectory</name>
        <param>
          <type>const QString &amp;</type>
          <declname>dirName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a new directory in the archive with the specified <emphasis>dirName</emphasis> and the <emphasis>permissions</emphasis>; </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/qzip/qzipwriter_p.h" line="104" column="1" bodyfile="thirdparty/qzip/qzip.cpp" bodystart="1209" bodyend="1216"/>
      </memberdef>
      <memberdef kind="function" id="class_m_q_zip_writer_1a23bd7609856cb06487ab1c4bc0e2e2be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MQZipWriter::addSymLink</definition>
        <argsstring>(const QString &amp;fileName, const QString &amp;destination)</argsstring>
        <name>addSymLink</name>
        <param>
          <type>const QString &amp;</type>
          <declname>fileName</declname>
        </param>
        <param>
          <type>const QString &amp;</type>
          <declname>destination</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a new symbolic link in the archive with the specified <emphasis>dirName</emphasis> and the <emphasis>permissions</emphasis>; A symbolic link contains the destination (relative) path and name. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/qzip/qzipwriter_p.h" line="106" column="1" bodyfile="thirdparty/qzip/qzip.cpp" bodystart="1223" bodyend="1226"/>
      </memberdef>
      <memberdef kind="function" id="class_m_q_zip_writer_1a4553036171792fd6f254b28cc68818f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MQZipWriter::close</definition>
        <argsstring>()</argsstring>
        <name>close</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Closes the zip file. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/qzip/qzipwriter_p.h" line="108" column="1" bodyfile="thirdparty/qzip/qzip.cpp" bodystart="1231" bodyend="1264"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="thirdparty/qzip/qzipwriter_p.h" line="66" column="1" bodyfile="thirdparty/qzip/qzipwriter_p.h" bodystart="65" bodyend="112"/>
    <listofallmembers>
      <member refid="class_m_q_zip_writer_1a08703913c70762b5a649bad3be9e1c6c" prot="public" virt="non-virtual"><scope>MQZipWriter</scope><name>addDirectory</name></member>
      <member refid="class_m_q_zip_writer_1af6d89acc4efc589f0c90c985106e2b00" prot="public" virt="non-virtual"><scope>MQZipWriter</scope><name>addFile</name></member>
      <member refid="class_m_q_zip_writer_1a4233d3f0452f5c416c8f314e74308344" prot="public" virt="non-virtual"><scope>MQZipWriter</scope><name>addFile</name></member>
      <member refid="class_m_q_zip_writer_1a23bd7609856cb06487ab1c4bc0e2e2be" prot="public" virt="non-virtual"><scope>MQZipWriter</scope><name>addSymLink</name></member>
      <member refid="class_m_q_zip_writer_1a62cb4f05e727c8bbfd1e59c127377675a2a21f14717d58f9c93b8efde05e1d378" prot="public" virt="non-virtual"><scope>MQZipWriter</scope><name>AlwaysCompress</name></member>
      <member refid="class_m_q_zip_writer_1a62cb4f05e727c8bbfd1e59c127377675a3997d9ff50aee851c6a3e58b4f0e7ef5" prot="public" virt="non-virtual"><scope>MQZipWriter</scope><name>AutoCompress</name></member>
      <member refid="class_m_q_zip_writer_1a4553036171792fd6f254b28cc68818f6" prot="public" virt="non-virtual"><scope>MQZipWriter</scope><name>close</name></member>
      <member refid="class_m_q_zip_writer_1aa43250ac355d31da13d5eaa018d50c15" prot="public" virt="non-virtual"><scope>MQZipWriter</scope><name>compressionPolicy</name></member>
      <member refid="class_m_q_zip_writer_1a62cb4f05e727c8bbfd1e59c127377675" prot="public" virt="non-virtual"><scope>MQZipWriter</scope><name>CompressionPolicy</name></member>
      <member refid="class_m_q_zip_writer_1a7ee2e99567e134f338093929469ab818" prot="public" virt="non-virtual"><scope>MQZipWriter</scope><name>creationPermissions</name></member>
      <member refid="class_m_q_zip_writer_1a6a1168c92b66e084414af16b0405d67c" prot="private" virt="non-virtual"><scope>MQZipWriter</scope><name>d</name></member>
      <member refid="class_m_q_zip_writer_1ad2c9fc653181defe0f54bebd8e0ac21d" prot="public" virt="non-virtual"><scope>MQZipWriter</scope><name>device</name></member>
      <member refid="class_m_q_zip_writer_1ac3ed7d79e04aca62ecdb0f7222422ec2" prot="public" virt="non-virtual"><scope>MQZipWriter</scope><name>exists</name></member>
      <member refid="class_m_q_zip_writer_1aca8ef7bd015c0c8d04bba8cd75351ee1a43c4a7c560391adeb323b5ab54b31241" prot="public" virt="non-virtual"><scope>MQZipWriter</scope><name>FileError</name></member>
      <member refid="class_m_q_zip_writer_1aca8ef7bd015c0c8d04bba8cd75351ee1afc7c54f603696824a9744c1b3181da11" prot="public" virt="non-virtual"><scope>MQZipWriter</scope><name>FileOpenError</name></member>
      <member refid="class_m_q_zip_writer_1aca8ef7bd015c0c8d04bba8cd75351ee1af469d2deff009bf3284015bd1038f0b3" prot="public" virt="non-virtual"><scope>MQZipWriter</scope><name>FilePermissionsError</name></member>
      <member refid="class_m_q_zip_writer_1aca8ef7bd015c0c8d04bba8cd75351ee1a13f6f14df35c3454b6f0d7c9832761f9" prot="public" virt="non-virtual"><scope>MQZipWriter</scope><name>FileWriteError</name></member>
      <member refid="class_m_q_zip_writer_1a96cf59b1f12b11fcee87f1e4e6c647a9" prot="public" virt="non-virtual"><scope>MQZipWriter</scope><name>isWritable</name></member>
      <member refid="class_m_q_zip_writer_1af533fca464fe2bac29083a27b2356f51" prot="public" virt="non-virtual"><scope>MQZipWriter</scope><name>MQZipWriter</name></member>
      <member refid="class_m_q_zip_writer_1a47881309d8438d2face8d740e17f0b4b" prot="public" virt="non-virtual"><scope>MQZipWriter</scope><name>MQZipWriter</name></member>
      <member refid="class_m_q_zip_writer_1a62cb4f05e727c8bbfd1e59c127377675a03bf9b695d2d547f07c442211b367425" prot="public" virt="non-virtual"><scope>MQZipWriter</scope><name>NeverCompress</name></member>
      <member refid="class_m_q_zip_writer_1aca8ef7bd015c0c8d04bba8cd75351ee1a5b33fbf9f1d460e832eaa92b5ccd3c71" prot="public" virt="non-virtual"><scope>MQZipWriter</scope><name>NoError</name></member>
      <member refid="class_m_q_zip_writer_1ab4f5f12ae8df67674ec0f3d30d97313f" prot="public" virt="non-virtual"><scope>MQZipWriter</scope><name>setCompressionPolicy</name></member>
      <member refid="class_m_q_zip_writer_1af965ba3d12531a91ca0c83e25423a313" prot="public" virt="non-virtual"><scope>MQZipWriter</scope><name>setCreationPermissions</name></member>
      <member refid="class_m_q_zip_writer_1a89cf6db4ed393de1791468e6aad7a99e" prot="public" virt="non-virtual"><scope>MQZipWriter</scope><name>status</name></member>
      <member refid="class_m_q_zip_writer_1aca8ef7bd015c0c8d04bba8cd75351ee1" prot="public" virt="non-virtual"><scope>MQZipWriter</scope><name>Status</name></member>
      <member refid="class_m_q_zip_writer_1a2243a2d1603ad639f9747e060986f57f" prot="public" virt="non-virtual"><scope>MQZipWriter</scope><name>~MQZipWriter</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
