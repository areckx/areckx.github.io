<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="crypto_8h" kind="file" language="C++">
    <compoundname>crypto.h</compoundname>
    <includes local="no">stdlib.h</includes>
    <includes refid="e__os2_8h" local="no">openssl/e_os2.h</includes>
    <includes local="no">stdio.h</includes>
    <includes refid="stack_8h" local="no">openssl/stack.h</includes>
    <includes refid="safestack_8h" local="no">openssl/safestack.h</includes>
    <includes refid="opensslv_8h" local="no">openssl/opensslv.h</includes>
    <includes refid="ossl__typ_8h" local="no">openssl/ossl_typ.h</includes>
    <includes refid="symhacks_8h" local="no">openssl/symhacks.h</includes>
    <includedby refid="bio_8h" local="no">thirdparty/openssl/include/openssl/bio.h</includedby>
    <includedby refid="bn_8h" local="no">thirdparty/openssl/include/openssl/bn.h</includedby>
    <includedby refid="comp_8h" local="no">thirdparty/openssl/include/openssl/comp.h</includedby>
    <includedby refid="dsa_8h" local="no">thirdparty/openssl/include/openssl/dsa.h</includedby>
    <includedby refid="dso_8h" local="no">thirdparty/openssl/include/openssl/dso.h</includedby>
    <includedby refid="rsa_8h" local="no">thirdparty/openssl/include/openssl/rsa.h</includedby>
    <includedby refid="seed_8h" local="no">thirdparty/openssl/include/openssl/seed.h</includedby>
    <includedby refid="srp_8h" local="no">thirdparty/openssl/include/openssl/srp.h</includedby>
    <includedby refid="ssl_8h" local="no">thirdparty/openssl/include/openssl/ssl.h</includedby>
    <includedby refid="ui_8h" local="no">thirdparty/openssl/include/openssl/ui.h</includedby>
    <includedby refid="x509__vfy_8h" local="no">thirdparty/openssl/include/openssl/x509_vfy.h</includedby>
    <incdepgraph>
      <node id="82456">
        <label>openssl/opensslv.h</label>
        <link refid="opensslv_8h_source"/>
      </node>
      <node id="82450">
        <label>stdlib.h</label>
      </node>
      <node id="82454">
        <label>openssl/stack.h</label>
        <link refid="stack_8h_source"/>
      </node>
      <node id="82458">
        <label>openssl/symhacks.h</label>
        <link refid="symhacks_8h_source"/>
        <childnode refid="82451" relation="include">
        </childnode>
      </node>
      <node id="82455">
        <label>openssl/safestack.h</label>
        <link refid="safestack_8h_source"/>
        <childnode refid="82454" relation="include">
        </childnode>
      </node>
      <node id="82452">
        <label>openssl/opensslconf.h</label>
        <link refid="opensslconf_8h_source"/>
      </node>
      <node id="82451">
        <label>openssl/e_os2.h</label>
        <link refid="e__os2_8h_source"/>
        <childnode refid="82452" relation="include">
        </childnode>
      </node>
      <node id="82453">
        <label>stdio.h</label>
      </node>
      <node id="82457">
        <label>openssl/ossl_typ.h</label>
        <link refid="ossl__typ_8h_source"/>
        <childnode refid="82451" relation="include">
        </childnode>
      </node>
      <node id="82449">
        <label>thirdparty/openssl/include/openssl/crypto.h</label>
        <link refid="crypto_8h"/>
        <childnode refid="82450" relation="include">
        </childnode>
        <childnode refid="82451" relation="include">
        </childnode>
        <childnode refid="82453" relation="include">
        </childnode>
        <childnode refid="82454" relation="include">
        </childnode>
        <childnode refid="82455" relation="include">
        </childnode>
        <childnode refid="82456" relation="include">
        </childnode>
        <childnode refid="82457" relation="include">
        </childnode>
        <childnode refid="82458" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="82466">
        <label>thirdparty/openssl/include/openssl/engine.h</label>
        <link refid="engine_8h_source"/>
      </node>
      <node id="82497">
        <label>thirdparty/openssl/include/openssl/dso.h</label>
        <link refid="dso_8h_source"/>
      </node>
      <node id="82477">
        <label>thirdparty/openssl/include/openssl/ts.h</label>
        <link refid="ts_8h_source"/>
      </node>
      <node id="82484">
        <label>thirdparty/openssl/include/openssl/hmac.h</label>
        <link refid="hmac_8h_source"/>
        <childnode refid="82474" relation="include">
        </childnode>
      </node>
      <node id="82464">
        <label>thirdparty/openssl/include/openssl/ec.h</label>
        <link refid="ec_8h_source"/>
        <childnode refid="82465" relation="include">
        </childnode>
        <childnode refid="82480" relation="include">
        </childnode>
        <childnode refid="82467" relation="include">
        </childnode>
      </node>
      <node id="82469">
        <label>thirdparty/poppler/poppler/SignatureHandler.h</label>
        <link refid="_signature_handler_8h_source"/>
        <childnode refid="82470" relation="include">
        </childnode>
      </node>
      <node id="82460">
        <label>thirdparty/openssl/include/openssl/bio.h</label>
        <link refid="bio_8h_source"/>
        <childnode refid="82461" relation="include">
        </childnode>
        <childnode refid="82487" relation="include">
        </childnode>
        <childnode refid="82489" relation="include">
        </childnode>
        <childnode refid="82490" relation="include">
        </childnode>
        <childnode refid="82491" relation="include">
        </childnode>
        <childnode refid="82482" relation="include">
        </childnode>
        <childnode refid="82492" relation="include">
        </childnode>
        <childnode refid="82481" relation="include">
        </childnode>
        <childnode refid="82472" relation="include">
        </childnode>
        <childnode refid="82476" relation="include">
        </childnode>
        <childnode refid="82485" relation="include">
        </childnode>
        <childnode refid="82486" relation="include">
        </childnode>
        <childnode refid="82474" relation="include">
        </childnode>
        <childnode refid="82477" relation="include">
        </childnode>
        <childnode refid="82493" relation="include">
        </childnode>
        <childnode refid="82467" relation="include">
        </childnode>
        <childnode refid="82478" relation="include">
        </childnode>
        <childnode refid="82479" relation="include">
        </childnode>
      </node>
      <node id="82502">
        <label>thirdparty/openssl/include/openssl/des.h</label>
        <link refid="des_8h_source"/>
      </node>
      <node id="82501">
        <label>thirdparty/openssl/include/openssl/des_old.h</label>
        <link refid="des__old_8h_source"/>
        <childnode refid="82502" relation="include">
        </childnode>
      </node>
      <node id="82486">
        <label>thirdparty/openssl/include/openssl/rsa.h</label>
        <link refid="rsa_8h_source"/>
        <childnode refid="82466" relation="include">
        </childnode>
        <childnode refid="82477" relation="include">
        </childnode>
        <childnode refid="82467" relation="include">
        </childnode>
      </node>
      <node id="82496">
        <label>thirdparty/openssl/include/openssl/comp.h</label>
        <link refid="comp_8h_source"/>
        <childnode refid="82474" relation="include">
        </childnode>
        <childnode refid="82475" relation="include">
        </childnode>
      </node>
      <node id="82483">
        <label>thirdparty/openssl/include/openssl/cmac.h</label>
        <link refid="cmac_8h_source"/>
      </node>
      <node id="82498">
        <label>thirdparty/openssl/include/openssl/seed.h</label>
        <link refid="seed_8h_source"/>
      </node>
      <node id="82473">
        <label>thirdparty/kQOAuth/kqoauthutils.cpp</label>
        <link refid="kqoauthutils_8cpp_source"/>
      </node>
      <node id="82493">
        <label>thirdparty/openssl/include/openssl/txt_db.h</label>
        <link refid="txt__db_8h_source"/>
      </node>
      <node id="82485">
        <label>thirdparty/openssl/include/openssl/pkcs7.h</label>
        <link refid="pkcs7_8h_source"/>
        <childnode refid="82467" relation="include">
        </childnode>
      </node>
      <node id="82462">
        <label>thirdparty/openssl/include/openssl/asn1_mac.h</label>
        <link refid="asn1__mac_8h_source"/>
      </node>
      <node id="82475">
        <label>thirdparty/openssl/include/openssl/ssl3.h</label>
        <link refid="ssl3_8h_source"/>
        <childnode refid="82474" relation="include">
        </childnode>
      </node>
      <node id="82494">
        <label>thirdparty/openssl/include/openssl/bn.h</label>
        <link refid="bn_8h_source"/>
        <childnode refid="82461" relation="include">
        </childnode>
        <childnode refid="82489" relation="include">
        </childnode>
        <childnode refid="82490" relation="include">
        </childnode>
        <childnode refid="82464" relation="include">
        </childnode>
        <childnode refid="82465" relation="include">
        </childnode>
        <childnode refid="82480" relation="include">
        </childnode>
        <childnode refid="82466" relation="include">
        </childnode>
        <childnode refid="82486" relation="include">
        </childnode>
        <childnode refid="82495" relation="include">
        </childnode>
      </node>
      <node id="82467">
        <label>thirdparty/openssl/include/openssl/x509.h</label>
        <link refid="x509_8h_source"/>
        <childnode refid="82468" relation="include">
        </childnode>
        <childnode refid="82466" relation="include">
        </childnode>
        <childnode refid="82471" relation="include">
        </childnode>
        <childnode refid="82472" relation="include">
        </childnode>
        <childnode refid="82476" relation="include">
        </childnode>
        <childnode refid="82474" relation="include">
        </childnode>
        <childnode refid="82477" relation="include">
        </childnode>
        <childnode refid="82478" relation="include">
        </childnode>
        <childnode refid="82479" relation="include">
        </childnode>
      </node>
      <node id="82490">
        <label>thirdparty/openssl/include/openssl/dsa.h</label>
        <link refid="dsa_8h_source"/>
        <childnode refid="82466" relation="include">
        </childnode>
        <childnode refid="82477" relation="include">
        </childnode>
        <childnode refid="82467" relation="include">
        </childnode>
      </node>
      <node id="82478">
        <label>thirdparty/openssl/include/openssl/x509_vfy.h</label>
        <link refid="x509__vfy_8h_source"/>
        <childnode refid="82467" relation="include">
        </childnode>
      </node>
      <node id="82499">
        <label>thirdparty/openssl/include/openssl/ui.h</label>
        <link refid="ui_8h_source"/>
        <childnode refid="82466" relation="include">
        </childnode>
        <childnode refid="82500" relation="include">
        </childnode>
      </node>
      <node id="82461">
        <label>thirdparty/openssl/include/openssl/asn1.h</label>
        <link refid="asn1_8h_source"/>
        <childnode refid="82462" relation="include">
        </childnode>
        <childnode refid="82463" relation="include">
        </childnode>
        <childnode refid="82464" relation="include">
        </childnode>
        <childnode refid="82481" relation="include">
        </childnode>
        <childnode refid="82485" relation="include">
        </childnode>
        <childnode refid="82486" relation="include">
        </childnode>
        <childnode refid="82477" relation="include">
        </childnode>
        <childnode refid="82467" relation="include">
        </childnode>
      </node>
      <node id="82488">
        <label>thirdparty/openssl/include/openssl/conf_api.h</label>
        <link refid="conf__api_8h_source"/>
      </node>
      <node id="82482">
        <label>thirdparty/openssl/include/openssl/evp.h</label>
        <link refid="evp_8h_source"/>
        <childnode refid="82473" relation="include">
        </childnode>
        <childnode refid="82483" relation="include">
        </childnode>
        <childnode refid="82484" relation="include">
        </childnode>
        <childnode refid="82472" relation="include">
        </childnode>
        <childnode refid="82475" relation="include">
        </childnode>
        <childnode refid="82477" relation="include">
        </childnode>
        <childnode refid="82467" relation="include">
        </childnode>
      </node>
      <node id="82480">
        <label>thirdparty/openssl/include/openssl/ecdsa.h</label>
        <link refid="ecdsa_8h_source"/>
        <childnode refid="82466" relation="include">
        </childnode>
        <childnode refid="82467" relation="include">
        </childnode>
      </node>
      <node id="82487">
        <label>thirdparty/openssl/include/openssl/conf.h</label>
        <link refid="conf_8h_source"/>
        <childnode refid="82488" relation="include">
        </childnode>
        <childnode refid="82479" relation="include">
        </childnode>
      </node>
      <node id="82472">
        <label>thirdparty/openssl/include/openssl/pem.h</label>
        <link refid="pem_8h_source"/>
        <childnode refid="82473" relation="include">
        </childnode>
        <childnode refid="82474" relation="include">
        </childnode>
      </node>
      <node id="82492">
        <label>thirdparty/openssl/include/openssl/lhash.h</label>
        <link refid="lhash_8h_source"/>
        <childnode refid="82487" relation="include">
        </childnode>
        <childnode refid="82488" relation="include">
        </childnode>
        <childnode refid="82491" relation="include">
        </childnode>
        <childnode refid="82474" relation="include">
        </childnode>
        <childnode refid="82493" relation="include">
        </childnode>
        <childnode refid="82478" relation="include">
        </childnode>
      </node>
      <node id="82468">
        <label>thirdparty/openssl/include/openssl/cms.h</label>
        <link refid="cms_8h_source"/>
        <childnode refid="82469" relation="include">
        </childnode>
      </node>
      <node id="82495">
        <label>thirdparty/openssl/include/openssl/srp.h</label>
        <link refid="srp_8h_source"/>
      </node>
      <node id="82481">
        <label>thirdparty/openssl/include/openssl/objects.h</label>
        <link refid="objects_8h_source"/>
        <childnode refid="82482" relation="include">
        </childnode>
      </node>
      <node id="82474">
        <label>thirdparty/openssl/include/openssl/ssl.h</label>
        <link refid="ssl_8h_source"/>
        <childnode refid="82473" relation="include">
        </childnode>
        <childnode refid="82475" relation="include">
        </childnode>
      </node>
      <node id="82463">
        <label>thirdparty/openssl/include/openssl/asn1t.h</label>
        <link refid="asn1t_8h_source"/>
      </node>
      <node id="82491">
        <label>thirdparty/openssl/include/openssl/err.h</label>
        <link refid="err_8h_source"/>
        <childnode refid="82473" relation="include">
        </childnode>
        <childnode refid="82466" relation="include">
        </childnode>
      </node>
      <node id="82470">
        <label>thirdparty/poppler/poppler/SignatureHandler.cc</label>
        <link refid="_signature_handler_8cc_source"/>
      </node>
      <node id="82465">
        <label>thirdparty/openssl/include/openssl/ecdh.h</label>
        <link refid="ecdh_8h_source"/>
        <childnode refid="82466" relation="include">
        </childnode>
        <childnode refid="82467" relation="include">
        </childnode>
      </node>
      <node id="82479">
        <label>thirdparty/openssl/include/openssl/x509v3.h</label>
        <link refid="x509v3_8h_source"/>
        <childnode refid="82471" relation="include">
        </childnode>
        <childnode refid="82477" relation="include">
        </childnode>
      </node>
      <node id="82500">
        <label>thirdparty/openssl/include/openssl/ui_compat.h</label>
        <link refid="ui__compat_8h_source"/>
        <childnode refid="82501" relation="include">
        </childnode>
      </node>
      <node id="82476">
        <label>thirdparty/openssl/include/openssl/pkcs12.h</label>
        <link refid="pkcs12_8h_source"/>
      </node>
      <node id="82471">
        <label>thirdparty/openssl/include/openssl/ocsp.h</label>
        <link refid="ocsp_8h_source"/>
      </node>
      <node id="82459">
        <label>thirdparty/openssl/include/openssl/crypto.h</label>
        <link refid="crypto_8h"/>
        <childnode refid="82460" relation="include">
        </childnode>
        <childnode refid="82494" relation="include">
        </childnode>
        <childnode refid="82496" relation="include">
        </childnode>
        <childnode refid="82490" relation="include">
        </childnode>
        <childnode refid="82497" relation="include">
        </childnode>
        <childnode refid="82486" relation="include">
        </childnode>
        <childnode refid="82498" relation="include">
        </childnode>
        <childnode refid="82495" relation="include">
        </childnode>
        <childnode refid="82474" relation="include">
        </childnode>
        <childnode refid="82499" relation="include">
        </childnode>
        <childnode refid="82478" relation="include">
        </childnode>
      </node>
      <node id="82489">
        <label>thirdparty/openssl/include/openssl/dh.h</label>
        <link refid="dh_8h_source"/>
        <childnode refid="82490" relation="include">
        </childnode>
        <childnode refid="82466" relation="include">
        </childnode>
        <childnode refid="82477" relation="include">
        </childnode>
        <childnode refid="82467" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="structopenssl__item__st" prot="public">openssl_item_st</innerclass>
    <innerclass refid="struct_c_r_y_p_t_o__dynlock" prot="public">CRYPTO_dynlock</innerclass>
    <innerclass refid="structcrypto__ex__data__st" prot="public">crypto_ex_data_st</innerclass>
    <innerclass refid="structcrypto__ex__data__func__st" prot="public">crypto_ex_data_func_st</innerclass>
    <innerclass refid="structcrypto__threadid__st" prot="public">crypto_threadid_st</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="crypto_8h_1a4956d8f776a26cc0f4f7f94d7dca3148" prot="public" static="no">
        <name>SSLEAY_VERSION_NUMBER</name>
        <initializer>OPENSSL_VERSION_NUMBER</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="148" column="9" bodyfile="thirdparty/openssl/include/openssl/crypto.h" bodystart="148" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto_8h_1a74a9f8a984ed90f79d509017ba5e475e" prot="public" static="no">
        <name>SSLEAY_VERSION</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="149" column="9" bodyfile="thirdparty/openssl/include/openssl/crypto.h" bodystart="149" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto_8h_1a1b1adb0d7a504e33730ccb987cf36206" prot="public" static="no">
        <name>SSLEAY_CFLAGS</name>
        <initializer>2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="151" column="9" bodyfile="thirdparty/openssl/include/openssl/crypto.h" bodystart="151" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto_8h_1ad75da87938feeb84fd165923e6f753e8" prot="public" static="no">
        <name>SSLEAY_BUILT_ON</name>
        <initializer>3</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="152" column="9" bodyfile="thirdparty/openssl/include/openssl/crypto.h" bodystart="152" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto_8h_1ab740dda99de5932e3129b96553deee51" prot="public" static="no">
        <name>SSLEAY_PLATFORM</name>
        <initializer>4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="153" column="9" bodyfile="thirdparty/openssl/include/openssl/crypto.h" bodystart="153" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto_8h_1ad24a38af0b4903e5785fb7e7b3eff1f8" prot="public" static="no">
        <name>SSLEAY_DIR</name>
        <initializer>5</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="154" column="9" bodyfile="thirdparty/openssl/include/openssl/crypto.h" bodystart="154" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto_8h_1a59155ce15604fcf493414a4e9f137359" prot="public" static="no">
        <name>CRYPTO_LOCK_ERR</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="184" column="9" bodyfile="thirdparty/openssl/include/openssl/crypto.h" bodystart="184" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto_8h_1a41d6081818c1baac025d380dff6d15cd" prot="public" static="no">
        <name>CRYPTO_LOCK_EX_DATA</name>
        <initializer>2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="185" column="9" bodyfile="thirdparty/openssl/include/openssl/crypto.h" bodystart="185" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto_8h_1abcd6591ef6acea51bf9f6edb6bb05bca" prot="public" static="no">
        <name>CRYPTO_LOCK_X509</name>
        <initializer>3</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="186" column="9" bodyfile="thirdparty/openssl/include/openssl/crypto.h" bodystart="186" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto_8h_1a514c71dc8501267571a9ccc554b72251" prot="public" static="no">
        <name>CRYPTO_LOCK_X509_INFO</name>
        <initializer>4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="187" column="9" bodyfile="thirdparty/openssl/include/openssl/crypto.h" bodystart="187" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto_8h_1abb49b04d226734fa74d3a2729c56539e" prot="public" static="no">
        <name>CRYPTO_LOCK_X509_PKEY</name>
        <initializer>5</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="188" column="9" bodyfile="thirdparty/openssl/include/openssl/crypto.h" bodystart="188" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto_8h_1acc0c636f451144eadad19883527a0a1a" prot="public" static="no">
        <name>CRYPTO_LOCK_X509_CRL</name>
        <initializer>6</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="189" column="9" bodyfile="thirdparty/openssl/include/openssl/crypto.h" bodystart="189" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto_8h_1ad2941e87c19cb5d8835978a1920fb360" prot="public" static="no">
        <name>CRYPTO_LOCK_X509_REQ</name>
        <initializer>7</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="190" column="9" bodyfile="thirdparty/openssl/include/openssl/crypto.h" bodystart="190" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto_8h_1ab869ea3c0727d1195ca8bdb233614003" prot="public" static="no">
        <name>CRYPTO_LOCK_DSA</name>
        <initializer>8</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="191" column="9" bodyfile="thirdparty/openssl/include/openssl/crypto.h" bodystart="191" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto_8h_1a8ec88e37c68e88e1c7c63368fe2a2d8c" prot="public" static="no">
        <name>CRYPTO_LOCK_RSA</name>
        <initializer>9</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="192" column="9" bodyfile="thirdparty/openssl/include/openssl/crypto.h" bodystart="192" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto_8h_1aee0129d89ab09d6bccecd1ce55307584" prot="public" static="no">
        <name>CRYPTO_LOCK_EVP_PKEY</name>
        <initializer>10</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="193" column="9" bodyfile="thirdparty/openssl/include/openssl/crypto.h" bodystart="193" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto_8h_1a2ff5c286424b480fc096193ab193b448" prot="public" static="no">
        <name>CRYPTO_LOCK_X509_STORE</name>
        <initializer>11</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="194" column="9" bodyfile="thirdparty/openssl/include/openssl/crypto.h" bodystart="194" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto_8h_1a625a294ce7ca3ded9be3b80f32282bd1" prot="public" static="no">
        <name>CRYPTO_LOCK_SSL_CTX</name>
        <initializer>12</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="195" column="9" bodyfile="thirdparty/openssl/include/openssl/crypto.h" bodystart="195" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto_8h_1ac7e2c1c2b4fd4607a40e119924e4fc0c" prot="public" static="no">
        <name>CRYPTO_LOCK_SSL_CERT</name>
        <initializer>13</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="196" column="9" bodyfile="thirdparty/openssl/include/openssl/crypto.h" bodystart="196" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto_8h_1a9756a8a5d0486d60f1e40aa714eab85c" prot="public" static="no">
        <name>CRYPTO_LOCK_SSL_SESSION</name>
        <initializer>14</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="197" column="9" bodyfile="thirdparty/openssl/include/openssl/crypto.h" bodystart="197" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto_8h_1a4efc90ed9fdc06d4ecc056a66bda277c" prot="public" static="no">
        <name>CRYPTO_LOCK_SSL_SESS_CERT</name>
        <initializer>15</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="198" column="9" bodyfile="thirdparty/openssl/include/openssl/crypto.h" bodystart="198" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto_8h_1a1ab85f9ec12d0b086527b0e6ec345fcc" prot="public" static="no">
        <name>CRYPTO_LOCK_SSL</name>
        <initializer>16</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="199" column="9" bodyfile="thirdparty/openssl/include/openssl/crypto.h" bodystart="199" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto_8h_1acf87efa97cc977e49013af5e87e304bd" prot="public" static="no">
        <name>CRYPTO_LOCK_SSL_METHOD</name>
        <initializer>17</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="200" column="9" bodyfile="thirdparty/openssl/include/openssl/crypto.h" bodystart="200" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto_8h_1aa9e33617eed56a72ed1798cd076e1e71" prot="public" static="no">
        <name>CRYPTO_LOCK_RAND</name>
        <initializer>18</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="201" column="9" bodyfile="thirdparty/openssl/include/openssl/crypto.h" bodystart="201" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto_8h_1a59dc8a98a2240c8923492715e03c7f7f" prot="public" static="no">
        <name>CRYPTO_LOCK_RAND2</name>
        <initializer>19</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="202" column="9" bodyfile="thirdparty/openssl/include/openssl/crypto.h" bodystart="202" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto_8h_1ae27b7d4dae7ec19346456ecfa4ed0bf4" prot="public" static="no">
        <name>CRYPTO_LOCK_MALLOC</name>
        <initializer>20</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="203" column="9" bodyfile="thirdparty/openssl/include/openssl/crypto.h" bodystart="203" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto_8h_1a0d64da1eeaf0f9b016264a1bad7e26a3" prot="public" static="no">
        <name>CRYPTO_LOCK_BIO</name>
        <initializer>21</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="204" column="9" bodyfile="thirdparty/openssl/include/openssl/crypto.h" bodystart="204" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto_8h_1a485c8893a086095e5e7e615782262fa5" prot="public" static="no">
        <name>CRYPTO_LOCK_GETHOSTBYNAME</name>
        <initializer>22</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="205" column="9" bodyfile="thirdparty/openssl/include/openssl/crypto.h" bodystart="205" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto_8h_1a088e7619b09051943015a1ae265fa75e" prot="public" static="no">
        <name>CRYPTO_LOCK_GETSERVBYNAME</name>
        <initializer>23</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="206" column="9" bodyfile="thirdparty/openssl/include/openssl/crypto.h" bodystart="206" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto_8h_1aa2c1fcf639d1b436285a0426a372d8e0" prot="public" static="no">
        <name>CRYPTO_LOCK_READDIR</name>
        <initializer>24</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="207" column="9" bodyfile="thirdparty/openssl/include/openssl/crypto.h" bodystart="207" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto_8h_1ad8b7b0fbb6c9fdea98d78a11a8dc97ff" prot="public" static="no">
        <name>CRYPTO_LOCK_RSA_BLINDING</name>
        <initializer>25</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="208" column="9" bodyfile="thirdparty/openssl/include/openssl/crypto.h" bodystart="208" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto_8h_1ad4d7c468a715660eb5639dcf39937708" prot="public" static="no">
        <name>CRYPTO_LOCK_DH</name>
        <initializer>26</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="209" column="9" bodyfile="thirdparty/openssl/include/openssl/crypto.h" bodystart="209" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto_8h_1a8e0f7820daecae8691988db60dd380b8" prot="public" static="no">
        <name>CRYPTO_LOCK_MALLOC2</name>
        <initializer>27</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="210" column="9" bodyfile="thirdparty/openssl/include/openssl/crypto.h" bodystart="210" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto_8h_1a767aafa2cc763fa1301ae2e8ba47193d" prot="public" static="no">
        <name>CRYPTO_LOCK_DSO</name>
        <initializer>28</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="211" column="9" bodyfile="thirdparty/openssl/include/openssl/crypto.h" bodystart="211" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto_8h_1a5197d96134626698588fdd5bd5a40515" prot="public" static="no">
        <name>CRYPTO_LOCK_DYNLOCK</name>
        <initializer>29</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="212" column="9" bodyfile="thirdparty/openssl/include/openssl/crypto.h" bodystart="212" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto_8h_1a49d4f90e6748128dc3976ee75a205099" prot="public" static="no">
        <name>CRYPTO_LOCK_ENGINE</name>
        <initializer>30</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="213" column="9" bodyfile="thirdparty/openssl/include/openssl/crypto.h" bodystart="213" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto_8h_1a272e2ffecd9903bf2a439ec604968a72" prot="public" static="no">
        <name>CRYPTO_LOCK_UI</name>
        <initializer>31</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="214" column="9" bodyfile="thirdparty/openssl/include/openssl/crypto.h" bodystart="214" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto_8h_1a922ff57b8c4fd321e28537b336fe114f" prot="public" static="no">
        <name>CRYPTO_LOCK_ECDSA</name>
        <initializer>32</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="215" column="9" bodyfile="thirdparty/openssl/include/openssl/crypto.h" bodystart="215" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto_8h_1a25a9fafff765bd6d887708428c876c75" prot="public" static="no">
        <name>CRYPTO_LOCK_EC</name>
        <initializer>33</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="216" column="9" bodyfile="thirdparty/openssl/include/openssl/crypto.h" bodystart="216" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto_8h_1a347f27d7dd50ca783fb71a7ab45eb351" prot="public" static="no">
        <name>CRYPTO_LOCK_ECDH</name>
        <initializer>34</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="217" column="9" bodyfile="thirdparty/openssl/include/openssl/crypto.h" bodystart="217" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto_8h_1af474d4a13c7608ab4000c3568f023598" prot="public" static="no">
        <name>CRYPTO_LOCK_BN</name>
        <initializer>35</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="218" column="9" bodyfile="thirdparty/openssl/include/openssl/crypto.h" bodystart="218" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto_8h_1a3d1a5ee400974e642a726946f4fede25" prot="public" static="no">
        <name>CRYPTO_LOCK_EC_PRE_COMP</name>
        <initializer>36</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="219" column="9" bodyfile="thirdparty/openssl/include/openssl/crypto.h" bodystart="219" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto_8h_1a525a5b117b66ad557ca3b110364b82fa" prot="public" static="no">
        <name>CRYPTO_LOCK_STORE</name>
        <initializer>37</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="220" column="9" bodyfile="thirdparty/openssl/include/openssl/crypto.h" bodystart="220" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto_8h_1a9029abd903c791773f22eea662b40341" prot="public" static="no">
        <name>CRYPTO_LOCK_COMP</name>
        <initializer>38</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="221" column="9" bodyfile="thirdparty/openssl/include/openssl/crypto.h" bodystart="221" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto_8h_1aa5ae846a651daadc3845b0fccce4e46e" prot="public" static="no">
        <name>CRYPTO_LOCK_FIPS</name>
        <initializer>39</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="222" column="9" bodyfile="thirdparty/openssl/include/openssl/crypto.h" bodystart="222" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto_8h_1abbed94ff27c9c66c9e186b4bdc1dd519" prot="public" static="no">
        <name>CRYPTO_LOCK_FIPS2</name>
        <initializer>40</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="223" column="9" bodyfile="thirdparty/openssl/include/openssl/crypto.h" bodystart="223" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto_8h_1a9eada33d182a1671c8f29a3df06190b3" prot="public" static="no">
        <name>CRYPTO_NUM_LOCKS</name>
        <initializer>41</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="224" column="9" bodyfile="thirdparty/openssl/include/openssl/crypto.h" bodystart="224" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto_8h_1aeb4287d8bef364bc97ebef4f29fa2197" prot="public" static="no">
        <name>CRYPTO_LOCK</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="226" column="9" bodyfile="thirdparty/openssl/include/openssl/crypto.h" bodystart="226" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto_8h_1ab5476e708fea24776738de40597833cb" prot="public" static="no">
        <name>CRYPTO_UNLOCK</name>
        <initializer>2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="227" column="9" bodyfile="thirdparty/openssl/include/openssl/crypto.h" bodystart="227" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto_8h_1a9f08fd59d86931fa501066aaf09d22ce" prot="public" static="no">
        <name>CRYPTO_READ</name>
        <initializer>4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="228" column="9" bodyfile="thirdparty/openssl/include/openssl/crypto.h" bodystart="228" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto_8h_1aca8b4aef3ca56cad89b94cb46797276c" prot="public" static="no">
        <name>CRYPTO_WRITE</name>
        <initializer>8</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="229" column="9" bodyfile="thirdparty/openssl/include/openssl/crypto.h" bodystart="229" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto_8h_1ab3735c6a4dd562addce8043981d0ecdf" prot="public" static="no">
        <name>CRYPTO_w_lock</name>
        <param><defname>type</defname></param>
        <initializer>CRYPTO_lock(CRYPTO_LOCK|CRYPTO_WRITE,type,__FILE__,__LINE__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="233" column="9" bodyfile="thirdparty/openssl/include/openssl/crypto.h" bodystart="233" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto_8h_1a337cca587e1ea6c81accc78f0373569d" prot="public" static="no">
        <name>CRYPTO_w_unlock</name>
        <param><defname>type</defname></param>
        <initializer>CRYPTO_lock(CRYPTO_UNLOCK|CRYPTO_WRITE,type,__FILE__,__LINE__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="235" column="9" bodyfile="thirdparty/openssl/include/openssl/crypto.h" bodystart="235" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto_8h_1a1b327843e7f3b0e8c51d0ab1956f7c64" prot="public" static="no">
        <name>CRYPTO_r_lock</name>
        <param><defname>type</defname></param>
        <initializer>CRYPTO_lock(CRYPTO_LOCK|CRYPTO_READ,type,__FILE__,__LINE__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="237" column="9" bodyfile="thirdparty/openssl/include/openssl/crypto.h" bodystart="237" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto_8h_1a55fc2b1744dc55033c8b0709a11f92fc" prot="public" static="no">
        <name>CRYPTO_r_unlock</name>
        <param><defname>type</defname></param>
        <initializer>CRYPTO_lock(CRYPTO_UNLOCK|CRYPTO_READ,type,__FILE__,__LINE__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="239" column="9" bodyfile="thirdparty/openssl/include/openssl/crypto.h" bodystart="239" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto_8h_1ab8556c4f12443f1876ce487dd0c8db27" prot="public" static="no">
        <name>CRYPTO_add</name>
        <param><defname>addr</defname></param>
        <param><defname>amount</defname></param>
        <param><defname>type</defname></param>
        <initializer>CRYPTO_add_lock(addr,amount,type,__FILE__,__LINE__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="241" column="9" bodyfile="thirdparty/openssl/include/openssl/crypto.h" bodystart="241" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto_8h_1a3ca6c6e275cf4a57f2dcbbf0e515b853" prot="public" static="no">
        <name>CRYPTO_MEM_CHECK_OFF</name>
        <initializer>0x0	/* an enume */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="266" column="9" bodyfile="thirdparty/openssl/include/openssl/crypto.h" bodystart="266" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto_8h_1a6a25092bf0270a8671df0369a6ccdecd" prot="public" static="no">
        <name>CRYPTO_MEM_CHECK_ON</name>
        <initializer>0x1	/* a bit */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="267" column="9" bodyfile="thirdparty/openssl/include/openssl/crypto.h" bodystart="267" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto_8h_1a251476afe7b1f8951612adc6bd17dd93" prot="public" static="no">
        <name>CRYPTO_MEM_CHECK_ENABLE</name>
        <initializer>0x2	/* a bit */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="268" column="9" bodyfile="thirdparty/openssl/include/openssl/crypto.h" bodystart="268" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto_8h_1a4a80a7d9078e510c70ad6c193cd387db" prot="public" static="no">
        <name>CRYPTO_MEM_CHECK_DISABLE</name>
        <initializer>0x3	/* an enume */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="269" column="9" bodyfile="thirdparty/openssl/include/openssl/crypto.h" bodystart="269" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto_8h_1a749e295c704fbbf09b565243d67b5fda" prot="public" static="no">
        <name>V_CRYPTO_MDEBUG_TIME</name>
        <initializer>0x1 /* a bit */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="275" column="9" bodyfile="thirdparty/openssl/include/openssl/crypto.h" bodystart="275" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto_8h_1ad211881e98a27d983ea949c8a16d5b49" prot="public" static="no">
        <name>V_CRYPTO_MDEBUG_THREAD</name>
        <initializer>0x2 /* a bit */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="277" column="9" bodyfile="thirdparty/openssl/include/openssl/crypto.h" bodystart="277" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto_8h_1aaa2c5af6372b57e2f6b7a476a67a623d" prot="public" static="no">
        <name>V_CRYPTO_MDEBUG_ALL</name>
        <initializer>(V_CRYPTO_MDEBUG_TIME | V_CRYPTO_MDEBUG_THREAD)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="279" column="9" bodyfile="thirdparty/openssl/include/openssl/crypto.h" bodystart="279" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto_8h_1adcb5178e99231a37426339195921e9db" prot="public" static="no">
        <name>CRYPTO_EX_INDEX_BIO</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="310" column="9" bodyfile="thirdparty/openssl/include/openssl/crypto.h" bodystart="310" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto_8h_1aa9033915cb476c9bb4d97f28431794bc" prot="public" static="no">
        <name>CRYPTO_EX_INDEX_SSL</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="311" column="9" bodyfile="thirdparty/openssl/include/openssl/crypto.h" bodystart="311" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto_8h_1a41838765f6c3afc42aeca828b6884aed" prot="public" static="no">
        <name>CRYPTO_EX_INDEX_SSL_CTX</name>
        <initializer>2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="312" column="9" bodyfile="thirdparty/openssl/include/openssl/crypto.h" bodystart="312" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto_8h_1a6c2fd7ded0724cac1cfbb8bb6e04483e" prot="public" static="no">
        <name>CRYPTO_EX_INDEX_SSL_SESSION</name>
        <initializer>3</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="313" column="9" bodyfile="thirdparty/openssl/include/openssl/crypto.h" bodystart="313" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto_8h_1a957fb8abe55aa3940e68078694da8eb6" prot="public" static="no">
        <name>CRYPTO_EX_INDEX_X509_STORE</name>
        <initializer>4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="314" column="9" bodyfile="thirdparty/openssl/include/openssl/crypto.h" bodystart="314" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto_8h_1a30b655e9459543bdb06b750cdd992001" prot="public" static="no">
        <name>CRYPTO_EX_INDEX_X509_STORE_CTX</name>
        <initializer>5</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="315" column="9" bodyfile="thirdparty/openssl/include/openssl/crypto.h" bodystart="315" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto_8h_1af3e111174cdefcb125b402dc74484173" prot="public" static="no">
        <name>CRYPTO_EX_INDEX_RSA</name>
        <initializer>6</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="316" column="9" bodyfile="thirdparty/openssl/include/openssl/crypto.h" bodystart="316" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto_8h_1aea8d933d68fe31f0a300c15e94fc81bc" prot="public" static="no">
        <name>CRYPTO_EX_INDEX_DSA</name>
        <initializer>7</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="317" column="9" bodyfile="thirdparty/openssl/include/openssl/crypto.h" bodystart="317" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto_8h_1a25f98a5aeff28d391553d0660c58c724" prot="public" static="no">
        <name>CRYPTO_EX_INDEX_DH</name>
        <initializer>8</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="318" column="9" bodyfile="thirdparty/openssl/include/openssl/crypto.h" bodystart="318" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto_8h_1a0e1b34b273fb67d68332bf1a2ddca3ec" prot="public" static="no">
        <name>CRYPTO_EX_INDEX_ENGINE</name>
        <initializer>9</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="319" column="9" bodyfile="thirdparty/openssl/include/openssl/crypto.h" bodystart="319" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto_8h_1a971f06d0ec0c663ffbab68a07c4238b1" prot="public" static="no">
        <name>CRYPTO_EX_INDEX_X509</name>
        <initializer>10</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="320" column="9" bodyfile="thirdparty/openssl/include/openssl/crypto.h" bodystart="320" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto_8h_1a19933faaf76976c2be992b567863949d" prot="public" static="no">
        <name>CRYPTO_EX_INDEX_UI</name>
        <initializer>11</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="321" column="9" bodyfile="thirdparty/openssl/include/openssl/crypto.h" bodystart="321" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto_8h_1a0730dc86c4c6a90823d52046975c2e80" prot="public" static="no">
        <name>CRYPTO_EX_INDEX_ECDSA</name>
        <initializer>12</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="322" column="9" bodyfile="thirdparty/openssl/include/openssl/crypto.h" bodystart="322" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto_8h_1a24488c51e7c15a768f66aef76a071a0e" prot="public" static="no">
        <name>CRYPTO_EX_INDEX_ECDH</name>
        <initializer>13</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="323" column="9" bodyfile="thirdparty/openssl/include/openssl/crypto.h" bodystart="323" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto_8h_1abc40b3db6e429d33911911a83d2a4a8c" prot="public" static="no">
        <name>CRYPTO_EX_INDEX_COMP</name>
        <initializer>14</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="324" column="9" bodyfile="thirdparty/openssl/include/openssl/crypto.h" bodystart="324" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto_8h_1aa30669d2eb6fc1a42533b3fbdf800caf" prot="public" static="no">
        <name>CRYPTO_EX_INDEX_STORE</name>
        <initializer>15</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="325" column="9" bodyfile="thirdparty/openssl/include/openssl/crypto.h" bodystart="325" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto_8h_1a0e131561a5ad4bc5466836a708ee37d3" prot="public" static="no">
        <name>CRYPTO_EX_INDEX_USER</name>
        <initializer>100</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="329" column="9" bodyfile="thirdparty/openssl/include/openssl/crypto.h" bodystart="329" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto_8h_1a1bea0a4d2516a2717e4d9cd6ef32b382" prot="public" static="no">
        <name>CRYPTO_malloc_init</name>
        <param></param>
        <initializer>CRYPTO_set_mem_functions(\
	malloc, realloc, free)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="336" column="9" bodyfile="thirdparty/openssl/include/openssl/crypto.h" bodystart="336" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto_8h_1a98082c05667f39db8e1f0cd699928013" prot="public" static="no">
        <name>CRYPTO_malloc_debug_init</name>
        <param></param>
        <initializer>do {\
	CRYPTO_set_mem_debug_functions(\
		CRYPTO_dbg_malloc,\
		CRYPTO_dbg_realloc,\
		CRYPTO_dbg_free,\
		CRYPTO_dbg_set_options,\
		CRYPTO_dbg_get_options);\
	} while(0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="347" column="9" bodyfile="thirdparty/openssl/include/openssl/crypto.h" bodystart="347" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto_8h_1a8276d8522378b4e81d31e7b2c0b4c04e" prot="public" static="no">
        <name>MemCheck_start</name>
        <param></param>
        <initializer>CRYPTO_mem_ctrl(CRYPTO_MEM_CHECK_ON)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="360" column="9" bodyfile="thirdparty/openssl/include/openssl/crypto.h" bodystart="360" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto_8h_1af6160223118fdf4d6da320be2889097f" prot="public" static="no">
        <name>MemCheck_stop</name>
        <param></param>
        <initializer>CRYPTO_mem_ctrl(CRYPTO_MEM_CHECK_OFF)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="361" column="9" bodyfile="thirdparty/openssl/include/openssl/crypto.h" bodystart="361" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto_8h_1ab83a20c79a9bf75b75100b90fe4d1ad3" prot="public" static="no">
        <name>MemCheck_on</name>
        <param></param>
        <initializer>CRYPTO_mem_ctrl(CRYPTO_MEM_CHECK_ENABLE)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="364" column="9" bodyfile="thirdparty/openssl/include/openssl/crypto.h" bodystart="364" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto_8h_1a3d3a053e9b3bc62a9ec26514dee4fe22" prot="public" static="no">
        <name>MemCheck_off</name>
        <param></param>
        <initializer>CRYPTO_mem_ctrl(CRYPTO_MEM_CHECK_DISABLE)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="365" column="9" bodyfile="thirdparty/openssl/include/openssl/crypto.h" bodystart="365" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto_8h_1a7650d3a39d90d8311e3bf00c265a3498" prot="public" static="no">
        <name>is_MemCheck_on</name>
        <param></param>
        <initializer>CRYPTO_is_mem_check_on()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="366" column="9" bodyfile="thirdparty/openssl/include/openssl/crypto.h" bodystart="366" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto_8h_1afdb80d14aed3b15d0ef71f72a872310d" prot="public" static="no">
        <name>OPENSSL_malloc</name>
        <param><defname>num</defname></param>
        <initializer>CRYPTO_malloc((int)num,__FILE__,__LINE__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="368" column="9" bodyfile="thirdparty/openssl/include/openssl/crypto.h" bodystart="368" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto_8h_1aa0da41937271fafc8d9ebaa051feec16" prot="public" static="no">
        <name>OPENSSL_strdup</name>
        <param><defname>str</defname></param>
        <initializer>CRYPTO_strdup((str),__FILE__,__LINE__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="369" column="9" bodyfile="thirdparty/openssl/include/openssl/crypto.h" bodystart="369" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto_8h_1aba1c282c55c099a7f164b9380febfdf9" prot="public" static="no">
        <name>OPENSSL_realloc</name>
        <param><defname>addr</defname></param>
        <param><defname>num</defname></param>
        <initializer>CRYPTO_realloc((char *)addr,(int)num,__FILE__,__LINE__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="370" column="9" bodyfile="thirdparty/openssl/include/openssl/crypto.h" bodystart="370" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto_8h_1ad41b0697e3274e344a9f12001187fb95" prot="public" static="no">
        <name>OPENSSL_realloc_clean</name>
        <param><defname>addr</defname></param>
        <param><defname>old_num</defname></param>
        <param><defname>num</defname></param>
        <initializer>CRYPTO_realloc_clean(addr,old_num,num,__FILE__,__LINE__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="372" column="9" bodyfile="thirdparty/openssl/include/openssl/crypto.h" bodystart="372" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto_8h_1a67a1da927713acebe6b004dc24c6760e" prot="public" static="no">
        <name>OPENSSL_remalloc</name>
        <param><defname>addr</defname></param>
        <param><defname>num</defname></param>
        <initializer>CRYPTO_remalloc((char **)addr,(int)num,__FILE__,__LINE__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="374" column="9" bodyfile="thirdparty/openssl/include/openssl/crypto.h" bodystart="374" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto_8h_1a5e15ad04ccc852bc2140e6dff5647b73" prot="public" static="no">
        <name>OPENSSL_freeFunc</name>
        <initializer>CRYPTO_free</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="376" column="9" bodyfile="thirdparty/openssl/include/openssl/crypto.h" bodystart="376" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto_8h_1aeb21bb7e51c4f5af3bdce7226e52ca5a" prot="public" static="no">
        <name>OPENSSL_free</name>
        <param><defname>addr</defname></param>
        <initializer>CRYPTO_free(addr)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="377" column="9" bodyfile="thirdparty/openssl/include/openssl/crypto.h" bodystart="377" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto_8h_1a343ed687a1e861fa39ed385790426ef5" prot="public" static="no">
        <name>OPENSSL_malloc_locked</name>
        <param><defname>num</defname></param>
        <initializer>CRYPTO_malloc_locked((int)num,__FILE__,__LINE__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="379" column="9" bodyfile="thirdparty/openssl/include/openssl/crypto.h" bodystart="379" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto_8h_1a6941f5340d9bf33568dda6731e3e503a" prot="public" static="no">
        <name>OPENSSL_free_locked</name>
        <param><defname>addr</defname></param>
        <initializer>CRYPTO_free_locked(addr)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="381" column="9" bodyfile="thirdparty/openssl/include/openssl/crypto.h" bodystart="381" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto_8h_1a3323b4d137a6095f5c647b362e5be170" prot="public" static="no">
        <name>CRYPTO_push_info</name>
        <param><defname>info</defname></param>
        <initializer>CRYPTO_push_info_(info, __FILE__, __LINE__);</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="505" column="9" bodyfile="thirdparty/openssl/include/openssl/crypto.h" bodystart="505" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto_8h_1a6e3638bf542fc7a6a394f34124aa2cba" prot="public" static="no">
        <name>OPENSSL_assert</name>
        <param><defname>e</defname></param>
        <initializer>(void)((e) ? 0 : (OpenSSLDie(__FILE__, __LINE__, #e),1))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="544" column="9" bodyfile="thirdparty/openssl/include/openssl/crypto.h" bodystart="544" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto_8h_1a4b2789a3388a879fbd65b1ba00ccc2b6" prot="public" static="no">
        <name>OPENSSL_ia32cap</name>
        <initializer>(*(OPENSSL_ia32cap_loc()))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="547" column="9" bodyfile="thirdparty/openssl/include/openssl/crypto.h" bodystart="547" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto_8h_1a34e96cd01d02ca933df2f2dcc85994ba" prot="public" static="no">
        <name>fips_md_init</name>
        <param><defname>alg</defname></param>
        <initializer>fips_md_init_ctx(alg, alg)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="555" column="9" bodyfile="thirdparty/openssl/include/openssl/crypto.h" bodystart="555" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto_8h_1a60234b3104c8d59b344febe77a7af7af" prot="public" static="no">
        <name>fips_md_init_ctx</name>
        <param><defname>alg</defname></param>
        <param><defname>cx</defname></param>
        <initializer>int alg##_Init(cx##_CTX *c)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="572" column="10" bodyfile="thirdparty/openssl/include/openssl/crypto.h" bodystart="572" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto_8h_1a8f232d24194a99785828c49606a56f8f" prot="public" static="no">
        <name>fips_cipher_abort</name>
        <param><defname>alg</defname></param>
        <initializer>while(0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="574" column="9" bodyfile="thirdparty/openssl/include/openssl/crypto.h" bodystart="574" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto_8h_1a3d6d5844c8b35c1124d5ea79b24091af" prot="public" static="no">
        <name>CRYPTO_F_CRYPTO_GET_EX_NEW_INDEX</name>
        <initializer>100</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="593" column="9" bodyfile="thirdparty/openssl/include/openssl/crypto.h" bodystart="593" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto_8h_1ae79a7c50d8aa3259041afe8336db0e10" prot="public" static="no">
        <name>CRYPTO_F_CRYPTO_GET_NEW_DYNLOCKID</name>
        <initializer>103</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="594" column="9" bodyfile="thirdparty/openssl/include/openssl/crypto.h" bodystart="594" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto_8h_1abda049a8a7547117b618d26e4324c442" prot="public" static="no">
        <name>CRYPTO_F_CRYPTO_GET_NEW_LOCKID</name>
        <initializer>101</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="595" column="9" bodyfile="thirdparty/openssl/include/openssl/crypto.h" bodystart="595" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto_8h_1a494331b1b8eecfb1b245674a473efa98" prot="public" static="no">
        <name>CRYPTO_F_CRYPTO_SET_EX_DATA</name>
        <initializer>102</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="596" column="9" bodyfile="thirdparty/openssl/include/openssl/crypto.h" bodystart="596" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto_8h_1a602406cf6e8a1b8347cd728f9702f3e2" prot="public" static="no">
        <name>CRYPTO_F_DEF_ADD_INDEX</name>
        <initializer>104</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="597" column="9" bodyfile="thirdparty/openssl/include/openssl/crypto.h" bodystart="597" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto_8h_1ac5b2b20295204f0304f0ce10429e3f0e" prot="public" static="no">
        <name>CRYPTO_F_DEF_GET_CLASS</name>
        <initializer>105</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="598" column="9" bodyfile="thirdparty/openssl/include/openssl/crypto.h" bodystart="598" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto_8h_1a8e0ef2abff65920dd5bf9c70fc442618" prot="public" static="no">
        <name>CRYPTO_F_FIPS_MODE_SET</name>
        <initializer>109</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="599" column="9" bodyfile="thirdparty/openssl/include/openssl/crypto.h" bodystart="599" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto_8h_1a74cf72ffb586af8dc9f6dce63cf2b947" prot="public" static="no">
        <name>CRYPTO_F_INT_DUP_EX_DATA</name>
        <initializer>106</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="600" column="9" bodyfile="thirdparty/openssl/include/openssl/crypto.h" bodystart="600" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto_8h_1ada34f6e84dcde385989584bd0ef75faa" prot="public" static="no">
        <name>CRYPTO_F_INT_FREE_EX_DATA</name>
        <initializer>107</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="601" column="9" bodyfile="thirdparty/openssl/include/openssl/crypto.h" bodystart="601" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto_8h_1a69d7c71e3766039a566e08bf72007270" prot="public" static="no">
        <name>CRYPTO_F_INT_NEW_EX_DATA</name>
        <initializer>108</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="602" column="9" bodyfile="thirdparty/openssl/include/openssl/crypto.h" bodystart="602" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto_8h_1adc09e9d7cd1e5471caacf0340862fc33" prot="public" static="no">
        <name>CRYPTO_R_FIPS_MODE_NOT_SUPPORTED</name>
        <initializer>101</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="605" column="9" bodyfile="thirdparty/openssl/include/openssl/crypto.h" bodystart="605" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto_8h_1ae9dc51dc9a2b10e0c7a897d6ea4d27d5" prot="public" static="no">
        <name>CRYPTO_R_NO_DYNLOCK_CREATE_CALLBACK</name>
        <initializer>100</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="606" column="9" bodyfile="thirdparty/openssl/include/openssl/crypto.h" bodystart="606" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="crypto_8h_1a420198cc02a146544ed8d3e05835a360" prot="public" static="no">
        <type>struct <ref refid="structopenssl__item__st" kindref="compound">openssl_item_st</ref></type>
        <definition>typedef struct openssl_item_st  OPENSSL_ITEM</definition>
        <argsstring></argsstring>
        <name>OPENSSL_ITEM</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="177" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="crypto_8h_1a8ab471a5c4f9f8d706a3fc7d8381ea1c" prot="public" static="no">
        <type>struct <ref refid="structbio__st" kindref="compound">bio_st</ref></type>
        <definition>typedef struct bio_st BIO_dummy</definition>
        <argsstring></argsstring>
        <name>BIO_dummy</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="83" column="1" bodyfile="thirdparty/openssl/include/openssl/crypto.h" bodystart="283" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="crypto_8h_1a792be45f3b5c5dc2c3bc57192248bef9" prot="public" static="no">
        <type>struct <ref refid="structcrypto__ex__data__func__st" kindref="compound">crypto_ex_data_func_st</ref></type>
        <definition>typedef struct crypto_ex_data_func_st  CRYPTO_EX_DATA_FUNCS</definition>
        <argsstring></argsstring>
        <name>CRYPTO_EX_DATA_FUNCS</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="302" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="crypto_8h_1a52be5518c28d0ef05f97c978a9fde2e4" prot="public" static="no">
        <type>struct st_CRYPTO_EX_DATA_IMPL</type>
        <definition>typedef struct st_CRYPTO_EX_DATA_IMPL CRYPTO_EX_DATA_IMPL</definition>
        <argsstring></argsstring>
        <name>CRYPTO_EX_DATA_IMPL</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="387" column="1" bodyfile="thirdparty/openssl/include/openssl/crypto.h" bodystart="390" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="crypto_8h_1a5da789a29aa0f39047c22cfe52462226" prot="public" static="no">
        <type>struct <ref refid="structcrypto__threadid__st" kindref="compound">crypto_threadid_st</ref></type>
        <definition>typedef struct crypto_threadid_st  CRYPTO_THREADID</definition>
        <argsstring></argsstring>
        <name>CRYPTO_THREADID</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="433" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="crypto_8h_1a3dfc760917a238b35cf54f3b5102ccbd" prot="public" static="no">
        <type>void *</type>
        <definition>typedef void* CRYPTO_MEM_LEAK_CB(unsigned long, const char *, int, int, void *)</definition>
        <argsstring>(unsigned long, const char *, int, int, void *)</argsstring>
        <name>CRYPTO_MEM_LEAK_CB</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="539" column="1" bodyfile="thirdparty/openssl/include/openssl/crypto.h" bodystart="539" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="crypto_8h_1a6fcb71da80fdde326504940c2abb1971" prot="public" static="no" mutable="no">
        <type>void(*)(int mode, int type, const char *file, int line)</type>
        <definition>void(*)(int mode, int type, const char *file, int line) CRYPTO_get_locking_callback(void)</definition>
        <argsstring>(void)</argsstring>
        <name>CRYPTO_get_locking_callback</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="421" column="1" bodyfile="thirdparty/openssl/include/openssl/crypto.h" bodystart="421" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="crypto_8h_1af3df8c5f95e1b4f75c9bbd4016a79871" prot="public" static="no" mutable="no">
        <type>int(*)(int *num, int mount, int type, const char *file, int line)</type>
        <definition>int(*)(int *num, int mount, int type, const char *file, int line) CRYPTO_get_add_lock_callback(void)</definition>
        <argsstring>(void)</argsstring>
        <name>CRYPTO_get_add_lock_callback</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="425" column="1" bodyfile="thirdparty/openssl/include/openssl/crypto.h" bodystart="425" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="crypto_8h_1a20c0a7e0c023cc1e1c150085cb9b4218" prot="public" static="no" mutable="no">
        <type>void(*)(<ref refid="structcrypto__threadid__st" kindref="compound">CRYPTO_THREADID</ref> *)</type>
        <definition>void(*)(CRYPTO_THREADID *) CRYPTO_THREADID_get_callback(void)</definition>
        <argsstring>(void)</argsstring>
        <name>CRYPTO_THREADID_get_callback</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="438" column="1" bodyfile="thirdparty/openssl/include/openssl/crypto.h" bodystart="438" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="crypto_8h_1a9af40289da7d95cec5889396e03a9430" prot="public" static="no" mutable="no">
        <type>unsigned long(*)(void)</type>
        <definition>unsigned long(*)(void) CRYPTO_get_id_callback(void)</definition>
        <argsstring>(void)</argsstring>
        <name>CRYPTO_get_id_callback</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="445" column="1" bodyfile="thirdparty/openssl/include/openssl/crypto.h" bodystart="445" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="crypto_8h_1aa1fd8d0c3c302b7b753cfb92de93f782" prot="public" static="no" mutable="no">
        <type>struct CRYPTO_dynlock_value *(*)(const char *file, int line)</type>
        <definition>struct CRYPTO_dynlock_value*(*)(const char *file, int line) CRYPTO_get_dynlock_create_callback(void)</definition>
        <argsstring>(void)</argsstring>
        <name>CRYPTO_get_dynlock_create_callback</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="458" column="1" bodyfile="thirdparty/openssl/include/openssl/crypto.h" bodystart="459" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="crypto_8h_1a33829e68feec94e5fb98a7161d13b0fa" prot="public" static="no" mutable="no">
        <type>void(*)(int mode, struct CRYPTO_dynlock_value *l, const char *file, int line)</type>
        <definition>void(*)(int mode, struct CRYPTO_dynlock_value *l, const char *file, int line) CRYPTO_get_dynlock_lock_callback(void)</definition>
        <argsstring>(void)</argsstring>
        <name>CRYPTO_get_dynlock_lock_callback</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="460" column="1" bodyfile="thirdparty/openssl/include/openssl/crypto.h" bodystart="460" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="crypto_8h_1abb9bf829e57745794eaf68aed4bf2181" prot="public" static="no" mutable="no">
        <type>void(*)(struct CRYPTO_dynlock_value *l, const char *file, int line)</type>
        <definition>void(*)(struct CRYPTO_dynlock_value *l, const char *file, int line) CRYPTO_get_dynlock_destroy_callback(void)</definition>
        <argsstring>(void)</argsstring>
        <name>CRYPTO_get_dynlock_destroy_callback</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="461" column="1" bodyfile="thirdparty/openssl/include/openssl/crypto.h" bodystart="461" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="crypto_8h_1a16e9f6f6bcd6717c96415e1a9d1bb904" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int CRYPTO_mem_ctrl</definition>
        <argsstring>(int mode)</argsstring>
        <name>CRYPTO_mem_ctrl</name>
        <param>
          <type>int</type>
          <declname>mode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="356" column="1"/>
      </memberdef>
      <memberdef kind="function" id="crypto_8h_1a8e7b75981670ea82982c3366b498f5ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int CRYPTO_is_mem_check_on</definition>
        <argsstring>(void)</argsstring>
        <name>CRYPTO_is_mem_check_on</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="357" column="1"/>
      </memberdef>
      <memberdef kind="function" id="crypto_8h_1a61a4f24cdcce8f120892dfc013d76217" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* SSLeay_version</definition>
        <argsstring>(int type)</argsstring>
        <name>SSLeay_version</name>
        <param>
          <type>int</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="384" column="1"/>
      </memberdef>
      <memberdef kind="function" id="crypto_8h_1a7296273f2824612e9451bf6e4fa300d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned long</type>
        <definition>unsigned long SSLeay</definition>
        <argsstring>(void)</argsstring>
        <name>SSLeay</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="385" column="1"/>
      </memberdef>
      <memberdef kind="function" id="crypto_8h_1acd6c4ab3f6cbf9cc93af4d9a62549359" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int OPENSSL_issetugid</definition>
        <argsstring>(void)</argsstring>
        <name>OPENSSL_issetugid</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="387" column="1"/>
      </memberdef>
      <memberdef kind="function" id="crypto_8h_1a09b54db94c5c21c1b42cff859322dfa0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const CRYPTO_EX_DATA_IMPL *</type>
        <definition>const CRYPTO_EX_DATA_IMPL* CRYPTO_get_ex_data_implementation</definition>
        <argsstring>(void)</argsstring>
        <name>CRYPTO_get_ex_data_implementation</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="392" column="1"/>
      </memberdef>
      <memberdef kind="function" id="crypto_8h_1a58f893879b8d35886dccce88e9ad5361" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int CRYPTO_set_ex_data_implementation</definition>
        <argsstring>(const CRYPTO_EX_DATA_IMPL *i)</argsstring>
        <name>CRYPTO_set_ex_data_implementation</name>
        <param>
          <type>const CRYPTO_EX_DATA_IMPL *</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="394" column="1"/>
      </memberdef>
      <memberdef kind="function" id="crypto_8h_1a01ab6808c4e4ef1e5a879228f722a787" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int CRYPTO_ex_data_new_class</definition>
        <argsstring>(void)</argsstring>
        <name>CRYPTO_ex_data_new_class</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="396" column="1"/>
      </memberdef>
      <memberdef kind="function" id="crypto_8h_1a0e9be769c8df778a93b2650b4c09f9e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int CRYPTO_get_ex_new_index</definition>
        <argsstring>(int class_index, long argl, void *argp, CRYPTO_EX_new *new_func, CRYPTO_EX_dup *dup_func, CRYPTO_EX_free *free_func)</argsstring>
        <name>CRYPTO_get_ex_new_index</name>
        <param>
          <type>int</type>
          <declname>class_index</declname>
        </param>
        <param>
          <type>long</type>
          <declname>argl</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>argp</declname>
        </param>
        <param>
          <type>CRYPTO_EX_new *</type>
          <declname>new_func</declname>
        </param>
        <param>
          <type>CRYPTO_EX_dup *</type>
          <declname>dup_func</declname>
        </param>
        <param>
          <type>CRYPTO_EX_free *</type>
          <declname>free_func</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="398" column="1"/>
      </memberdef>
      <memberdef kind="function" id="crypto_8h_1a2be01d9b6b916d48a8a1be08af6bad3c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int CRYPTO_new_ex_data</definition>
        <argsstring>(int class_index, void *obj, CRYPTO_EX_DATA *ad)</argsstring>
        <name>CRYPTO_new_ex_data</name>
        <param>
          <type>int</type>
          <declname>class_index</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type><ref refid="structcrypto__ex__data__st" kindref="compound">CRYPTO_EX_DATA</ref> *</type>
          <declname>ad</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="403" column="1"/>
      </memberdef>
      <memberdef kind="function" id="crypto_8h_1a04f40834dd51292bb6d1da655671bb8c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int CRYPTO_dup_ex_data</definition>
        <argsstring>(int class_index, CRYPTO_EX_DATA *to, CRYPTO_EX_DATA *from)</argsstring>
        <name>CRYPTO_dup_ex_data</name>
        <param>
          <type>int</type>
          <declname>class_index</declname>
        </param>
        <param>
          <type><ref refid="structcrypto__ex__data__st" kindref="compound">CRYPTO_EX_DATA</ref> *</type>
          <declname>to</declname>
        </param>
        <param>
          <type><ref refid="structcrypto__ex__data__st" kindref="compound">CRYPTO_EX_DATA</ref> *</type>
          <declname>from</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="404" column="1"/>
      </memberdef>
      <memberdef kind="function" id="crypto_8h_1a0ab5fa7e84dfdcb691f88aac8ddefd22" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CRYPTO_free_ex_data</definition>
        <argsstring>(int class_index, void *obj, CRYPTO_EX_DATA *ad)</argsstring>
        <name>CRYPTO_free_ex_data</name>
        <param>
          <type>int</type>
          <declname>class_index</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type><ref refid="structcrypto__ex__data__st" kindref="compound">CRYPTO_EX_DATA</ref> *</type>
          <declname>ad</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="406" column="1"/>
      </memberdef>
      <memberdef kind="function" id="crypto_8h_1ac4a7d82b83b588b4f8c8e90c0179c600" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int CRYPTO_set_ex_data</definition>
        <argsstring>(CRYPTO_EX_DATA *ad, int idx, void *val)</argsstring>
        <name>CRYPTO_set_ex_data</name>
        <param>
          <type><ref refid="structcrypto__ex__data__st" kindref="compound">CRYPTO_EX_DATA</ref> *</type>
          <declname>ad</declname>
        </param>
        <param>
          <type>int</type>
          <declname>idx</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="409" column="1"/>
      </memberdef>
      <memberdef kind="function" id="crypto_8h_1aff745d0f3e0974080b714f853d0edb11" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* CRYPTO_get_ex_data</definition>
        <argsstring>(const CRYPTO_EX_DATA *ad, int idx)</argsstring>
        <name>CRYPTO_get_ex_data</name>
        <param>
          <type>const <ref refid="structcrypto__ex__data__st" kindref="compound">CRYPTO_EX_DATA</ref> *</type>
          <declname>ad</declname>
        </param>
        <param>
          <type>int</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="410" column="1"/>
      </memberdef>
      <memberdef kind="function" id="crypto_8h_1a99ad759160f9b800c191bfe78b7cade8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CRYPTO_cleanup_all_ex_data</definition>
        <argsstring>(void)</argsstring>
        <name>CRYPTO_cleanup_all_ex_data</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="413" column="1"/>
      </memberdef>
      <memberdef kind="function" id="crypto_8h_1a6a6896a38529165a8e3f09f2b9735423" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int CRYPTO_get_new_lockid</definition>
        <argsstring>(char *name)</argsstring>
        <name>CRYPTO_get_new_lockid</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="415" column="1"/>
      </memberdef>
      <memberdef kind="function" id="crypto_8h_1a73b718c83da28f5fd81dc41268e28f75" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int CRYPTO_num_locks</definition>
        <argsstring>(void)</argsstring>
        <name>CRYPTO_num_locks</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="417" column="1"/>
      </memberdef>
      <memberdef kind="function" id="crypto_8h_1a7f72294d0a4c19ce0e75c282be8ef0ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CRYPTO_lock</definition>
        <argsstring>(int mode, int type, const char *file, int line)</argsstring>
        <name>CRYPTO_lock</name>
        <param>
          <type>int</type>
          <declname>mode</declname>
        </param>
        <param>
          <type>int</type>
          <declname>type</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="418" column="1"/>
      </memberdef>
      <memberdef kind="function" id="crypto_8h_1a8bceb26e9e96b974ea53dd790b76f208" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CRYPTO_set_locking_callback</definition>
        <argsstring>(void(*func)(int mode, int type, const char *file, int line))</argsstring>
        <name>CRYPTO_set_locking_callback</name>
        <param>
          <type>void(*)(int mode, int type, const char *file, int line)</type>
          <declname>func</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="419" column="1"/>
      </memberdef>
      <memberdef kind="function" id="crypto_8h_1aa128ce18040d8679dc65ce2d526d4089" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CRYPTO_set_add_lock_callback</definition>
        <argsstring>(int(*func)(int *num, int mount, int type, const char *file, int line))</argsstring>
        <name>CRYPTO_set_add_lock_callback</name>
        <param>
          <type>int(*)(int *num, int mount, int type, const char *file, int line)</type>
          <declname>func</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="423" column="1"/>
      </memberdef>
      <memberdef kind="function" id="crypto_8h_1a454969d2514d1730e5991ae5ac3a1ee9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CRYPTO_THREADID_set_numeric</definition>
        <argsstring>(CRYPTO_THREADID *id, unsigned long val)</argsstring>
        <name>CRYPTO_THREADID_set_numeric</name>
        <param>
          <type><ref refid="structcrypto__threadid__st" kindref="compound">CRYPTO_THREADID</ref> *</type>
          <declname>id</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="435" column="1"/>
      </memberdef>
      <memberdef kind="function" id="crypto_8h_1a8dc2cc1fd1cd914e7fa0fdf79f17d953" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CRYPTO_THREADID_set_pointer</definition>
        <argsstring>(CRYPTO_THREADID *id, void *ptr)</argsstring>
        <name>CRYPTO_THREADID_set_pointer</name>
        <param>
          <type><ref refid="structcrypto__threadid__st" kindref="compound">CRYPTO_THREADID</ref> *</type>
          <declname>id</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="436" column="1"/>
      </memberdef>
      <memberdef kind="function" id="crypto_8h_1a0d56460e671369c8324fe4dadd468515" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int CRYPTO_THREADID_set_callback</definition>
        <argsstring>(void(*threadid_func)(CRYPTO_THREADID *))</argsstring>
        <name>CRYPTO_THREADID_set_callback</name>
        <param>
          <type>void(*)(<ref refid="structcrypto__threadid__st" kindref="compound">CRYPTO_THREADID</ref> *)</type>
          <declname>threadid_func</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="437" column="1"/>
      </memberdef>
      <memberdef kind="function" id="crypto_8h_1a5cb534419a491eefc612468062f83926" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CRYPTO_THREADID_current</definition>
        <argsstring>(CRYPTO_THREADID *id)</argsstring>
        <name>CRYPTO_THREADID_current</name>
        <param>
          <type><ref refid="structcrypto__threadid__st" kindref="compound">CRYPTO_THREADID</ref> *</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="439" column="1"/>
      </memberdef>
      <memberdef kind="function" id="crypto_8h_1a4e5f3711f7fd547b874b783fd140f992" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int CRYPTO_THREADID_cmp</definition>
        <argsstring>(const CRYPTO_THREADID *a, const CRYPTO_THREADID *b)</argsstring>
        <name>CRYPTO_THREADID_cmp</name>
        <param>
          <type>const <ref refid="structcrypto__threadid__st" kindref="compound">CRYPTO_THREADID</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structcrypto__threadid__st" kindref="compound">CRYPTO_THREADID</ref> *</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="440" column="1"/>
      </memberdef>
      <memberdef kind="function" id="crypto_8h_1ab0b09e8a88cefb347b972484a8123e2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CRYPTO_THREADID_cpy</definition>
        <argsstring>(CRYPTO_THREADID *dest, const CRYPTO_THREADID *src)</argsstring>
        <name>CRYPTO_THREADID_cpy</name>
        <param>
          <type><ref refid="structcrypto__threadid__st" kindref="compound">CRYPTO_THREADID</ref> *</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>const <ref refid="structcrypto__threadid__st" kindref="compound">CRYPTO_THREADID</ref> *</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="441" column="1"/>
      </memberdef>
      <memberdef kind="function" id="crypto_8h_1ad379866c0a47f29effc210656af6b109" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned long</type>
        <definition>unsigned long CRYPTO_THREADID_hash</definition>
        <argsstring>(const CRYPTO_THREADID *id)</argsstring>
        <name>CRYPTO_THREADID_hash</name>
        <param>
          <type>const <ref refid="structcrypto__threadid__st" kindref="compound">CRYPTO_THREADID</ref> *</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="442" column="1"/>
      </memberdef>
      <memberdef kind="function" id="crypto_8h_1a0cddd5c7ae6bab589d48b4114c7048f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CRYPTO_set_id_callback</definition>
        <argsstring>(unsigned long(*func)(void))</argsstring>
        <name>CRYPTO_set_id_callback</name>
        <param>
          <type>unsigned long(*)(void)</type>
          <declname>func</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="444" column="1"/>
      </memberdef>
      <memberdef kind="function" id="crypto_8h_1ae0a90746c99716c84812001d1a9f4058" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned long</type>
        <definition>unsigned long CRYPTO_thread_id</definition>
        <argsstring>(void)</argsstring>
        <name>CRYPTO_thread_id</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="446" column="1"/>
      </memberdef>
      <memberdef kind="function" id="crypto_8h_1acbec31a58846b45e6096156dc496a07e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* CRYPTO_get_lock_name</definition>
        <argsstring>(int type)</argsstring>
        <name>CRYPTO_get_lock_name</name>
        <param>
          <type>int</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="449" column="1"/>
      </memberdef>
      <memberdef kind="function" id="crypto_8h_1af77d6ad2d71134fe7fb2e383f28dbf80" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int CRYPTO_add_lock</definition>
        <argsstring>(int *pointer, int amount, int type, const char *file, int line)</argsstring>
        <name>CRYPTO_add_lock</name>
        <param>
          <type>int *</type>
          <declname>pointer</declname>
        </param>
        <param>
          <type>int</type>
          <declname>amount</declname>
        </param>
        <param>
          <type>int</type>
          <declname>type</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="450" column="1"/>
      </memberdef>
      <memberdef kind="function" id="crypto_8h_1a5db9bb57e8e9514ca2e7773f865ef227" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int CRYPTO_get_new_dynlockid</definition>
        <argsstring>(void)</argsstring>
        <name>CRYPTO_get_new_dynlockid</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="453" column="1"/>
      </memberdef>
      <memberdef kind="function" id="crypto_8h_1aa49cdafcabf446019c56d498a9862853" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CRYPTO_destroy_dynlockid</definition>
        <argsstring>(int i)</argsstring>
        <name>CRYPTO_destroy_dynlockid</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="454" column="1"/>
      </memberdef>
      <memberdef kind="function" id="crypto_8h_1a0df5a76ce78a9b7a3be5e8e112596331" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct CRYPTO_dynlock_value *</type>
        <definition>struct CRYPTO_dynlock_value* CRYPTO_get_dynlock_value</definition>
        <argsstring>(int i)</argsstring>
        <name>CRYPTO_get_dynlock_value</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="455" column="1"/>
      </memberdef>
      <memberdef kind="function" id="crypto_8h_1a27929070a957e988885f8704ac5a5da5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CRYPTO_set_dynlock_create_callback</definition>
        <argsstring>(struct CRYPTO_dynlock_value *(*dyn_create_function)(const char *file, int line))</argsstring>
        <name>CRYPTO_set_dynlock_create_callback</name>
        <param>
          <type>struct CRYPTO_dynlock_value *(*)(const char *file, int line)</type>
          <declname>dyn_create_function</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="456" column="1"/>
      </memberdef>
      <memberdef kind="function" id="crypto_8h_1a3d59695685fcbad4f3915a9636c64237" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CRYPTO_set_dynlock_lock_callback</definition>
        <argsstring>(void(*dyn_lock_function)(int mode, struct CRYPTO_dynlock_value *l, const char *file, int line))</argsstring>
        <name>CRYPTO_set_dynlock_lock_callback</name>
        <param>
          <type>void(*)(int mode, struct CRYPTO_dynlock_value *l, const char *file, int line)</type>
          <declname>dyn_lock_function</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="457" column="1"/>
      </memberdef>
      <memberdef kind="function" id="crypto_8h_1a404fd58eb1fb0bafe4316a9cbf1ea1fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CRYPTO_set_dynlock_destroy_callback</definition>
        <argsstring>(void(*dyn_destroy_function)(struct CRYPTO_dynlock_value *l, const char *file, int line))</argsstring>
        <name>CRYPTO_set_dynlock_destroy_callback</name>
        <param>
          <type>void(*)(struct CRYPTO_dynlock_value *l, const char *file, int line)</type>
          <declname>dyn_destroy_function</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="458" column="1"/>
      </memberdef>
      <memberdef kind="function" id="crypto_8h_1a88e4e28a6cec57e8849ea166b48543a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int CRYPTO_set_mem_functions</definition>
        <argsstring>(void *(*m)(size_t), void *(*r)(void *, size_t), void(*f)(void *))</argsstring>
        <name>CRYPTO_set_mem_functions</name>
        <param>
          <type>void *(*)(size_t)</type>
          <declname>m</declname>
        </param>
        <param>
          <type>void *(*)(void *, size_t)</type>
          <declname>r</declname>
        </param>
        <param>
          <type>void(*)(void *)</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="465" column="1"/>
      </memberdef>
      <memberdef kind="function" id="crypto_8h_1a3763eab5594ab82c09ad983414fcc821" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int CRYPTO_set_locked_mem_functions</definition>
        <argsstring>(void *(*m)(size_t), void(*free_func)(void *))</argsstring>
        <name>CRYPTO_set_locked_mem_functions</name>
        <param>
          <type>void *(*)(size_t)</type>
          <declname>m</declname>
        </param>
        <param>
          <type>void(*)(void *)</type>
          <declname>free_func</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="466" column="1"/>
      </memberdef>
      <memberdef kind="function" id="crypto_8h_1af593c14036f1e09b7580058c916149af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int CRYPTO_set_mem_ex_functions</definition>
        <argsstring>(void *(*m)(size_t, const char *, int), void *(*r)(void *, size_t, const char *, int), void(*f)(void *))</argsstring>
        <name>CRYPTO_set_mem_ex_functions</name>
        <param>
          <type>void *(*)(size_t, const char *, int)</type>
          <declname>m</declname>
        </param>
        <param>
          <type>void *(*)(void *, size_t, const char *, int)</type>
          <declname>r</declname>
        </param>
        <param>
          <type>void(*)(void *)</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="467" column="1"/>
      </memberdef>
      <memberdef kind="function" id="crypto_8h_1aec9a75224538c61d14661592e7cb493f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int CRYPTO_set_locked_mem_ex_functions</definition>
        <argsstring>(void *(*m)(size_t, const char *, int), void(*free_func)(void *))</argsstring>
        <name>CRYPTO_set_locked_mem_ex_functions</name>
        <param>
          <type>void *(*)(size_t, const char *, int)</type>
          <declname>m</declname>
        </param>
        <param>
          <type>void(*)(void *)</type>
          <declname>free_func</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="470" column="1"/>
      </memberdef>
      <memberdef kind="function" id="crypto_8h_1a5adaf683521ee3920fd0c444cb615449" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int CRYPTO_set_mem_debug_functions</definition>
        <argsstring>(void(*m)(void *, int, const char *, int, int), void(*r)(void *, void *, int, const char *, int, int), void(*f)(void *, int), void(*so)(long), long(*go)(void))</argsstring>
        <name>CRYPTO_set_mem_debug_functions</name>
        <param>
          <type>void(*)(void *, int, const char *, int, int)</type>
          <declname>m</declname>
        </param>
        <param>
          <type>void(*)(void *, void *, int, const char *, int, int)</type>
          <declname>r</declname>
        </param>
        <param>
          <type>void(*)(void *, int)</type>
          <declname>f</declname>
        </param>
        <param>
          <type>void(*)(long)</type>
          <declname>so</declname>
        </param>
        <param>
          <type>long(*)(void)</type>
          <declname>go</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="472" column="1"/>
      </memberdef>
      <memberdef kind="function" id="crypto_8h_1afe107fe5c011a3105ed5dc5aebf9f65a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CRYPTO_get_mem_functions</definition>
        <argsstring>(void *(**m)(size_t), void *(**r)(void *, size_t), void(**f)(void *))</argsstring>
        <name>CRYPTO_get_mem_functions</name>
        <param>
          <type>void *(**)(size_t)</type>
          <declname>m</declname>
        </param>
        <param>
          <type>void *(**)(void *, size_t)</type>
          <declname>r</declname>
        </param>
        <param>
          <type>void(**)(void *)</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="477" column="1"/>
      </memberdef>
      <memberdef kind="function" id="crypto_8h_1a7eaa7f2152055354e80f7f264d813a5c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CRYPTO_get_locked_mem_functions</definition>
        <argsstring>(void *(**m)(size_t), void(**f)(void *))</argsstring>
        <name>CRYPTO_get_locked_mem_functions</name>
        <param>
          <type>void *(**)(size_t)</type>
          <declname>m</declname>
        </param>
        <param>
          <type>void(**)(void *)</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="478" column="1"/>
      </memberdef>
      <memberdef kind="function" id="crypto_8h_1af25566d9be72ec46f86a5acdfb55043f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CRYPTO_get_mem_ex_functions</definition>
        <argsstring>(void *(**m)(size_t, const char *, int), void *(**r)(void *, size_t, const char *, int), void(**f)(void *))</argsstring>
        <name>CRYPTO_get_mem_ex_functions</name>
        <param>
          <type>void *(**)(size_t, const char *, int)</type>
          <declname>m</declname>
        </param>
        <param>
          <type>void *(**)(void *, size_t, const char *, int)</type>
          <declname>r</declname>
        </param>
        <param>
          <type>void(**)(void *)</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="479" column="1"/>
      </memberdef>
      <memberdef kind="function" id="crypto_8h_1a444fb6573fbfa3f04cd8587434911e7a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CRYPTO_get_locked_mem_ex_functions</definition>
        <argsstring>(void *(**m)(size_t, const char *, int), void(**f)(void *))</argsstring>
        <name>CRYPTO_get_locked_mem_ex_functions</name>
        <param>
          <type>void *(**)(size_t, const char *, int)</type>
          <declname>m</declname>
        </param>
        <param>
          <type>void(**)(void *)</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="482" column="1"/>
      </memberdef>
      <memberdef kind="function" id="crypto_8h_1a64a15317ac03a55ff78698c14a234da9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CRYPTO_get_mem_debug_functions</definition>
        <argsstring>(void(**m)(void *, int, const char *, int, int), void(**r)(void *, void *, int, const char *, int, int), void(**f)(void *, int), void(**so)(long), long(**go)(void))</argsstring>
        <name>CRYPTO_get_mem_debug_functions</name>
        <param>
          <type>void(**)(void *, int, const char *, int, int)</type>
          <declname>m</declname>
        </param>
        <param>
          <type>void(**)(void *, void *, int, const char *, int, int)</type>
          <declname>r</declname>
        </param>
        <param>
          <type>void(**)(void *, int)</type>
          <declname>f</declname>
        </param>
        <param>
          <type>void(**)(long)</type>
          <declname>so</declname>
        </param>
        <param>
          <type>long(**)(void)</type>
          <declname>go</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="484" column="1"/>
      </memberdef>
      <memberdef kind="function" id="crypto_8h_1a58320467ddd2b5ed178eeefc8d975622" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* CRYPTO_malloc_locked</definition>
        <argsstring>(int num, const char *file, int line)</argsstring>
        <name>CRYPTO_malloc_locked</name>
        <param>
          <type>int</type>
          <declname>num</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="490" column="1"/>
      </memberdef>
      <memberdef kind="function" id="crypto_8h_1a9517d1d12d65fe6219dbebd55fb43bda" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CRYPTO_free_locked</definition>
        <argsstring>(void *ptr)</argsstring>
        <name>CRYPTO_free_locked</name>
        <param>
          <type>void *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="491" column="1"/>
      </memberdef>
      <memberdef kind="function" id="crypto_8h_1a5ef38f58893710818de363485ce1df66" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* CRYPTO_malloc</definition>
        <argsstring>(int num, const char *file, int line)</argsstring>
        <name>CRYPTO_malloc</name>
        <param>
          <type>int</type>
          <declname>num</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="492" column="1"/>
      </memberdef>
      <memberdef kind="function" id="crypto_8h_1ac42fe6fdfc461d44597bfbdb885b9609" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* CRYPTO_strdup</definition>
        <argsstring>(const char *str, const char *file, int line)</argsstring>
        <name>CRYPTO_strdup</name>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="493" column="1"/>
      </memberdef>
      <memberdef kind="function" id="crypto_8h_1a1fa85649a422200760f1ba509c014141" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CRYPTO_free</definition>
        <argsstring>(void *ptr)</argsstring>
        <name>CRYPTO_free</name>
        <param>
          <type>void *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="494" column="1"/>
      </memberdef>
      <memberdef kind="function" id="crypto_8h_1a3107ea051300e8d2652532920f03489c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* CRYPTO_realloc</definition>
        <argsstring>(void *addr, int num, const char *file, int line)</argsstring>
        <name>CRYPTO_realloc</name>
        <param>
          <type>void *</type>
          <declname>addr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="495" column="1"/>
      </memberdef>
      <memberdef kind="function" id="crypto_8h_1ac1d26dee2a9d0cc51c7873ac892dfa56" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* CRYPTO_realloc_clean</definition>
        <argsstring>(void *addr, int old_num, int num, const char *file, int line)</argsstring>
        <name>CRYPTO_realloc_clean</name>
        <param>
          <type>void *</type>
          <declname>addr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>old_num</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="496" column="1"/>
      </memberdef>
      <memberdef kind="function" id="crypto_8h_1a11fc0380d6338aaeed65c18a0bfa240b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* CRYPTO_remalloc</definition>
        <argsstring>(void *addr, int num, const char *file, int line)</argsstring>
        <name>CRYPTO_remalloc</name>
        <param>
          <type>void *</type>
          <declname>addr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="498" column="1"/>
      </memberdef>
      <memberdef kind="function" id="crypto_8h_1a2aa47e40c63b05d00e9a780592f2a2b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void OPENSSL_cleanse</definition>
        <argsstring>(void *ptr, size_t len)</argsstring>
        <name>OPENSSL_cleanse</name>
        <param>
          <type>void *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="500" column="1"/>
      </memberdef>
      <memberdef kind="function" id="crypto_8h_1a46b1883ef004a43faa3ff26318bb9220" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CRYPTO_set_mem_debug_options</definition>
        <argsstring>(long bits)</argsstring>
        <name>CRYPTO_set_mem_debug_options</name>
        <param>
          <type>long</type>
          <declname>bits</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="502" column="1"/>
      </memberdef>
      <memberdef kind="function" id="crypto_8h_1aadcc3cd5894aeeb73802422db6817b89" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long CRYPTO_get_mem_debug_options</definition>
        <argsstring>(void)</argsstring>
        <name>CRYPTO_get_mem_debug_options</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="503" column="1"/>
      </memberdef>
      <memberdef kind="function" id="crypto_8h_1aeee2078b5831fd327c0cd62300ca7ab8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int CRYPTO_push_info_</definition>
        <argsstring>(const char *info, const char *file, int line)</argsstring>
        <name>CRYPTO_push_info_</name>
        <param>
          <type>const char *</type>
          <declname>info</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="507" column="1"/>
      </memberdef>
      <memberdef kind="function" id="crypto_8h_1adba40b25d5050bd40efd0c951284f330" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int CRYPTO_pop_info</definition>
        <argsstring>(void)</argsstring>
        <name>CRYPTO_pop_info</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="508" column="1"/>
      </memberdef>
      <memberdef kind="function" id="crypto_8h_1a503f333543546ccf93b4896cb54e00ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int CRYPTO_remove_all_info</definition>
        <argsstring>(void)</argsstring>
        <name>CRYPTO_remove_all_info</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="509" column="1"/>
      </memberdef>
      <memberdef kind="function" id="crypto_8h_1ab85bec71092ff176dd230918e65c7024" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CRYPTO_dbg_malloc</definition>
        <argsstring>(void *addr, int num, const char *file, int line, int before_p)</argsstring>
        <name>CRYPTO_dbg_malloc</name>
        <param>
          <type>void *</type>
          <declname>addr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <param>
          <type>int</type>
          <declname>before_p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="519" column="1"/>
      </memberdef>
      <memberdef kind="function" id="crypto_8h_1a9f0581dde255b6106fa6d70210112d39" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CRYPTO_dbg_realloc</definition>
        <argsstring>(void *addr1, void *addr2, int num, const char *file, int line, int before_p)</argsstring>
        <name>CRYPTO_dbg_realloc</name>
        <param>
          <type>void *</type>
          <declname>addr1</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>addr2</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <param>
          <type>int</type>
          <declname>before_p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="520" column="1"/>
      </memberdef>
      <memberdef kind="function" id="crypto_8h_1aa88a72416a0462551cc58324c1d9143e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CRYPTO_dbg_free</definition>
        <argsstring>(void *addr, int before_p)</argsstring>
        <name>CRYPTO_dbg_free</name>
        <param>
          <type>void *</type>
          <declname>addr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>before_p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="521" column="1"/>
      </memberdef>
      <memberdef kind="function" id="crypto_8h_1a7090a84946964a1721587b4a42f60a20" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CRYPTO_dbg_set_options</definition>
        <argsstring>(long bits)</argsstring>
        <name>CRYPTO_dbg_set_options</name>
        <param>
          <type>long</type>
          <declname>bits</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="530" column="1"/>
      </memberdef>
      <memberdef kind="function" id="crypto_8h_1a7e7b6efbce43aca0c1ebc6ca0bba12f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long CRYPTO_dbg_get_options</definition>
        <argsstring>(void)</argsstring>
        <name>CRYPTO_dbg_get_options</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="531" column="1"/>
      </memberdef>
      <memberdef kind="function" id="crypto_8h_1abb29b778542ca9fd2c713aaa54b53362" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CRYPTO_mem_leaks_fp</definition>
        <argsstring>(FILE *)</argsstring>
        <name>CRYPTO_mem_leaks_fp</name>
        <param>
          <type>FILE *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="535" column="1"/>
      </memberdef>
      <memberdef kind="function" id="crypto_8h_1a7eec72230eccd6846270ed004e1dd814" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CRYPTO_mem_leaks</definition>
        <argsstring>(struct bio_st *bio)</argsstring>
        <name>CRYPTO_mem_leaks</name>
        <param>
          <type>struct <ref refid="structbio__st" kindref="compound">bio_st</ref> *</type>
          <declname>bio</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="537" column="1"/>
      </memberdef>
      <memberdef kind="function" id="crypto_8h_1a5aac1be65c31d9a57e010d47d4d96fd2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CRYPTO_mem_leaks_cb</definition>
        <argsstring>(CRYPTO_MEM_LEAK_CB *cb)</argsstring>
        <name>CRYPTO_mem_leaks_cb</name>
        <param>
          <type>CRYPTO_MEM_LEAK_CB *</type>
          <declname>cb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="540" column="1"/>
      </memberdef>
      <memberdef kind="function" id="crypto_8h_1a26714429c0c616a2070897e4cc38052d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void OpenSSLDie</definition>
        <argsstring>(const char *file, int line, const char *assertion)</argsstring>
        <name>OpenSSLDie</name>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>assertion</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="543" column="1"/>
      </memberdef>
      <memberdef kind="function" id="crypto_8h_1a7f74cb3aa355b31a38df80e122609e7c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned long *</type>
        <definition>unsigned long* OPENSSL_ia32cap_loc</definition>
        <argsstring>(void)</argsstring>
        <name>OPENSSL_ia32cap_loc</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="546" column="1"/>
      </memberdef>
      <memberdef kind="function" id="crypto_8h_1a2fa6508f1431ecf404b9ffe992c92de1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int OPENSSL_isservice</definition>
        <argsstring>(void)</argsstring>
        <name>OPENSSL_isservice</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="548" column="1"/>
      </memberdef>
      <memberdef kind="function" id="crypto_8h_1a91da69d0cb1517d1b12ba20c40b5c17f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int FIPS_mode</definition>
        <argsstring>(void)</argsstring>
        <name>FIPS_mode</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="550" column="1"/>
      </memberdef>
      <memberdef kind="function" id="crypto_8h_1af417dee8f659adef658951ccc63701eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int FIPS_mode_set</definition>
        <argsstring>(int r)</argsstring>
        <name>FIPS_mode_set</name>
        <param>
          <type>int</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="551" column="1"/>
      </memberdef>
      <memberdef kind="function" id="crypto_8h_1ab210ed1b6d160df38307383564d302cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void OPENSSL_init</definition>
        <argsstring>(void)</argsstring>
        <name>OPENSSL_init</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="553" column="1"/>
      </memberdef>
      <memberdef kind="function" id="crypto_8h_1a8cd9e185d80de8a50392bdf0f0eb502d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int CRYPTO_memcmp</definition>
        <argsstring>(const void *a, const void *b, size_t len)</argsstring>
        <name>CRYPTO_memcmp</name>
        <param>
          <type>const void *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="582" column="1"/>
      </memberdef>
      <memberdef kind="function" id="crypto_8h_1acc626fbd21290b0f22a671d2093e8cf3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ERR_load_CRYPTO_strings</definition>
        <argsstring>(void)</argsstring>
        <name>ERR_load_CRYPTO_strings</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/crypto.h" line="588" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>crypto/crypto.h<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>====================================================================</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>1998-2006<sp/>The<sp/>OpenSSL<sp/>Project.<sp/><sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>1.<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.<sp/></highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>2.<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>the<sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>distribution.</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>3.<sp/>All<sp/>advertising<sp/>materials<sp/>mentioning<sp/>features<sp/>or<sp/>use<sp/>of<sp/>this</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>software<sp/>must<sp/>display<sp/>the<sp/>following<sp/>acknowledgment:</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>&quot;This<sp/>product<sp/>includes<sp/>software<sp/>developed<sp/>by<sp/>the<sp/>OpenSSL<sp/>Project</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>for<sp/>use<sp/>in<sp/>the<sp/>OpenSSL<sp/>Toolkit.<sp/>(http://www.openssl.org/)&quot;</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>4.<sp/>The<sp/>names<sp/>&quot;OpenSSL<sp/>Toolkit&quot;<sp/>and<sp/>&quot;OpenSSL<sp/>Project&quot;<sp/>must<sp/>not<sp/>be<sp/>used<sp/>to</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from<sp/>this<sp/>software<sp/>without</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>prior<sp/>written<sp/>permission.<sp/>For<sp/>written<sp/>permission,<sp/>please<sp/>contact</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>openssl-core@openssl.org.</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>5.<sp/>Products<sp/>derived<sp/>from<sp/>this<sp/>software<sp/>may<sp/>not<sp/>be<sp/>called<sp/>&quot;OpenSSL&quot;</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>nor<sp/>may<sp/>&quot;OpenSSL&quot;<sp/>appear<sp/>in<sp/>their<sp/>names<sp/>without<sp/>prior<sp/>written</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>permission<sp/>of<sp/>the<sp/>OpenSSL<sp/>Project.</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*<sp/>6.<sp/>Redistributions<sp/>of<sp/>any<sp/>form<sp/>whatsoever<sp/>must<sp/>retain<sp/>the<sp/>following</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>acknowledgment:</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>&quot;This<sp/>product<sp/>includes<sp/>software<sp/>developed<sp/>by<sp/>the<sp/>OpenSSL<sp/>Project</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>for<sp/>use<sp/>in<sp/>the<sp/>OpenSSL<sp/>Toolkit<sp/>(http://www.openssl.org/)&quot;</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>OpenSSL<sp/>PROJECT<sp/>``AS<sp/>IS&apos;&apos;<sp/>AND<sp/>ANY</highlight></codeline>
<codeline lineno="37"><highlight class="comment"><sp/>*<sp/>EXPRESSED<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>THE</highlight></codeline>
<codeline lineno="38"><highlight class="comment"><sp/>*<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR</highlight></codeline>
<codeline lineno="39"><highlight class="comment"><sp/>*<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/><sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>OpenSSL<sp/>PROJECT<sp/>OR</highlight></codeline>
<codeline lineno="40"><highlight class="comment"><sp/>*<sp/>ITS<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,</highlight></codeline>
<codeline lineno="41"><highlight class="comment"><sp/>*<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT</highlight></codeline>
<codeline lineno="42"><highlight class="comment"><sp/>*<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;</highlight></codeline>
<codeline lineno="43"><highlight class="comment"><sp/>*<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/>*<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/>*<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/>*<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/>*<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/>*<sp/>====================================================================</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="50"><highlight class="comment"><sp/>*<sp/>This<sp/>product<sp/>includes<sp/>cryptographic<sp/>software<sp/>written<sp/>by<sp/>Eric<sp/>Young</highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/>*<sp/>(eay@cryptsoft.com).<sp/><sp/>This<sp/>product<sp/>includes<sp/>software<sp/>written<sp/>by<sp/>Tim</highlight></codeline>
<codeline lineno="52"><highlight class="comment"><sp/>*<sp/>Hudson<sp/>(tjh@cryptsoft.com).</highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Copyright<sp/>(C)<sp/>1995-1998<sp/>Eric<sp/>Young<sp/>(eay@cryptsoft.com)</highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/>*<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="57"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="58"><highlight class="comment"><sp/>*<sp/>This<sp/>package<sp/>is<sp/>an<sp/>SSL<sp/>implementation<sp/>written</highlight></codeline>
<codeline lineno="59"><highlight class="comment"><sp/>*<sp/>by<sp/>Eric<sp/>Young<sp/>(eay@cryptsoft.com).</highlight></codeline>
<codeline lineno="60"><highlight class="comment"><sp/>*<sp/>The<sp/>implementation<sp/>was<sp/>written<sp/>so<sp/>as<sp/>to<sp/>conform<sp/>with<sp/>Netscapes<sp/>SSL.</highlight></codeline>
<codeline lineno="61"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="62"><highlight class="comment"><sp/>*<sp/>This<sp/>library<sp/>is<sp/>free<sp/>for<sp/>commercial<sp/>and<sp/>non-commercial<sp/>use<sp/>as<sp/>long<sp/>as</highlight></codeline>
<codeline lineno="63"><highlight class="comment"><sp/>*<sp/>the<sp/>following<sp/>conditions<sp/>are<sp/>aheared<sp/>to.<sp/><sp/>The<sp/>following<sp/>conditions</highlight></codeline>
<codeline lineno="64"><highlight class="comment"><sp/>*<sp/>apply<sp/>to<sp/>all<sp/>code<sp/>found<sp/>in<sp/>this<sp/>distribution,<sp/>be<sp/>it<sp/>the<sp/>RC4,<sp/>RSA,</highlight></codeline>
<codeline lineno="65"><highlight class="comment"><sp/>*<sp/>lhash,<sp/>DES,<sp/>etc.,<sp/>code;<sp/>not<sp/>just<sp/>the<sp/>SSL<sp/>code.<sp/><sp/>The<sp/>SSL<sp/>documentation</highlight></codeline>
<codeline lineno="66"><highlight class="comment"><sp/>*<sp/>included<sp/>with<sp/>this<sp/>distribution<sp/>is<sp/>covered<sp/>by<sp/>the<sp/>same<sp/>copyright<sp/>terms</highlight></codeline>
<codeline lineno="67"><highlight class="comment"><sp/>*<sp/>except<sp/>that<sp/>the<sp/>holder<sp/>is<sp/>Tim<sp/>Hudson<sp/>(tjh@cryptsoft.com).</highlight></codeline>
<codeline lineno="68"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="69"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>remains<sp/>Eric<sp/>Young&apos;s,<sp/>and<sp/>as<sp/>such<sp/>any<sp/>Copyright<sp/>notices<sp/>in</highlight></codeline>
<codeline lineno="70"><highlight class="comment"><sp/>*<sp/>the<sp/>code<sp/>are<sp/>not<sp/>to<sp/>be<sp/>removed.</highlight></codeline>
<codeline lineno="71"><highlight class="comment"><sp/>*<sp/>If<sp/>this<sp/>package<sp/>is<sp/>used<sp/>in<sp/>a<sp/>product,<sp/>Eric<sp/>Young<sp/>should<sp/>be<sp/>given<sp/>attribution</highlight></codeline>
<codeline lineno="72"><highlight class="comment"><sp/>*<sp/>as<sp/>the<sp/>author<sp/>of<sp/>the<sp/>parts<sp/>of<sp/>the<sp/>library<sp/>used.</highlight></codeline>
<codeline lineno="73"><highlight class="comment"><sp/>*<sp/>This<sp/>can<sp/>be<sp/>in<sp/>the<sp/>form<sp/>of<sp/>a<sp/>textual<sp/>message<sp/>at<sp/>program<sp/>startup<sp/>or</highlight></codeline>
<codeline lineno="74"><highlight class="comment"><sp/>*<sp/>in<sp/>documentation<sp/>(online<sp/>or<sp/>textual)<sp/>provided<sp/>with<sp/>the<sp/>package.</highlight></codeline>
<codeline lineno="75"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="76"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="77"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions</highlight></codeline>
<codeline lineno="78"><highlight class="comment"><sp/>*<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="79"><highlight class="comment"><sp/>*<sp/>1.<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>copyright</highlight></codeline>
<codeline lineno="80"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="81"><highlight class="comment"><sp/>*<sp/>2.<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="82"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="83"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="84"><highlight class="comment"><sp/>*<sp/>3.<sp/>All<sp/>advertising<sp/>materials<sp/>mentioning<sp/>features<sp/>or<sp/>use<sp/>of<sp/>this<sp/>software</highlight></codeline>
<codeline lineno="85"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>must<sp/>display<sp/>the<sp/>following<sp/>acknowledgement:</highlight></codeline>
<codeline lineno="86"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>&quot;This<sp/>product<sp/>includes<sp/>cryptographic<sp/>software<sp/>written<sp/>by</highlight></codeline>
<codeline lineno="87"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>Eric<sp/>Young<sp/>(eay@cryptsoft.com)&quot;</highlight></codeline>
<codeline lineno="88"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>The<sp/>word<sp/>&apos;cryptographic&apos;<sp/>can<sp/>be<sp/>left<sp/>out<sp/>if<sp/>the<sp/>rouines<sp/>from<sp/>the<sp/>library</highlight></codeline>
<codeline lineno="89"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>being<sp/>used<sp/>are<sp/>not<sp/>cryptographic<sp/>related<sp/>:-).</highlight></codeline>
<codeline lineno="90"><highlight class="comment"><sp/>*<sp/>4.<sp/>If<sp/>you<sp/>include<sp/>any<sp/>Windows<sp/>specific<sp/>code<sp/>(or<sp/>a<sp/>derivative<sp/>thereof)<sp/>from<sp/></highlight></codeline>
<codeline lineno="91"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>the<sp/>apps<sp/>directory<sp/>(application<sp/>code)<sp/>you<sp/>must<sp/>include<sp/>an<sp/>acknowledgement:</highlight></codeline>
<codeline lineno="92"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>&quot;This<sp/>product<sp/>includes<sp/>software<sp/>written<sp/>by<sp/>Tim<sp/>Hudson<sp/>(tjh@cryptsoft.com)&quot;</highlight></codeline>
<codeline lineno="93"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="94"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>ERIC<sp/>YOUNG<sp/>``AS<sp/>IS&apos;&apos;<sp/>AND</highlight></codeline>
<codeline lineno="95"><highlight class="comment"><sp/>*<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>THE</highlight></codeline>
<codeline lineno="96"><highlight class="comment"><sp/>*<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE</highlight></codeline>
<codeline lineno="97"><highlight class="comment"><sp/>*<sp/>ARE<sp/>DISCLAIMED.<sp/><sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>AUTHOR<sp/>OR<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE</highlight></codeline>
<codeline lineno="98"><highlight class="comment"><sp/>*<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL</highlight></codeline>
<codeline lineno="99"><highlight class="comment"><sp/>*<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS</highlight></codeline>
<codeline lineno="100"><highlight class="comment"><sp/>*<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)</highlight></codeline>
<codeline lineno="101"><highlight class="comment"><sp/>*<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT</highlight></codeline>
<codeline lineno="102"><highlight class="comment"><sp/>*<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY</highlight></codeline>
<codeline lineno="103"><highlight class="comment"><sp/>*<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF</highlight></codeline>
<codeline lineno="104"><highlight class="comment"><sp/>*<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="105"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="106"><highlight class="comment"><sp/>*<sp/>The<sp/>licence<sp/>and<sp/>distribution<sp/>terms<sp/>for<sp/>any<sp/>publically<sp/>available<sp/>version<sp/>or</highlight></codeline>
<codeline lineno="107"><highlight class="comment"><sp/>*<sp/>derivative<sp/>of<sp/>this<sp/>code<sp/>cannot<sp/>be<sp/>changed.<sp/><sp/>i.e.<sp/>this<sp/>code<sp/>cannot<sp/>simply<sp/>be</highlight></codeline>
<codeline lineno="108"><highlight class="comment"><sp/>*<sp/>copied<sp/>and<sp/>put<sp/>under<sp/>another<sp/>distribution<sp/>licence</highlight></codeline>
<codeline lineno="109"><highlight class="comment"><sp/>*<sp/>[including<sp/>the<sp/>GNU<sp/>Public<sp/>Licence.]</highlight></codeline>
<codeline lineno="110"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>====================================================================</highlight></codeline>
<codeline lineno="112"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>2002<sp/>Sun<sp/>Microsystems,<sp/>Inc.<sp/>ALL<sp/>RIGHTS<sp/>RESERVED.</highlight></codeline>
<codeline lineno="113"><highlight class="comment"><sp/>*<sp/>ECDH<sp/>support<sp/>in<sp/>OpenSSL<sp/>originally<sp/>developed<sp/>by<sp/></highlight></codeline>
<codeline lineno="114"><highlight class="comment"><sp/>*<sp/>SUN<sp/>MICROSYSTEMS,<sp/>INC.,<sp/>and<sp/>contributed<sp/>to<sp/>the<sp/>OpenSSL<sp/>project.</highlight></codeline>
<codeline lineno="115"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>HEADER_CRYPTO_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>HEADER_CRYPTO_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;openssl/e_os2.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>OPENSSL_NO_FP_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;openssl/stack.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;openssl/safestack.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;openssl/opensslv.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;openssl/ossl_typ.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>CHARSET_EBCDIC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;openssl/ebcdic.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Resolve<sp/>problems<sp/>on<sp/>some<sp/>operating<sp/>systems<sp/>with<sp/>symbol<sp/>names<sp/>that<sp/>clash</highlight></codeline>
<codeline lineno="138"><highlight class="comment"><sp/><sp/><sp/>one<sp/>way<sp/>or<sp/>another<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;openssl/symhacks.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/><sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Backward<sp/>compatibility<sp/>to<sp/>SSLeay<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>This<sp/>is<sp/>more<sp/>to<sp/>be<sp/>used<sp/>to<sp/>check<sp/>the<sp/>correct<sp/>DLL<sp/>is<sp/>being<sp/>used</highlight></codeline>
<codeline lineno="147"><highlight class="comment"><sp/>*<sp/>in<sp/>the<sp/>MS<sp/>world.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SSLEAY_VERSION_NUMBER<sp/><sp/><sp/>OPENSSL_VERSION_NUMBER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SSLEAY_VERSION<sp/><sp/><sp/><sp/><sp/><sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>#define<sp/>SSLEAY_OPTIONS<sp/><sp/><sp/>1<sp/>no<sp/>longer<sp/>supported<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SSLEAY_CFLAGS<sp/><sp/><sp/><sp/><sp/><sp/><sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SSLEAY_BUILT_ON<sp/><sp/><sp/><sp/><sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SSLEAY_PLATFORM<sp/><sp/><sp/><sp/><sp/>4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SSLEAY_DIR<sp/><sp/><sp/><sp/><sp/><sp/>5</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Already<sp/>declared<sp/>in<sp/>ossl_typ.h<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structcrypto__ex__data__st" kindref="compound">crypto_ex_data_st</ref><sp/><ref refid="structcrypto__ex__data__st" kindref="compound">CRYPTO_EX_DATA</ref>;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Called<sp/>when<sp/>a<sp/>new<sp/>object<sp/>is<sp/>created<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>CRYPTO_EX_new(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*parent,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ptr,<sp/><ref refid="structcrypto__ex__data__st" kindref="compound">CRYPTO_EX_DATA</ref><sp/>*ad,</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idx,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>argl,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*argp);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Called<sp/>when<sp/>an<sp/>object<sp/>is<sp/>free()ed<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CRYPTO_EX_free(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*parent,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ptr,<sp/><ref refid="structcrypto__ex__data__st" kindref="compound">CRYPTO_EX_DATA</ref><sp/>*ad,</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idx,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>argl,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*argp);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Called<sp/>when<sp/>we<sp/>need<sp/>to<sp/>dup<sp/>an<sp/>object<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>CRYPTO_EX_dup(<ref refid="structcrypto__ex__data__st" kindref="compound">CRYPTO_EX_DATA</ref><sp/>*to,<sp/><ref refid="structcrypto__ex__data__st" kindref="compound">CRYPTO_EX_DATA</ref><sp/>*from,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*from_d,<sp/></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idx,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>argl,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*argp);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>A<sp/>generic<sp/>structure<sp/>to<sp/>pass<sp/>assorted<sp/>data<sp/>in<sp/>a<sp/>expandable<sp/>way<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171" refid="structopenssl__item__st" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structopenssl__item__st" kindref="compound">openssl_item_st</ref></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>code;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*value;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Not<sp/>used<sp/>for<sp/>flag<sp/>attributes<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>value_size;<sp/><sp/></highlight><highlight class="comment">/*<sp/>Max<sp/>size<sp/>of<sp/>value<sp/>for<sp/>output,<sp/>length<sp/>for<sp/>input<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*value_length;<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Returned<sp/>length<sp/>of<sp/>value<sp/>for<sp/>output<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><ref refid="structopenssl__item__st" kindref="compound">OPENSSL_ITEM</ref>;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>When<sp/>changing<sp/>the<sp/>CRYPTO_LOCK_*<sp/>list,<sp/>be<sp/>sure<sp/>to<sp/>maintin<sp/>the<sp/>text<sp/>lock</highlight></codeline>
<codeline lineno="181"><highlight class="comment"><sp/>*<sp/>names<sp/>in<sp/>cryptlib.c</highlight></codeline>
<codeline lineno="182"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CRYPTO_LOCK_ERR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CRYPTO_LOCK_EX_DATA<sp/><sp/><sp/><sp/><sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CRYPTO_LOCK_X509<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CRYPTO_LOCK_X509_INFO<sp/><sp/><sp/><sp/><sp/><sp/><sp/>4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CRYPTO_LOCK_X509_PKEY<sp/><sp/><sp/><sp/><sp/><sp/><sp/>5</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CRYPTO_LOCK_X509_CRL<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>6</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CRYPTO_LOCK_X509_REQ<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>7</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CRYPTO_LOCK_DSA<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>8</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CRYPTO_LOCK_RSA<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>9</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CRYPTO_LOCK_EVP_PKEY<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>10</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CRYPTO_LOCK_X509_STORE<sp/><sp/><sp/><sp/><sp/><sp/>11</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CRYPTO_LOCK_SSL_CTX<sp/><sp/><sp/><sp/><sp/>12</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CRYPTO_LOCK_SSL_CERT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>13</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CRYPTO_LOCK_SSL_SESSION<sp/><sp/><sp/><sp/><sp/>14</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CRYPTO_LOCK_SSL_SESS_CERT<sp/><sp/><sp/>15</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CRYPTO_LOCK_SSL<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>16</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CRYPTO_LOCK_SSL_METHOD<sp/><sp/><sp/><sp/><sp/><sp/>17</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CRYPTO_LOCK_RAND<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>18</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CRYPTO_LOCK_RAND2<sp/><sp/><sp/><sp/><sp/><sp/><sp/>19</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CRYPTO_LOCK_MALLOC<sp/><sp/><sp/><sp/><sp/><sp/>20</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CRYPTO_LOCK_BIO<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>21</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CRYPTO_LOCK_GETHOSTBYNAME<sp/><sp/><sp/>22</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CRYPTO_LOCK_GETSERVBYNAME<sp/><sp/><sp/>23</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CRYPTO_LOCK_READDIR<sp/><sp/><sp/><sp/><sp/>24</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CRYPTO_LOCK_RSA_BLINDING<sp/><sp/><sp/><sp/>25</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CRYPTO_LOCK_DH<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>26</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CRYPTO_LOCK_MALLOC2<sp/><sp/><sp/><sp/><sp/>27</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CRYPTO_LOCK_DSO<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>28</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CRYPTO_LOCK_DYNLOCK<sp/><sp/><sp/><sp/><sp/>29</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CRYPTO_LOCK_ENGINE<sp/><sp/><sp/><sp/><sp/><sp/>30</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CRYPTO_LOCK_UI<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>31</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CRYPTO_LOCK_ECDSA<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CRYPTO_LOCK_EC<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>33</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CRYPTO_LOCK_ECDH<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>34</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CRYPTO_LOCK_BN<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>35</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CRYPTO_LOCK_EC_PRE_COMP<sp/><sp/><sp/><sp/><sp/>36</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CRYPTO_LOCK_STORE<sp/><sp/><sp/><sp/><sp/><sp/><sp/>37</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CRYPTO_LOCK_COMP<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>38</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CRYPTO_LOCK_FIPS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>39</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CRYPTO_LOCK_FIPS2<sp/><sp/><sp/><sp/><sp/><sp/><sp/>40</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CRYPTO_NUM_LOCKS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>41</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CRYPTO_LOCK<sp/><sp/><sp/><sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CRYPTO_UNLOCK<sp/><sp/><sp/><sp/><sp/><sp/><sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CRYPTO_READ<sp/><sp/><sp/><sp/><sp/>4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CRYPTO_WRITE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>8</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>OPENSSL_NO_LOCKING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>CRYPTO_w_lock</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CRYPTO_w_lock(type)<sp/>\</highlight></codeline>
<codeline lineno="234"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>CRYPTO_lock(CRYPTO_LOCK|CRYPTO_WRITE,type,__FILE__,__LINE__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CRYPTO_w_unlock(type)<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="236"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>CRYPTO_lock(CRYPTO_UNLOCK|CRYPTO_WRITE,type,__FILE__,__LINE__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CRYPTO_r_lock(type)<sp/>\</highlight></codeline>
<codeline lineno="238"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>CRYPTO_lock(CRYPTO_LOCK|CRYPTO_READ,type,__FILE__,__LINE__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CRYPTO_r_unlock(type)<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="240"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>CRYPTO_lock(CRYPTO_UNLOCK|CRYPTO_READ,type,__FILE__,__LINE__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CRYPTO_add(addr,amount,type)<sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="242"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>CRYPTO_add_lock(addr,amount,type,__FILE__,__LINE__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CRYPTO_w_lock(a)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CRYPTO_w_unlock(a)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CRYPTO_r_lock(a)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CRYPTO_r_unlock(a)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CRYPTO_add(a,b,c)<sp/><sp/><sp/>((*(a))+=(b))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Some<sp/>applications<sp/>as<sp/>well<sp/>as<sp/>some<sp/>parts<sp/>of<sp/>OpenSSL<sp/>need<sp/>to<sp/>allocate</highlight></codeline>
<codeline lineno="253"><highlight class="comment"><sp/><sp/><sp/>and<sp/>deallocate<sp/>locks<sp/>in<sp/>a<sp/>dynamic<sp/>fashion.<sp/><sp/>The<sp/>following<sp/>typedef</highlight></codeline>
<codeline lineno="254"><highlight class="comment"><sp/><sp/><sp/>makes<sp/>this<sp/>possible<sp/>in<sp/>a<sp/>type-safe<sp/>manner.<sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>struct<sp/>CRYPTO_dynlock_value<sp/>has<sp/>to<sp/>be<sp/>defined<sp/>by<sp/>the<sp/>application.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256" refid="struct_c_r_y_p_t_o__dynlock" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>references;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">CRYPTO_dynlock_value<sp/>*data;</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><ref refid="struct_c_r_y_p_t_o__dynlock" kindref="compound">CRYPTO_dynlock</ref>;</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>The<sp/>following<sp/>can<sp/>be<sp/>used<sp/>to<sp/>detect<sp/>memory<sp/>leaks<sp/>in<sp/>the<sp/>SSLeay<sp/>library.</highlight></codeline>
<codeline lineno="264"><highlight class="comment"><sp/>*<sp/>It<sp/>used,<sp/>it<sp/>turns<sp/>on<sp/>malloc<sp/>checking<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CRYPTO_MEM_CHECK_OFF<sp/><sp/><sp/><sp/>0x0<sp/></highlight><highlight class="comment">/*<sp/>an<sp/>enume<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CRYPTO_MEM_CHECK_ON<sp/>0x1<sp/></highlight><highlight class="comment">/*<sp/>a<sp/>bit<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CRYPTO_MEM_CHECK_ENABLE<sp/>0x2<sp/></highlight><highlight class="comment">/*<sp/>a<sp/>bit<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CRYPTO_MEM_CHECK_DISABLE<sp/>0x3<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>an<sp/>enume<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>The<sp/>following<sp/>are<sp/>bit<sp/>values<sp/>to<sp/>turn<sp/>on<sp/>or<sp/>off<sp/>options<sp/>connected<sp/>to<sp/>the</highlight></codeline>
<codeline lineno="272"><highlight class="comment"><sp/>*<sp/>malloc<sp/>checking<sp/>functionality<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Adds<sp/>time<sp/>to<sp/>the<sp/>memory<sp/>checking<sp/>information<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>V_CRYPTO_MDEBUG_TIME<sp/><sp/><sp/><sp/>0x1<sp/></highlight><highlight class="comment">/*<sp/>a<sp/>bit<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Adds<sp/>thread<sp/>number<sp/>to<sp/>the<sp/>memory<sp/>checking<sp/>information<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>V_CRYPTO_MDEBUG_THREAD<sp/><sp/>0x2<sp/></highlight><highlight class="comment">/*<sp/>a<sp/>bit<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>V_CRYPTO_MDEBUG_ALL<sp/>(V_CRYPTO_MDEBUG_TIME<sp/>|<sp/>V_CRYPTO_MDEBUG_THREAD)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>predec<sp/>of<sp/>the<sp/>BIO<sp/>type<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structbio__st" kindref="compound">bio_st</ref><sp/>BIO_dummy;</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="285" refid="structcrypto__ex__data__st" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structcrypto__ex__data__st" kindref="compound">crypto_ex_data_st</ref></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/>STACK_OF(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>*sk;</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dummy;<sp/></highlight><highlight class="comment">/*<sp/>gcc<sp/>is<sp/>screwing<sp/>up<sp/>this<sp/>data<sp/>structure<sp/>:-(<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="290"><highlight class="normal">DECLARE_STACK_OF(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>This<sp/>stuff<sp/>is<sp/>basically<sp/>class<sp/>callback<sp/>functions</highlight></codeline>
<codeline lineno="293"><highlight class="comment"><sp/>*<sp/>The<sp/>current<sp/>classes<sp/>are<sp/>SSL_CTX,<sp/>SSL,<sp/>SSL_SESSION,<sp/>and<sp/>a<sp/>few<sp/>more<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295" refid="structcrypto__ex__data__func__st" refkind="compound"><highlight class="normal">typedef<sp/>struct<sp/><ref refid="structcrypto__ex__data__func__st" kindref="compound">crypto_ex_data_func_st</ref></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>argl;<sp/><sp/></highlight><highlight class="comment">/*<sp/>Arbitary<sp/>long<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*argp;<sp/></highlight><highlight class="comment">/*<sp/>Arbitary<sp/>void<sp/>*<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/>CRYPTO_EX_new<sp/>*new_func;</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/>CRYPTO_EX_free<sp/>*free_func;</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/>CRYPTO_EX_dup<sp/>*dup_func;</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><ref refid="structcrypto__ex__data__func__st" kindref="compound">CRYPTO_EX_DATA_FUNCS</ref>;</highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal">DECLARE_STACK_OF(<ref refid="structcrypto__ex__data__func__st" kindref="compound">CRYPTO_EX_DATA_FUNCS</ref>)</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Per<sp/>class,<sp/>we<sp/>have<sp/>a<sp/>STACK<sp/>of<sp/>CRYPTO_EX_DATA_FUNCS<sp/>for<sp/>each<sp/>CRYPTO_EX_DATA</highlight></codeline>
<codeline lineno="307"><highlight class="comment"><sp/>*<sp/>entry.</highlight></codeline>
<codeline lineno="308"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CRYPTO_EX_INDEX_BIO<sp/><sp/><sp/><sp/><sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CRYPTO_EX_INDEX_SSL<sp/><sp/><sp/><sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CRYPTO_EX_INDEX_SSL_CTX<sp/><sp/><sp/><sp/><sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CRYPTO_EX_INDEX_SSL_SESSION<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CRYPTO_EX_INDEX_X509_STORE<sp/><sp/>4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CRYPTO_EX_INDEX_X509_STORE_CTX<sp/><sp/>5</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CRYPTO_EX_INDEX_RSA<sp/><sp/><sp/><sp/><sp/>6</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CRYPTO_EX_INDEX_DSA<sp/><sp/><sp/><sp/><sp/>7</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CRYPTO_EX_INDEX_DH<sp/><sp/><sp/><sp/><sp/><sp/>8</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CRYPTO_EX_INDEX_ENGINE<sp/><sp/><sp/><sp/><sp/><sp/>9</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CRYPTO_EX_INDEX_X509<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>10</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CRYPTO_EX_INDEX_UI<sp/><sp/><sp/><sp/><sp/><sp/>11</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CRYPTO_EX_INDEX_ECDSA<sp/><sp/><sp/><sp/><sp/><sp/><sp/>12</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CRYPTO_EX_INDEX_ECDH<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>13</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CRYPTO_EX_INDEX_COMP<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>14</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CRYPTO_EX_INDEX_STORE<sp/><sp/><sp/><sp/><sp/><sp/><sp/>15</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Dynamically<sp/>assigned<sp/>indexes<sp/>start<sp/>from<sp/>this<sp/>value<sp/>(don&apos;t<sp/>use<sp/>directly,<sp/>use</highlight></codeline>
<codeline lineno="328"><highlight class="comment"><sp/>*<sp/>via<sp/>CRYPTO_ex_data_new_class).<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CRYPTO_EX_INDEX_USER<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>100</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>This<sp/>is<sp/>the<sp/>default<sp/>callbacks,<sp/>but<sp/>we<sp/>can<sp/>have<sp/>others<sp/>as<sp/>well:</highlight></codeline>
<codeline lineno="333"><highlight class="comment"><sp/>*<sp/>this<sp/>is<sp/>needed<sp/>in<sp/>Win32<sp/>where<sp/>the<sp/>application<sp/>malloc<sp/>and<sp/>the</highlight></codeline>
<codeline lineno="334"><highlight class="comment"><sp/>*<sp/>library<sp/>malloc<sp/>may<sp/>not<sp/>be<sp/>the<sp/>same.</highlight></codeline>
<codeline lineno="335"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CRYPTO_malloc_init()<sp/><sp/><sp/><sp/>CRYPTO_set_mem_functions(\</highlight></codeline>
<codeline lineno="337"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>malloc,<sp/>realloc,<sp/>free)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined<sp/>CRYPTO_MDEBUG_ALL<sp/>||<sp/>defined<sp/>CRYPTO_MDEBUG_TIME<sp/>||<sp/>defined<sp/>CRYPTO_MDEBUG_THREAD</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>ifndef<sp/>CRYPTO_MDEBUG<sp/></highlight><highlight class="comment">/*<sp/>avoid<sp/>duplicate<sp/>#define<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>CRYPTO_MDEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Set<sp/>standard<sp/>debugging<sp/>functions<sp/>(not<sp/>done<sp/>by<sp/>default</highlight></codeline>
<codeline lineno="346"><highlight class="comment"><sp/>*<sp/>unless<sp/>CRYPTO_MDEBUG<sp/>is<sp/>defined)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CRYPTO_malloc_debug_init()<sp/><sp/>do<sp/>{\</highlight></codeline>
<codeline lineno="348"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>CRYPTO_set_mem_debug_functions(\</highlight></codeline>
<codeline lineno="349"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CRYPTO_dbg_malloc,\</highlight></codeline>
<codeline lineno="350"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CRYPTO_dbg_realloc,\</highlight></codeline>
<codeline lineno="351"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CRYPTO_dbg_free,\</highlight></codeline>
<codeline lineno="352"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CRYPTO_dbg_set_options,\</highlight></codeline>
<codeline lineno="353"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CRYPTO_dbg_get_options);\</highlight></codeline>
<codeline lineno="354"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>while(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>CRYPTO_mem_ctrl(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mode);</highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>CRYPTO_is_mem_check_on(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>for<sp/>applications<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MemCheck_start()<sp/>CRYPTO_mem_ctrl(CRYPTO_MEM_CHECK_ON)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MemCheck_stop()<sp/>CRYPTO_mem_ctrl(CRYPTO_MEM_CHECK_OFF)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>for<sp/>library-internal<sp/>use<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MemCheck_on()<sp/><sp/><sp/>CRYPTO_mem_ctrl(CRYPTO_MEM_CHECK_ENABLE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MemCheck_off()<sp/><sp/>CRYPTO_mem_ctrl(CRYPTO_MEM_CHECK_DISABLE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>is_MemCheck_on()<sp/>CRYPTO_is_mem_check_on()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>OPENSSL_malloc(num)<sp/>CRYPTO_malloc((int)num,__FILE__,__LINE__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>OPENSSL_strdup(str)<sp/>CRYPTO_strdup((str),__FILE__,__LINE__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>OPENSSL_realloc(addr,num)<sp/>\</highlight></codeline>
<codeline lineno="371"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>CRYPTO_realloc((char<sp/>*)addr,(int)num,__FILE__,__LINE__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>OPENSSL_realloc_clean(addr,old_num,num)<sp/>\</highlight></codeline>
<codeline lineno="373"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>CRYPTO_realloc_clean(addr,old_num,num,__FILE__,__LINE__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>OPENSSL_remalloc(addr,num)<sp/>\</highlight></codeline>
<codeline lineno="375"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>CRYPTO_remalloc((char<sp/>**)addr,(int)num,__FILE__,__LINE__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>OPENSSL_freeFunc<sp/><sp/><sp/><sp/>CRYPTO_free</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>OPENSSL_free(addr)<sp/><sp/>CRYPTO_free(addr)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>OPENSSL_malloc_locked(num)<sp/>\</highlight></codeline>
<codeline lineno="380"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>CRYPTO_malloc_locked((int)num,__FILE__,__LINE__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>OPENSSL_free_locked(addr)<sp/>CRYPTO_free_locked(addr)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*SSLeay_version(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>type);</highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>SSLeay(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>OPENSSL_issetugid(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>An<sp/>opaque<sp/>type<sp/>representing<sp/>an<sp/>implementation<sp/>of<sp/>&quot;ex_data&quot;<sp/>support<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">st_CRYPTO_EX_DATA_IMPL<sp/><sp/><sp/>CRYPTO_EX_DATA_IMPL;</highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Return<sp/>an<sp/>opaque<sp/>pointer<sp/>to<sp/>the<sp/>current<sp/>&quot;ex_data&quot;<sp/>implementation<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CRYPTO_EX_DATA_IMPL<sp/>*CRYPTO_get_ex_data_implementation(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Sets<sp/>the<sp/>&quot;ex_data&quot;<sp/>implementation<sp/>to<sp/>be<sp/>used<sp/>(if<sp/>it&apos;s<sp/>not<sp/>too<sp/>late)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>CRYPTO_set_ex_data_implementation(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CRYPTO_EX_DATA_IMPL<sp/>*i);</highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Get<sp/>a<sp/>new<sp/>&quot;ex_data&quot;<sp/>class,<sp/>and<sp/>return<sp/>the<sp/>corresponding<sp/>&quot;class_index&quot;<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>CRYPTO_ex_data_new_class(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Within<sp/>a<sp/>given<sp/>class,<sp/>get/register<sp/>a<sp/>new<sp/>index<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>CRYPTO_get_ex_new_index(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>class_index,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>argl,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*argp,</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CRYPTO_EX_new<sp/>*new_func,<sp/>CRYPTO_EX_dup<sp/>*dup_func,</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CRYPTO_EX_free<sp/>*free_func);</highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Initialise/duplicate/free<sp/>CRYPTO_EX_DATA<sp/>variables<sp/>corresponding<sp/>to<sp/>a<sp/>given</highlight></codeline>
<codeline lineno="402"><highlight class="comment"><sp/>*<sp/>class<sp/>(invokes<sp/>whatever<sp/>per-class<sp/>callbacks<sp/>are<sp/>applicable)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>CRYPTO_new_ex_data(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>class_index,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*obj,<sp/><ref refid="structcrypto__ex__data__st" kindref="compound">CRYPTO_EX_DATA</ref><sp/>*ad);</highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>CRYPTO_dup_ex_data(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>class_index,<sp/><ref refid="structcrypto__ex__data__st" kindref="compound">CRYPTO_EX_DATA</ref><sp/>*to,</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structcrypto__ex__data__st" kindref="compound">CRYPTO_EX_DATA</ref><sp/>*from);</highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CRYPTO_free_ex_data(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>class_index,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*obj,<sp/><ref refid="structcrypto__ex__data__st" kindref="compound">CRYPTO_EX_DATA</ref><sp/>*ad);</highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Get/set<sp/>data<sp/>in<sp/>a<sp/>CRYPTO_EX_DATA<sp/>variable<sp/>corresponding<sp/>to<sp/>a<sp/>particular<sp/>index</highlight></codeline>
<codeline lineno="408"><highlight class="comment"><sp/>*<sp/>(relative<sp/>to<sp/>the<sp/>class<sp/>type<sp/>involved)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>CRYPTO_set_ex_data(<ref refid="structcrypto__ex__data__st" kindref="compound">CRYPTO_EX_DATA</ref><sp/>*ad,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idx,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*val);</highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*CRYPTO_get_ex_data(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structcrypto__ex__data__st" kindref="compound">CRYPTO_EX_DATA</ref><sp/>*ad,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idx);</highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>This<sp/>function<sp/>cleans<sp/>up<sp/>all<sp/>&quot;ex_data&quot;<sp/>state.<sp/>It<sp/>mustn&apos;t<sp/>be<sp/>called<sp/>under</highlight></codeline>
<codeline lineno="412"><highlight class="comment"><sp/>*<sp/>potential<sp/>race-conditions.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CRYPTO_cleanup_all_ex_data(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>CRYPTO_get_new_lockid(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name);</highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>CRYPTO_num_locks(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);<sp/></highlight><highlight class="comment">/*<sp/>return<sp/>CRYPTO_NUM_LOCKS<sp/>(shared<sp/>libs!)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CRYPTO_lock(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mode,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>type,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*file,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line);</highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CRYPTO_set_locking_callback(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*func)(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mode,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>type,</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*file,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line));</highlight></codeline>
<codeline lineno="421"><highlight class="normal">void<sp/>(*CRYPTO_get_locking_callback(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">))(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mode,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>type,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*file,</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line);</highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CRYPTO_set_add_lock_callback(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(*func)(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*num,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mount,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>type,</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*file,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line));</highlight></codeline>
<codeline lineno="425"><highlight class="normal">int<sp/>(*CRYPTO_get_add_lock_callback(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">))(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*num,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mount,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>type,</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*file,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line);</highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Don&apos;t<sp/>use<sp/>this<sp/>structure<sp/>directly.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="429" refid="structcrypto__threadid__st" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structcrypto__threadid__st" kindref="compound">crypto_threadid_st</ref></highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ptr;</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>val;</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><ref refid="structcrypto__threadid__st" kindref="compound">CRYPTO_THREADID</ref>;</highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Only<sp/>use<sp/>CRYPTO_THREADID_set_[numeric|pointer]()<sp/>within<sp/>callbacks<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CRYPTO_THREADID_set_numeric(<ref refid="structcrypto__threadid__st" kindref="compound">CRYPTO_THREADID</ref><sp/>*</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>val);</highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CRYPTO_THREADID_set_pointer(<ref refid="structcrypto__threadid__st" kindref="compound">CRYPTO_THREADID</ref><sp/>*</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ptr);</highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>CRYPTO_THREADID_set_callback(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*threadid_func)(<ref refid="structcrypto__threadid__st" kindref="compound">CRYPTO_THREADID</ref><sp/>*));</highlight></codeline>
<codeline lineno="438"><highlight class="normal">void<sp/>(*CRYPTO_THREADID_get_callback(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">))(<ref refid="structcrypto__threadid__st" kindref="compound">CRYPTO_THREADID</ref><sp/>*);</highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CRYPTO_THREADID_current(<ref refid="structcrypto__threadid__st" kindref="compound">CRYPTO_THREADID</ref><sp/>*</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>CRYPTO_THREADID_cmp(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structcrypto__threadid__st" kindref="compound">CRYPTO_THREADID</ref><sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structcrypto__threadid__st" kindref="compound">CRYPTO_THREADID</ref><sp/>*b);</highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CRYPTO_THREADID_cpy(<ref refid="structcrypto__threadid__st" kindref="compound">CRYPTO_THREADID</ref><sp/>*dest,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structcrypto__threadid__st" kindref="compound">CRYPTO_THREADID</ref><sp/>*src);</highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>CRYPTO_THREADID_hash(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structcrypto__threadid__st" kindref="compound">CRYPTO_THREADID</ref><sp/>*</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>OPENSSL_NO_DEPRECATED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CRYPTO_set_id_callback(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>(*func)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>long<sp/>(*CRYPTO_get_id_callback(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">))(void);</highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>CRYPTO_thread_id(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*CRYPTO_get_lock_name(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>type);</highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>CRYPTO_add_lock(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*pointer,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>amount,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>type,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*file,</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line);</highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>CRYPTO_get_new_dynlockid(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CRYPTO_destroy_dynlockid(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i);</highlight></codeline>
<codeline lineno="455"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">CRYPTO_dynlock_value<sp/>*CRYPTO_get_dynlock_value(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i);</highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CRYPTO_set_dynlock_create_callback(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>CRYPTO_dynlock_value<sp/>*(*dyn_create_function)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*file,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line));</highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CRYPTO_set_dynlock_lock_callback(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*dyn_lock_function)(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mode,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>CRYPTO_dynlock_value<sp/>*l,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*file,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line));</highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CRYPTO_set_dynlock_destroy_callback(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*dyn_destroy_function)(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>CRYPTO_dynlock_value<sp/>*l,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*file,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line));</highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">CRYPTO_dynlock_value<sp/>*(*CRYPTO_get_dynlock_create_callback(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">))(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*file,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line);</highlight></codeline>
<codeline lineno="460"><highlight class="normal">void<sp/>(*CRYPTO_get_dynlock_lock_callback(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">))(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mode,<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">CRYPTO_dynlock_value<sp/>*l,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*file,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line);</highlight></codeline>
<codeline lineno="461"><highlight class="normal">void<sp/>(*CRYPTO_get_dynlock_destroy_callback(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">))(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">CRYPTO_dynlock_value<sp/>*l,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*file,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line);</highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>CRYPTO_set_mem_functions<sp/>includes<sp/>CRYPTO_set_locked_mem_functions<sp/>--</highlight></codeline>
<codeline lineno="464"><highlight class="comment"><sp/>*<sp/>call<sp/>the<sp/>latter<sp/>last<sp/>if<sp/>you<sp/>need<sp/>different<sp/>functions<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>CRYPTO_set_mem_functions(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*(*m)(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">),</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*(*r)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">),<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*f)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*));</highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>CRYPTO_set_locked_mem_functions(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*(*m)(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">),<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*free_func)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*));</highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>CRYPTO_set_mem_ex_functions(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*(*m)(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*(*r)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*f)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*));</highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>CRYPTO_set_locked_mem_ex_functions(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*(*m)(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*free_func)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*));</highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>CRYPTO_set_mem_debug_functions(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*m)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*r)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*f)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*so)(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>(*go)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CRYPTO_get_mem_functions(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*(**m)(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">),</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*(**r)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">),<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(**f)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*));</highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CRYPTO_get_locked_mem_functions(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*(**m)(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">),<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(**f)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*));</highlight></codeline>
<codeline lineno="479"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CRYPTO_get_mem_ex_functions(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*(**m)(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*(**r)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(**f)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*));</highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CRYPTO_get_locked_mem_ex_functions(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*(**m)(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(**f)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*));</highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CRYPTO_get_mem_debug_functions(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(**m)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(**r)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(**f)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(**so)(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>(**go)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*CRYPTO_malloc_locked(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*file,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line);</highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CRYPTO_free_locked(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ptr);</highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*CRYPTO_malloc(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*file,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line);</highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*CRYPTO_strdup(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*file,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line);</highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CRYPTO_free(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ptr);</highlight></codeline>
<codeline lineno="495"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*CRYPTO_realloc(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*addr,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*file,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line);</highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*CRYPTO_realloc_clean(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*addr,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>old_num,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*file,</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line);</highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*CRYPTO_remalloc(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*addr,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*file,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line);</highlight></codeline>
<codeline lineno="499"><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>OPENSSL_cleanse(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ptr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CRYPTO_set_mem_debug_options(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>bits);</highlight></codeline>
<codeline lineno="503"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>CRYPTO_get_mem_debug_options(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CRYPTO_push_info(info)<sp/>\</highlight></codeline>
<codeline lineno="506"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CRYPTO_push_info_(info,<sp/>__FILE__,<sp/>__LINE__);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>CRYPTO_push_info_(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*info,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*file,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line);</highlight></codeline>
<codeline lineno="508"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>CRYPTO_pop_info(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>CRYPTO_remove_all_info(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="510"><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Default<sp/>debugging<sp/>functions<sp/>(enabled<sp/>by<sp/>CRYPTO_malloc_debug_init()<sp/>macro;</highlight></codeline>
<codeline lineno="513"><highlight class="comment"><sp/>*<sp/>used<sp/>as<sp/>default<sp/>in<sp/>CRYPTO_MDEBUG<sp/>compilations):<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>The<sp/>last<sp/>argument<sp/>has<sp/>the<sp/>following<sp/>significance:</highlight></codeline>
<codeline lineno="515"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="516"><highlight class="comment"><sp/>*<sp/>0:<sp/><sp/><sp/>called<sp/>before<sp/>the<sp/>actual<sp/>memory<sp/>allocation<sp/>has<sp/>taken<sp/>place</highlight></codeline>
<codeline lineno="517"><highlight class="comment"><sp/>*<sp/>1:<sp/><sp/><sp/>called<sp/>after<sp/>the<sp/>actual<sp/>memory<sp/>allocation<sp/>has<sp/>taken<sp/>place</highlight></codeline>
<codeline lineno="518"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CRYPTO_dbg_malloc(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*addr,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*file,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>before_p);</highlight></codeline>
<codeline lineno="520"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CRYPTO_dbg_realloc(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*addr1,</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*addr2,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*file,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>before_p);</highlight></codeline>
<codeline lineno="521"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CRYPTO_dbg_free(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*addr,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>before_p);</highlight></codeline>
<codeline lineno="522"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Tell<sp/>the<sp/>debugging<sp/>code<sp/>about<sp/>options.<sp/><sp/>By<sp/>default,<sp/>the<sp/>following<sp/>values</highlight></codeline>
<codeline lineno="523"><highlight class="comment"><sp/>*<sp/>apply:</highlight></codeline>
<codeline lineno="524"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="525"><highlight class="comment"><sp/>*<sp/>0:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Clear<sp/>all<sp/>options.</highlight></codeline>
<codeline lineno="526"><highlight class="comment"><sp/>*<sp/>V_CRYPTO_MDEBUG_TIME<sp/>(1):<sp/><sp/><sp/><sp/>Set<sp/>the<sp/>&quot;Show<sp/>Time&quot;<sp/>option.</highlight></codeline>
<codeline lineno="527"><highlight class="comment"><sp/>*<sp/>V_CRYPTO_MDEBUG_THREAD<sp/>(2):<sp/><sp/>Set<sp/>the<sp/>&quot;Show<sp/>Thread<sp/>Number&quot;<sp/>option.</highlight></codeline>
<codeline lineno="528"><highlight class="comment"><sp/>*<sp/>V_CRYPTO_MDEBUG_ALL<sp/>(3):<sp/><sp/><sp/><sp/><sp/>1<sp/>+<sp/>2</highlight></codeline>
<codeline lineno="529"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CRYPTO_dbg_set_options(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>bits);</highlight></codeline>
<codeline lineno="531"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>CRYPTO_dbg_get_options(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="532"><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>OPENSSL_NO_FP_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CRYPTO_mem_leaks_fp(FILE<sp/>*);</highlight></codeline>
<codeline lineno="536"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CRYPTO_mem_leaks(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structbio__st" kindref="compound">bio_st</ref><sp/>*bio);</highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>unsigned<sp/>long<sp/>order,<sp/>char<sp/>*file,<sp/>int<sp/>line,<sp/>int<sp/>num_bytes,<sp/>char<sp/>*addr<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*CRYPTO_MEM_LEAK_CB(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CRYPTO_mem_leaks_cb(CRYPTO_MEM_LEAK_CB<sp/>*cb);</highlight></codeline>
<codeline lineno="541"><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>die<sp/>if<sp/>we<sp/>have<sp/>to<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>OpenSSLDie(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*file,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*assertion);</highlight></codeline>
<codeline lineno="544"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>OPENSSL_assert(e)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(void)((e)<sp/>?<sp/>0<sp/>:<sp/>(OpenSSLDie(__FILE__,<sp/>__LINE__,<sp/>#e),1))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal"></highlight></codeline>
<codeline lineno="546"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>*OPENSSL_ia32cap_loc(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="547"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>OPENSSL_ia32cap<sp/>(*(OPENSSL_ia32cap_loc()))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="548"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>OPENSSL_isservice(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="549"><highlight class="normal"></highlight></codeline>
<codeline lineno="550"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>FIPS_mode(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="551"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>FIPS_mode_set(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r);</highlight></codeline>
<codeline lineno="552"><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>OPENSSL_init(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="554"><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>fips_md_init(alg)<sp/>fips_md_init_ctx(alg,<sp/>alg)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="556"><highlight class="normal"></highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>OPENSSL_FIPS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>fips_md_init_ctx(alg,<sp/>cx)<sp/>\</highlight></codeline>
<codeline lineno="559"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>int<sp/>alg##_Init(cx##_CTX<sp/>*c)<sp/>\</highlight></codeline>
<codeline lineno="560"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="561"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(FIPS_mode())<sp/>OpenSSLDie(__FILE__,<sp/>__LINE__,<sp/>\</highlight></codeline>
<codeline lineno="562"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;Low<sp/>level<sp/>API<sp/>call<sp/>to<sp/>digest<sp/>&quot;<sp/>#alg<sp/>&quot;<sp/>forbidden<sp/>in<sp/>FIPS<sp/>mode!&quot;);<sp/>\</highlight></codeline>
<codeline lineno="563"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>private_##alg##_Init(c);<sp/>\</highlight></codeline>
<codeline lineno="564"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="565"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>int<sp/>private_##alg##_Init(cx##_CTX<sp/>*c)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>fips_cipher_abort(alg)<sp/>\</highlight></codeline>
<codeline lineno="568"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(FIPS_mode())<sp/>OpenSSLDie(__FILE__,<sp/>__LINE__,<sp/>\</highlight></codeline>
<codeline lineno="569"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;Low<sp/>level<sp/>API<sp/>call<sp/>to<sp/>cipher<sp/>&quot;<sp/>#alg<sp/>&quot;<sp/>forbidden<sp/>in<sp/>FIPS<sp/>mode!&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="570"><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>fips_md_init_ctx(alg,<sp/>cx)<sp/>\</highlight></codeline>
<codeline lineno="573"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>int<sp/>alg##_Init(cx##_CTX<sp/>*c)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>fips_cipher_abort(alg)<sp/>while(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="575"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>CRYPTO_memcmp<sp/>returns<sp/>zero<sp/>iff<sp/>the<sp/>|len|<sp/>bytes<sp/>at<sp/>|a|<sp/>and<sp/>|b|<sp/>are<sp/>equal.<sp/>It</highlight></codeline>
<codeline lineno="578"><highlight class="comment"><sp/>*<sp/>takes<sp/>an<sp/>amount<sp/>of<sp/>time<sp/>dependent<sp/>on<sp/>|len|,<sp/>but<sp/>independent<sp/>of<sp/>the<sp/>contents</highlight></codeline>
<codeline lineno="579"><highlight class="comment"><sp/>*<sp/>of<sp/>|a|<sp/>and<sp/>|b|.<sp/>Unlike<sp/>memcmp,<sp/>it<sp/>cannot<sp/>be<sp/>used<sp/>to<sp/>put<sp/>elements<sp/>into<sp/>a</highlight></codeline>
<codeline lineno="580"><highlight class="comment"><sp/>*<sp/>defined<sp/>order<sp/>as<sp/>the<sp/>return<sp/>value<sp/>when<sp/>a<sp/>!=<sp/>b<sp/>is<sp/>undefined,<sp/>other<sp/>than<sp/>to<sp/>be</highlight></codeline>
<codeline lineno="581"><highlight class="comment"><sp/>*<sp/>non-zero.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="582"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>CRYPTO_memcmp(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*b,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="583"><highlight class="normal"></highlight></codeline>
<codeline lineno="584"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>BEGIN<sp/>ERROR<sp/>CODES<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="585"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>The<sp/>following<sp/>lines<sp/>are<sp/>auto<sp/>generated<sp/>by<sp/>the<sp/>script<sp/>mkerr.pl.<sp/>Any<sp/>changes</highlight></codeline>
<codeline lineno="586"><highlight class="comment"><sp/>*<sp/>made<sp/>after<sp/>this<sp/>point<sp/>may<sp/>be<sp/>overwritten<sp/>when<sp/>the<sp/>script<sp/>is<sp/>next<sp/>run.</highlight></codeline>
<codeline lineno="587"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="588"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ERR_load_CRYPTO_strings(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="589"><highlight class="normal"></highlight></codeline>
<codeline lineno="590"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Error<sp/>codes<sp/>for<sp/>the<sp/>CRYPTO<sp/>functions.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="591"><highlight class="normal"></highlight></codeline>
<codeline lineno="592"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Function<sp/>codes.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="593"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CRYPTO_F_CRYPTO_GET_EX_NEW_INDEX<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>100</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CRYPTO_F_CRYPTO_GET_NEW_DYNLOCKID<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>103</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="595"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CRYPTO_F_CRYPTO_GET_NEW_LOCKID<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>101</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="596"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CRYPTO_F_CRYPTO_SET_EX_DATA<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>102</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CRYPTO_F_DEF_ADD_INDEX<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>104</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="598"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CRYPTO_F_DEF_GET_CLASS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>105</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="599"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CRYPTO_F_FIPS_MODE_SET<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>109</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CRYPTO_F_INT_DUP_EX_DATA<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>106</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="601"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CRYPTO_F_INT_FREE_EX_DATA<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>107</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="602"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CRYPTO_F_INT_NEW_EX_DATA<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>108</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="normal"></highlight></codeline>
<codeline lineno="604"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Reason<sp/>codes.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CRYPTO_R_FIPS_MODE_NOT_SUPPORTED<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>101</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CRYPTO_R_NO_DYNLOCK_CREATE_CALLBACK<sp/><sp/><sp/><sp/><sp/><sp/>100</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="607"><highlight class="normal"></highlight></codeline>
<codeline lineno="608"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/><sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="609"><highlight class="normal">}</highlight></codeline>
<codeline lineno="610"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="thirdparty/openssl/include/openssl/crypto.h"/>
  </compounddef>
</doxygen>
