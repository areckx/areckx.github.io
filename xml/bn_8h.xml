<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="bn_8h" kind="file" language="C++">
    <compoundname>bn.h</compoundname>
    <includes refid="e__os2_8h" local="no">openssl/e_os2.h</includes>
    <includes local="no">stdio.h</includes>
    <includes refid="ossl__typ_8h" local="no">openssl/ossl_typ.h</includes>
    <includes refid="crypto_8h" local="no">openssl/crypto.h</includes>
    <includedby refid="asn1_8h" local="no">thirdparty/openssl/include/openssl/asn1.h</includedby>
    <includedby refid="dh_8h" local="no">thirdparty/openssl/include/openssl/dh.h</includedby>
    <includedby refid="dsa_8h" local="no">thirdparty/openssl/include/openssl/dsa.h</includedby>
    <includedby refid="ec_8h" local="no">thirdparty/openssl/include/openssl/ec.h</includedby>
    <includedby refid="ecdh_8h" local="no">thirdparty/openssl/include/openssl/ecdh.h</includedby>
    <includedby refid="ecdsa_8h" local="no">thirdparty/openssl/include/openssl/ecdsa.h</includedby>
    <includedby refid="engine_8h" local="no">thirdparty/openssl/include/openssl/engine.h</includedby>
    <includedby refid="rsa_8h" local="no">thirdparty/openssl/include/openssl/rsa.h</includedby>
    <includedby refid="srp_8h" local="no">thirdparty/openssl/include/openssl/srp.h</includedby>
    <incdepgraph>
      <node id="82277">
        <label>openssl/opensslv.h</label>
        <link refid="opensslv_8h_source"/>
      </node>
      <node id="82274">
        <label>stdlib.h</label>
      </node>
      <node id="82275">
        <label>openssl/stack.h</label>
        <link refid="stack_8h_source"/>
      </node>
      <node id="82268">
        <label>thirdparty/openssl/include/openssl/bn.h</label>
        <link refid="bn_8h"/>
        <childnode refid="82269" relation="include">
        </childnode>
        <childnode refid="82271" relation="include">
        </childnode>
        <childnode refid="82272" relation="include">
        </childnode>
        <childnode refid="82273" relation="include">
        </childnode>
      </node>
      <node id="82278">
        <label>openssl/symhacks.h</label>
        <link refid="symhacks_8h_source"/>
        <childnode refid="82269" relation="include">
        </childnode>
      </node>
      <node id="82276">
        <label>openssl/safestack.h</label>
        <link refid="safestack_8h_source"/>
        <childnode refid="82275" relation="include">
        </childnode>
      </node>
      <node id="82270">
        <label>openssl/opensslconf.h</label>
        <link refid="opensslconf_8h_source"/>
      </node>
      <node id="82269">
        <label>openssl/e_os2.h</label>
        <link refid="e__os2_8h_source"/>
        <childnode refid="82270" relation="include">
        </childnode>
      </node>
      <node id="82271">
        <label>stdio.h</label>
      </node>
      <node id="82272">
        <label>openssl/ossl_typ.h</label>
        <link refid="ossl__typ_8h_source"/>
        <childnode refid="82269" relation="include">
        </childnode>
      </node>
      <node id="82273">
        <label>openssl/crypto.h</label>
        <link refid="crypto_8h_source"/>
        <childnode refid="82274" relation="include">
        </childnode>
        <childnode refid="82269" relation="include">
        </childnode>
        <childnode refid="82271" relation="include">
        </childnode>
        <childnode refid="82275" relation="include">
        </childnode>
        <childnode refid="82276" relation="include">
        </childnode>
        <childnode refid="82277" relation="include">
        </childnode>
        <childnode refid="82272" relation="include">
        </childnode>
        <childnode refid="82278" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="82285">
        <label>thirdparty/openssl/include/openssl/engine.h</label>
        <link refid="engine_8h_source"/>
      </node>
      <node id="82296">
        <label>thirdparty/openssl/include/openssl/ts.h</label>
        <link refid="ts_8h_source"/>
      </node>
      <node id="82303">
        <label>thirdparty/openssl/include/openssl/hmac.h</label>
        <link refid="hmac_8h_source"/>
        <childnode refid="82293" relation="include">
        </childnode>
      </node>
      <node id="82283">
        <label>thirdparty/openssl/include/openssl/ec.h</label>
        <link refid="ec_8h_source"/>
        <childnode refid="82284" relation="include">
        </childnode>
        <childnode refid="82299" relation="include">
        </childnode>
        <childnode refid="82286" relation="include">
        </childnode>
      </node>
      <node id="82288">
        <label>thirdparty/poppler/poppler/SignatureHandler.h</label>
        <link refid="_signature_handler_8h_source"/>
        <childnode refid="82289" relation="include">
        </childnode>
      </node>
      <node id="82305">
        <label>thirdparty/openssl/include/openssl/rsa.h</label>
        <link refid="rsa_8h_source"/>
        <childnode refid="82285" relation="include">
        </childnode>
        <childnode refid="82296" relation="include">
        </childnode>
        <childnode refid="82286" relation="include">
        </childnode>
      </node>
      <node id="82302">
        <label>thirdparty/openssl/include/openssl/cmac.h</label>
        <link refid="cmac_8h_source"/>
      </node>
      <node id="82292">
        <label>thirdparty/kQOAuth/kqoauthutils.cpp</label>
        <link refid="kqoauthutils_8cpp_source"/>
      </node>
      <node id="82304">
        <label>thirdparty/openssl/include/openssl/pkcs7.h</label>
        <link refid="pkcs7_8h_source"/>
        <childnode refid="82286" relation="include">
        </childnode>
      </node>
      <node id="82281">
        <label>thirdparty/openssl/include/openssl/asn1_mac.h</label>
        <link refid="asn1__mac_8h_source"/>
      </node>
      <node id="82294">
        <label>thirdparty/openssl/include/openssl/ssl3.h</label>
        <link refid="ssl3_8h_source"/>
        <childnode refid="82293" relation="include">
        </childnode>
      </node>
      <node id="82279">
        <label>thirdparty/openssl/include/openssl/bn.h</label>
        <link refid="bn_8h"/>
        <childnode refid="82280" relation="include">
        </childnode>
        <childnode refid="82306" relation="include">
        </childnode>
        <childnode refid="82307" relation="include">
        </childnode>
        <childnode refid="82283" relation="include">
        </childnode>
        <childnode refid="82284" relation="include">
        </childnode>
        <childnode refid="82299" relation="include">
        </childnode>
        <childnode refid="82285" relation="include">
        </childnode>
        <childnode refid="82305" relation="include">
        </childnode>
        <childnode refid="82308" relation="include">
        </childnode>
      </node>
      <node id="82286">
        <label>thirdparty/openssl/include/openssl/x509.h</label>
        <link refid="x509_8h_source"/>
        <childnode refid="82287" relation="include">
        </childnode>
        <childnode refid="82285" relation="include">
        </childnode>
        <childnode refid="82290" relation="include">
        </childnode>
        <childnode refid="82291" relation="include">
        </childnode>
        <childnode refid="82295" relation="include">
        </childnode>
        <childnode refid="82293" relation="include">
        </childnode>
        <childnode refid="82296" relation="include">
        </childnode>
        <childnode refid="82297" relation="include">
        </childnode>
        <childnode refid="82298" relation="include">
        </childnode>
      </node>
      <node id="82307">
        <label>thirdparty/openssl/include/openssl/dsa.h</label>
        <link refid="dsa_8h_source"/>
        <childnode refid="82285" relation="include">
        </childnode>
        <childnode refid="82296" relation="include">
        </childnode>
        <childnode refid="82286" relation="include">
        </childnode>
      </node>
      <node id="82297">
        <label>thirdparty/openssl/include/openssl/x509_vfy.h</label>
        <link refid="x509__vfy_8h_source"/>
        <childnode refid="82286" relation="include">
        </childnode>
      </node>
      <node id="82280">
        <label>thirdparty/openssl/include/openssl/asn1.h</label>
        <link refid="asn1_8h_source"/>
        <childnode refid="82281" relation="include">
        </childnode>
        <childnode refid="82282" relation="include">
        </childnode>
        <childnode refid="82283" relation="include">
        </childnode>
        <childnode refid="82300" relation="include">
        </childnode>
        <childnode refid="82304" relation="include">
        </childnode>
        <childnode refid="82305" relation="include">
        </childnode>
        <childnode refid="82296" relation="include">
        </childnode>
        <childnode refid="82286" relation="include">
        </childnode>
      </node>
      <node id="82301">
        <label>thirdparty/openssl/include/openssl/evp.h</label>
        <link refid="evp_8h_source"/>
        <childnode refid="82292" relation="include">
        </childnode>
        <childnode refid="82302" relation="include">
        </childnode>
        <childnode refid="82303" relation="include">
        </childnode>
        <childnode refid="82291" relation="include">
        </childnode>
        <childnode refid="82294" relation="include">
        </childnode>
        <childnode refid="82296" relation="include">
        </childnode>
        <childnode refid="82286" relation="include">
        </childnode>
      </node>
      <node id="82299">
        <label>thirdparty/openssl/include/openssl/ecdsa.h</label>
        <link refid="ecdsa_8h_source"/>
        <childnode refid="82285" relation="include">
        </childnode>
        <childnode refid="82286" relation="include">
        </childnode>
      </node>
      <node id="82291">
        <label>thirdparty/openssl/include/openssl/pem.h</label>
        <link refid="pem_8h_source"/>
        <childnode refid="82292" relation="include">
        </childnode>
        <childnode refid="82293" relation="include">
        </childnode>
      </node>
      <node id="82287">
        <label>thirdparty/openssl/include/openssl/cms.h</label>
        <link refid="cms_8h_source"/>
        <childnode refid="82288" relation="include">
        </childnode>
      </node>
      <node id="82308">
        <label>thirdparty/openssl/include/openssl/srp.h</label>
        <link refid="srp_8h_source"/>
      </node>
      <node id="82300">
        <label>thirdparty/openssl/include/openssl/objects.h</label>
        <link refid="objects_8h_source"/>
        <childnode refid="82301" relation="include">
        </childnode>
      </node>
      <node id="82293">
        <label>thirdparty/openssl/include/openssl/ssl.h</label>
        <link refid="ssl_8h_source"/>
        <childnode refid="82292" relation="include">
        </childnode>
        <childnode refid="82294" relation="include">
        </childnode>
      </node>
      <node id="82282">
        <label>thirdparty/openssl/include/openssl/asn1t.h</label>
        <link refid="asn1t_8h_source"/>
      </node>
      <node id="82289">
        <label>thirdparty/poppler/poppler/SignatureHandler.cc</label>
        <link refid="_signature_handler_8cc_source"/>
      </node>
      <node id="82284">
        <label>thirdparty/openssl/include/openssl/ecdh.h</label>
        <link refid="ecdh_8h_source"/>
        <childnode refid="82285" relation="include">
        </childnode>
        <childnode refid="82286" relation="include">
        </childnode>
      </node>
      <node id="82298">
        <label>thirdparty/openssl/include/openssl/x509v3.h</label>
        <link refid="x509v3_8h_source"/>
        <childnode refid="82290" relation="include">
        </childnode>
        <childnode refid="82296" relation="include">
        </childnode>
      </node>
      <node id="82295">
        <label>thirdparty/openssl/include/openssl/pkcs12.h</label>
        <link refid="pkcs12_8h_source"/>
      </node>
      <node id="82290">
        <label>thirdparty/openssl/include/openssl/ocsp.h</label>
        <link refid="ocsp_8h_source"/>
      </node>
      <node id="82306">
        <label>thirdparty/openssl/include/openssl/dh.h</label>
        <link refid="dh_8h_source"/>
        <childnode refid="82307" relation="include">
        </childnode>
        <childnode refid="82285" relation="include">
        </childnode>
        <childnode refid="82296" relation="include">
        </childnode>
        <childnode refid="82286" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="structbignum__st" prot="public">bignum_st</innerclass>
    <innerclass refid="structbn__mont__ctx__st" prot="public">bn_mont_ctx_st</innerclass>
    <innerclass refid="structbn__recp__ctx__st" prot="public">bn_recp_ctx_st</innerclass>
    <innerclass refid="structbn__gencb__st" prot="public">bn_gencb_st</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="bn_8h_1a3144247d397b5c9ad1e68163abcbb21b" prot="public" static="no">
        <name>BN_MUL_COMBA</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="152" column="9" bodyfile="thirdparty/openssl/include/openssl/bn.h" bodystart="152" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bn_8h_1a8f531fa54cb406b8cc3a507981fb4359" prot="public" static="no">
        <name>BN_SQR_COMBA</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="153" column="9" bodyfile="thirdparty/openssl/include/openssl/bn.h" bodystart="153" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bn_8h_1a31bf2bca0235196c9c3bc24b18d353ef" prot="public" static="no">
        <name>BN_RECURSION</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="154" column="9" bodyfile="thirdparty/openssl/include/openssl/bn.h" bodystart="154" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bn_8h_1ab7223cefc80c8dc142f31ccc363ff27f" prot="public" static="no">
        <name>PTR_SIZE_INT</name>
        <initializer>size_t</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="271" column="10" bodyfile="thirdparty/openssl/include/openssl/bn.h" bodystart="271" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bn_8h_1a08db364f6b28192b6a080f397a7e6204" prot="public" static="no">
        <name>BN_DEFAULT_BITS</name>
        <initializer>1280</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="274" column="9" bodyfile="thirdparty/openssl/include/openssl/bn.h" bodystart="274" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bn_8h_1afadc79b593fb90762b15a11cc4435d1d" prot="public" static="no">
        <name>BN_FLG_MALLOCED</name>
        <initializer>0x01</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="276" column="9" bodyfile="thirdparty/openssl/include/openssl/bn.h" bodystart="276" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bn_8h_1ae32355ce26c7a72424f52f6ae5358816" prot="public" static="no">
        <name>BN_FLG_STATIC_DATA</name>
        <initializer>0x02</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="277" column="9" bodyfile="thirdparty/openssl/include/openssl/bn.h" bodystart="277" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bn_8h_1adcf064b3d5a81b820d5054c7a6f6ddb9" prot="public" static="no">
        <name>BN_FLG_CONSTTIME</name>
        <initializer>0x04 /* avoid leaking exponent information through timing,
                                      * BN_mod_exp_mont() will call BN_mod_exp_mont_consttime,
                                      * BN_div() will call BN_div_no_branch,
                                      * BN_mod_inverse() will call BN_mod_inverse_no_branch.
                                      */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="282" column="9" bodyfile="thirdparty/openssl/include/openssl/bn.h" bodystart="278" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bn_8h_1af2842ca16ba7b4996f08a94a68813f2b" prot="public" static="no">
        <name>BN_FLG_EXP_CONSTTIME</name>
        <initializer>BN_FLG_CONSTTIME /* deprecated name for the flag */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="285" column="9" bodyfile="thirdparty/openssl/include/openssl/bn.h" bodystart="285" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bn_8h_1a290bba0f9d48925006cc106e7a46f4bd" prot="public" static="no">
        <name>BN_FLG_FREE</name>
        <initializer>0x8000	/* used for debuging */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="291" column="9" bodyfile="thirdparty/openssl/include/openssl/bn.h" bodystart="291" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bn_8h_1a1f5b75f253bd2f10ced985d6470f18b3" prot="public" static="no">
        <name>BN_set_flags</name>
        <param><defname>b</defname></param>
        <param><defname>n</defname></param>
        <initializer>((b)-&gt;flags|=(n))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="293" column="10" bodyfile="thirdparty/openssl/include/openssl/bn.h" bodystart="293" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bn_8h_1a703b5d815865cb0309567af078d8cd48" prot="public" static="no">
        <name>BN_get_flags</name>
        <param><defname>b</defname></param>
        <param><defname>n</defname></param>
        <initializer>((b)-&gt;flags&amp;(n))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="294" column="9" bodyfile="thirdparty/openssl/include/openssl/bn.h" bodystart="294" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bn_8h_1a3c06fdc7025341d762f539337e8001a7" prot="public" static="no">
        <name>BN_with_flags</name>
        <param><defname>dest</defname></param>
        <param><defname>b</defname></param>
        <param><defname>n</defname></param>
        <initializer>((dest)-&gt;d=(b)-&gt;d, \
                                  (dest)-&gt;top=(b)-&gt;top, \
                                  (dest)-&gt;dmax=(b)-&gt;dmax, \
                                  (dest)-&gt;neg=(b)-&gt;neg, \
                                  (dest)-&gt;flags=(((dest)-&gt;flags &amp; BN_FLG_MALLOCED) \
                                                 |  ((b)-&gt;flags &amp; ~BN_FLG_MALLOCED) \
                                                 |  BN_FLG_STATIC_DATA \
                                                 |  (n)))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="298" column="9" bodyfile="thirdparty/openssl/include/openssl/bn.h" bodystart="298" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bn_8h_1a04cafacc8aa0987b8424f0d6959cd690" prot="public" static="no">
        <name>BN_GENCB_set_old</name>
        <param><defname>gencb</defname></param>
        <param><defname>callback</defname></param>
        <param><defname>cb_arg</defname></param>
        <initializer>{ \
		<ref refid="structbn__gencb__st" kindref="compound">BN_GENCB</ref> *tmp_gencb = (gencb); \
		tmp_gencb-&gt;ver = 1; \
		tmp_gencb-&gt;arg = (cb_arg); \
		tmp_gencb-&gt;cb.cb_1 = (callback); }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="369" column="9" bodyfile="thirdparty/openssl/include/openssl/bn.h" bodystart="369" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bn_8h_1a4f79729dd48ae7a84443648134a0e9e0" prot="public" static="no">
        <name>BN_GENCB_set</name>
        <param><defname>gencb</defname></param>
        <param><defname>callback</defname></param>
        <param><defname>cb_arg</defname></param>
        <initializer>{ \
		<ref refid="structbn__gencb__st" kindref="compound">BN_GENCB</ref> *tmp_gencb = (gencb); \
		tmp_gencb-&gt;ver = 2; \
		tmp_gencb-&gt;arg = (cb_arg); \
		tmp_gencb-&gt;cb.cb_2 = (callback); }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="375" column="9" bodyfile="thirdparty/openssl/include/openssl/bn.h" bodystart="375" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bn_8h_1accd25641912c3bcd664571141c4510cc" prot="public" static="no">
        <name>BN_prime_checks</name>
        <initializer>0 /* default: select number of iterations
			     based on the size of the number */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="382" column="9" bodyfile="thirdparty/openssl/include/openssl/bn.h" bodystart="381" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bn_8h_1a5164a05a88b28bdd3dedf08fdb406093" prot="public" static="no">
        <name>BN_prime_checks_for_size</name>
        <param><defname>b</defname></param>
        <initializer>((b) &gt;= 1300 ?  2 : \
                                (b) &gt;=  850 ?  3 : \
                                (b) &gt;=  650 ?  4 : \
                                (b) &gt;=  550 ?  5 : \
                                (b) &gt;=  450 ?  6 : \
                                (b) &gt;=  400 ?  7 : \
                                (b) &gt;=  350 ?  8 : \
                                (b) &gt;=  300 ?  9 : \
                                (b) &gt;=  250 ? 12 : \
                                (b) &gt;=  200 ? 15 : \
                                (b) &gt;=  150 ? 18 : \
                                /* b &gt;= 100 */ 27)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="389" column="9" bodyfile="thirdparty/openssl/include/openssl/bn.h" bodystart="389" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bn_8h_1a6f1f92317e94bcae2e83ae518824c01d" prot="public" static="no">
        <name>BN_num_bytes</name>
        <param><defname>a</defname></param>
        <initializer>((BN_num_bits(a)+7)/8)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="402" column="9" bodyfile="thirdparty/openssl/include/openssl/bn.h" bodystart="402" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bn_8h_1a1f2683dd027ced5cc0fc332a3ae37504" prot="public" static="no">
        <name>BN_abs_is_word</name>
        <param><defname>a</defname></param>
        <param><defname>w</defname></param>
        <initializer>((((a)-&gt;top == 1) &amp;&amp; ((a)-&gt;d[0] == (BN_ULONG)(w))) || \
				(((w) == 0) &amp;&amp; ((a)-&gt;top == 0)))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="405" column="9" bodyfile="thirdparty/openssl/include/openssl/bn.h" bodystart="405" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bn_8h_1a8adb5a8606dfd0354a4d93b85e3996ab" prot="public" static="no">
        <name>BN_is_zero</name>
        <param><defname>a</defname></param>
        <initializer>((a)-&gt;top == 0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="407" column="9" bodyfile="thirdparty/openssl/include/openssl/bn.h" bodystart="407" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bn_8h_1ab1f2aa49c798c0f21b01899e8d562ee7" prot="public" static="no">
        <name>BN_is_one</name>
        <param><defname>a</defname></param>
        <initializer>(BN_abs_is_word((a),1) &amp;&amp; !(a)-&gt;neg)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="408" column="9" bodyfile="thirdparty/openssl/include/openssl/bn.h" bodystart="408" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bn_8h_1a7357986d20ad2ecbf6d20df137bcb45a" prot="public" static="no">
        <name>BN_is_word</name>
        <param><defname>a</defname></param>
        <param><defname>w</defname></param>
        <initializer>(BN_abs_is_word((a),(w)) &amp;&amp; (!(w) || !(a)-&gt;neg))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="409" column="9" bodyfile="thirdparty/openssl/include/openssl/bn.h" bodystart="409" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bn_8h_1ae53ace8862904c6eb7bcd58db7f1ecad" prot="public" static="no">
        <name>BN_is_odd</name>
        <param><defname>a</defname></param>
        <initializer>(((a)-&gt;top &gt; 0) &amp;&amp; ((a)-&gt;d[0] &amp; 1))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="410" column="9" bodyfile="thirdparty/openssl/include/openssl/bn.h" bodystart="410" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bn_8h_1aab9a156a4de1030438e4ddaf9c3e35cb" prot="public" static="no">
        <name>BN_one</name>
        <param><defname>a</defname></param>
        <initializer>(BN_set_word((a),1))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="412" column="9" bodyfile="thirdparty/openssl/include/openssl/bn.h" bodystart="412" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bn_8h_1ab7eb59a02a22360738039a3b01c5f150" prot="public" static="no">
        <name>BN_zero_ex</name>
        <param><defname>a</defname></param>
        <initializer>do { \
		<ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *_tmp_bn = (a); \
		_tmp_bn-&gt;top = 0; \
		_tmp_bn-&gt;neg = 0; \
	} while(0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="413" column="9" bodyfile="thirdparty/openssl/include/openssl/bn.h" bodystart="413" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bn_8h_1ac97841d49b39ffdd49fcda8b152c0677" prot="public" static="no">
        <name>BN_zero</name>
        <param><defname>a</defname></param>
        <initializer>(BN_set_word((a),0))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="422" column="10" bodyfile="thirdparty/openssl/include/openssl/bn.h" bodystart="422" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bn_8h_1a64e63ab330037b5d7bacd2ae3bb0c74a" prot="public" static="no">
        <name>BN_is_negative</name>
        <param><defname>a</defname></param>
        <initializer>((a)-&gt;neg != 0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>BN_is_negative returns 1 if the BIGNUM is negative <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the BIGNUM object </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if a &lt; 0 and 0 otherwise </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="465" column="9" bodyfile="thirdparty/openssl/include/openssl/bn.h" bodystart="465" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bn_8h_1a4f1447a894029080d727d6c9a051de58" prot="public" static="no">
        <name>BN_mod</name>
        <param><defname>rem</defname></param>
        <param><defname>m</defname></param>
        <param><defname>d</defname></param>
        <param><defname>ctx</defname></param>
        <initializer>BN_div(NULL,(rem),(m),(d),(ctx))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="469" column="9" bodyfile="thirdparty/openssl/include/openssl/bn.h" bodystart="469" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bn_8h_1a39ad99470fa9cd1f3765aec5cb0789ba" prot="public" static="no">
        <name>BN_to_montgomery</name>
        <param><defname>r</defname></param>
        <param><defname>a</defname></param>
        <param><defname>mont</defname></param>
        <param><defname>ctx</defname></param>
        <initializer>BN_mod_mul_montgomery(\
	(r),(a),&amp;((mont)-&gt;RR),(mont),(ctx))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="578" column="9" bodyfile="thirdparty/openssl/include/openssl/bn.h" bodystart="578" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bn_8h_1a0ba6965e06f7fd189e658a1398bf21ec" prot="public" static="no">
        <name>BN_BLINDING_NO_UPDATE</name>
        <initializer>0x00000001</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="589" column="9" bodyfile="thirdparty/openssl/include/openssl/bn.h" bodystart="589" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bn_8h_1aca8894dfb749add4e5781b22997f2cb7" prot="public" static="no">
        <name>BN_BLINDING_NO_RECREATE</name>
        <initializer>0x00000002</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="590" column="9" bodyfile="thirdparty/openssl/include/openssl/bn.h" bodystart="590" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bn_8h_1af7a2e451b4fb318aeec3157f99ff1bf7" prot="public" static="no">
        <name>BN_GF2m_sub</name>
        <param><defname>r</defname></param>
        <param><defname>a</defname></param>
        <param><defname>b</defname></param>
        <initializer>BN_GF2m_add(r, a, b)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="640" column="9" bodyfile="thirdparty/openssl/include/openssl/bn.h" bodystart="640" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bn_8h_1a1c44388ec9ac083c2258ef1e0b67d32f" prot="public" static="no">
        <name>BN_GF2m_cmp</name>
        <param><defname>a</defname></param>
        <param><defname>b</defname></param>
        <initializer>BN_ucmp((a), (b))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="656" column="9" bodyfile="thirdparty/openssl/include/openssl/bn.h" bodystart="656" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bn_8h_1a89bc593cad986b83c6eceb7e86d93cb9" prot="public" static="no">
        <name>bn_expand</name>
        <param><defname>a</defname></param>
        <param><defname>bits</defname></param>
        <initializer>((((((bits+BN_BITS2-1))/BN_BITS2)) &lt;= (a)-&gt;dmax)?\
	(a):bn_expand2((a),(bits+BN_BITS2-1)/BN_BITS2))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="699" column="9" bodyfile="thirdparty/openssl/include/openssl/bn.h" bodystart="699" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bn_8h_1a15094251b9047bc54ef42c702e65ce86" prot="public" static="no">
        <name>bn_wexpand</name>
        <param><defname>a</defname></param>
        <param><defname>words</defname></param>
        <initializer>(((words) &lt;= (a)-&gt;dmax)?(a):bn_expand2((a),(words)))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="701" column="9" bodyfile="thirdparty/openssl/include/openssl/bn.h" bodystart="701" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bn_8h_1a5aa5550d1ddd9ff4cc5f539a1fc5db45" prot="public" static="no">
        <name>bn_pollute</name>
        <param><defname>a</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="788" column="9" bodyfile="thirdparty/openssl/include/openssl/bn.h" bodystart="788" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bn_8h_1a95257c8ba175f77c58a26d83369efc96" prot="public" static="no">
        <name>bn_check_top</name>
        <param><defname>a</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="789" column="9" bodyfile="thirdparty/openssl/include/openssl/bn.h" bodystart="789" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bn_8h_1a14a7d310d6f4210e1de5c7e1c8caf057" prot="public" static="no">
        <name>bn_fix_top</name>
        <param><defname>a</defname></param>
        <initializer>bn_correct_top(a)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="790" column="9" bodyfile="thirdparty/openssl/include/openssl/bn.h" bodystart="790" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bn_8h_1aebc2e9621508cbbd4d54f963c56c352f" prot="public" static="no">
        <name>bn_check_size</name>
        <param><defname>bn</defname></param>
        <param><defname>bits</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="791" column="9" bodyfile="thirdparty/openssl/include/openssl/bn.h" bodystart="791" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bn_8h_1ac3acd61bd9d36efc399d763ebb77aeb2" prot="public" static="no">
        <name>bn_wcheck_size</name>
        <param><defname>bn</defname></param>
        <param><defname>words</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="792" column="9" bodyfile="thirdparty/openssl/include/openssl/bn.h" bodystart="792" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bn_8h_1ac7cda4cbe7c292e7acbc0e66d7f45364" prot="public" static="no">
        <name>bn_correct_top</name>
        <param><defname>a</defname></param>
        <initializer>{ \
        BN_ULONG *ftl; \
	int tmp_top = (a)-&gt;top; \
	if (tmp_top &gt; 0) \
		{ \
		for (ftl= &amp;((a)-&gt;d[tmp_top-1]); tmp_top &gt; 0; tmp_top--) \
			if (*(ftl--)) break; \
		(a)-&gt;top = tmp_top; \
		} \
	bn_pollute(a); \
	}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="796" column="9" bodyfile="thirdparty/openssl/include/openssl/bn.h" bodystart="796" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bn_8h_1ab52288ba31f740193ee8681568c6dd15" prot="public" static="no">
        <name>BN_F_BNRAND</name>
        <initializer>127</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="839" column="9" bodyfile="thirdparty/openssl/include/openssl/bn.h" bodystart="839" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bn_8h_1aafb0b46bf11cd7a19f429f8f7680aa8e" prot="public" static="no">
        <name>BN_F_BN_BLINDING_CONVERT_EX</name>
        <initializer>100</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="840" column="9" bodyfile="thirdparty/openssl/include/openssl/bn.h" bodystart="840" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bn_8h_1a71fa20f949a4d9eb47836a2dd37a65e2" prot="public" static="no">
        <name>BN_F_BN_BLINDING_CREATE_PARAM</name>
        <initializer>128</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="841" column="9" bodyfile="thirdparty/openssl/include/openssl/bn.h" bodystart="841" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bn_8h_1a3a7a33901ff49e7965f668f1f5782d31" prot="public" static="no">
        <name>BN_F_BN_BLINDING_INVERT_EX</name>
        <initializer>101</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="842" column="9" bodyfile="thirdparty/openssl/include/openssl/bn.h" bodystart="842" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bn_8h_1a7481c6d0662af087bdc952c0a7991f93" prot="public" static="no">
        <name>BN_F_BN_BLINDING_NEW</name>
        <initializer>102</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="843" column="9" bodyfile="thirdparty/openssl/include/openssl/bn.h" bodystart="843" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bn_8h_1acd7d300b68cc43e1cc1dcd05e89072d8" prot="public" static="no">
        <name>BN_F_BN_BLINDING_UPDATE</name>
        <initializer>103</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="844" column="9" bodyfile="thirdparty/openssl/include/openssl/bn.h" bodystart="844" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bn_8h_1ad4f3d31ecf2fb9a7ed6827109a554a96" prot="public" static="no">
        <name>BN_F_BN_BN2DEC</name>
        <initializer>104</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="845" column="9" bodyfile="thirdparty/openssl/include/openssl/bn.h" bodystart="845" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bn_8h_1a3c28fc13fcff5caa4d170b13a02f8caf" prot="public" static="no">
        <name>BN_F_BN_BN2HEX</name>
        <initializer>105</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="846" column="9" bodyfile="thirdparty/openssl/include/openssl/bn.h" bodystart="846" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bn_8h_1aec38a626993faba039b061baa3b7781a" prot="public" static="no">
        <name>BN_F_BN_CTX_GET</name>
        <initializer>116</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="847" column="9" bodyfile="thirdparty/openssl/include/openssl/bn.h" bodystart="847" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bn_8h_1a4e1f8389b9dcf662d506e06c9805c4eb" prot="public" static="no">
        <name>BN_F_BN_CTX_NEW</name>
        <initializer>106</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="848" column="9" bodyfile="thirdparty/openssl/include/openssl/bn.h" bodystart="848" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bn_8h_1af96b7759ea14bb63b3e09d25a3f7a274" prot="public" static="no">
        <name>BN_F_BN_CTX_START</name>
        <initializer>129</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="849" column="9" bodyfile="thirdparty/openssl/include/openssl/bn.h" bodystart="849" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bn_8h_1a3ab6dc250aff730ba2421ea3b44eab56" prot="public" static="no">
        <name>BN_F_BN_DIV</name>
        <initializer>107</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="850" column="9" bodyfile="thirdparty/openssl/include/openssl/bn.h" bodystart="850" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bn_8h_1afbb11856c4e5ee74979867620822479a" prot="public" static="no">
        <name>BN_F_BN_DIV_NO_BRANCH</name>
        <initializer>138</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="851" column="9" bodyfile="thirdparty/openssl/include/openssl/bn.h" bodystart="851" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bn_8h_1a0d23bab29371f657501b47885eba6f63" prot="public" static="no">
        <name>BN_F_BN_DIV_RECP</name>
        <initializer>130</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="852" column="9" bodyfile="thirdparty/openssl/include/openssl/bn.h" bodystart="852" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bn_8h_1a9964be0e45994d58299171d209de6b9a" prot="public" static="no">
        <name>BN_F_BN_EXP</name>
        <initializer>123</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="853" column="9" bodyfile="thirdparty/openssl/include/openssl/bn.h" bodystart="853" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bn_8h_1ae09b2c53a84a6b68781a131311c3d45b" prot="public" static="no">
        <name>BN_F_BN_EXPAND2</name>
        <initializer>108</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="854" column="9" bodyfile="thirdparty/openssl/include/openssl/bn.h" bodystart="854" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bn_8h_1a2f9ff03575bf62394a90d21145b4c0f4" prot="public" static="no">
        <name>BN_F_BN_EXPAND_INTERNAL</name>
        <initializer>120</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="855" column="9" bodyfile="thirdparty/openssl/include/openssl/bn.h" bodystart="855" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bn_8h_1aba8174b58aec7fa646de11338fe91fd8" prot="public" static="no">
        <name>BN_F_BN_GF2M_MOD</name>
        <initializer>131</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="856" column="9" bodyfile="thirdparty/openssl/include/openssl/bn.h" bodystart="856" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bn_8h_1a84f9c3c44359e965da15d7b67578c4b4" prot="public" static="no">
        <name>BN_F_BN_GF2M_MOD_EXP</name>
        <initializer>132</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="857" column="9" bodyfile="thirdparty/openssl/include/openssl/bn.h" bodystart="857" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bn_8h_1a5e6e6e41a24451079d82a15eed3d9ca7" prot="public" static="no">
        <name>BN_F_BN_GF2M_MOD_MUL</name>
        <initializer>133</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="858" column="9" bodyfile="thirdparty/openssl/include/openssl/bn.h" bodystart="858" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bn_8h_1a4cdd178e595438bf5f3dd20b0c5518db" prot="public" static="no">
        <name>BN_F_BN_GF2M_MOD_SOLVE_QUAD</name>
        <initializer>134</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="859" column="9" bodyfile="thirdparty/openssl/include/openssl/bn.h" bodystart="859" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bn_8h_1a9a723f77fed7f548dcc4b03cac5b6d34" prot="public" static="no">
        <name>BN_F_BN_GF2M_MOD_SOLVE_QUAD_ARR</name>
        <initializer>135</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="860" column="9" bodyfile="thirdparty/openssl/include/openssl/bn.h" bodystart="860" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bn_8h_1aeaf7cb20428e6aaf27485b5e2741425e" prot="public" static="no">
        <name>BN_F_BN_GF2M_MOD_SQR</name>
        <initializer>136</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="861" column="9" bodyfile="thirdparty/openssl/include/openssl/bn.h" bodystart="861" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bn_8h_1a3bc7ecec6cd69f0875fb2582b8921d8c" prot="public" static="no">
        <name>BN_F_BN_GF2M_MOD_SQRT</name>
        <initializer>137</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="862" column="9" bodyfile="thirdparty/openssl/include/openssl/bn.h" bodystart="862" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bn_8h_1a48e6ac230c10af91de17688568d901b4" prot="public" static="no">
        <name>BN_F_BN_MOD_EXP2_MONT</name>
        <initializer>118</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="863" column="9" bodyfile="thirdparty/openssl/include/openssl/bn.h" bodystart="863" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bn_8h_1a67c3393af37e1fa51d1b0d65500b2670" prot="public" static="no">
        <name>BN_F_BN_MOD_EXP_MONT</name>
        <initializer>109</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="864" column="9" bodyfile="thirdparty/openssl/include/openssl/bn.h" bodystart="864" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bn_8h_1af8ca54b6055bf3e3973569effcc48f0d" prot="public" static="no">
        <name>BN_F_BN_MOD_EXP_MONT_CONSTTIME</name>
        <initializer>124</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="865" column="9" bodyfile="thirdparty/openssl/include/openssl/bn.h" bodystart="865" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bn_8h_1a48480cfa6ca81147bb1936fe82a0e159" prot="public" static="no">
        <name>BN_F_BN_MOD_EXP_MONT_WORD</name>
        <initializer>117</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="866" column="9" bodyfile="thirdparty/openssl/include/openssl/bn.h" bodystart="866" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bn_8h_1a757647f2ca502103e13be2dc22a26a6b" prot="public" static="no">
        <name>BN_F_BN_MOD_EXP_RECP</name>
        <initializer>125</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="867" column="9" bodyfile="thirdparty/openssl/include/openssl/bn.h" bodystart="867" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bn_8h_1ab7130aef470c737cc96e841140951a4b" prot="public" static="no">
        <name>BN_F_BN_MOD_EXP_SIMPLE</name>
        <initializer>126</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="868" column="9" bodyfile="thirdparty/openssl/include/openssl/bn.h" bodystart="868" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bn_8h_1acfaadfdb22cb92d71285c3565477f7f8" prot="public" static="no">
        <name>BN_F_BN_MOD_INVERSE</name>
        <initializer>110</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="869" column="9" bodyfile="thirdparty/openssl/include/openssl/bn.h" bodystart="869" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bn_8h_1a23c04a0ad4835a2e0d81831e96a22849" prot="public" static="no">
        <name>BN_F_BN_MOD_INVERSE_NO_BRANCH</name>
        <initializer>139</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="870" column="9" bodyfile="thirdparty/openssl/include/openssl/bn.h" bodystart="870" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bn_8h_1a8d29e20c9471596d2857cbaa7f7be3ad" prot="public" static="no">
        <name>BN_F_BN_MOD_LSHIFT_QUICK</name>
        <initializer>119</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="871" column="9" bodyfile="thirdparty/openssl/include/openssl/bn.h" bodystart="871" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bn_8h_1a7dfa8f9aec7cfa495d0658d95a0ba484" prot="public" static="no">
        <name>BN_F_BN_MOD_MUL_RECIPROCAL</name>
        <initializer>111</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="872" column="9" bodyfile="thirdparty/openssl/include/openssl/bn.h" bodystart="872" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bn_8h_1ac48619e386998283f6778938a6f9aee5" prot="public" static="no">
        <name>BN_F_BN_MOD_SQRT</name>
        <initializer>121</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="873" column="9" bodyfile="thirdparty/openssl/include/openssl/bn.h" bodystart="873" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bn_8h_1ab574ca4de8a92de246314e18eaf4e017" prot="public" static="no">
        <name>BN_F_BN_MPI2BN</name>
        <initializer>112</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="874" column="9" bodyfile="thirdparty/openssl/include/openssl/bn.h" bodystart="874" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bn_8h_1ac04a1b1b99197aba7f4c23ed050dbefc" prot="public" static="no">
        <name>BN_F_BN_NEW</name>
        <initializer>113</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="875" column="9" bodyfile="thirdparty/openssl/include/openssl/bn.h" bodystart="875" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bn_8h_1a7f3c9d994850b46b72dc4fc9f9884b52" prot="public" static="no">
        <name>BN_F_BN_RAND</name>
        <initializer>114</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="876" column="9" bodyfile="thirdparty/openssl/include/openssl/bn.h" bodystart="876" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bn_8h_1a0b60aa009e94b019b707b0ffb4dbcac3" prot="public" static="no">
        <name>BN_F_BN_RAND_RANGE</name>
        <initializer>122</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="877" column="9" bodyfile="thirdparty/openssl/include/openssl/bn.h" bodystart="877" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bn_8h_1ae9add45a05993fc1e89c6aa2592885f0" prot="public" static="no">
        <name>BN_F_BN_USUB</name>
        <initializer>115</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="878" column="9" bodyfile="thirdparty/openssl/include/openssl/bn.h" bodystart="878" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bn_8h_1a2abf7df6405f0c0440a6b6d48ce9e62e" prot="public" static="no">
        <name>BN_R_ARG2_LT_ARG3</name>
        <initializer>100</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="881" column="9" bodyfile="thirdparty/openssl/include/openssl/bn.h" bodystart="881" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bn_8h_1a41a447ec4c8c6b125d45d7aad848714f" prot="public" static="no">
        <name>BN_R_BAD_RECIPROCAL</name>
        <initializer>101</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="882" column="9" bodyfile="thirdparty/openssl/include/openssl/bn.h" bodystart="882" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bn_8h_1a74bed8cc18e5887b375daab63d1c54f5" prot="public" static="no">
        <name>BN_R_BIGNUM_TOO_LONG</name>
        <initializer>114</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="883" column="9" bodyfile="thirdparty/openssl/include/openssl/bn.h" bodystart="883" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bn_8h_1a71312d677f2ff4c465e31b6e360ee196" prot="public" static="no">
        <name>BN_R_CALLED_WITH_EVEN_MODULUS</name>
        <initializer>102</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="884" column="9" bodyfile="thirdparty/openssl/include/openssl/bn.h" bodystart="884" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bn_8h_1a4f39865a663e74cd28284b72d0ceed1b" prot="public" static="no">
        <name>BN_R_DIV_BY_ZERO</name>
        <initializer>103</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="885" column="9" bodyfile="thirdparty/openssl/include/openssl/bn.h" bodystart="885" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bn_8h_1a537476c683095e43f51630d32dce0016" prot="public" static="no">
        <name>BN_R_ENCODING_ERROR</name>
        <initializer>104</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="886" column="9" bodyfile="thirdparty/openssl/include/openssl/bn.h" bodystart="886" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bn_8h_1a0d93f56a628d5ba0723f500791af7caa" prot="public" static="no">
        <name>BN_R_EXPAND_ON_STATIC_BIGNUM_DATA</name>
        <initializer>105</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="887" column="9" bodyfile="thirdparty/openssl/include/openssl/bn.h" bodystart="887" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bn_8h_1a0d5d31d18de0db3c13ecdf66850e4a61" prot="public" static="no">
        <name>BN_R_INPUT_NOT_REDUCED</name>
        <initializer>110</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="888" column="9" bodyfile="thirdparty/openssl/include/openssl/bn.h" bodystart="888" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bn_8h_1a437ac8717d3ce3fc10375ce8a045f945" prot="public" static="no">
        <name>BN_R_INVALID_LENGTH</name>
        <initializer>106</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="889" column="9" bodyfile="thirdparty/openssl/include/openssl/bn.h" bodystart="889" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bn_8h_1a4921e37aff3daa5c1f66775ebb98793e" prot="public" static="no">
        <name>BN_R_INVALID_RANGE</name>
        <initializer>115</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="890" column="9" bodyfile="thirdparty/openssl/include/openssl/bn.h" bodystart="890" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bn_8h_1a876389b5f7fea0845b80a5ec4309ff61" prot="public" static="no">
        <name>BN_R_NOT_A_SQUARE</name>
        <initializer>111</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="891" column="9" bodyfile="thirdparty/openssl/include/openssl/bn.h" bodystart="891" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bn_8h_1a7f6e61d46e8fba744f25e7d56375d166" prot="public" static="no">
        <name>BN_R_NOT_INITIALIZED</name>
        <initializer>107</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="892" column="9" bodyfile="thirdparty/openssl/include/openssl/bn.h" bodystart="892" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bn_8h_1ab0f1f2dc683ee4bb43e3b748ae817ddb" prot="public" static="no">
        <name>BN_R_NO_INVERSE</name>
        <initializer>108</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="893" column="9" bodyfile="thirdparty/openssl/include/openssl/bn.h" bodystart="893" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bn_8h_1afc48babc98e919fbee07d17411b35d6d" prot="public" static="no">
        <name>BN_R_NO_SOLUTION</name>
        <initializer>116</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="894" column="9" bodyfile="thirdparty/openssl/include/openssl/bn.h" bodystart="894" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bn_8h_1ae546abe186e7451e4c7d49bdc5156956" prot="public" static="no">
        <name>BN_R_P_IS_NOT_PRIME</name>
        <initializer>112</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="895" column="9" bodyfile="thirdparty/openssl/include/openssl/bn.h" bodystart="895" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bn_8h_1add7a5d89c8eb6aac1043506a5fba35e1" prot="public" static="no">
        <name>BN_R_TOO_MANY_ITERATIONS</name>
        <initializer>113</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="896" column="9" bodyfile="thirdparty/openssl/include/openssl/bn.h" bodystart="896" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bn_8h_1ae5191eedeee6050251641df3411329c0" prot="public" static="no">
        <name>BN_R_TOO_MANY_TEMPORARY_VARIABLES</name>
        <initializer>109</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="897" column="9" bodyfile="thirdparty/openssl/include/openssl/bn.h" bodystart="897" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="bn_8h_1a38d693e1b6ac69e6a1a2862641b19825" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int BN_GENCB_call</definition>
        <argsstring>(BN_GENCB *cb, int a, int b)</argsstring>
        <name>BN_GENCB_call</name>
        <param>
          <type><ref refid="structbn__gencb__st" kindref="compound">BN_GENCB</ref> *</type>
          <declname>cb</declname>
        </param>
        <param>
          <type>int</type>
          <declname>a</declname>
        </param>
        <param>
          <type>int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="367" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1a1f56e9f96a6739ab518cc75e4c374ac4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
        <definition>const BIGNUM* BN_value_one</definition>
        <argsstring>(void)</argsstring>
        <name>BN_value_one</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="425" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1a51df187e7bdcf3c6776957ab6427939a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* BN_options</definition>
        <argsstring>(void)</argsstring>
        <name>BN_options</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="426" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1a04a38b774caf5e9bb7dea8b22c6eddc2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BN_CTX *</type>
        <definition>BN_CTX* BN_CTX_new</definition>
        <argsstring>(void)</argsstring>
        <name>BN_CTX_new</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="427" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1accaf816a3771b199b378a7e942d4f644" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BN_CTX_init</definition>
        <argsstring>(BN_CTX *c)</argsstring>
        <name>BN_CTX_init</name>
        <param>
          <type>BN_CTX *</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="429" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1a92238db5c582bc055f4aa86a5cddb247" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BN_CTX_free</definition>
        <argsstring>(BN_CTX *c)</argsstring>
        <name>BN_CTX_free</name>
        <param>
          <type>BN_CTX *</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="431" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1a47741d3f4189363af52494a962178b2e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BN_CTX_start</definition>
        <argsstring>(BN_CTX *ctx)</argsstring>
        <name>BN_CTX_start</name>
        <param>
          <type>BN_CTX *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="432" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1a606a551f58535bd3e7b530c4712dd369" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
        <definition>BIGNUM* BN_CTX_get</definition>
        <argsstring>(BN_CTX *ctx)</argsstring>
        <name>BN_CTX_get</name>
        <param>
          <type>BN_CTX *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="433" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1a79f7595a61a3e72069857a3e43902a56" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BN_CTX_end</definition>
        <argsstring>(BN_CTX *ctx)</argsstring>
        <name>BN_CTX_end</name>
        <param>
          <type>BN_CTX *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="434" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1a63c8f80c961a5e3e2a166d25ef450c46" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int BN_rand</definition>
        <argsstring>(BIGNUM *rnd, int bits, int top, int bottom)</argsstring>
        <name>BN_rand</name>
        <param>
          <type><ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>rnd</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bits</declname>
        </param>
        <param>
          <type>int</type>
          <declname>top</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bottom</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="435" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1abae14c82010432763e1e0bcff9a2f3b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int BN_pseudo_rand</definition>
        <argsstring>(BIGNUM *rnd, int bits, int top, int bottom)</argsstring>
        <name>BN_pseudo_rand</name>
        <param>
          <type><ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>rnd</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bits</declname>
        </param>
        <param>
          <type>int</type>
          <declname>top</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bottom</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="436" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1ad8ca9f1536dd428b6ecae7578dc2f6a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int BN_rand_range</definition>
        <argsstring>(BIGNUM *rnd, const BIGNUM *range)</argsstring>
        <name>BN_rand_range</name>
        <param>
          <type><ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>rnd</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>range</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="437" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1a9b8b2d1e3d79b9425a3097b93f0cf4e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int BN_pseudo_rand_range</definition>
        <argsstring>(BIGNUM *rnd, const BIGNUM *range)</argsstring>
        <name>BN_pseudo_rand_range</name>
        <param>
          <type><ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>rnd</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>range</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="438" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1ac86b87eb025891a758602a7153dbaae5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int BN_num_bits</definition>
        <argsstring>(const BIGNUM *a)</argsstring>
        <name>BN_num_bits</name>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="439" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1a52c2542c7138c9fd2612df846b0129bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int BN_num_bits_word</definition>
        <argsstring>(BN_ULONG)</argsstring>
        <name>BN_num_bits_word</name>
        <param>
          <type>BN_ULONG</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="440" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1a778b82cdf93b0e855412c07aafed97f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
        <definition>BIGNUM* BN_new</definition>
        <argsstring>(void)</argsstring>
        <name>BN_new</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="441" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1a7fd31fb560daa37060a29f18a176d0e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BN_init</definition>
        <argsstring>(BIGNUM *)</argsstring>
        <name>BN_init</name>
        <param>
          <type><ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="442" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1a56590c5516fe2b5ae9b30fbbb3874c5a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BN_clear_free</definition>
        <argsstring>(BIGNUM *a)</argsstring>
        <name>BN_clear_free</name>
        <param>
          <type><ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="443" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1aea0c4e291bb4a98877f3e106aba231ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
        <definition>BIGNUM* BN_copy</definition>
        <argsstring>(BIGNUM *a, const BIGNUM *b)</argsstring>
        <name>BN_copy</name>
        <param>
          <type><ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="444" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1adeb40f98231d7a1aba300f4fa4361f3e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BN_swap</definition>
        <argsstring>(BIGNUM *a, BIGNUM *b)</argsstring>
        <name>BN_swap</name>
        <param>
          <type><ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="445" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1a9ca9a524bd4c4de12ae0947872c5182b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
        <definition>BIGNUM* BN_bin2bn</definition>
        <argsstring>(const unsigned char *s, int len, BIGNUM *ret)</argsstring>
        <name>BN_bin2bn</name>
        <param>
          <type>const unsigned char *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>int</type>
          <declname>len</declname>
        </param>
        <param>
          <type><ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>ret</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="446" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1a72e393df20fc0ec8e761204fe5f28c17" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int BN_bn2bin</definition>
        <argsstring>(const BIGNUM *a, unsigned char *to)</argsstring>
        <name>BN_bn2bin</name>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>to</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="447" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1a1cd3febbaf068c80d6642a482f29479f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
        <definition>BIGNUM* BN_mpi2bn</definition>
        <argsstring>(const unsigned char *s, int len, BIGNUM *ret)</argsstring>
        <name>BN_mpi2bn</name>
        <param>
          <type>const unsigned char *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>int</type>
          <declname>len</declname>
        </param>
        <param>
          <type><ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>ret</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="448" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1aac383c5c858a533b143c53c706a4ae9d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int BN_bn2mpi</definition>
        <argsstring>(const BIGNUM *a, unsigned char *to)</argsstring>
        <name>BN_bn2mpi</name>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>to</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="449" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1ab92d8598888aa744c770a7656507a299" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int BN_sub</definition>
        <argsstring>(BIGNUM *r, const BIGNUM *a, const BIGNUM *b)</argsstring>
        <name>BN_sub</name>
        <param>
          <type><ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="450" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1a9771bb6e21d1fa238b6e518746305825" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int BN_usub</definition>
        <argsstring>(BIGNUM *r, const BIGNUM *a, const BIGNUM *b)</argsstring>
        <name>BN_usub</name>
        <param>
          <type><ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="451" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1ad4aa9d4d4ecfdee526a2979dbec4815d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int BN_uadd</definition>
        <argsstring>(BIGNUM *r, const BIGNUM *a, const BIGNUM *b)</argsstring>
        <name>BN_uadd</name>
        <param>
          <type><ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="452" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1aa2ad946f29b201d22a2ca4750a587431" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int BN_add</definition>
        <argsstring>(BIGNUM *r, const BIGNUM *a, const BIGNUM *b)</argsstring>
        <name>BN_add</name>
        <param>
          <type><ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="453" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1a59c2fddbc3b4a0bdc548f08ee48f3af1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int BN_mul</definition>
        <argsstring>(BIGNUM *r, const BIGNUM *a, const BIGNUM *b, BN_CTX *ctx)</argsstring>
        <name>BN_mul</name>
        <param>
          <type><ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>BN_CTX *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="454" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1ac1995ae74557a3177b6375dde9914cbc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int BN_sqr</definition>
        <argsstring>(BIGNUM *r, const BIGNUM *a, BN_CTX *ctx)</argsstring>
        <name>BN_sqr</name>
        <param>
          <type><ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>BN_CTX *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="455" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1ab7b1190ceeb63bd29ead775f33d203cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BN_set_negative</definition>
        <argsstring>(BIGNUM *b, int n)</argsstring>
        <name>BN_set_negative</name>
        <param>
          <type><ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>BN_set_negative sets sign of a BIGNUM <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the BIGNUM object </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>0 if the BIGNUM b should be positive and a value != 0 otherwise </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="460" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1aa2d806f97ad6b75e85e001d781090eb0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int BN_div</definition>
        <argsstring>(BIGNUM *dv, BIGNUM *rem, const BIGNUM *m, const BIGNUM *d, BN_CTX *ctx)</argsstring>
        <name>BN_div</name>
        <param>
          <type><ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>dv</declname>
        </param>
        <param>
          <type><ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>rem</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>d</declname>
        </param>
        <param>
          <type>BN_CTX *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="467" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1a762a91b13a7ad118051f34eacac4e104" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int BN_nnmod</definition>
        <argsstring>(BIGNUM *r, const BIGNUM *m, const BIGNUM *d, BN_CTX *ctx)</argsstring>
        <name>BN_nnmod</name>
        <param>
          <type><ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>d</declname>
        </param>
        <param>
          <type>BN_CTX *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="470" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1a50cddc55ee851c397ab4ef621137edb5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int BN_mod_add</definition>
        <argsstring>(BIGNUM *r, const BIGNUM *a, const BIGNUM *b, const BIGNUM *m, BN_CTX *ctx)</argsstring>
        <name>BN_mod_add</name>
        <param>
          <type><ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>BN_CTX *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="471" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1aaa6053a59ccd42c4c8a7b74c8ded8db8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int BN_mod_add_quick</definition>
        <argsstring>(BIGNUM *r, const BIGNUM *a, const BIGNUM *b, const BIGNUM *m)</argsstring>
        <name>BN_mod_add_quick</name>
        <param>
          <type><ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="472" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1a971fe510abbbb2afc4f65286050cf848" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int BN_mod_sub</definition>
        <argsstring>(BIGNUM *r, const BIGNUM *a, const BIGNUM *b, const BIGNUM *m, BN_CTX *ctx)</argsstring>
        <name>BN_mod_sub</name>
        <param>
          <type><ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>BN_CTX *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="473" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1a5902138d93ad4a9f751387801ffd34ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int BN_mod_sub_quick</definition>
        <argsstring>(BIGNUM *r, const BIGNUM *a, const BIGNUM *b, const BIGNUM *m)</argsstring>
        <name>BN_mod_sub_quick</name>
        <param>
          <type><ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="474" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1ad0146b160c761fbfc83c1eeda4aee561" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int BN_mod_mul</definition>
        <argsstring>(BIGNUM *r, const BIGNUM *a, const BIGNUM *b, const BIGNUM *m, BN_CTX *ctx)</argsstring>
        <name>BN_mod_mul</name>
        <param>
          <type><ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>BN_CTX *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="475" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1aa9a559c42c43f5f0d8caf02475820de3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int BN_mod_sqr</definition>
        <argsstring>(BIGNUM *r, const BIGNUM *a, const BIGNUM *m, BN_CTX *ctx)</argsstring>
        <name>BN_mod_sqr</name>
        <param>
          <type><ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>BN_CTX *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="477" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1ab4eedff66ecfc9f193733b06d870d9ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int BN_mod_lshift1</definition>
        <argsstring>(BIGNUM *r, const BIGNUM *a, const BIGNUM *m, BN_CTX *ctx)</argsstring>
        <name>BN_mod_lshift1</name>
        <param>
          <type><ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>BN_CTX *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="478" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1a010671ecf50befbe4baedce70b58e6a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int BN_mod_lshift1_quick</definition>
        <argsstring>(BIGNUM *r, const BIGNUM *a, const BIGNUM *m)</argsstring>
        <name>BN_mod_lshift1_quick</name>
        <param>
          <type><ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="479" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1abe72a5c5ea4e4c465d8a7a86a77d8c31" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int BN_mod_lshift</definition>
        <argsstring>(BIGNUM *r, const BIGNUM *a, int n, const BIGNUM *m, BN_CTX *ctx)</argsstring>
        <name>BN_mod_lshift</name>
        <param>
          <type><ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>BN_CTX *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="480" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1a79ce7dc01a6699fdda95a85d9d2fed3d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int BN_mod_lshift_quick</definition>
        <argsstring>(BIGNUM *r, const BIGNUM *a, int n, const BIGNUM *m)</argsstring>
        <name>BN_mod_lshift_quick</name>
        <param>
          <type><ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="481" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1a7eb5aba40cecef96d76cd0cb0b426c08" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BN_ULONG</type>
        <definition>BN_ULONG BN_mod_word</definition>
        <argsstring>(const BIGNUM *a, BN_ULONG w)</argsstring>
        <name>BN_mod_word</name>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>BN_ULONG</type>
          <declname>w</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="483" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1ac4219b8dffb47b39dce52f9728ab84b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BN_ULONG</type>
        <definition>BN_ULONG BN_div_word</definition>
        <argsstring>(BIGNUM *a, BN_ULONG w)</argsstring>
        <name>BN_div_word</name>
        <param>
          <type><ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>BN_ULONG</type>
          <declname>w</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="484" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1a31b6dc4a21e60b83f57b0af84905de69" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int BN_mul_word</definition>
        <argsstring>(BIGNUM *a, BN_ULONG w)</argsstring>
        <name>BN_mul_word</name>
        <param>
          <type><ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>BN_ULONG</type>
          <declname>w</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="485" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1aa26d5ca4674fd4ee4076eb90afa85a40" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int BN_add_word</definition>
        <argsstring>(BIGNUM *a, BN_ULONG w)</argsstring>
        <name>BN_add_word</name>
        <param>
          <type><ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>BN_ULONG</type>
          <declname>w</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="486" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1af1b59addeb34d71582e7258061121fd7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int BN_sub_word</definition>
        <argsstring>(BIGNUM *a, BN_ULONG w)</argsstring>
        <name>BN_sub_word</name>
        <param>
          <type><ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>BN_ULONG</type>
          <declname>w</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="487" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1ae9b1fc316ffc1825cb8547ba169631b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int BN_set_word</definition>
        <argsstring>(BIGNUM *a, BN_ULONG w)</argsstring>
        <name>BN_set_word</name>
        <param>
          <type><ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>BN_ULONG</type>
          <declname>w</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="488" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1a37a7b3454626cc0b15de05eade66bb68" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BN_ULONG</type>
        <definition>BN_ULONG BN_get_word</definition>
        <argsstring>(const BIGNUM *a)</argsstring>
        <name>BN_get_word</name>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="489" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1ac18ade9dbb4531d8cc3a38d3c970c0e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int BN_cmp</definition>
        <argsstring>(const BIGNUM *a, const BIGNUM *b)</argsstring>
        <name>BN_cmp</name>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="491" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1a2d660f4ff6015d33035484c4e9f09e88" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BN_free</definition>
        <argsstring>(BIGNUM *a)</argsstring>
        <name>BN_free</name>
        <param>
          <type><ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="492" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1afe142a52a34b899e6e3891ebb74d1e2d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int BN_is_bit_set</definition>
        <argsstring>(const BIGNUM *a, int n)</argsstring>
        <name>BN_is_bit_set</name>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="493" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1ae958fce9da220ca7158f9072752632a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int BN_lshift</definition>
        <argsstring>(BIGNUM *r, const BIGNUM *a, int n)</argsstring>
        <name>BN_lshift</name>
        <param>
          <type><ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="494" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1ad186a71ba4368527796f30db0b205e47" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int BN_lshift1</definition>
        <argsstring>(BIGNUM *r, const BIGNUM *a)</argsstring>
        <name>BN_lshift1</name>
        <param>
          <type><ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="495" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1a1a5f515f2a05e4bcf2ae07b86b8c2ce8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int BN_exp</definition>
        <argsstring>(BIGNUM *r, const BIGNUM *a, const BIGNUM *p, BN_CTX *ctx)</argsstring>
        <name>BN_exp</name>
        <param>
          <type><ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>BN_CTX *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="496" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1a4624503e0c5a02a37708ecd62734727c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int BN_mod_exp</definition>
        <argsstring>(BIGNUM *r, const BIGNUM *a, const BIGNUM *p, const BIGNUM *m, BN_CTX *ctx)</argsstring>
        <name>BN_mod_exp</name>
        <param>
          <type><ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>BN_CTX *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="498" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1a47220794c064f6df0ef0aae54e2ed68f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int BN_mod_exp_mont</definition>
        <argsstring>(BIGNUM *r, const BIGNUM *a, const BIGNUM *p, const BIGNUM *m, BN_CTX *ctx, BN_MONT_CTX *m_ctx)</argsstring>
        <name>BN_mod_exp_mont</name>
        <param>
          <type><ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>BN_CTX *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type><ref refid="structbn__mont__ctx__st" kindref="compound">BN_MONT_CTX</ref> *</type>
          <declname>m_ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="500" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1ac4b4219879ef78064dce04a0d3f878b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int BN_mod_exp_mont_consttime</definition>
        <argsstring>(BIGNUM *rr, const BIGNUM *a, const BIGNUM *p, const BIGNUM *m, BN_CTX *ctx, BN_MONT_CTX *in_mont)</argsstring>
        <name>BN_mod_exp_mont_consttime</name>
        <param>
          <type><ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>rr</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>BN_CTX *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type><ref refid="structbn__mont__ctx__st" kindref="compound">BN_MONT_CTX</ref> *</type>
          <declname>in_mont</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="502" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1ad48028ae6474f62172778dbcd69d0662" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int BN_mod_exp_mont_word</definition>
        <argsstring>(BIGNUM *r, BN_ULONG a, const BIGNUM *p, const BIGNUM *m, BN_CTX *ctx, BN_MONT_CTX *m_ctx)</argsstring>
        <name>BN_mod_exp_mont_word</name>
        <param>
          <type><ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>BN_ULONG</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>BN_CTX *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type><ref refid="structbn__mont__ctx__st" kindref="compound">BN_MONT_CTX</ref> *</type>
          <declname>m_ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="504" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1a84cc89fd014c1966f6f8f514b37e421d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int BN_mod_exp2_mont</definition>
        <argsstring>(BIGNUM *r, const BIGNUM *a1, const BIGNUM *p1, const BIGNUM *a2, const BIGNUM *p2, const BIGNUM *m, BN_CTX *ctx, BN_MONT_CTX *m_ctx)</argsstring>
        <name>BN_mod_exp2_mont</name>
        <param>
          <type><ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>a1</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>a2</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>p2</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>BN_CTX *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type><ref refid="structbn__mont__ctx__st" kindref="compound">BN_MONT_CTX</ref> *</type>
          <declname>m_ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="506" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1a424f046eb1b37786478ace51c6e97ae2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int BN_mod_exp_simple</definition>
        <argsstring>(BIGNUM *r, const BIGNUM *a, const BIGNUM *p, const BIGNUM *m, BN_CTX *ctx)</argsstring>
        <name>BN_mod_exp_simple</name>
        <param>
          <type><ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>BN_CTX *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="509" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1afef0313695959acb28432e718486d02e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int BN_mask_bits</definition>
        <argsstring>(BIGNUM *a, int n)</argsstring>
        <name>BN_mask_bits</name>
        <param>
          <type><ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="512" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1a0428e2fa4bfb47f13a70edd756ae4a0b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int BN_print_fp</definition>
        <argsstring>(FILE *fp, const BIGNUM *a)</argsstring>
        <name>BN_print_fp</name>
        <param>
          <type>FILE *</type>
          <declname>fp</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="514" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1a6a1f4eef77bff0b65ebc3de9b52772a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int BN_print</definition>
        <argsstring>(void *fp, const BIGNUM *a)</argsstring>
        <name>BN_print</name>
        <param>
          <type>void *</type>
          <declname>fp</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="519" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1adaea076252ad19b841dbb2eef5a5dd7b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int BN_reciprocal</definition>
        <argsstring>(BIGNUM *r, const BIGNUM *m, int len, BN_CTX *ctx)</argsstring>
        <name>BN_reciprocal</name>
        <param>
          <type><ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>int</type>
          <declname>len</declname>
        </param>
        <param>
          <type>BN_CTX *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="521" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1a518117a356ce88c99f896df71176c9a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int BN_rshift</definition>
        <argsstring>(BIGNUM *r, const BIGNUM *a, int n)</argsstring>
        <name>BN_rshift</name>
        <param>
          <type><ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="522" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1a3cb7d7191df9d34668094e64c500e2a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int BN_rshift1</definition>
        <argsstring>(BIGNUM *r, const BIGNUM *a)</argsstring>
        <name>BN_rshift1</name>
        <param>
          <type><ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="523" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1a2b7140040fc80851c9897b0bc8c41572" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BN_clear</definition>
        <argsstring>(BIGNUM *a)</argsstring>
        <name>BN_clear</name>
        <param>
          <type><ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="524" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1a2301c52856e55cb85af5d72ba4d8813a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
        <definition>BIGNUM* BN_dup</definition>
        <argsstring>(const BIGNUM *a)</argsstring>
        <name>BN_dup</name>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="525" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1ab1ae0b9d9dfc923356e8a05a9a5be89a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int BN_ucmp</definition>
        <argsstring>(const BIGNUM *a, const BIGNUM *b)</argsstring>
        <name>BN_ucmp</name>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="526" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1a749422e7fccf262d029ddf941418a39a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int BN_set_bit</definition>
        <argsstring>(BIGNUM *a, int n)</argsstring>
        <name>BN_set_bit</name>
        <param>
          <type><ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="527" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1a4f112c5169b5b6fcba3cc4e8eaaf3d0c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int BN_clear_bit</definition>
        <argsstring>(BIGNUM *a, int n)</argsstring>
        <name>BN_clear_bit</name>
        <param>
          <type><ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="528" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1af95b9ae54c01d30e95d3894f916257c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* BN_bn2hex</definition>
        <argsstring>(const BIGNUM *a)</argsstring>
        <name>BN_bn2hex</name>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="529" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1a9a4987a56d0cc7fe071c6fcf3db805e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* BN_bn2dec</definition>
        <argsstring>(const BIGNUM *a)</argsstring>
        <name>BN_bn2dec</name>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="530" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1a5cda0b0f92464a87573c712f3badab68" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int BN_hex2bn</definition>
        <argsstring>(BIGNUM **a, const char *str)</argsstring>
        <name>BN_hex2bn</name>
        <param>
          <type><ref refid="structbignum__st" kindref="compound">BIGNUM</ref> **</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="531" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1a6bf0ba904cd78b6494e5ae95d5e97e27" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int BN_dec2bn</definition>
        <argsstring>(BIGNUM **a, const char *str)</argsstring>
        <name>BN_dec2bn</name>
        <param>
          <type><ref refid="structbignum__st" kindref="compound">BIGNUM</ref> **</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="532" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1a877348d453abc25018f850c24b90a7ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int BN_asc2bn</definition>
        <argsstring>(BIGNUM **a, const char *str)</argsstring>
        <name>BN_asc2bn</name>
        <param>
          <type><ref refid="structbignum__st" kindref="compound">BIGNUM</ref> **</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="533" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1a219e9bcbbb0faec16ab8c17dd586abec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int BN_gcd</definition>
        <argsstring>(BIGNUM *r, const BIGNUM *a, const BIGNUM *b, BN_CTX *ctx)</argsstring>
        <name>BN_gcd</name>
        <param>
          <type><ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>BN_CTX *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="534" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1a5dbf3f398645fb60b5b86656efff10d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int BN_kronecker</definition>
        <argsstring>(const BIGNUM *a, const BIGNUM *b, BN_CTX *ctx)</argsstring>
        <name>BN_kronecker</name>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>BN_CTX *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="535" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1af0a3a412b596f78d0e8737e5dbff22c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
        <definition>BIGNUM* BN_mod_inverse</definition>
        <argsstring>(BIGNUM *ret, const BIGNUM *a, const BIGNUM *n, BN_CTX *ctx)</argsstring>
        <name>BN_mod_inverse</name>
        <param>
          <type><ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>ret</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>BN_CTX *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="536" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1a03de195cef558fc5b60fbf8fef0db133" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
        <definition>BIGNUM* BN_mod_sqrt</definition>
        <argsstring>(BIGNUM *ret, const BIGNUM *a, const BIGNUM *n, BN_CTX *ctx)</argsstring>
        <name>BN_mod_sqrt</name>
        <param>
          <type><ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>ret</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>BN_CTX *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="538" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1a829060af05302fc505b58ebdde5e068f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BN_consttime_swap</definition>
        <argsstring>(BN_ULONG swap, BIGNUM *a, BIGNUM *b, int nwords)</argsstring>
        <name>BN_consttime_swap</name>
        <param>
          <type>BN_ULONG</type>
          <declname>swap</declname>
        </param>
        <param>
          <type><ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nwords</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="541" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1ac29d27103c4046e4504964a3e9ec2a93" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
        <definition>BIGNUM* BN_generate_prime</definition>
        <argsstring>(BIGNUM *ret, int bits, int safe, const BIGNUM *add, const BIGNUM *rem, void(*callback)(int, int, void *), void *cb_arg)</argsstring>
        <name>BN_generate_prime</name>
        <param>
          <type><ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>ret</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bits</declname>
        </param>
        <param>
          <type>int</type>
          <declname>safe</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>add</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>rem</declname>
        </param>
        <param>
          <type>void(*)(int, int, void *)</type>
          <declname>callback</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>cb_arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="545" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1a21111fb64b86f9fd57e0e35ab47075ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int BN_is_prime</definition>
        <argsstring>(const BIGNUM *p, int nchecks, void(*callback)(int, int, void *), BN_CTX *ctx, void *cb_arg)</argsstring>
        <name>BN_is_prime</name>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nchecks</declname>
        </param>
        <param>
          <type>void(*)(int, int, void *)</type>
          <declname>callback</declname>
        </param>
        <param>
          <type>BN_CTX *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>cb_arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="548" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1a30217120f0cfa74b19a28faaf48717d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int BN_is_prime_fasttest</definition>
        <argsstring>(const BIGNUM *p, int nchecks, void(*callback)(int, int, void *), BN_CTX *ctx, void *cb_arg, int do_trial_division)</argsstring>
        <name>BN_is_prime_fasttest</name>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nchecks</declname>
        </param>
        <param>
          <type>void(*)(int, int, void *)</type>
          <declname>callback</declname>
        </param>
        <param>
          <type>BN_CTX *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>cb_arg</declname>
        </param>
        <param>
          <type>int</type>
          <declname>do_trial_division</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="551" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1a4047346aaa10a0ce1f8d41947731271b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int BN_generate_prime_ex</definition>
        <argsstring>(BIGNUM *ret, int bits, int safe, const BIGNUM *add, const BIGNUM *rem, BN_GENCB *cb)</argsstring>
        <name>BN_generate_prime_ex</name>
        <param>
          <type><ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>ret</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bits</declname>
        </param>
        <param>
          <type>int</type>
          <declname>safe</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>add</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>rem</declname>
        </param>
        <param>
          <type><ref refid="structbn__gencb__st" kindref="compound">BN_GENCB</ref> *</type>
          <declname>cb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="557" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1a5677a3b9ac65e3d84a6764a7c05ae294" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int BN_is_prime_ex</definition>
        <argsstring>(const BIGNUM *p, int nchecks, BN_CTX *ctx, BN_GENCB *cb)</argsstring>
        <name>BN_is_prime_ex</name>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nchecks</declname>
        </param>
        <param>
          <type>BN_CTX *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type><ref refid="structbn__gencb__st" kindref="compound">BN_GENCB</ref> *</type>
          <declname>cb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="559" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1a9a6f34fa218fe1250fe77ace1a38e37b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int BN_is_prime_fasttest_ex</definition>
        <argsstring>(const BIGNUM *p, int nchecks, BN_CTX *ctx, int do_trial_division, BN_GENCB *cb)</argsstring>
        <name>BN_is_prime_fasttest_ex</name>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nchecks</declname>
        </param>
        <param>
          <type>BN_CTX *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>do_trial_division</declname>
        </param>
        <param>
          <type><ref refid="structbn__gencb__st" kindref="compound">BN_GENCB</ref> *</type>
          <declname>cb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="560" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1a1de31b03203c70b0f5dfb24f6638b57d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int BN_X931_generate_Xpq</definition>
        <argsstring>(BIGNUM *Xp, BIGNUM *Xq, int nbits, BN_CTX *ctx)</argsstring>
        <name>BN_X931_generate_Xpq</name>
        <param>
          <type><ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>Xp</declname>
        </param>
        <param>
          <type><ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>Xq</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nbits</declname>
        </param>
        <param>
          <type>BN_CTX *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="563" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1ae3617b29e7b02d9bcac706b4b4937bad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int BN_X931_derive_prime_ex</definition>
        <argsstring>(BIGNUM *p, BIGNUM *p1, BIGNUM *p2, const BIGNUM *Xp, const BIGNUM *Xp1, const BIGNUM *Xp2, const BIGNUM *e, BN_CTX *ctx, BN_GENCB *cb)</argsstring>
        <name>BN_X931_derive_prime_ex</name>
        <param>
          <type><ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>p1</declname>
        </param>
        <param>
          <type><ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>p2</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>Xp</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>Xp1</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>Xp2</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>e</declname>
        </param>
        <param>
          <type>BN_CTX *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type><ref refid="structbn__gencb__st" kindref="compound">BN_GENCB</ref> *</type>
          <declname>cb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="565" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1aebf1bdca3b5dcd8df7048bc5b903ce6d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int BN_X931_generate_prime_ex</definition>
        <argsstring>(BIGNUM *p, BIGNUM *p1, BIGNUM *p2, BIGNUM *Xp1, BIGNUM *Xp2, const BIGNUM *Xp, const BIGNUM *e, BN_CTX *ctx, BN_GENCB *cb)</argsstring>
        <name>BN_X931_generate_prime_ex</name>
        <param>
          <type><ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>p1</declname>
        </param>
        <param>
          <type><ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>p2</declname>
        </param>
        <param>
          <type><ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>Xp1</declname>
        </param>
        <param>
          <type><ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>Xp2</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>Xp</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>e</declname>
        </param>
        <param>
          <type>BN_CTX *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type><ref refid="structbn__gencb__st" kindref="compound">BN_GENCB</ref> *</type>
          <declname>cb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="568" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1a999d23b49a7dda650cc474a5d23371b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structbn__mont__ctx__st" kindref="compound">BN_MONT_CTX</ref> *</type>
        <definition>BN_MONT_CTX* BN_MONT_CTX_new</definition>
        <argsstring>(void)</argsstring>
        <name>BN_MONT_CTX_new</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="574" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1a372523413775537761de90c214860420" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BN_MONT_CTX_init</definition>
        <argsstring>(BN_MONT_CTX *ctx)</argsstring>
        <name>BN_MONT_CTX_init</name>
        <param>
          <type><ref refid="structbn__mont__ctx__st" kindref="compound">BN_MONT_CTX</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="575" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1a45f23a70e47aaee8e5a803b6bead2389" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int BN_mod_mul_montgomery</definition>
        <argsstring>(BIGNUM *r, const BIGNUM *a, const BIGNUM *b, BN_MONT_CTX *mont, BN_CTX *ctx)</argsstring>
        <name>BN_mod_mul_montgomery</name>
        <param>
          <type><ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="structbn__mont__ctx__st" kindref="compound">BN_MONT_CTX</ref> *</type>
          <declname>mont</declname>
        </param>
        <param>
          <type>BN_CTX *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="576" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1a9977c9c5f9a09f4f2802b5ef8edae9ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int BN_from_montgomery</definition>
        <argsstring>(BIGNUM *r, const BIGNUM *a, BN_MONT_CTX *mont, BN_CTX *ctx)</argsstring>
        <name>BN_from_montgomery</name>
        <param>
          <type><ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structbn__mont__ctx__st" kindref="compound">BN_MONT_CTX</ref> *</type>
          <declname>mont</declname>
        </param>
        <param>
          <type>BN_CTX *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="580" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1a116cb1474c03454afc12f5256b6974e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BN_MONT_CTX_free</definition>
        <argsstring>(BN_MONT_CTX *mont)</argsstring>
        <name>BN_MONT_CTX_free</name>
        <param>
          <type><ref refid="structbn__mont__ctx__st" kindref="compound">BN_MONT_CTX</ref> *</type>
          <declname>mont</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="582" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1a878255f2366943638d159fcf8a774493" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int BN_MONT_CTX_set</definition>
        <argsstring>(BN_MONT_CTX *mont, const BIGNUM *mod, BN_CTX *ctx)</argsstring>
        <name>BN_MONT_CTX_set</name>
        <param>
          <type><ref refid="structbn__mont__ctx__st" kindref="compound">BN_MONT_CTX</ref> *</type>
          <declname>mont</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>mod</declname>
        </param>
        <param>
          <type>BN_CTX *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="583" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1a625fb0eec5b9522d635ebfcdd5f87503" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structbn__mont__ctx__st" kindref="compound">BN_MONT_CTX</ref> *</type>
        <definition>BN_MONT_CTX* BN_MONT_CTX_copy</definition>
        <argsstring>(BN_MONT_CTX *to, BN_MONT_CTX *from)</argsstring>
        <name>BN_MONT_CTX_copy</name>
        <param>
          <type><ref refid="structbn__mont__ctx__st" kindref="compound">BN_MONT_CTX</ref> *</type>
          <declname>to</declname>
        </param>
        <param>
          <type><ref refid="structbn__mont__ctx__st" kindref="compound">BN_MONT_CTX</ref> *</type>
          <declname>from</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="584" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1af245fe3f8bfa9eb9dbbd0ad879b6b251" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structbn__mont__ctx__st" kindref="compound">BN_MONT_CTX</ref> *</type>
        <definition>BN_MONT_CTX* BN_MONT_CTX_set_locked</definition>
        <argsstring>(BN_MONT_CTX **pmont, int lock, const BIGNUM *mod, BN_CTX *ctx)</argsstring>
        <name>BN_MONT_CTX_set_locked</name>
        <param>
          <type><ref refid="structbn__mont__ctx__st" kindref="compound">BN_MONT_CTX</ref> **</type>
          <declname>pmont</declname>
        </param>
        <param>
          <type>int</type>
          <declname>lock</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>mod</declname>
        </param>
        <param>
          <type>BN_CTX *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="585" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1a6f45590849103e534288a74007862e4c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BN_BLINDING *</type>
        <definition>BN_BLINDING* BN_BLINDING_new</definition>
        <argsstring>(const BIGNUM *A, const BIGNUM *Ai, BIGNUM *mod)</argsstring>
        <name>BN_BLINDING_new</name>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>Ai</declname>
        </param>
        <param>
          <type><ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>mod</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="592" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1aa60ce05adcbc7be96686316695c29388" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BN_BLINDING_free</definition>
        <argsstring>(BN_BLINDING *b)</argsstring>
        <name>BN_BLINDING_free</name>
        <param>
          <type>BN_BLINDING *</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="593" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1ad50896c3163fef9d02aecbc9bcf296e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int BN_BLINDING_update</definition>
        <argsstring>(BN_BLINDING *b, BN_CTX *ctx)</argsstring>
        <name>BN_BLINDING_update</name>
        <param>
          <type>BN_BLINDING *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>BN_CTX *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="594" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1a0e6e29f103dc3e0f7a7ccfa27fe3e71c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int BN_BLINDING_convert</definition>
        <argsstring>(BIGNUM *n, BN_BLINDING *b, BN_CTX *ctx)</argsstring>
        <name>BN_BLINDING_convert</name>
        <param>
          <type><ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>BN_BLINDING *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>BN_CTX *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="595" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1a999ec9e4c1907395f2267182adac3796" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int BN_BLINDING_invert</definition>
        <argsstring>(BIGNUM *n, BN_BLINDING *b, BN_CTX *ctx)</argsstring>
        <name>BN_BLINDING_invert</name>
        <param>
          <type><ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>BN_BLINDING *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>BN_CTX *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="596" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1a2c5a16f6e2cfee7d6c1797b7a49921ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int BN_BLINDING_convert_ex</definition>
        <argsstring>(BIGNUM *n, BIGNUM *r, BN_BLINDING *b, BN_CTX *)</argsstring>
        <name>BN_BLINDING_convert_ex</name>
        <param>
          <type><ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>BN_BLINDING *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>BN_CTX *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="597" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1a8d08604395fabfd2935156c70d29fd27" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int BN_BLINDING_invert_ex</definition>
        <argsstring>(BIGNUM *n, const BIGNUM *r, BN_BLINDING *b, BN_CTX *)</argsstring>
        <name>BN_BLINDING_invert_ex</name>
        <param>
          <type><ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>BN_BLINDING *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>BN_CTX *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="598" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1a1c76ce60def127568dc9bb55b5c35025" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned long</type>
        <definition>unsigned long BN_BLINDING_get_thread_id</definition>
        <argsstring>(const BN_BLINDING *)</argsstring>
        <name>BN_BLINDING_get_thread_id</name>
        <param>
          <type>const BN_BLINDING *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="600" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1a5a052ed2729d5fb6f7a9f09ebcf139ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BN_BLINDING_set_thread_id</definition>
        <argsstring>(BN_BLINDING *, unsigned long)</argsstring>
        <name>BN_BLINDING_set_thread_id</name>
        <param>
          <type>BN_BLINDING *</type>
        </param>
        <param>
          <type>unsigned</type>
          <declname>long</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="601" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1aac9a91a45815c54a54c70e58140aac51" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structcrypto__threadid__st" kindref="compound">CRYPTO_THREADID</ref> *</type>
        <definition>CRYPTO_THREADID* BN_BLINDING_thread_id</definition>
        <argsstring>(BN_BLINDING *)</argsstring>
        <name>BN_BLINDING_thread_id</name>
        <param>
          <type>BN_BLINDING *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="603" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1ac2480d6911f40659cdf8a4d50bd72b9b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned long</type>
        <definition>unsigned long BN_BLINDING_get_flags</definition>
        <argsstring>(const BN_BLINDING *)</argsstring>
        <name>BN_BLINDING_get_flags</name>
        <param>
          <type>const BN_BLINDING *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="604" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1a5ef0f90570e75f74ebf6ad2e6293c01f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BN_BLINDING_set_flags</definition>
        <argsstring>(BN_BLINDING *, unsigned long)</argsstring>
        <name>BN_BLINDING_set_flags</name>
        <param>
          <type>BN_BLINDING *</type>
        </param>
        <param>
          <type>unsigned</type>
          <declname>long</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="605" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1a09503f075d7a1b3d111895e65e7e1a03" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BN_BLINDING *</type>
        <definition>BN_BLINDING* BN_BLINDING_create_param</definition>
        <argsstring>(BN_BLINDING *b, const BIGNUM *e, BIGNUM *m, BN_CTX *ctx, int(*bn_mod_exp)(BIGNUM *r, const BIGNUM *a, const BIGNUM *p, const BIGNUM *m, BN_CTX *ctx, BN_MONT_CTX *m_ctx), BN_MONT_CTX *m_ctx)</argsstring>
        <name>BN_BLINDING_create_param</name>
        <param>
          <type>BN_BLINDING *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>e</declname>
        </param>
        <param>
          <type><ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>BN_CTX *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>int(*)(<ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *r, const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *a, const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *p, const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *m, BN_CTX *ctx, <ref refid="structbn__mont__ctx__st" kindref="compound">BN_MONT_CTX</ref> *m_ctx)</type>
          <declname>bn_mod_exp</declname>
        </param>
        <param>
          <type><ref refid="structbn__mont__ctx__st" kindref="compound">BN_MONT_CTX</ref> *</type>
          <declname>m_ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="606" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1ae012ac69de1788b1b542ebacdae12e08" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BN_set_params</definition>
        <argsstring>(int mul, int high, int low, int mont)</argsstring>
        <name>BN_set_params</name>
        <param>
          <type>int</type>
          <declname>mul</declname>
        </param>
        <param>
          <type>int</type>
          <declname>high</declname>
        </param>
        <param>
          <type>int</type>
          <declname>low</declname>
        </param>
        <param>
          <type>int</type>
          <declname>mont</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="613" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1a954f70fa1efe33d3fa48b9525366e31b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int BN_get_params</definition>
        <argsstring>(int which)</argsstring>
        <name>BN_get_params</name>
        <param>
          <type>int</type>
          <declname>which</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="614" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1aac14d9be4ac98d2840f9b2e1e2f78653" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BN_RECP_CTX_init</definition>
        <argsstring>(BN_RECP_CTX *recp)</argsstring>
        <name>BN_RECP_CTX_init</name>
        <param>
          <type><ref refid="structbn__recp__ctx__st" kindref="compound">BN_RECP_CTX</ref> *</type>
          <declname>recp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="617" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1a43359d8ecf80093cd264d74ccf323cb3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structbn__recp__ctx__st" kindref="compound">BN_RECP_CTX</ref> *</type>
        <definition>BN_RECP_CTX* BN_RECP_CTX_new</definition>
        <argsstring>(void)</argsstring>
        <name>BN_RECP_CTX_new</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="618" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1aec1413fd7d9966bed801298f2c6bca8a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BN_RECP_CTX_free</definition>
        <argsstring>(BN_RECP_CTX *recp)</argsstring>
        <name>BN_RECP_CTX_free</name>
        <param>
          <type><ref refid="structbn__recp__ctx__st" kindref="compound">BN_RECP_CTX</ref> *</type>
          <declname>recp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="619" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1aea83263e7e0976a7137de67067edeb32" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int BN_RECP_CTX_set</definition>
        <argsstring>(BN_RECP_CTX *recp, const BIGNUM *rdiv, BN_CTX *ctx)</argsstring>
        <name>BN_RECP_CTX_set</name>
        <param>
          <type><ref refid="structbn__recp__ctx__st" kindref="compound">BN_RECP_CTX</ref> *</type>
          <declname>recp</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>rdiv</declname>
        </param>
        <param>
          <type>BN_CTX *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="620" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1a095a194cd6d21cd08f33d5b40d406d11" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int BN_mod_mul_reciprocal</definition>
        <argsstring>(BIGNUM *r, const BIGNUM *x, const BIGNUM *y, BN_RECP_CTX *recp, BN_CTX *ctx)</argsstring>
        <name>BN_mod_mul_reciprocal</name>
        <param>
          <type><ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="structbn__recp__ctx__st" kindref="compound">BN_RECP_CTX</ref> *</type>
          <declname>recp</declname>
        </param>
        <param>
          <type>BN_CTX *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="621" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1a5c15da80c8847b4a2d85e6e2f343f8c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int BN_mod_exp_recp</definition>
        <argsstring>(BIGNUM *r, const BIGNUM *a, const BIGNUM *p, const BIGNUM *m, BN_CTX *ctx)</argsstring>
        <name>BN_mod_exp_recp</name>
        <param>
          <type><ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>BN_CTX *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="623" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1ab219eff28f9cb629ad70a2be828e8e55" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int BN_div_recp</definition>
        <argsstring>(BIGNUM *dv, BIGNUM *rem, const BIGNUM *m, BN_RECP_CTX *recp, BN_CTX *ctx)</argsstring>
        <name>BN_div_recp</name>
        <param>
          <type><ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>dv</declname>
        </param>
        <param>
          <type><ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>rem</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>m</declname>
        </param>
        <param>
          <type><ref refid="structbn__recp__ctx__st" kindref="compound">BN_RECP_CTX</ref> *</type>
          <declname>recp</declname>
        </param>
        <param>
          <type>BN_CTX *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="625" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1a019283ffdc4269cc4ee21afe27a6879a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int BN_GF2m_add</definition>
        <argsstring>(BIGNUM *r, const BIGNUM *a, const BIGNUM *b)</argsstring>
        <name>BN_GF2m_add</name>
        <param>
          <type><ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="639" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1a3c9a288e5996826e98bba310b305c01d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int BN_GF2m_mod</definition>
        <argsstring>(BIGNUM *r, const BIGNUM *a, const BIGNUM *p)</argsstring>
        <name>BN_GF2m_mod</name>
        <param>
          <type><ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="641" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1af03a6f3229caa968215ae68d32c88d4b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int BN_GF2m_mod_mul</definition>
        <argsstring>(BIGNUM *r, const BIGNUM *a, const BIGNUM *b, const BIGNUM *p, BN_CTX *ctx)</argsstring>
        <name>BN_GF2m_mod_mul</name>
        <param>
          <type><ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>BN_CTX *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="642" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1a014c29effeba09500b9631796dcef6a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int BN_GF2m_mod_sqr</definition>
        <argsstring>(BIGNUM *r, const BIGNUM *a, const BIGNUM *p, BN_CTX *ctx)</argsstring>
        <name>BN_GF2m_mod_sqr</name>
        <param>
          <type><ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>BN_CTX *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="644" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1a2ef720fb1ed596d9469cc54fc3297c86" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int BN_GF2m_mod_inv</definition>
        <argsstring>(BIGNUM *r, const BIGNUM *b, const BIGNUM *p, BN_CTX *ctx)</argsstring>
        <name>BN_GF2m_mod_inv</name>
        <param>
          <type><ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>BN_CTX *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="646" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1ae1b79c0a1b5080bb3531a53fc7ad63fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int BN_GF2m_mod_div</definition>
        <argsstring>(BIGNUM *r, const BIGNUM *a, const BIGNUM *b, const BIGNUM *p, BN_CTX *ctx)</argsstring>
        <name>BN_GF2m_mod_div</name>
        <param>
          <type><ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>BN_CTX *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="648" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1a5b4b3d8ce8c0a8f6d7bf22a1dbf40f86" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int BN_GF2m_mod_exp</definition>
        <argsstring>(BIGNUM *r, const BIGNUM *a, const BIGNUM *b, const BIGNUM *p, BN_CTX *ctx)</argsstring>
        <name>BN_GF2m_mod_exp</name>
        <param>
          <type><ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>BN_CTX *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="650" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1ab105a0044e4c2230266e052c551a65d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int BN_GF2m_mod_sqrt</definition>
        <argsstring>(BIGNUM *r, const BIGNUM *a, const BIGNUM *p, BN_CTX *ctx)</argsstring>
        <name>BN_GF2m_mod_sqrt</name>
        <param>
          <type><ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>BN_CTX *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="652" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1af93318da29820628c64a16c433c2be81" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int BN_GF2m_mod_solve_quad</definition>
        <argsstring>(BIGNUM *r, const BIGNUM *a, const BIGNUM *p, BN_CTX *ctx)</argsstring>
        <name>BN_GF2m_mod_solve_quad</name>
        <param>
          <type><ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>BN_CTX *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="654" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1a1ea688ef1fd7a158ffe91e9550c21b03" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int BN_GF2m_mod_arr</definition>
        <argsstring>(BIGNUM *r, const BIGNUM *a, const int p[])</argsstring>
        <name>BN_GF2m_mod_arr</name>
        <param>
          <type><ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>p</declname>
          <array>[]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="662" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1a3c42f558f56b7a9982df0d1186f51b7c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int BN_GF2m_mod_mul_arr</definition>
        <argsstring>(BIGNUM *r, const BIGNUM *a, const BIGNUM *b, const int p[], BN_CTX *ctx)</argsstring>
        <name>BN_GF2m_mod_mul_arr</name>
        <param>
          <type><ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>p</declname>
          <array>[]</array>
        </param>
        <param>
          <type>BN_CTX *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="664" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1a6a0ecd7b8bf97394a2409c243f664493" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int BN_GF2m_mod_sqr_arr</definition>
        <argsstring>(BIGNUM *r, const BIGNUM *a, const int p[], BN_CTX *ctx)</argsstring>
        <name>BN_GF2m_mod_sqr_arr</name>
        <param>
          <type><ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>p</declname>
          <array>[]</array>
        </param>
        <param>
          <type>BN_CTX *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="666" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1a33de971d4fa6c75d40cf055dd2de6b81" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int BN_GF2m_mod_inv_arr</definition>
        <argsstring>(BIGNUM *r, const BIGNUM *b, const int p[], BN_CTX *ctx)</argsstring>
        <name>BN_GF2m_mod_inv_arr</name>
        <param>
          <type><ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>p</declname>
          <array>[]</array>
        </param>
        <param>
          <type>BN_CTX *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="668" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1a4aa4f901f369792cc4faab87340536bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int BN_GF2m_mod_div_arr</definition>
        <argsstring>(BIGNUM *r, const BIGNUM *a, const BIGNUM *b, const int p[], BN_CTX *ctx)</argsstring>
        <name>BN_GF2m_mod_div_arr</name>
        <param>
          <type><ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>p</declname>
          <array>[]</array>
        </param>
        <param>
          <type>BN_CTX *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="670" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1a8813fb8b2d9be15caafefe42c7cdc545" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int BN_GF2m_mod_exp_arr</definition>
        <argsstring>(BIGNUM *r, const BIGNUM *a, const BIGNUM *b, const int p[], BN_CTX *ctx)</argsstring>
        <name>BN_GF2m_mod_exp_arr</name>
        <param>
          <type><ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>p</declname>
          <array>[]</array>
        </param>
        <param>
          <type>BN_CTX *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="672" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1af9dcdd61736765443dfa183706e88b9a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int BN_GF2m_mod_sqrt_arr</definition>
        <argsstring>(BIGNUM *r, const BIGNUM *a, const int p[], BN_CTX *ctx)</argsstring>
        <name>BN_GF2m_mod_sqrt_arr</name>
        <param>
          <type><ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>p</declname>
          <array>[]</array>
        </param>
        <param>
          <type>BN_CTX *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="674" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1ab3bd53c9934f07aaba07cafa32912086" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int BN_GF2m_mod_solve_quad_arr</definition>
        <argsstring>(BIGNUM *r, const BIGNUM *a, const int p[], BN_CTX *ctx)</argsstring>
        <name>BN_GF2m_mod_solve_quad_arr</name>
        <param>
          <type><ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>p</declname>
          <array>[]</array>
        </param>
        <param>
          <type>BN_CTX *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="676" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1ac5d9de2dce180de697e463b403ad15e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int BN_GF2m_poly2arr</definition>
        <argsstring>(const BIGNUM *a, int p[], int max)</argsstring>
        <name>BN_GF2m_poly2arr</name>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>int</type>
          <declname>p</declname>
          <array>[]</array>
        </param>
        <param>
          <type>int</type>
          <declname>max</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="678" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1a407f1c92a6eaba9382cc7d56a0bb31e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int BN_GF2m_arr2poly</definition>
        <argsstring>(const int p[], BIGNUM *a)</argsstring>
        <name>BN_GF2m_arr2poly</name>
        <param>
          <type>const int</type>
          <declname>p</declname>
          <array>[]</array>
        </param>
        <param>
          <type><ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="679" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1a25002a8819cd80ceb14c322b2c231d04" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int BN_nist_mod_192</definition>
        <argsstring>(BIGNUM *r, const BIGNUM *a, const BIGNUM *p, BN_CTX *ctx)</argsstring>
        <name>BN_nist_mod_192</name>
        <param>
          <type><ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>BN_CTX *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="685" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1a7efaaa00d7e69268d6fdd3633a3441c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int BN_nist_mod_224</definition>
        <argsstring>(BIGNUM *r, const BIGNUM *a, const BIGNUM *p, BN_CTX *ctx)</argsstring>
        <name>BN_nist_mod_224</name>
        <param>
          <type><ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>BN_CTX *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="686" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1aba10eb20b364035a6587ac69f55685da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int BN_nist_mod_256</definition>
        <argsstring>(BIGNUM *r, const BIGNUM *a, const BIGNUM *p, BN_CTX *ctx)</argsstring>
        <name>BN_nist_mod_256</name>
        <param>
          <type><ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>BN_CTX *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="687" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1aea39ce5e5e7c371e59cb7cdc0c20ea50" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int BN_nist_mod_384</definition>
        <argsstring>(BIGNUM *r, const BIGNUM *a, const BIGNUM *p, BN_CTX *ctx)</argsstring>
        <name>BN_nist_mod_384</name>
        <param>
          <type><ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>BN_CTX *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="688" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1aacbcfe3b7eed155fae71d38af30ad2f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int BN_nist_mod_521</definition>
        <argsstring>(BIGNUM *r, const BIGNUM *a, const BIGNUM *p, BN_CTX *ctx)</argsstring>
        <name>BN_nist_mod_521</name>
        <param>
          <type><ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>BN_CTX *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="689" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1ad76abea60da547945df85683a5beead5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
        <definition>const BIGNUM* BN_get0_nist_prime_192</definition>
        <argsstring>(void)</argsstring>
        <name>BN_get0_nist_prime_192</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="691" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1a369ac15499192c7d85e1a2812fdd5c8e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
        <definition>const BIGNUM* BN_get0_nist_prime_224</definition>
        <argsstring>(void)</argsstring>
        <name>BN_get0_nist_prime_224</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="692" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1a80e2f11d7bd89ac3ba44d7a50ef3d04f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
        <definition>const BIGNUM* BN_get0_nist_prime_256</definition>
        <argsstring>(void)</argsstring>
        <name>BN_get0_nist_prime_256</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="693" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1a94f266457e55187506fbf6caa38006c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
        <definition>const BIGNUM* BN_get0_nist_prime_384</definition>
        <argsstring>(void)</argsstring>
        <name>BN_get0_nist_prime_384</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="694" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1a7427232977e02c9058794dd6fa66415d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
        <definition>const BIGNUM* BN_get0_nist_prime_521</definition>
        <argsstring>(void)</argsstring>
        <name>BN_get0_nist_prime_521</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="695" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1a939e28f2f6df66c3e88717edef85e99d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
        <definition>BIGNUM* bn_expand2</definition>
        <argsstring>(BIGNUM *a, int words)</argsstring>
        <name>bn_expand2</name>
        <param>
          <type><ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>int</type>
          <declname>words</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="702" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1a4c469b0949a9db2876c38e399343d458" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
        <definition>BIGNUM* bn_dup_expand</definition>
        <argsstring>(const BIGNUM *a, int words)</argsstring>
        <name>bn_dup_expand</name>
        <param>
          <type>const <ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>int</type>
          <declname>words</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="704" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1ac7390b2c1f95cf296aaa80068bbea55c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BN_ULONG</type>
        <definition>BN_ULONG bn_mul_add_words</definition>
        <argsstring>(BN_ULONG *rp, const BN_ULONG *ap, int num, BN_ULONG w)</argsstring>
        <name>bn_mul_add_words</name>
        <param>
          <type>BN_ULONG *</type>
          <declname>rp</declname>
        </param>
        <param>
          <type>const BN_ULONG *</type>
          <declname>ap</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num</declname>
        </param>
        <param>
          <type>BN_ULONG</type>
          <declname>w</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="809" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1ab53b589b38d0dba70e7af60e433a674d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BN_ULONG</type>
        <definition>BN_ULONG bn_mul_words</definition>
        <argsstring>(BN_ULONG *rp, const BN_ULONG *ap, int num, BN_ULONG w)</argsstring>
        <name>bn_mul_words</name>
        <param>
          <type>BN_ULONG *</type>
          <declname>rp</declname>
        </param>
        <param>
          <type>const BN_ULONG *</type>
          <declname>ap</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num</declname>
        </param>
        <param>
          <type>BN_ULONG</type>
          <declname>w</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="810" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1a5099f504342e8405343b2f34a7e2042b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void bn_sqr_words</definition>
        <argsstring>(BN_ULONG *rp, const BN_ULONG *ap, int num)</argsstring>
        <name>bn_sqr_words</name>
        <param>
          <type>BN_ULONG *</type>
          <declname>rp</declname>
        </param>
        <param>
          <type>const BN_ULONG *</type>
          <declname>ap</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="811" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1a11b748f408b37078e940634d00c0acdf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BN_ULONG</type>
        <definition>BN_ULONG bn_div_words</definition>
        <argsstring>(BN_ULONG h, BN_ULONG l, BN_ULONG d)</argsstring>
        <name>bn_div_words</name>
        <param>
          <type>BN_ULONG</type>
          <declname>h</declname>
        </param>
        <param>
          <type>BN_ULONG</type>
          <declname>l</declname>
        </param>
        <param>
          <type>BN_ULONG</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="812" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1a8da498661b663764efd236e8973c5007" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BN_ULONG</type>
        <definition>BN_ULONG bn_add_words</definition>
        <argsstring>(BN_ULONG *rp, const BN_ULONG *ap, const BN_ULONG *bp, int num)</argsstring>
        <name>bn_add_words</name>
        <param>
          <type>BN_ULONG *</type>
          <declname>rp</declname>
        </param>
        <param>
          <type>const BN_ULONG *</type>
          <declname>ap</declname>
        </param>
        <param>
          <type>const BN_ULONG *</type>
          <declname>bp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="813" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1a32efc91cebb4b69fc06e1b4188ce4a59" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BN_ULONG</type>
        <definition>BN_ULONG bn_sub_words</definition>
        <argsstring>(BN_ULONG *rp, const BN_ULONG *ap, const BN_ULONG *bp, int num)</argsstring>
        <name>bn_sub_words</name>
        <param>
          <type>BN_ULONG *</type>
          <declname>rp</declname>
        </param>
        <param>
          <type>const BN_ULONG *</type>
          <declname>ap</declname>
        </param>
        <param>
          <type>const BN_ULONG *</type>
          <declname>bp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="814" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1a2fb48fef14a13af148e4b43056608028" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
        <definition>BIGNUM* get_rfc2409_prime_768</definition>
        <argsstring>(BIGNUM *bn)</argsstring>
        <name>get_rfc2409_prime_768</name>
        <param>
          <type><ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>bn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="817" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1abfc33c9721a0b6a874ce82f52e30eadd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
        <definition>BIGNUM* get_rfc2409_prime_1024</definition>
        <argsstring>(BIGNUM *bn)</argsstring>
        <name>get_rfc2409_prime_1024</name>
        <param>
          <type><ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>bn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="818" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1ab3aec59c4e8ca699ddcf008591575620" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
        <definition>BIGNUM* get_rfc3526_prime_1536</definition>
        <argsstring>(BIGNUM *bn)</argsstring>
        <name>get_rfc3526_prime_1536</name>
        <param>
          <type><ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>bn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="821" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1a98e9d1fa271587f83a6b11f6ee23ddae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
        <definition>BIGNUM* get_rfc3526_prime_2048</definition>
        <argsstring>(BIGNUM *bn)</argsstring>
        <name>get_rfc3526_prime_2048</name>
        <param>
          <type><ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>bn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="822" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1a8730287491af215ced298be202c9d2b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
        <definition>BIGNUM* get_rfc3526_prime_3072</definition>
        <argsstring>(BIGNUM *bn)</argsstring>
        <name>get_rfc3526_prime_3072</name>
        <param>
          <type><ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>bn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="823" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1aed519efe7d7da537388e2e6fc68cbe8a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
        <definition>BIGNUM* get_rfc3526_prime_4096</definition>
        <argsstring>(BIGNUM *bn)</argsstring>
        <name>get_rfc3526_prime_4096</name>
        <param>
          <type><ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>bn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="824" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1a09e2d21336b4164ac2933a527c6bb9f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
        <definition>BIGNUM* get_rfc3526_prime_6144</definition>
        <argsstring>(BIGNUM *bn)</argsstring>
        <name>get_rfc3526_prime_6144</name>
        <param>
          <type><ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>bn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="825" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1a1c6be6e65204eb33b0cc223c294745d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
        <definition>BIGNUM* get_rfc3526_prime_8192</definition>
        <argsstring>(BIGNUM *bn)</argsstring>
        <name>get_rfc3526_prime_8192</name>
        <param>
          <type><ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>bn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="826" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1a8cd7a33528160d20566013ab21ac053f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int BN_bntest_rand</definition>
        <argsstring>(BIGNUM *rnd, int bits, int top, int bottom)</argsstring>
        <name>BN_bntest_rand</name>
        <param>
          <type><ref refid="structbignum__st" kindref="compound">BIGNUM</ref> *</type>
          <declname>rnd</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bits</declname>
        </param>
        <param>
          <type>int</type>
          <declname>top</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bottom</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="828" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bn_8h_1ae481396eb66937960f76eab02035b568" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ERR_load_BN_strings</definition>
        <argsstring>(void)</argsstring>
        <name>ERR_load_BN_strings</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/bn.h" line="834" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>crypto/bn/bn.h<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Copyright<sp/>(C)<sp/>1995-1997<sp/>Eric<sp/>Young<sp/>(eay@cryptsoft.com)</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>This<sp/>package<sp/>is<sp/>an<sp/>SSL<sp/>implementation<sp/>written</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>by<sp/>Eric<sp/>Young<sp/>(eay@cryptsoft.com).</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>The<sp/>implementation<sp/>was<sp/>written<sp/>so<sp/>as<sp/>to<sp/>conform<sp/>with<sp/>Netscapes<sp/>SSL.</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>This<sp/>library<sp/>is<sp/>free<sp/>for<sp/>commercial<sp/>and<sp/>non-commercial<sp/>use<sp/>as<sp/>long<sp/>as</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>the<sp/>following<sp/>conditions<sp/>are<sp/>aheared<sp/>to.<sp/><sp/>The<sp/>following<sp/>conditions</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>apply<sp/>to<sp/>all<sp/>code<sp/>found<sp/>in<sp/>this<sp/>distribution,<sp/>be<sp/>it<sp/>the<sp/>RC4,<sp/>RSA,</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>lhash,<sp/>DES,<sp/>etc.,<sp/>code;<sp/>not<sp/>just<sp/>the<sp/>SSL<sp/>code.<sp/><sp/>The<sp/>SSL<sp/>documentation</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>included<sp/>with<sp/>this<sp/>distribution<sp/>is<sp/>covered<sp/>by<sp/>the<sp/>same<sp/>copyright<sp/>terms</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>except<sp/>that<sp/>the<sp/>holder<sp/>is<sp/>Tim<sp/>Hudson<sp/>(tjh@cryptsoft.com).</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>remains<sp/>Eric<sp/>Young&apos;s,<sp/>and<sp/>as<sp/>such<sp/>any<sp/>Copyright<sp/>notices<sp/>in</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>the<sp/>code<sp/>are<sp/>not<sp/>to<sp/>be<sp/>removed.</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>If<sp/>this<sp/>package<sp/>is<sp/>used<sp/>in<sp/>a<sp/>product,<sp/>Eric<sp/>Young<sp/>should<sp/>be<sp/>given<sp/>attribution</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>as<sp/>the<sp/>author<sp/>of<sp/>the<sp/>parts<sp/>of<sp/>the<sp/>library<sp/>used.</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>This<sp/>can<sp/>be<sp/>in<sp/>the<sp/>form<sp/>of<sp/>a<sp/>textual<sp/>message<sp/>at<sp/>program<sp/>startup<sp/>or</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>in<sp/>documentation<sp/>(online<sp/>or<sp/>textual)<sp/>provided<sp/>with<sp/>the<sp/>package.</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>1.<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>copyright</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>2.<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*<sp/>3.<sp/>All<sp/>advertising<sp/>materials<sp/>mentioning<sp/>features<sp/>or<sp/>use<sp/>of<sp/>this<sp/>software</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>must<sp/>display<sp/>the<sp/>following<sp/>acknowledgement:</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>&quot;This<sp/>product<sp/>includes<sp/>cryptographic<sp/>software<sp/>written<sp/>by</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>Eric<sp/>Young<sp/>(eay@cryptsoft.com)&quot;</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>The<sp/>word<sp/>&apos;cryptographic&apos;<sp/>can<sp/>be<sp/>left<sp/>out<sp/>if<sp/>the<sp/>rouines<sp/>from<sp/>the<sp/>library</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>being<sp/>used<sp/>are<sp/>not<sp/>cryptographic<sp/>related<sp/>:-).</highlight></codeline>
<codeline lineno="37"><highlight class="comment"><sp/>*<sp/>4.<sp/>If<sp/>you<sp/>include<sp/>any<sp/>Windows<sp/>specific<sp/>code<sp/>(or<sp/>a<sp/>derivative<sp/>thereof)<sp/>from<sp/></highlight></codeline>
<codeline lineno="38"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>the<sp/>apps<sp/>directory<sp/>(application<sp/>code)<sp/>you<sp/>must<sp/>include<sp/>an<sp/>acknowledgement:</highlight></codeline>
<codeline lineno="39"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>&quot;This<sp/>product<sp/>includes<sp/>software<sp/>written<sp/>by<sp/>Tim<sp/>Hudson<sp/>(tjh@cryptsoft.com)&quot;</highlight></codeline>
<codeline lineno="40"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="41"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>ERIC<sp/>YOUNG<sp/>``AS<sp/>IS&apos;&apos;<sp/>AND</highlight></codeline>
<codeline lineno="42"><highlight class="comment"><sp/>*<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>THE</highlight></codeline>
<codeline lineno="43"><highlight class="comment"><sp/>*<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/>*<sp/>ARE<sp/>DISCLAIMED.<sp/><sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>AUTHOR<sp/>OR<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/>*<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/>*<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/>*<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/>*<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/>*<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY</highlight></codeline>
<codeline lineno="50"><highlight class="comment"><sp/>*<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF</highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/>*<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="52"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/>*<sp/>The<sp/>licence<sp/>and<sp/>distribution<sp/>terms<sp/>for<sp/>any<sp/>publically<sp/>available<sp/>version<sp/>or</highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/>*<sp/>derivative<sp/>of<sp/>this<sp/>code<sp/>cannot<sp/>be<sp/>changed.<sp/><sp/>i.e.<sp/>this<sp/>code<sp/>cannot<sp/>simply<sp/>be</highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/>*<sp/>copied<sp/>and<sp/>put<sp/>under<sp/>another<sp/>distribution<sp/>licence</highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/>*<sp/>[including<sp/>the<sp/>GNU<sp/>Public<sp/>Licence.]</highlight></codeline>
<codeline lineno="57"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>====================================================================</highlight></codeline>
<codeline lineno="59"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>1998-2006<sp/>The<sp/>OpenSSL<sp/>Project.<sp/><sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="60"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="61"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="62"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions</highlight></codeline>
<codeline lineno="63"><highlight class="comment"><sp/>*<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="64"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="65"><highlight class="comment"><sp/>*<sp/>1.<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="66"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.<sp/></highlight></codeline>
<codeline lineno="67"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="68"><highlight class="comment"><sp/>*<sp/>2.<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="69"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in</highlight></codeline>
<codeline lineno="70"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>the<sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the</highlight></codeline>
<codeline lineno="71"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>distribution.</highlight></codeline>
<codeline lineno="72"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="73"><highlight class="comment"><sp/>*<sp/>3.<sp/>All<sp/>advertising<sp/>materials<sp/>mentioning<sp/>features<sp/>or<sp/>use<sp/>of<sp/>this</highlight></codeline>
<codeline lineno="74"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>software<sp/>must<sp/>display<sp/>the<sp/>following<sp/>acknowledgment:</highlight></codeline>
<codeline lineno="75"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>&quot;This<sp/>product<sp/>includes<sp/>software<sp/>developed<sp/>by<sp/>the<sp/>OpenSSL<sp/>Project</highlight></codeline>
<codeline lineno="76"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>for<sp/>use<sp/>in<sp/>the<sp/>OpenSSL<sp/>Toolkit.<sp/>(http://www.openssl.org/)&quot;</highlight></codeline>
<codeline lineno="77"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="78"><highlight class="comment"><sp/>*<sp/>4.<sp/>The<sp/>names<sp/>&quot;OpenSSL<sp/>Toolkit&quot;<sp/>and<sp/>&quot;OpenSSL<sp/>Project&quot;<sp/>must<sp/>not<sp/>be<sp/>used<sp/>to</highlight></codeline>
<codeline lineno="79"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from<sp/>this<sp/>software<sp/>without</highlight></codeline>
<codeline lineno="80"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>prior<sp/>written<sp/>permission.<sp/>For<sp/>written<sp/>permission,<sp/>please<sp/>contact</highlight></codeline>
<codeline lineno="81"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>openssl-core@openssl.org.</highlight></codeline>
<codeline lineno="82"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="83"><highlight class="comment"><sp/>*<sp/>5.<sp/>Products<sp/>derived<sp/>from<sp/>this<sp/>software<sp/>may<sp/>not<sp/>be<sp/>called<sp/>&quot;OpenSSL&quot;</highlight></codeline>
<codeline lineno="84"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>nor<sp/>may<sp/>&quot;OpenSSL&quot;<sp/>appear<sp/>in<sp/>their<sp/>names<sp/>without<sp/>prior<sp/>written</highlight></codeline>
<codeline lineno="85"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>permission<sp/>of<sp/>the<sp/>OpenSSL<sp/>Project.</highlight></codeline>
<codeline lineno="86"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="87"><highlight class="comment"><sp/>*<sp/>6.<sp/>Redistributions<sp/>of<sp/>any<sp/>form<sp/>whatsoever<sp/>must<sp/>retain<sp/>the<sp/>following</highlight></codeline>
<codeline lineno="88"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>acknowledgment:</highlight></codeline>
<codeline lineno="89"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>&quot;This<sp/>product<sp/>includes<sp/>software<sp/>developed<sp/>by<sp/>the<sp/>OpenSSL<sp/>Project</highlight></codeline>
<codeline lineno="90"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>for<sp/>use<sp/>in<sp/>the<sp/>OpenSSL<sp/>Toolkit<sp/>(http://www.openssl.org/)&quot;</highlight></codeline>
<codeline lineno="91"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="92"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>OpenSSL<sp/>PROJECT<sp/>``AS<sp/>IS&apos;&apos;<sp/>AND<sp/>ANY</highlight></codeline>
<codeline lineno="93"><highlight class="comment"><sp/>*<sp/>EXPRESSED<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>THE</highlight></codeline>
<codeline lineno="94"><highlight class="comment"><sp/>*<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR</highlight></codeline>
<codeline lineno="95"><highlight class="comment"><sp/>*<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/><sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>OpenSSL<sp/>PROJECT<sp/>OR</highlight></codeline>
<codeline lineno="96"><highlight class="comment"><sp/>*<sp/>ITS<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,</highlight></codeline>
<codeline lineno="97"><highlight class="comment"><sp/>*<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT</highlight></codeline>
<codeline lineno="98"><highlight class="comment"><sp/>*<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;</highlight></codeline>
<codeline lineno="99"><highlight class="comment"><sp/>*<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)</highlight></codeline>
<codeline lineno="100"><highlight class="comment"><sp/>*<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,</highlight></codeline>
<codeline lineno="101"><highlight class="comment"><sp/>*<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)</highlight></codeline>
<codeline lineno="102"><highlight class="comment"><sp/>*<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED</highlight></codeline>
<codeline lineno="103"><highlight class="comment"><sp/>*<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="104"><highlight class="comment"><sp/>*<sp/>====================================================================</highlight></codeline>
<codeline lineno="105"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="106"><highlight class="comment"><sp/>*<sp/>This<sp/>product<sp/>includes<sp/>cryptographic<sp/>software<sp/>written<sp/>by<sp/>Eric<sp/>Young</highlight></codeline>
<codeline lineno="107"><highlight class="comment"><sp/>*<sp/>(eay@cryptsoft.com).<sp/><sp/>This<sp/>product<sp/>includes<sp/>software<sp/>written<sp/>by<sp/>Tim</highlight></codeline>
<codeline lineno="108"><highlight class="comment"><sp/>*<sp/>Hudson<sp/>(tjh@cryptsoft.com).</highlight></codeline>
<codeline lineno="109"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="110"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>====================================================================</highlight></codeline>
<codeline lineno="112"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>2002<sp/>Sun<sp/>Microsystems,<sp/>Inc.<sp/>ALL<sp/>RIGHTS<sp/>RESERVED.</highlight></codeline>
<codeline lineno="113"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="114"><highlight class="comment"><sp/>*<sp/>Portions<sp/>of<sp/>the<sp/>attached<sp/>software<sp/>(&quot;Contribution&quot;)<sp/>are<sp/>developed<sp/>by<sp/></highlight></codeline>
<codeline lineno="115"><highlight class="comment"><sp/>*<sp/>SUN<sp/>MICROSYSTEMS,<sp/>INC.,<sp/>and<sp/>are<sp/>contributed<sp/>to<sp/>the<sp/>OpenSSL<sp/>project.</highlight></codeline>
<codeline lineno="116"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="117"><highlight class="comment"><sp/>*<sp/>The<sp/>Contribution<sp/>is<sp/>licensed<sp/>pursuant<sp/>to<sp/>the<sp/>Eric<sp/>Young<sp/>open<sp/>source</highlight></codeline>
<codeline lineno="118"><highlight class="comment"><sp/>*<sp/>license<sp/>provided<sp/>above.</highlight></codeline>
<codeline lineno="119"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="120"><highlight class="comment"><sp/>*<sp/>The<sp/>binary<sp/>polynomial<sp/>arithmetic<sp/>software<sp/>is<sp/>originally<sp/>written<sp/>by<sp/></highlight></codeline>
<codeline lineno="121"><highlight class="comment"><sp/>*<sp/>Sheueling<sp/>Chang<sp/>Shantz<sp/>and<sp/>Douglas<sp/>Stebila<sp/>of<sp/>Sun<sp/>Microsystems<sp/>Laboratories.</highlight></codeline>
<codeline lineno="122"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="123"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>HEADER_BN_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>HEADER_BN_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;openssl/e_os2.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>OPENSSL_NO_FP_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*<sp/>FILE<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;openssl/ossl_typ.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;openssl/crypto.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/><sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>These<sp/>preprocessor<sp/>symbols<sp/>control<sp/>various<sp/>aspects<sp/>of<sp/>the<sp/>bignum<sp/>headers<sp/>and</highlight></codeline>
<codeline lineno="140"><highlight class="comment"><sp/>*<sp/>library<sp/>code.<sp/>They&apos;re<sp/>not<sp/>defined<sp/>by<sp/>any<sp/>&quot;normal&quot;<sp/>configuration,<sp/>as<sp/>they<sp/>are</highlight></codeline>
<codeline lineno="141"><highlight class="comment"><sp/>*<sp/>intended<sp/>for<sp/>development<sp/>and<sp/>testing<sp/>purposes.<sp/>NB:<sp/>defining<sp/>all<sp/>three<sp/>can<sp/>be</highlight></codeline>
<codeline lineno="142"><highlight class="comment"><sp/>*<sp/>useful<sp/>for<sp/>debugging<sp/>application<sp/>code<sp/>as<sp/>well<sp/>as<sp/>openssl<sp/>itself.</highlight></codeline>
<codeline lineno="143"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="144"><highlight class="comment"><sp/>*<sp/>BN_DEBUG<sp/>-<sp/>turn<sp/>on<sp/>various<sp/>debugging<sp/>alterations<sp/>to<sp/>the<sp/>bignum<sp/>code</highlight></codeline>
<codeline lineno="145"><highlight class="comment"><sp/>*<sp/>BN_DEBUG_RAND<sp/>-<sp/>uses<sp/>random<sp/>poisoning<sp/>of<sp/>unused<sp/>words<sp/>to<sp/>trip<sp/>up</highlight></codeline>
<codeline lineno="146"><highlight class="comment"><sp/>*<sp/>mismanagement<sp/>of<sp/>bignum<sp/>internals.<sp/>You<sp/>must<sp/>also<sp/>define<sp/>BN_DEBUG.</highlight></codeline>
<codeline lineno="147"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>#define<sp/>BN_DEBUG<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>#define<sp/>BN_DEBUG_RAND<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>OPENSSL_SMALL_FOOTPRINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BN_MUL_COMBA</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BN_SQR_COMBA</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BN_RECURSION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>This<sp/>next<sp/>option<sp/>uses<sp/>the<sp/>C<sp/>libraries<sp/>(2<sp/>word)/(1<sp/>word)<sp/>function.</highlight></codeline>
<codeline lineno="158"><highlight class="comment"><sp/>*<sp/>If<sp/>it<sp/>is<sp/>not<sp/>defined,<sp/>I<sp/>use<sp/>my<sp/>C<sp/>version<sp/>(which<sp/>is<sp/>slower).</highlight></codeline>
<codeline lineno="159"><highlight class="comment"><sp/>*<sp/>The<sp/>reason<sp/>for<sp/>this<sp/>flag<sp/>is<sp/>that<sp/>when<sp/>the<sp/>particular<sp/>C<sp/>compiler</highlight></codeline>
<codeline lineno="160"><highlight class="comment"><sp/>*<sp/>library<sp/>routine<sp/>is<sp/>used,<sp/>and<sp/>the<sp/>library<sp/>is<sp/>linked<sp/>with<sp/>a<sp/>different</highlight></codeline>
<codeline lineno="161"><highlight class="comment"><sp/>*<sp/>compiler,<sp/>the<sp/>library<sp/>is<sp/>missing.<sp/><sp/>This<sp/>mostly<sp/>happens<sp/>when<sp/>the</highlight></codeline>
<codeline lineno="162"><highlight class="comment"><sp/>*<sp/>library<sp/>is<sp/>built<sp/>with<sp/>gcc<sp/>and<sp/>then<sp/>linked<sp/>using<sp/>normal<sp/>cc.<sp/><sp/>This<sp/>would</highlight></codeline>
<codeline lineno="163"><highlight class="comment"><sp/>*<sp/>be<sp/>a<sp/>common<sp/>occurrence<sp/>because<sp/>gcc<sp/>normally<sp/>produces<sp/>code<sp/>that<sp/>is</highlight></codeline>
<codeline lineno="164"><highlight class="comment"><sp/>*<sp/>2<sp/>times<sp/>faster<sp/>than<sp/>system<sp/>compilers<sp/>for<sp/>the<sp/>big<sp/>number<sp/>stuff.</highlight></codeline>
<codeline lineno="165"><highlight class="comment"><sp/>*<sp/>For<sp/>machines<sp/>with<sp/>only<sp/>one<sp/>compiler<sp/>(or<sp/>shared<sp/>libraries),<sp/>this<sp/>should</highlight></codeline>
<codeline lineno="166"><highlight class="comment"><sp/>*<sp/>be<sp/>on.<sp/><sp/>Again<sp/>this<sp/>in<sp/>only<sp/>really<sp/>a<sp/>problem<sp/>on<sp/>machines</highlight></codeline>
<codeline lineno="167"><highlight class="comment"><sp/>*<sp/>using<sp/>&quot;long<sp/>long&apos;s&quot;,<sp/>are<sp/>32bit,<sp/>and<sp/>are<sp/>not<sp/>using<sp/>my<sp/>assembler<sp/>code.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(OPENSSL_SYS_MSDOS)<sp/>||<sp/>defined(OPENSSL_SYS_WINDOWS)<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="169"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>defined(OPENSSL_SYS_WIN32)<sp/>||<sp/>defined(linux)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>ifndef<sp/>BN_DIV2W</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>BN_DIV2W</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>assuming<sp/>long<sp/>is<sp/>64bit<sp/>-<sp/>this<sp/>is<sp/>the<sp/>DEC<sp/>Alpha</highlight></codeline>
<codeline lineno="176"><highlight class="comment"><sp/>*<sp/>unsigned<sp/>long<sp/>long<sp/>is<sp/>only<sp/>64<sp/>bits<sp/>:-(,<sp/>don&apos;t<sp/>define</highlight></codeline>
<codeline lineno="177"><highlight class="comment"><sp/>*<sp/>BN_LLONG<sp/>for<sp/>the<sp/>DEC<sp/>Alpha<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>SIXTY_FOUR_BIT_LONG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BN_ULLONG<sp/><sp/><sp/>unsigned<sp/>long<sp/>long</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BN_ULONG<sp/><sp/><sp/><sp/>unsigned<sp/>long</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BN_LONG<sp/><sp/><sp/><sp/><sp/>long</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BN_BITS<sp/><sp/><sp/><sp/><sp/>128</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BN_BYTES<sp/><sp/><sp/><sp/>8</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BN_BITS2<sp/><sp/><sp/><sp/>64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BN_BITS4<sp/><sp/><sp/><sp/>32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BN_MASK<sp/><sp/><sp/><sp/><sp/>(0xffffffffffffffffffffffffffffffffLL)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BN_MASK2<sp/><sp/><sp/><sp/>(0xffffffffffffffffL)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BN_MASK2l<sp/><sp/><sp/>(0xffffffffL)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BN_MASK2h<sp/><sp/><sp/>(0xffffffff00000000L)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BN_MASK2h1<sp/><sp/>(0xffffffff80000000L)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BN_TBIT<sp/><sp/><sp/><sp/><sp/>(0x8000000000000000L)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BN_DEC_CONV<sp/>(10000000000000000000UL)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BN_DEC_FMT1<sp/>&quot;%lu&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BN_DEC_FMT2<sp/>&quot;%019lu&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BN_DEC_NUM<sp/><sp/>19</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BN_HEX_FMT1<sp/>&quot;%lX&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BN_HEX_FMT2<sp/>&quot;%016lX&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>This<sp/>is<sp/>where<sp/>the<sp/>long<sp/>long<sp/>data<sp/>type<sp/>is<sp/>64<sp/>bits,<sp/>but<sp/>long<sp/>is<sp/>32.</highlight></codeline>
<codeline lineno="201"><highlight class="comment"><sp/>*<sp/>For<sp/>machines<sp/>where<sp/>there<sp/>are<sp/>64bit<sp/>registers,<sp/>this<sp/>is<sp/>the<sp/>mode<sp/>to<sp/>use.</highlight></codeline>
<codeline lineno="202"><highlight class="comment"><sp/>*<sp/>IRIX,<sp/>on<sp/>R4000<sp/>and<sp/>above<sp/>should<sp/>use<sp/>this<sp/>mode,<sp/>along<sp/>with<sp/>the<sp/>relevant</highlight></codeline>
<codeline lineno="203"><highlight class="comment"><sp/>*<sp/>assembler<sp/>code<sp/>:-).<sp/><sp/>Do<sp/>NOT<sp/>define<sp/>BN_LLONG.</highlight></codeline>
<codeline lineno="204"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>SIXTY_FOUR_BIT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>BN_LLONG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>BN_ULLONG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BN_ULONG<sp/><sp/><sp/><sp/>unsigned<sp/>long<sp/>long</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BN_LONG<sp/><sp/><sp/><sp/><sp/>long<sp/>long</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BN_BITS<sp/><sp/><sp/><sp/><sp/>128</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BN_BYTES<sp/><sp/><sp/><sp/>8</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BN_BITS2<sp/><sp/><sp/><sp/>64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BN_BITS4<sp/><sp/><sp/><sp/>32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BN_MASK2<sp/><sp/><sp/><sp/>(0xffffffffffffffffLL)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BN_MASK2l<sp/><sp/><sp/>(0xffffffffL)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BN_MASK2h<sp/><sp/><sp/>(0xffffffff00000000LL)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BN_MASK2h1<sp/><sp/>(0xffffffff80000000LL)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BN_TBIT<sp/><sp/><sp/><sp/><sp/>(0x8000000000000000LL)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BN_DEC_CONV<sp/>(10000000000000000000ULL)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BN_DEC_FMT1<sp/>&quot;%llu&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BN_DEC_FMT2<sp/>&quot;%019llu&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BN_DEC_NUM<sp/><sp/>19</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BN_HEX_FMT1<sp/>&quot;%llX&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BN_HEX_FMT2<sp/>&quot;%016llX&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>THIRTY_TWO_BIT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>BN_LLONG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>if<sp/>defined(_WIN32)<sp/>&amp;&amp;<sp/>!defined(__GNUC__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>BN_ULLONG<sp/>unsigned<sp/>__int64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>BN_MASK<sp/><sp/><sp/>(0xffffffffffffffffI64)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>BN_ULLONG<sp/>unsigned<sp/>long<sp/>long</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>BN_MASK<sp/><sp/><sp/>(0xffffffffffffffffLL)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BN_ULONG<sp/><sp/><sp/><sp/>unsigned<sp/>int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BN_LONG<sp/><sp/><sp/><sp/><sp/>int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BN_BITS<sp/><sp/><sp/><sp/><sp/>64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BN_BYTES<sp/><sp/><sp/><sp/>4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BN_BITS2<sp/><sp/><sp/><sp/>32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BN_BITS4<sp/><sp/><sp/><sp/>16</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BN_MASK2<sp/><sp/><sp/><sp/>(0xffffffffL)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BN_MASK2l<sp/><sp/><sp/>(0xffff)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BN_MASK2h1<sp/><sp/>(0xffff8000L)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BN_MASK2h<sp/><sp/><sp/>(0xffff0000L)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BN_TBIT<sp/><sp/><sp/><sp/><sp/>(0x80000000L)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BN_DEC_CONV<sp/>(1000000000L)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BN_DEC_FMT1<sp/>&quot;%u&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BN_DEC_FMT2<sp/>&quot;%09u&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BN_DEC_NUM<sp/><sp/>9</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BN_HEX_FMT1<sp/>&quot;%X&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BN_HEX_FMT2<sp/>&quot;%08X&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>2011-02-22<sp/>SMS.</highlight></codeline>
<codeline lineno="257"><highlight class="comment"><sp/>*<sp/>In<sp/>various<sp/>places,<sp/>a<sp/>size_t<sp/>variable<sp/>or<sp/>a<sp/>type<sp/>cast<sp/>to<sp/>size_t<sp/>was</highlight></codeline>
<codeline lineno="258"><highlight class="comment"><sp/>*<sp/>used<sp/>to<sp/>perform<sp/>integer-only<sp/>operations<sp/>on<sp/>pointers.<sp/><sp/>This<sp/>failed<sp/>on</highlight></codeline>
<codeline lineno="259"><highlight class="comment"><sp/>*<sp/>VMS<sp/>with<sp/>64-bit<sp/>pointers<sp/>(CC<sp/>/POINTER_SIZE<sp/>=<sp/>64)<sp/>because<sp/>size_t<sp/>is</highlight></codeline>
<codeline lineno="260"><highlight class="comment"><sp/>*<sp/>still<sp/>only<sp/>32<sp/>bits.<sp/><sp/>What&apos;s<sp/>needed<sp/>in<sp/>these<sp/>cases<sp/>is<sp/>an<sp/>integer<sp/>type</highlight></codeline>
<codeline lineno="261"><highlight class="comment"><sp/>*<sp/>with<sp/>the<sp/>same<sp/>size<sp/>as<sp/>a<sp/>pointer,<sp/>which<sp/>size_t<sp/>is<sp/>not<sp/>certain<sp/>to<sp/>be.<sp/></highlight></codeline>
<codeline lineno="262"><highlight class="comment"><sp/>*<sp/>The<sp/>only<sp/>fix<sp/>here<sp/>is<sp/>VMS-specific.</highlight></codeline>
<codeline lineno="263"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(OPENSSL_SYS_VMS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>if<sp/>__INITIAL_POINTER_SIZE<sp/>==<sp/>64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>PTR_SIZE_INT<sp/>long<sp/>long</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>else<sp/></highlight><highlight class="comment">/*<sp/>__INITIAL_POINTER_SIZE<sp/>==<sp/>64<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>PTR_SIZE_INT<sp/>int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>endif<sp/></highlight><highlight class="comment">/*<sp/>__INITIAL_POINTER_SIZE<sp/>==<sp/>64<sp/>[else]<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/></highlight><highlight class="comment">/*<sp/>defined(OPENSSL_SYS_VMS)<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>PTR_SIZE_INT<sp/>size_t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>defined(OPENSSL_SYS_VMS)<sp/>[else]<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BN_DEFAULT_BITS<sp/>1280</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BN_FLG_MALLOCED<sp/><sp/><sp/><sp/><sp/>0x01</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BN_FLG_STATIC_DATA<sp/><sp/>0x02</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BN_FLG_CONSTTIME<sp/><sp/><sp/><sp/>0x04<sp/></highlight><highlight class="comment">/*<sp/>avoid<sp/>leaking<sp/>exponent<sp/>information<sp/>through<sp/>timing,</highlight></codeline>
<codeline lineno="279"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>BN_mod_exp_mont()<sp/>will<sp/>call<sp/>BN_mod_exp_mont_consttime,</highlight></codeline>
<codeline lineno="280"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>BN_div()<sp/>will<sp/>call<sp/>BN_div_no_branch,</highlight></codeline>
<codeline lineno="281"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>BN_mod_inverse()<sp/>will<sp/>call<sp/>BN_mod_inverse_no_branch.</highlight></codeline>
<codeline lineno="282"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>OPENSSL_NO_DEPRECATED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BN_FLG_EXP_CONSTTIME<sp/>BN_FLG_CONSTTIME<sp/></highlight><highlight class="comment">/*<sp/>deprecated<sp/>name<sp/>for<sp/>the<sp/>flag<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>avoid<sp/>leaking<sp/>exponent<sp/>information<sp/>through<sp/>timings</highlight></codeline>
<codeline lineno="287"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>(BN_mod_exp_mont()<sp/>will<sp/>call<sp/>BN_mod_exp_mont_consttime)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>OPENSSL_NO_DEPRECATED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BN_FLG_FREE<sp/><sp/><sp/><sp/><sp/>0x8000<sp/><sp/></highlight><highlight class="comment">/*<sp/>used<sp/>for<sp/>debuging<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BN_set_flags(b,n)<sp/><sp/><sp/>((b)-&gt;flags|=(n))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BN_get_flags(b,n)<sp/><sp/><sp/>((b)-&gt;flags&amp;(n))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>get<sp/>a<sp/>clone<sp/>of<sp/>a<sp/>BIGNUM<sp/>with<sp/>changed<sp/>flags,<sp/>for<sp/>*temporary*<sp/>use<sp/>only</highlight></codeline>
<codeline lineno="297"><highlight class="comment"><sp/>*<sp/>(the<sp/>two<sp/>BIGNUMs<sp/>cannot<sp/>not<sp/>be<sp/>used<sp/>in<sp/>parallel!)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BN_with_flags(dest,b,n)<sp/><sp/>((dest)-&gt;d=(b)-&gt;d,<sp/>\</highlight></codeline>
<codeline lineno="299"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(dest)-&gt;top=(b)-&gt;top,<sp/>\</highlight></codeline>
<codeline lineno="300"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(dest)-&gt;dmax=(b)-&gt;dmax,<sp/>\</highlight></codeline>
<codeline lineno="301"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(dest)-&gt;neg=(b)-&gt;neg,<sp/>\</highlight></codeline>
<codeline lineno="302"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(dest)-&gt;flags=(((dest)-&gt;flags<sp/>&amp;<sp/>BN_FLG_MALLOCED)<sp/>\</highlight></codeline>
<codeline lineno="303"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/>((b)-&gt;flags<sp/>&amp;<sp/>~BN_FLG_MALLOCED)<sp/>\</highlight></codeline>
<codeline lineno="304"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/>BN_FLG_STATIC_DATA<sp/>\</highlight></codeline>
<codeline lineno="305"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/>(n)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Already<sp/>declared<sp/>in<sp/>ossl_typ.h<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structbignum__st" kindref="compound">bignum_st</ref><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref>;</highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Used<sp/>for<sp/>temp<sp/>variables<sp/>(declaration<sp/>hidden<sp/>in<sp/>bn_lcl.h)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">bignum_ctx<sp/>BN_CTX;</highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">bn_blinding_st<sp/>BN_BLINDING;</highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structbn__mont__ctx__st" kindref="compound">bn_mont_ctx_st</ref><sp/><ref refid="structbn__mont__ctx__st" kindref="compound">BN_MONT_CTX</ref>;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structbn__recp__ctx__st" kindref="compound">bn_recp_ctx_st</ref><sp/><ref refid="structbn__recp__ctx__st" kindref="compound">BN_RECP_CTX</ref>;</highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structbn__gencb__st" kindref="compound">bn_gencb_st</ref><sp/><ref refid="structbn__gencb__st" kindref="compound">BN_GENCB</ref>;</highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="318" refid="structbignum__st" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structbignum__st" kindref="compound">bignum_st</ref></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/>BN_ULONG<sp/>*d;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Pointer<sp/>to<sp/>an<sp/>array<sp/>of<sp/>&apos;BN_BITS2&apos;<sp/>bit<sp/>chunks.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>top;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Index<sp/>of<sp/>last<sp/>used<sp/>d<sp/>+1.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>next<sp/>are<sp/>internal<sp/>book<sp/>keeping<sp/>for<sp/>bn_expand.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dmax;<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Size<sp/>of<sp/>the<sp/>d<sp/>array.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>neg;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>one<sp/>if<sp/>the<sp/>number<sp/>is<sp/>negative<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flags;</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Used<sp/>for<sp/>montgomery<sp/>multiplication<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="329" refid="structbn__mont__ctx__st" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structbn__mont__ctx__st" kindref="compound">bn_mont_ctx_st</ref></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ri;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>number<sp/>of<sp/>bits<sp/>in<sp/>R<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>RR;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>used<sp/>to<sp/>convert<sp/>to<sp/>montgomery<sp/>form<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>N;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>modulus<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>Ni;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>R*(1/R<sp/>mod<sp/>N)<sp/>-<sp/>N*Ni<sp/>=<sp/>1</highlight></codeline>
<codeline lineno="335"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>(Ni<sp/>is<sp/>only<sp/>stored<sp/>for<sp/>bignum<sp/>algorithm)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/>BN_ULONG<sp/>n0[2];</highlight><highlight class="comment">/*<sp/>least<sp/>significant<sp/>word(s)<sp/>of<sp/>Ni;</highlight></codeline>
<codeline lineno="337"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(type<sp/>changed<sp/>with<sp/>0.9.9,<sp/>was<sp/>&quot;BN_ULONG<sp/>n0;&quot;<sp/>before)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flags;</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Used<sp/>for<sp/>reciprocal<sp/>division/mod<sp/>functions</highlight></codeline>
<codeline lineno="342"><highlight class="comment"><sp/>*<sp/>It<sp/>cannot<sp/>be<sp/>shared<sp/>between<sp/>threads</highlight></codeline>
<codeline lineno="343"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="344" refid="structbn__recp__ctx__st" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structbn__recp__ctx__st" kindref="compound">bn_recp_ctx_st</ref></highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>N;<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>the<sp/>divisor<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>Nr;<sp/><sp/></highlight><highlight class="comment">/*<sp/>the<sp/>reciprocal<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_bits;</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>shift;</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flags;</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Used<sp/>for<sp/>slow<sp/>&quot;generation&quot;<sp/>functions.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="354" refid="structbn__gencb__st" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structbn__gencb__st" kindref="compound">bn_gencb_st</ref></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ver;<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>To<sp/>handle<sp/>binary<sp/>(in)compatibility<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*arg;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>callback-specific<sp/>data<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">union</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>if(ver==1)<sp/>-<sp/>handles<sp/>old<sp/>style<sp/>callbacks<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>(*cb_1)(int,<sp/>int,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>if(ver==2)<sp/>-<sp/>new<sp/>callback<sp/>style<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>(*cb_2)(int,<sp/>int,<sp/><ref refid="structbn__gencb__st" kindref="compound">BN_GENCB</ref><sp/>*);</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>cb;</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Wrapper<sp/>function<sp/>to<sp/>make<sp/>using<sp/>BN_GENCB<sp/>easier,<sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>BN_GENCB_call(<ref refid="structbn__gencb__st" kindref="compound">BN_GENCB</ref><sp/>*cb,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b);</highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Macro<sp/>to<sp/>populate<sp/>a<sp/>BN_GENCB<sp/>structure<sp/>with<sp/>an<sp/>&quot;old&quot;-style<sp/>callback<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BN_GENCB_set_old(gencb,<sp/>callback,<sp/>cb_arg)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="370"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BN_GENCB<sp/>*tmp_gencb<sp/>=<sp/>(gencb);<sp/>\</highlight></codeline>
<codeline lineno="371"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp_gencb-&gt;ver<sp/>=<sp/>1;<sp/>\</highlight></codeline>
<codeline lineno="372"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp_gencb-&gt;arg<sp/>=<sp/>(cb_arg);<sp/>\</highlight></codeline>
<codeline lineno="373"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp_gencb-&gt;cb.cb_1<sp/>=<sp/>(callback);<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Macro<sp/>to<sp/>populate<sp/>a<sp/>BN_GENCB<sp/>structure<sp/>with<sp/>a<sp/>&quot;new&quot;-style<sp/>callback<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BN_GENCB_set(gencb,<sp/>callback,<sp/>cb_arg)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="376"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BN_GENCB<sp/>*tmp_gencb<sp/>=<sp/>(gencb);<sp/>\</highlight></codeline>
<codeline lineno="377"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp_gencb-&gt;ver<sp/>=<sp/>2;<sp/>\</highlight></codeline>
<codeline lineno="378"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp_gencb-&gt;arg<sp/>=<sp/>(cb_arg);<sp/>\</highlight></codeline>
<codeline lineno="379"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp_gencb-&gt;cb.cb_2<sp/>=<sp/>(callback);<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BN_prime_checks<sp/>0<sp/></highlight><highlight class="comment">/*<sp/>default:<sp/>select<sp/>number<sp/>of<sp/>iterations</highlight></codeline>
<codeline lineno="382"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>based<sp/>on<sp/>the<sp/>size<sp/>of<sp/>the<sp/>number<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>number<sp/>of<sp/>Miller-Rabin<sp/>iterations<sp/>for<sp/>an<sp/>error<sp/>rate<sp/><sp/>of<sp/>less<sp/>than<sp/>2^-80</highlight></codeline>
<codeline lineno="385"><highlight class="comment"><sp/>*<sp/>for<sp/>random<sp/>&apos;b&apos;-bit<sp/>input,<sp/>b<sp/>&gt;=<sp/>100<sp/>(taken<sp/>from<sp/>table<sp/>4.4<sp/>in<sp/>the<sp/>Handbook</highlight></codeline>
<codeline lineno="386"><highlight class="comment"><sp/>*<sp/>of<sp/>Applied<sp/>Cryptography<sp/>[Menezes,<sp/>van<sp/>Oorschot,<sp/>Vanstone;<sp/>CRC<sp/>Press<sp/>1996];</highlight></codeline>
<codeline lineno="387"><highlight class="comment"><sp/>*<sp/>original<sp/>paper:<sp/>Damgaard,<sp/>Landrock,<sp/>Pomerance:<sp/>Average<sp/>case<sp/>error<sp/>estimates</highlight></codeline>
<codeline lineno="388"><highlight class="comment"><sp/>*<sp/>for<sp/>the<sp/>strong<sp/>probable<sp/>prime<sp/>test.<sp/>--<sp/>Math.<sp/>Comp.<sp/>61<sp/>(1993)<sp/>177-194)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BN_prime_checks_for_size(b)<sp/>((b)<sp/>&gt;=<sp/>1300<sp/>?<sp/><sp/>2<sp/>:<sp/>\</highlight></codeline>
<codeline lineno="390"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(b)<sp/>&gt;=<sp/><sp/>850<sp/>?<sp/><sp/>3<sp/>:<sp/>\</highlight></codeline>
<codeline lineno="391"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(b)<sp/>&gt;=<sp/><sp/>650<sp/>?<sp/><sp/>4<sp/>:<sp/>\</highlight></codeline>
<codeline lineno="392"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(b)<sp/>&gt;=<sp/><sp/>550<sp/>?<sp/><sp/>5<sp/>:<sp/>\</highlight></codeline>
<codeline lineno="393"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(b)<sp/>&gt;=<sp/><sp/>450<sp/>?<sp/><sp/>6<sp/>:<sp/>\</highlight></codeline>
<codeline lineno="394"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(b)<sp/>&gt;=<sp/><sp/>400<sp/>?<sp/><sp/>7<sp/>:<sp/>\</highlight></codeline>
<codeline lineno="395"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(b)<sp/>&gt;=<sp/><sp/>350<sp/>?<sp/><sp/>8<sp/>:<sp/>\</highlight></codeline>
<codeline lineno="396"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(b)<sp/>&gt;=<sp/><sp/>300<sp/>?<sp/><sp/>9<sp/>:<sp/>\</highlight></codeline>
<codeline lineno="397"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(b)<sp/>&gt;=<sp/><sp/>250<sp/>?<sp/>12<sp/>:<sp/>\</highlight></codeline>
<codeline lineno="398"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(b)<sp/>&gt;=<sp/><sp/>200<sp/>?<sp/>15<sp/>:<sp/>\</highlight></codeline>
<codeline lineno="399"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(b)<sp/>&gt;=<sp/><sp/>150<sp/>?<sp/>18<sp/>:<sp/>\</highlight></codeline>
<codeline lineno="400"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>b<sp/>&gt;=<sp/>100<sp/>*/</highlight><highlight class="preprocessor"><sp/>27)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BN_num_bytes(a)<sp/>((BN_num_bits(a)+7)/8)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Note<sp/>that<sp/>BN_abs_is_word<sp/>didn&apos;t<sp/>work<sp/>reliably<sp/>for<sp/>w<sp/>==<sp/>0<sp/>until<sp/>0.9.8<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BN_abs_is_word(a,w)<sp/>((((a)-&gt;top<sp/>==<sp/>1)<sp/>&amp;&amp;<sp/>((a)-&gt;d[0]<sp/>==<sp/>(BN_ULONG)(w)))<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="406"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(((w)<sp/>==<sp/>0)<sp/>&amp;&amp;<sp/>((a)-&gt;top<sp/>==<sp/>0)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BN_is_zero(a)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>((a)-&gt;top<sp/>==<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BN_is_one(a)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(BN_abs_is_word((a),1)<sp/>&amp;&amp;<sp/>!(a)-&gt;neg)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BN_is_word(a,w)<sp/><sp/><sp/><sp/><sp/>(BN_abs_is_word((a),(w))<sp/>&amp;&amp;<sp/>(!(w)<sp/>||<sp/>!(a)-&gt;neg))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BN_is_odd(a)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(((a)-&gt;top<sp/>&gt;<sp/>0)<sp/>&amp;&amp;<sp/>((a)-&gt;d[0]<sp/>&amp;<sp/>1))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BN_one(a)<sp/><sp/><sp/>(BN_set_word((a),1))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BN_zero_ex(a)<sp/>\</highlight></codeline>
<codeline lineno="414"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>do<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="415"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BIGNUM<sp/>*_tmp_bn<sp/>=<sp/>(a);<sp/>\</highlight></codeline>
<codeline lineno="416"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_tmp_bn-&gt;top<sp/>=<sp/>0;<sp/>\</highlight></codeline>
<codeline lineno="417"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_tmp_bn-&gt;neg<sp/>=<sp/>0;<sp/>\</highlight></codeline>
<codeline lineno="418"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>while(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>OPENSSL_NO_DEPRECATED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BN_zero(a)<sp/><sp/>BN_zero_ex(a)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BN_zero(a)<sp/><sp/>(BN_set_word((a),0))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*BN_value_one(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/><sp/>BN_options(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="427"><highlight class="normal">BN_CTX<sp/>*BN_CTX_new(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>OPENSSL_NO_DEPRECATED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>BN_CTX_init(BN_CTX<sp/>*c);</highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>BN_CTX_free(BN_CTX<sp/>*c);</highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>BN_CTX_start(BN_CTX<sp/>*ctx);</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*BN_CTX_get(BN_CTX<sp/>*ctx);</highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>BN_CTX_end(BN_CTX<sp/>*ctx);</highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>BN_rand(<ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*rnd,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bits,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>top,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bottom);</highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>BN_pseudo_rand(<ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*rnd,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bits,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>top,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bottom);</highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>BN_rand_range(<ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*rnd,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*range);</highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>BN_pseudo_rand_range(<ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*rnd,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*range);</highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>BN_num_bits(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*a);</highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>BN_num_bits_word(BN_ULONG);</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*BN_new(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>BN_init(<ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*);</highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>BN_clear_free(<ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*a);</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*BN_copy(<ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*b);</highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>BN_swap(<ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*a,<sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*b);</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*BN_bin2bn(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len,<ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*ret);</highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>BN_bn2bin(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*to);</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*BN_mpi2bn(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len,<ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*ret);</highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>BN_bn2mpi(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*to);</highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>BN_sub(<ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*b);</highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>BN_usub(<ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*b);</highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>BN_uadd(<ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*b);</highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>BN_add(<ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*b);</highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>BN_mul(<ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*b,<sp/>BN_CTX<sp/>*ctx);</highlight></codeline>
<codeline lineno="455"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>BN_sqr(<ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*a,BN_CTX<sp/>*ctx);</highlight></codeline>
<codeline lineno="460"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>BN_set_negative(<ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*b,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n);</highlight></codeline>
<codeline lineno="465"><highlight class="preprocessor">#define<sp/>BN_is_negative(a)<sp/>((a)-&gt;neg<sp/>!=<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>BN_div(<ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*dv,<sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*rem,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*m,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*d,</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/>BN_CTX<sp/>*ctx);</highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BN_mod(rem,m,d,ctx)<sp/>BN_div(NULL,(rem),(m),(d),(ctx))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>BN_nnmod(<ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*m,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*d,<sp/>BN_CTX<sp/>*ctx);</highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>BN_mod_add(<ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*b,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*m,<sp/>BN_CTX<sp/>*ctx);</highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>BN_mod_add_quick(<ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*b,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*m);</highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>BN_mod_sub(<ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*b,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*m,<sp/>BN_CTX<sp/>*ctx);</highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>BN_mod_sub_quick(<ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*b,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*m);</highlight></codeline>
<codeline lineno="475"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>BN_mod_mul(<ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*b,</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*m,<sp/>BN_CTX<sp/>*ctx);</highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>BN_mod_sqr(<ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*m,<sp/>BN_CTX<sp/>*ctx);</highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>BN_mod_lshift1(<ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*m,<sp/>BN_CTX<sp/>*ctx);</highlight></codeline>
<codeline lineno="479"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>BN_mod_lshift1_quick(<ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*m);</highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>BN_mod_lshift(<ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*a,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*m,<sp/>BN_CTX<sp/>*ctx);</highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>BN_mod_lshift_quick(<ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*a,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*m);</highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal">BN_ULONG<sp/>BN_mod_word(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*a,<sp/>BN_ULONG<sp/>w);</highlight></codeline>
<codeline lineno="484"><highlight class="normal">BN_ULONG<sp/>BN_div_word(<ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*a,<sp/>BN_ULONG<sp/>w);</highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>BN_mul_word(<ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*a,<sp/>BN_ULONG<sp/>w);</highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>BN_add_word(<ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*a,<sp/>BN_ULONG<sp/>w);</highlight></codeline>
<codeline lineno="487"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>BN_sub_word(<ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*a,<sp/>BN_ULONG<sp/>w);</highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>BN_set_word(<ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*a,<sp/>BN_ULONG<sp/>w);</highlight></codeline>
<codeline lineno="489"><highlight class="normal">BN_ULONG<sp/>BN_get_word(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*a);</highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>BN_cmp(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*b);</highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>BN_free(<ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*a);</highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>BN_is_bit_set(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*a,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n);</highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>BN_lshift(<ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*a,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n);</highlight></codeline>
<codeline lineno="495"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>BN_lshift1(<ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*a);</highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>BN_exp(<ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*p,BN_CTX<sp/>*ctx);</highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>BN_mod_exp(<ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*p,</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*m,BN_CTX<sp/>*ctx);</highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>BN_mod_exp_mont(<ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*p,</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*m,<sp/>BN_CTX<sp/>*ctx,<sp/><ref refid="structbn__mont__ctx__st" kindref="compound">BN_MONT_CTX</ref><sp/>*m_ctx);</highlight></codeline>
<codeline lineno="502"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>BN_mod_exp_mont_consttime(<ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*rr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*p,</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*m,<sp/>BN_CTX<sp/>*ctx,<sp/><ref refid="structbn__mont__ctx__st" kindref="compound">BN_MONT_CTX</ref><sp/>*in_mont);</highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>BN_mod_exp_mont_word(<ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*r,<sp/>BN_ULONG<sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*p,</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*m,<sp/>BN_CTX<sp/>*ctx,<sp/><ref refid="structbn__mont__ctx__st" kindref="compound">BN_MONT_CTX</ref><sp/>*m_ctx);</highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>BN_mod_exp2_mont(<ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*a1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*p1,</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*a2,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*p2,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*m,</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/>BN_CTX<sp/>*ctx,<ref refid="structbn__mont__ctx__st" kindref="compound">BN_MONT_CTX</ref><sp/>*m_ctx);</highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>BN_mod_exp_simple(<ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*p,</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*m,BN_CTX<sp/>*ctx);</highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>BN_mask_bits(<ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*a,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n);</highlight></codeline>
<codeline lineno="513"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>OPENSSL_NO_FP_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>BN_print_fp(FILE<sp/>*fp,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*a);</highlight></codeline>
<codeline lineno="515"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>HEADER_BIO_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>BN_print(<ref refid="structbio__st" kindref="compound">BIO</ref><sp/>*fp,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*a);</highlight></codeline>
<codeline lineno="518"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>BN_print(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*fp,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*a);</highlight></codeline>
<codeline lineno="520"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>BN_reciprocal(<ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*m,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len,<sp/>BN_CTX<sp/>*ctx);</highlight></codeline>
<codeline lineno="522"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>BN_rshift(<ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*a,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n);</highlight></codeline>
<codeline lineno="523"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>BN_rshift1(<ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*a);</highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>BN_clear(<ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*a);</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*BN_dup(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*a);</highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>BN_ucmp(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*b);</highlight></codeline>
<codeline lineno="527"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>BN_set_bit(<ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*a,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n);</highlight></codeline>
<codeline lineno="528"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>BN_clear_bit(<ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*a,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n);</highlight></codeline>
<codeline lineno="529"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/><sp/>BN_bn2hex(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*a);</highlight></codeline>
<codeline lineno="530"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/><sp/>BN_bn2dec(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*a);</highlight></codeline>
<codeline lineno="531"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>BN_hex2bn(<ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>**a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str);</highlight></codeline>
<codeline lineno="532"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>BN_dec2bn(<ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>**a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str);</highlight></codeline>
<codeline lineno="533"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>BN_asc2bn(<ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>**a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str);</highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>BN_gcd(<ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*r,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*a,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*b,BN_CTX<sp/>*ctx);</highlight></codeline>
<codeline lineno="535"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>BN_kronecker(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*a,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*b,BN_CTX<sp/>*ctx);<sp/></highlight><highlight class="comment">/*<sp/>returns<sp/>-2<sp/>for<sp/>error<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal"><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*BN_mod_inverse(<ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*ret,</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*n,BN_CTX<sp/>*ctx);</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*BN_mod_sqrt(<ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*ret,</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*n,BN_CTX<sp/>*ctx);</highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>BN_consttime_swap(BN_ULONG<sp/>swap,<sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*a,<sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*b,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nwords);</highlight></codeline>
<codeline lineno="542"><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Deprecated<sp/>versions<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>OPENSSL_NO_DEPRECATED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal"><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*BN_generate_prime(<ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*ret,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bits,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>safe,</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*add,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*rem,</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*callback)(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*),</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*cb_arg);</highlight></codeline>
<codeline lineno="548"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>BN_is_prime(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*p,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nchecks,</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*callback)(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*),</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/>BN_CTX<sp/>*ctx,</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*cb_arg);</highlight></codeline>
<codeline lineno="551"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>BN_is_prime_fasttest(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*p,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nchecks,</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*callback)(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*),BN_CTX<sp/>*ctx,</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*cb_arg,</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>do_trial_division);</highlight></codeline>
<codeline lineno="554"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>!defined(OPENSSL_NO_DEPRECATED)<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"></highlight></codeline>
<codeline lineno="556"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Newer<sp/>versions<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>BN_generate_prime_ex(<ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*ret,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bits,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>safe,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*add,</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*rem,<sp/><ref refid="structbn__gencb__st" kindref="compound">BN_GENCB</ref><sp/>*cb);</highlight></codeline>
<codeline lineno="559"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>BN_is_prime_ex(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*p,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nchecks,<sp/>BN_CTX<sp/>*ctx,<sp/><ref refid="structbn__gencb__st" kindref="compound">BN_GENCB</ref><sp/>*cb);</highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>BN_is_prime_fasttest_ex(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*p,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nchecks,<sp/>BN_CTX<sp/>*ctx,</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>do_trial_division,<sp/><ref refid="structbn__gencb__st" kindref="compound">BN_GENCB</ref><sp/>*cb);</highlight></codeline>
<codeline lineno="562"><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>BN_X931_generate_Xpq(<ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*Xp,<sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*Xq,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbits,<sp/>BN_CTX<sp/>*ctx);</highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>BN_X931_derive_prime_ex(<ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*p,<sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*p1,<sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*p2,</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*Xp,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*Xp1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*Xp2,</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*e,<sp/>BN_CTX<sp/>*ctx,<sp/><ref refid="structbn__gencb__st" kindref="compound">BN_GENCB</ref><sp/>*cb);</highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>BN_X931_generate_prime_ex(<ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*p,<sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*p1,<sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*p2,</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*Xp1,<sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*Xp2,</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*Xp,</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*e,<sp/>BN_CTX<sp/>*ctx,</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structbn__gencb__st" kindref="compound">BN_GENCB</ref><sp/>*cb);</highlight></codeline>
<codeline lineno="573"><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal"><ref refid="structbn__mont__ctx__st" kindref="compound">BN_MONT_CTX</ref><sp/>*BN_MONT_CTX_new(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="575"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>BN_MONT_CTX_init(<ref refid="structbn__mont__ctx__st" kindref="compound">BN_MONT_CTX</ref><sp/>*ctx);</highlight></codeline>
<codeline lineno="576"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>BN_mod_mul_montgomery(<ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*r,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*a,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*b,</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structbn__mont__ctx__st" kindref="compound">BN_MONT_CTX</ref><sp/>*mont,<sp/>BN_CTX<sp/>*ctx);</highlight></codeline>
<codeline lineno="578"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BN_to_montgomery(r,a,mont,ctx)<sp/><sp/>BN_mod_mul_montgomery(\</highlight></codeline>
<codeline lineno="579"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(r),(a),&amp;((mont)-&gt;RR),(mont),(ctx))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="580"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>BN_from_montgomery(<ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*r,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*a,</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structbn__mont__ctx__st" kindref="compound">BN_MONT_CTX</ref><sp/>*mont,<sp/>BN_CTX<sp/>*ctx);</highlight></codeline>
<codeline lineno="582"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>BN_MONT_CTX_free(<ref refid="structbn__mont__ctx__st" kindref="compound">BN_MONT_CTX</ref><sp/>*mont);</highlight></codeline>
<codeline lineno="583"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>BN_MONT_CTX_set(<ref refid="structbn__mont__ctx__st" kindref="compound">BN_MONT_CTX</ref><sp/>*mont,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*mod,BN_CTX<sp/>*ctx);</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><ref refid="structbn__mont__ctx__st" kindref="compound">BN_MONT_CTX</ref><sp/>*BN_MONT_CTX_copy(<ref refid="structbn__mont__ctx__st" kindref="compound">BN_MONT_CTX</ref><sp/>*to,<ref refid="structbn__mont__ctx__st" kindref="compound">BN_MONT_CTX</ref><sp/>*from);</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><ref refid="structbn__mont__ctx__st" kindref="compound">BN_MONT_CTX</ref><sp/>*BN_MONT_CTX_set_locked(<ref refid="structbn__mont__ctx__st" kindref="compound">BN_MONT_CTX</ref><sp/>**pmont,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lock,</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*mod,<sp/>BN_CTX<sp/>*ctx);</highlight></codeline>
<codeline lineno="587"><highlight class="normal"></highlight></codeline>
<codeline lineno="588"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>BN_BLINDING<sp/>flags<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="589"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BN_BLINDING_NO_UPDATE<sp/><sp/><sp/>0x00000001</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="590"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BN_BLINDING_NO_RECREATE<sp/>0x00000002</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="591"><highlight class="normal"></highlight></codeline>
<codeline lineno="592"><highlight class="normal">BN_BLINDING<sp/>*BN_BLINDING_new(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*A,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*Ai,<sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*mod);</highlight></codeline>
<codeline lineno="593"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>BN_BLINDING_free(BN_BLINDING<sp/>*b);</highlight></codeline>
<codeline lineno="594"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>BN_BLINDING_update(BN_BLINDING<sp/>*b,BN_CTX<sp/>*ctx);</highlight></codeline>
<codeline lineno="595"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>BN_BLINDING_convert(<ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*n,<sp/>BN_BLINDING<sp/>*b,<sp/>BN_CTX<sp/>*ctx);</highlight></codeline>
<codeline lineno="596"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>BN_BLINDING_invert(<ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*n,<sp/>BN_BLINDING<sp/>*b,<sp/>BN_CTX<sp/>*ctx);</highlight></codeline>
<codeline lineno="597"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>BN_BLINDING_convert_ex(<ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*n,<sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*r,<sp/>BN_BLINDING<sp/>*b,<sp/>BN_CTX<sp/>*);</highlight></codeline>
<codeline lineno="598"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>BN_BLINDING_invert_ex(<ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*n,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*r,<sp/>BN_BLINDING<sp/>*b,<sp/>BN_CTX<sp/>*);</highlight></codeline>
<codeline lineno="599"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>OPENSSL_NO_DEPRECATED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>BN_BLINDING_get_thread_id(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BN_BLINDING<sp/>*);</highlight></codeline>
<codeline lineno="601"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>BN_BLINDING_set_thread_id(BN_BLINDING<sp/>*,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="602"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="normal"><ref refid="structcrypto__threadid__st" kindref="compound">CRYPTO_THREADID</ref><sp/>*BN_BLINDING_thread_id(BN_BLINDING<sp/>*);</highlight></codeline>
<codeline lineno="604"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>BN_BLINDING_get_flags(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BN_BLINDING<sp/>*);</highlight></codeline>
<codeline lineno="605"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>BN_BLINDING_set_flags(BN_BLINDING<sp/>*,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="606"><highlight class="normal">BN_BLINDING<sp/>*BN_BLINDING_create_param(BN_BLINDING<sp/>*b,</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*e,<sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*m,<sp/>BN_CTX<sp/>*ctx,</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(*bn_mod_exp)(<ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*p,</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*m,<sp/>BN_CTX<sp/>*ctx,<sp/><ref refid="structbn__mont__ctx__st" kindref="compound">BN_MONT_CTX</ref><sp/>*m_ctx),</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structbn__mont__ctx__st" kindref="compound">BN_MONT_CTX</ref><sp/>*m_ctx);</highlight></codeline>
<codeline lineno="611"><highlight class="normal"></highlight></codeline>
<codeline lineno="612"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>OPENSSL_NO_DEPRECATED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="613"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>BN_set_params(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mul,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>high,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>low,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mont);</highlight></codeline>
<codeline lineno="614"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>BN_get_params(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>which);<sp/></highlight><highlight class="comment">/*<sp/>0,<sp/>mul,<sp/>1<sp/>high,<sp/>2<sp/>low,<sp/>3<sp/>mont<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="616"><highlight class="normal"></highlight></codeline>
<codeline lineno="617"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>BN_RECP_CTX_init(<ref refid="structbn__recp__ctx__st" kindref="compound">BN_RECP_CTX</ref><sp/>*recp);</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><ref refid="structbn__recp__ctx__st" kindref="compound">BN_RECP_CTX</ref><sp/>*BN_RECP_CTX_new(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="619"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>BN_RECP_CTX_free(<ref refid="structbn__recp__ctx__st" kindref="compound">BN_RECP_CTX</ref><sp/>*recp);</highlight></codeline>
<codeline lineno="620"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>BN_RECP_CTX_set(<ref refid="structbn__recp__ctx__st" kindref="compound">BN_RECP_CTX</ref><sp/>*recp,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*rdiv,BN_CTX<sp/>*ctx);</highlight></codeline>
<codeline lineno="621"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>BN_mod_mul_reciprocal(<ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*y,</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structbn__recp__ctx__st" kindref="compound">BN_RECP_CTX</ref><sp/>*recp,BN_CTX<sp/>*ctx);</highlight></codeline>
<codeline lineno="623"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>BN_mod_exp_recp(<ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*p,</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*m,<sp/>BN_CTX<sp/>*ctx);</highlight></codeline>
<codeline lineno="625"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>BN_div_recp(<ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*dv,<sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*rem,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*m,</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structbn__recp__ctx__st" kindref="compound">BN_RECP_CTX</ref><sp/>*recp,<sp/>BN_CTX<sp/>*ctx);</highlight></codeline>
<codeline lineno="627"><highlight class="normal"></highlight></codeline>
<codeline lineno="628"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>OPENSSL_NO_EC2M</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="629"><highlight class="normal"></highlight></codeline>
<codeline lineno="630"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Functions<sp/>for<sp/>arithmetic<sp/>over<sp/>binary<sp/>polynomials<sp/>represented<sp/>by<sp/>BIGNUMs.<sp/></highlight></codeline>
<codeline lineno="631"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="632"><highlight class="comment"><sp/>*<sp/>The<sp/>BIGNUM::neg<sp/>property<sp/>of<sp/>BIGNUMs<sp/>representing<sp/>binary<sp/>polynomials<sp/>is</highlight></codeline>
<codeline lineno="633"><highlight class="comment"><sp/>*<sp/>ignored.</highlight></codeline>
<codeline lineno="634"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="635"><highlight class="comment"><sp/>*<sp/>Note<sp/>that<sp/>input<sp/>arguments<sp/>are<sp/>not<sp/>const<sp/>so<sp/>that<sp/>their<sp/>bit<sp/>arrays<sp/>can</highlight></codeline>
<codeline lineno="636"><highlight class="comment"><sp/>*<sp/>be<sp/>expanded<sp/>to<sp/>the<sp/>appropriate<sp/>size<sp/>if<sp/>needed.</highlight></codeline>
<codeline lineno="637"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="638"><highlight class="normal"></highlight></codeline>
<codeline lineno="639"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>BN_GF2m_add(<ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*b);<sp/></highlight><highlight class="comment">/*r<sp/>=<sp/>a<sp/>+<sp/>b*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="640"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BN_GF2m_sub(r,<sp/>a,<sp/>b)<sp/>BN_GF2m_add(r,<sp/>a,<sp/>b)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="641"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>BN_GF2m_mod(<ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*p);<sp/></highlight><highlight class="comment">/*r=a<sp/>mod<sp/>p*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="642"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>BN_GF2m_mod_mul(<ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*b,</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*p,<sp/>BN_CTX<sp/>*ctx);<sp/></highlight><highlight class="comment">/*<sp/>r<sp/>=<sp/>(a<sp/>*<sp/>b)<sp/>mod<sp/>p<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="644"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>BN_GF2m_mod_sqr(<ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*p,</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/>BN_CTX<sp/>*ctx);<sp/></highlight><highlight class="comment">/*<sp/>r<sp/>=<sp/>(a<sp/>*<sp/>a)<sp/>mod<sp/>p<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="646"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>BN_GF2m_mod_inv(<ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*b,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*p,</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/>BN_CTX<sp/>*ctx);<sp/></highlight><highlight class="comment">/*<sp/>r<sp/>=<sp/>(1<sp/>/<sp/>b)<sp/>mod<sp/>p<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="648"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>BN_GF2m_mod_div(<ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*b,</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*p,<sp/>BN_CTX<sp/>*ctx);<sp/></highlight><highlight class="comment">/*<sp/>r<sp/>=<sp/>(a<sp/>/<sp/>b)<sp/>mod<sp/>p<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="650"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>BN_GF2m_mod_exp(<ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*b,</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*p,<sp/>BN_CTX<sp/>*ctx);<sp/></highlight><highlight class="comment">/*<sp/>r<sp/>=<sp/>(a<sp/>^<sp/>b)<sp/>mod<sp/>p<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="652"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>BN_GF2m_mod_sqrt(<ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*p,</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/>BN_CTX<sp/>*ctx);<sp/></highlight><highlight class="comment">/*<sp/>r<sp/>=<sp/>sqrt(a)<sp/>mod<sp/>p<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="654"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>BN_GF2m_mod_solve_quad(<ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*p,</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/>BN_CTX<sp/>*ctx);<sp/></highlight><highlight class="comment">/*<sp/>r^2<sp/>+<sp/>r<sp/>=<sp/>a<sp/>mod<sp/>p<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="656"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BN_GF2m_cmp(a,<sp/>b)<sp/>BN_ucmp((a),<sp/>(b))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="657"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Some<sp/>functions<sp/>allow<sp/>for<sp/>representation<sp/>of<sp/>the<sp/>irreducible<sp/>polynomials</highlight></codeline>
<codeline lineno="658"><highlight class="comment"><sp/>*<sp/>as<sp/>an<sp/>unsigned<sp/>int[],<sp/>say<sp/>p.<sp/><sp/>The<sp/>irreducible<sp/>f(t)<sp/>is<sp/>then<sp/>of<sp/>the<sp/>form:</highlight></codeline>
<codeline lineno="659"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>t^p[0]<sp/>+<sp/>t^p[1]<sp/>+<sp/>...<sp/>+<sp/>t^p[k]</highlight></codeline>
<codeline lineno="660"><highlight class="comment"><sp/>*<sp/>where<sp/>m<sp/>=<sp/>p[0]<sp/>&gt;<sp/>p[1]<sp/>&gt;<sp/>...<sp/>&gt;<sp/>p[k]<sp/>=<sp/>0.</highlight></codeline>
<codeline lineno="661"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="662"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>BN_GF2m_mod_arr(<ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>p[]);</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>r<sp/>=<sp/>a<sp/>mod<sp/>p<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="664"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>BN_GF2m_mod_mul_arr(<ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*b,</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>p[],<sp/>BN_CTX<sp/>*ctx);<sp/></highlight><highlight class="comment">/*<sp/>r<sp/>=<sp/>(a<sp/>*<sp/>b)<sp/>mod<sp/>p<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="666"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>BN_GF2m_mod_sqr_arr(<ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>p[],</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/>BN_CTX<sp/>*ctx);<sp/></highlight><highlight class="comment">/*<sp/>r<sp/>=<sp/>(a<sp/>*<sp/>a)<sp/>mod<sp/>p<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="668"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>BN_GF2m_mod_inv_arr(<ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*b,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>p[],</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/>BN_CTX<sp/>*ctx);<sp/></highlight><highlight class="comment">/*<sp/>r<sp/>=<sp/>(1<sp/>/<sp/>b)<sp/>mod<sp/>p<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="670"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>BN_GF2m_mod_div_arr(<ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*b,</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>p[],<sp/>BN_CTX<sp/>*ctx);<sp/></highlight><highlight class="comment">/*<sp/>r<sp/>=<sp/>(a<sp/>/<sp/>b)<sp/>mod<sp/>p<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="672"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>BN_GF2m_mod_exp_arr(<ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*b,</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>p[],<sp/>BN_CTX<sp/>*ctx);<sp/></highlight><highlight class="comment">/*<sp/>r<sp/>=<sp/>(a<sp/>^<sp/>b)<sp/>mod<sp/>p<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="674"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>BN_GF2m_mod_sqrt_arr(<ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*a,</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>p[],<sp/>BN_CTX<sp/>*ctx);<sp/></highlight><highlight class="comment">/*<sp/>r<sp/>=<sp/>sqrt(a)<sp/>mod<sp/>p<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="676"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>BN_GF2m_mod_solve_quad_arr(<ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*a,</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>p[],<sp/>BN_CTX<sp/>*ctx);<sp/></highlight><highlight class="comment">/*<sp/>r^2<sp/>+<sp/>r<sp/>=<sp/>a<sp/>mod<sp/>p<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="678"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>BN_GF2m_poly2arr(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*a,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>p[],<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max);</highlight></codeline>
<codeline lineno="679"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>BN_GF2m_arr2poly(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>p[],<sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*a);</highlight></codeline>
<codeline lineno="680"><highlight class="normal"></highlight></codeline>
<codeline lineno="681"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="682"><highlight class="normal"></highlight></codeline>
<codeline lineno="683"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>faster<sp/>mod<sp/>functions<sp/>for<sp/>the<sp/>&apos;NIST<sp/>primes&apos;<sp/></highlight></codeline>
<codeline lineno="684"><highlight class="comment"><sp/>*<sp/>0<sp/>&lt;=<sp/>a<sp/>&lt;<sp/>p^2<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="685"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>BN_nist_mod_192(<ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*p,<sp/>BN_CTX<sp/>*ctx);</highlight></codeline>
<codeline lineno="686"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>BN_nist_mod_224(<ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*p,<sp/>BN_CTX<sp/>*ctx);</highlight></codeline>
<codeline lineno="687"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>BN_nist_mod_256(<ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*p,<sp/>BN_CTX<sp/>*ctx);</highlight></codeline>
<codeline lineno="688"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>BN_nist_mod_384(<ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*p,<sp/>BN_CTX<sp/>*ctx);</highlight></codeline>
<codeline lineno="689"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>BN_nist_mod_521(<ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*p,<sp/>BN_CTX<sp/>*ctx);</highlight></codeline>
<codeline lineno="690"><highlight class="normal"></highlight></codeline>
<codeline lineno="691"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*BN_get0_nist_prime_192(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="692"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*BN_get0_nist_prime_224(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="693"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*BN_get0_nist_prime_256(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="694"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*BN_get0_nist_prime_384(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="695"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*BN_get0_nist_prime_521(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="696"><highlight class="normal"></highlight></codeline>
<codeline lineno="697"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>library<sp/>internal<sp/>functions<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="698"><highlight class="normal"></highlight></codeline>
<codeline lineno="699"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>bn_expand(a,bits)<sp/>((((((bits+BN_BITS2-1))/BN_BITS2))<sp/>&lt;=<sp/>(a)-&gt;dmax)?\</highlight></codeline>
<codeline lineno="700"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(a):bn_expand2((a),(bits+BN_BITS2-1)/BN_BITS2))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="701"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>bn_wexpand(a,words)<sp/>(((words)<sp/>&lt;=<sp/>(a)-&gt;dmax)?(a):bn_expand2((a),(words)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="702"><highlight class="normal"><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*bn_expand2(<ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*a,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>words);</highlight></codeline>
<codeline lineno="703"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>OPENSSL_NO_DEPRECATED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="704"><highlight class="normal"><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*bn_dup_expand(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*a,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>words);<sp/></highlight><highlight class="comment">/*<sp/>unused<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="705"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="706"><highlight class="normal"></highlight></codeline>
<codeline lineno="707"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Bignum<sp/>consistency<sp/>macros</highlight></codeline>
<codeline lineno="708"><highlight class="comment"><sp/>*<sp/>There<sp/>is<sp/>one<sp/>&quot;API&quot;<sp/>macro,<sp/>bn_fix_top(),<sp/>for<sp/>stripping<sp/>leading<sp/>zeroes<sp/>from</highlight></codeline>
<codeline lineno="709"><highlight class="comment"><sp/>*<sp/>bignum<sp/>data<sp/>after<sp/>direct<sp/>manipulations<sp/>on<sp/>the<sp/>data.<sp/>There<sp/>is<sp/>also<sp/>an</highlight></codeline>
<codeline lineno="710"><highlight class="comment"><sp/>*<sp/>&quot;internal&quot;<sp/>macro,<sp/>bn_check_top(),<sp/>for<sp/>verifying<sp/>that<sp/>there<sp/>are<sp/>no<sp/>leading</highlight></codeline>
<codeline lineno="711"><highlight class="comment"><sp/>*<sp/>zeroes.<sp/>Unfortunately,<sp/>some<sp/>auditing<sp/>is<sp/>required<sp/>due<sp/>to<sp/>the<sp/>fact<sp/>that</highlight></codeline>
<codeline lineno="712"><highlight class="comment"><sp/>*<sp/>bn_fix_top()<sp/>has<sp/>become<sp/>an<sp/>overabused<sp/>duct-tape<sp/>because<sp/>bignum<sp/>data<sp/>is</highlight></codeline>
<codeline lineno="713"><highlight class="comment"><sp/>*<sp/>occasionally<sp/>passed<sp/>around<sp/>in<sp/>an<sp/>inconsistent<sp/>state.<sp/>So<sp/>the<sp/>following</highlight></codeline>
<codeline lineno="714"><highlight class="comment"><sp/>*<sp/>changes<sp/>have<sp/>been<sp/>made<sp/>to<sp/>sort<sp/>this<sp/>out;</highlight></codeline>
<codeline lineno="715"><highlight class="comment"><sp/>*<sp/>-<sp/>bn_fix_top()s<sp/>implementation<sp/>has<sp/>been<sp/>moved<sp/>to<sp/>bn_correct_top()</highlight></codeline>
<codeline lineno="716"><highlight class="comment"><sp/>*<sp/>-<sp/>if<sp/>BN_DEBUG<sp/>isn&apos;t<sp/>defined,<sp/>bn_fix_top()<sp/>maps<sp/>to<sp/>bn_correct_top(),<sp/>and</highlight></codeline>
<codeline lineno="717"><highlight class="comment"><sp/>*<sp/><sp/><sp/>bn_check_top()<sp/>is<sp/>as<sp/>before.</highlight></codeline>
<codeline lineno="718"><highlight class="comment"><sp/>*<sp/>-<sp/>if<sp/>BN_DEBUG<sp/>*is*<sp/>defined;</highlight></codeline>
<codeline lineno="719"><highlight class="comment"><sp/>*<sp/><sp/><sp/>-<sp/>bn_check_top()<sp/>tries<sp/>to<sp/>pollute<sp/>unused<sp/>words<sp/>even<sp/>if<sp/>the<sp/>bignum<sp/>&apos;top&apos;<sp/>is</highlight></codeline>
<codeline lineno="720"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>consistent.<sp/>(ed:<sp/>only<sp/>if<sp/>BN_DEBUG_RAND<sp/>is<sp/>defined)</highlight></codeline>
<codeline lineno="721"><highlight class="comment"><sp/>*<sp/><sp/><sp/>-<sp/>bn_fix_top()<sp/>maps<sp/>to<sp/>bn_check_top()<sp/>rather<sp/>than<sp/>&quot;fixing&quot;<sp/>anything.</highlight></codeline>
<codeline lineno="722"><highlight class="comment"><sp/>*<sp/>The<sp/>idea<sp/>is<sp/>to<sp/>have<sp/>debug<sp/>builds<sp/>flag<sp/>up<sp/>inconsistent<sp/>bignums<sp/>when<sp/>they</highlight></codeline>
<codeline lineno="723"><highlight class="comment"><sp/>*<sp/>occur.<sp/>If<sp/>that<sp/>occurs<sp/>in<sp/>a<sp/>bn_fix_top(),<sp/>we<sp/>examine<sp/>the<sp/>code<sp/>in<sp/>question;<sp/>if</highlight></codeline>
<codeline lineno="724"><highlight class="comment"><sp/>*<sp/>the<sp/>use<sp/>of<sp/>bn_fix_top()<sp/>was<sp/>appropriate<sp/>(ie.<sp/>it<sp/>follows<sp/>directly<sp/>after<sp/>code</highlight></codeline>
<codeline lineno="725"><highlight class="comment"><sp/>*<sp/>that<sp/>manipulates<sp/>the<sp/>bignum)<sp/>it<sp/>is<sp/>converted<sp/>to<sp/>bn_correct_top(),<sp/>and<sp/>if<sp/>it</highlight></codeline>
<codeline lineno="726"><highlight class="comment"><sp/>*<sp/>was<sp/>not<sp/>appropriate,<sp/>we<sp/>convert<sp/>it<sp/>permanently<sp/>to<sp/>bn_check_top()<sp/>and<sp/>track</highlight></codeline>
<codeline lineno="727"><highlight class="comment"><sp/>*<sp/>down<sp/>the<sp/>cause<sp/>of<sp/>the<sp/>bug.<sp/>Eventually,<sp/>no<sp/>internal<sp/>code<sp/>should<sp/>be<sp/>using<sp/>the</highlight></codeline>
<codeline lineno="728"><highlight class="comment"><sp/>*<sp/>bn_fix_top()<sp/>macro.<sp/>External<sp/>applications<sp/>and<sp/>libraries<sp/>should<sp/>try<sp/>this<sp/>with</highlight></codeline>
<codeline lineno="729"><highlight class="comment"><sp/>*<sp/>their<sp/>own<sp/>code<sp/>too,<sp/>both<sp/>in<sp/>terms<sp/>of<sp/>building<sp/>against<sp/>the<sp/>openssl<sp/>headers</highlight></codeline>
<codeline lineno="730"><highlight class="comment"><sp/>*<sp/>with<sp/>BN_DEBUG<sp/>defined<sp/>*and*<sp/>linking<sp/>with<sp/>a<sp/>version<sp/>of<sp/>OpenSSL<sp/>built<sp/>with<sp/>it</highlight></codeline>
<codeline lineno="731"><highlight class="comment"><sp/>*<sp/>defined.<sp/>This<sp/>not<sp/>only<sp/>improves<sp/>external<sp/>code,<sp/>it<sp/>provides<sp/>more<sp/>test</highlight></codeline>
<codeline lineno="732"><highlight class="comment"><sp/>*<sp/>coverage<sp/>for<sp/>openssl&apos;s<sp/>own<sp/>code.</highlight></codeline>
<codeline lineno="733"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="734"><highlight class="normal"></highlight></codeline>
<codeline lineno="735"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>BN_DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="736"><highlight class="normal"></highlight></codeline>
<codeline lineno="737"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>We<sp/>only<sp/>need<sp/>assert()<sp/>when<sp/>debugging<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="738"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;assert.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="739"><highlight class="normal"></highlight></codeline>
<codeline lineno="740"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>BN_DEBUG_RAND</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="741"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>To<sp/>avoid<sp/>&quot;make<sp/>update&quot;<sp/>cvs<sp/>wars<sp/>due<sp/>to<sp/>BN_DEBUG,<sp/>use<sp/>some<sp/>tricks<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="742"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>RAND_pseudo_bytes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="743"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>RAND_pseudo_bytes(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buf,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num);</highlight></codeline>
<codeline lineno="744"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BN_DEBUG_TRIX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="745"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="746"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>bn_pollute(a)<sp/>\</highlight></codeline>
<codeline lineno="747"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>do<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="748"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>BIGNUM<sp/>*_bnum1<sp/>=<sp/>(a);<sp/>\</highlight></codeline>
<codeline lineno="749"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(_bnum1-&gt;top<sp/>&lt;<sp/>_bnum1-&gt;dmax)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="750"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unsigned<sp/>char<sp/>_tmp_char;<sp/>\</highlight></codeline>
<codeline lineno="751"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>We<sp/>cast<sp/>away<sp/>const<sp/>without<sp/>the<sp/>compiler<sp/>knowing,<sp/>any<sp/>\</highlight></codeline>
<codeline lineno="752"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>*genuinely*<sp/>constant<sp/>variables<sp/>that<sp/>aren&apos;t<sp/>mutable<sp/>\</highlight></codeline>
<codeline lineno="753"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>wouldn&apos;t<sp/>be<sp/>constructed<sp/>with<sp/>top!=dmax.<sp/>*/</highlight><highlight class="preprocessor"><sp/>\</highlight></codeline>
<codeline lineno="754"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BN_ULONG<sp/>*_not_const;<sp/>\</highlight></codeline>
<codeline lineno="755"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(&amp;_not_const,<sp/>&amp;_bnum1-&gt;d,<sp/>sizeof(BN_ULONG*));<sp/>\</highlight></codeline>
<codeline lineno="756"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RAND_pseudo_bytes(&amp;_tmp_char,<sp/>1);<sp/>\</highlight></codeline>
<codeline lineno="757"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memset((unsigned<sp/>char<sp/>*)(_not_const<sp/>+<sp/>_bnum1-&gt;top),<sp/>_tmp_char,<sp/>\</highlight></codeline>
<codeline lineno="758"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(_bnum1-&gt;dmax<sp/>-<sp/>_bnum1-&gt;top)<sp/>*<sp/>sizeof(BN_ULONG));<sp/>\</highlight></codeline>
<codeline lineno="759"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="760"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>while(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="761"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>BN_DEBUG_TRIX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="762"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>RAND_pseudo_bytes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="763"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="764"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="765"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>bn_pollute(a)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="766"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="767"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>bn_check_top(a)<sp/>\</highlight></codeline>
<codeline lineno="768"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>do<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="769"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>BIGNUM<sp/>*_bnum2<sp/>=<sp/>(a);<sp/>\</highlight></codeline>
<codeline lineno="770"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(_bnum2<sp/>!=<sp/>NULL)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="771"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert((_bnum2-&gt;top<sp/>==<sp/>0)<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="772"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(_bnum2-&gt;d[_bnum2-&gt;top<sp/>-<sp/>1]<sp/>!=<sp/>0));<sp/>\</highlight></codeline>
<codeline lineno="773"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bn_pollute(_bnum2);<sp/>\</highlight></codeline>
<codeline lineno="774"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="775"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>while(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="776"><highlight class="normal"></highlight></codeline>
<codeline lineno="777"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>bn_fix_top(a)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>bn_check_top(a)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="778"><highlight class="normal"></highlight></codeline>
<codeline lineno="779"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>bn_check_size(bn,<sp/>bits)<sp/>bn_wcheck_size(bn,<sp/>((bits+BN_BITS2-1))/BN_BITS2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="780"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>bn_wcheck_size(bn,<sp/>words)<sp/>\</highlight></codeline>
<codeline lineno="781"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>do<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="782"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>BIGNUM<sp/>*_bnum2<sp/>=<sp/>(bn);<sp/>\</highlight></codeline>
<codeline lineno="783"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(words<sp/>&lt;=<sp/>(_bnum2)-&gt;dmax<sp/>&amp;&amp;<sp/>words<sp/>&gt;=<sp/>(_bnum2)-&gt;top);<sp/>\</highlight></codeline>
<codeline lineno="784"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>while(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="785"><highlight class="normal"></highlight></codeline>
<codeline lineno="786"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/></highlight><highlight class="comment">/*<sp/>!BN_DEBUG<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="787"><highlight class="normal"></highlight></codeline>
<codeline lineno="788"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>bn_pollute(a)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="789"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>bn_check_top(a)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="790"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>bn_fix_top(a)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>bn_correct_top(a)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="791"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>bn_check_size(bn,<sp/>bits)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="792"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>bn_wcheck_size(bn,<sp/>words)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="793"><highlight class="normal"></highlight></codeline>
<codeline lineno="794"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="795"><highlight class="normal"></highlight></codeline>
<codeline lineno="796"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>bn_correct_top(a)<sp/>\</highlight></codeline>
<codeline lineno="797"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="798"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BN_ULONG<sp/>*ftl;<sp/>\</highlight></codeline>
<codeline lineno="799"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>int<sp/>tmp_top<sp/>=<sp/>(a)-&gt;top;<sp/>\</highlight></codeline>
<codeline lineno="800"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(tmp_top<sp/>&gt;<sp/>0)<sp/>\</highlight></codeline>
<codeline lineno="801"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="802"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(ftl=<sp/>&amp;((a)-&gt;d[tmp_top-1]);<sp/>tmp_top<sp/>&gt;<sp/>0;<sp/>tmp_top--)<sp/>\</highlight></codeline>
<codeline lineno="803"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(*(ftl--))<sp/>break;<sp/>\</highlight></codeline>
<codeline lineno="804"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(a)-&gt;top<sp/>=<sp/>tmp_top;<sp/>\</highlight></codeline>
<codeline lineno="805"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="806"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>bn_pollute(a);<sp/>\</highlight></codeline>
<codeline lineno="807"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="808"><highlight class="normal"></highlight></codeline>
<codeline lineno="809"><highlight class="normal">BN_ULONG<sp/>bn_mul_add_words(BN_ULONG<sp/>*rp,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BN_ULONG<sp/>*ap,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num,<sp/>BN_ULONG<sp/>w);</highlight></codeline>
<codeline lineno="810"><highlight class="normal">BN_ULONG<sp/>bn_mul_words(BN_ULONG<sp/>*rp,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BN_ULONG<sp/>*ap,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num,<sp/>BN_ULONG<sp/>w);</highlight></codeline>
<codeline lineno="811"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>bn_sqr_words(BN_ULONG<sp/>*rp,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BN_ULONG<sp/>*ap,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num);</highlight></codeline>
<codeline lineno="812"><highlight class="normal">BN_ULONG<sp/>bn_div_words(BN_ULONG<sp/>h,<sp/>BN_ULONG<sp/>l,<sp/>BN_ULONG<sp/>d);</highlight></codeline>
<codeline lineno="813"><highlight class="normal">BN_ULONG<sp/>bn_add_words(BN_ULONG<sp/>*rp,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BN_ULONG<sp/>*ap,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BN_ULONG<sp/>*bp,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num);</highlight></codeline>
<codeline lineno="814"><highlight class="normal">BN_ULONG<sp/>bn_sub_words(BN_ULONG<sp/>*rp,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BN_ULONG<sp/>*ap,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BN_ULONG<sp/>*bp,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num);</highlight></codeline>
<codeline lineno="815"><highlight class="normal"></highlight></codeline>
<codeline lineno="816"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Primes<sp/>from<sp/>RFC<sp/>2409<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="817"><highlight class="normal"><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*get_rfc2409_prime_768(<ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*bn);</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*get_rfc2409_prime_1024(<ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*bn);</highlight></codeline>
<codeline lineno="819"><highlight class="normal"></highlight></codeline>
<codeline lineno="820"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Primes<sp/>from<sp/>RFC<sp/>3526<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="821"><highlight class="normal"><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*get_rfc3526_prime_1536(<ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*bn);</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*get_rfc3526_prime_2048(<ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*bn);</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*get_rfc3526_prime_3072(<ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*bn);</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*get_rfc3526_prime_4096(<ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*bn);</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*get_rfc3526_prime_6144(<ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*bn);</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*get_rfc3526_prime_8192(<ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*bn);</highlight></codeline>
<codeline lineno="827"><highlight class="normal"></highlight></codeline>
<codeline lineno="828"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>BN_bntest_rand(<ref refid="structbignum__st" kindref="compound">BIGNUM</ref><sp/>*rnd,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bits,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>top,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bottom);</highlight></codeline>
<codeline lineno="829"><highlight class="normal"></highlight></codeline>
<codeline lineno="830"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>BEGIN<sp/>ERROR<sp/>CODES<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="831"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>The<sp/>following<sp/>lines<sp/>are<sp/>auto<sp/>generated<sp/>by<sp/>the<sp/>script<sp/>mkerr.pl.<sp/>Any<sp/>changes</highlight></codeline>
<codeline lineno="832"><highlight class="comment"><sp/>*<sp/>made<sp/>after<sp/>this<sp/>point<sp/>may<sp/>be<sp/>overwritten<sp/>when<sp/>the<sp/>script<sp/>is<sp/>next<sp/>run.</highlight></codeline>
<codeline lineno="833"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="834"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ERR_load_BN_strings(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="835"><highlight class="normal"></highlight></codeline>
<codeline lineno="836"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Error<sp/>codes<sp/>for<sp/>the<sp/>BN<sp/>functions.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="837"><highlight class="normal"></highlight></codeline>
<codeline lineno="838"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Function<sp/>codes.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="839"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BN_F_BNRAND<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>127</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="840"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BN_F_BN_BLINDING_CONVERT_EX<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>100</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="841"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BN_F_BN_BLINDING_CREATE_PARAM<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>128</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="842"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BN_F_BN_BLINDING_INVERT_EX<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>101</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="843"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BN_F_BN_BLINDING_NEW<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>102</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="844"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BN_F_BN_BLINDING_UPDATE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>103</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="845"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BN_F_BN_BN2DEC<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>104</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="846"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BN_F_BN_BN2HEX<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>105</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="847"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BN_F_BN_CTX_GET<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>116</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="848"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BN_F_BN_CTX_NEW<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>106</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="849"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BN_F_BN_CTX_START<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>129</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="850"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BN_F_BN_DIV<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>107</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="851"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BN_F_BN_DIV_NO_BRANCH<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>138</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="852"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BN_F_BN_DIV_RECP<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>130</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="853"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BN_F_BN_EXP<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>123</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="854"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BN_F_BN_EXPAND2<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>108</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="855"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BN_F_BN_EXPAND_INTERNAL<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>120</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="856"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BN_F_BN_GF2M_MOD<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>131</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="857"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BN_F_BN_GF2M_MOD_EXP<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>132</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="858"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BN_F_BN_GF2M_MOD_MUL<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>133</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="859"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BN_F_BN_GF2M_MOD_SOLVE_QUAD<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>134</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="860"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BN_F_BN_GF2M_MOD_SOLVE_QUAD_ARR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>135</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="861"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BN_F_BN_GF2M_MOD_SQR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>136</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="862"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BN_F_BN_GF2M_MOD_SQRT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>137</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="863"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BN_F_BN_MOD_EXP2_MONT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>118</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="864"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BN_F_BN_MOD_EXP_MONT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>109</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="865"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BN_F_BN_MOD_EXP_MONT_CONSTTIME<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>124</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="866"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BN_F_BN_MOD_EXP_MONT_WORD<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>117</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="867"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BN_F_BN_MOD_EXP_RECP<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>125</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="868"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BN_F_BN_MOD_EXP_SIMPLE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>126</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="869"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BN_F_BN_MOD_INVERSE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>110</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="870"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BN_F_BN_MOD_INVERSE_NO_BRANCH<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>139</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="871"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BN_F_BN_MOD_LSHIFT_QUICK<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>119</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="872"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BN_F_BN_MOD_MUL_RECIPROCAL<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>111</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="873"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BN_F_BN_MOD_SQRT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>121</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="874"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BN_F_BN_MPI2BN<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>112</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="875"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BN_F_BN_NEW<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>113</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="876"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BN_F_BN_RAND<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>114</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="877"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BN_F_BN_RAND_RANGE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>122</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="878"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BN_F_BN_USUB<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>115</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="879"><highlight class="normal"></highlight></codeline>
<codeline lineno="880"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Reason<sp/>codes.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="881"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BN_R_ARG2_LT_ARG3<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>100</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="882"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BN_R_BAD_RECIPROCAL<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>101</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="883"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BN_R_BIGNUM_TOO_LONG<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>114</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="884"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BN_R_CALLED_WITH_EVEN_MODULUS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>102</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="885"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BN_R_DIV_BY_ZERO<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>103</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="886"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BN_R_ENCODING_ERROR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>104</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="887"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BN_R_EXPAND_ON_STATIC_BIGNUM_DATA<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>105</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="888"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BN_R_INPUT_NOT_REDUCED<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>110</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="889"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BN_R_INVALID_LENGTH<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>106</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="890"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BN_R_INVALID_RANGE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>115</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="891"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BN_R_NOT_A_SQUARE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>111</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="892"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BN_R_NOT_INITIALIZED<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>107</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="893"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BN_R_NO_INVERSE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>108</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="894"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BN_R_NO_SOLUTION<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>116</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="895"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BN_R_P_IS_NOT_PRIME<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>112</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="896"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BN_R_TOO_MANY_ITERATIONS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>113</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="897"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BN_R_TOO_MANY_TEMPORARY_VARIABLES<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>109</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="898"><highlight class="normal"></highlight></codeline>
<codeline lineno="899"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/><sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="900"><highlight class="normal">}</highlight></codeline>
<codeline lineno="901"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="902"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="thirdparty/openssl/include/openssl/bn.h"/>
  </compounddef>
</doxygen>
