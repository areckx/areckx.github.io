<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="lhash_8h" kind="file" language="C++">
    <compoundname>lhash.h</compoundname>
    <includes refid="e__os2_8h" local="no">openssl/e_os2.h</includes>
    <includes local="no">stdio.h</includes>
    <includes refid="bio_8h" local="no">openssl/bio.h</includes>
    <includedby refid="conf_8h" local="no">thirdparty/openssl/include/openssl/conf.h</includedby>
    <includedby refid="conf__api_8h" local="no">thirdparty/openssl/include/openssl/conf_api.h</includedby>
    <includedby refid="err_8h" local="no">thirdparty/openssl/include/openssl/err.h</includedby>
    <includedby refid="ssl_8h" local="no">thirdparty/openssl/include/openssl/ssl.h</includedby>
    <includedby refid="txt__db_8h" local="no">thirdparty/openssl/include/openssl/txt_db.h</includedby>
    <includedby refid="x509__vfy_8h" local="no">thirdparty/openssl/include/openssl/x509_vfy.h</includedby>
    <incdepgraph>
      <node id="82921">
        <label>stdarg.h</label>
      </node>
      <node id="82926">
        <label>openssl/opensslv.h</label>
        <link refid="opensslv_8h_source"/>
      </node>
      <node id="82929">
        <label>stdint.h</label>
      </node>
      <node id="82923">
        <label>stdlib.h</label>
      </node>
      <node id="82920">
        <label>openssl/bio.h</label>
        <link refid="bio_8h_source"/>
        <childnode refid="82917" relation="include">
        </childnode>
        <childnode refid="82919" relation="include">
        </childnode>
        <childnode refid="82921" relation="include">
        </childnode>
        <childnode refid="82922" relation="include">
        </childnode>
        <childnode refid="82929" relation="include">
        </childnode>
      </node>
      <node id="82924">
        <label>openssl/stack.h</label>
        <link refid="stack_8h_source"/>
      </node>
      <node id="82928">
        <label>openssl/symhacks.h</label>
        <link refid="symhacks_8h_source"/>
        <childnode refid="82917" relation="include">
        </childnode>
      </node>
      <node id="82925">
        <label>openssl/safestack.h</label>
        <link refid="safestack_8h_source"/>
        <childnode refid="82924" relation="include">
        </childnode>
      </node>
      <node id="82916">
        <label>thirdparty/openssl/include/openssl/lhash.h</label>
        <link refid="lhash_8h"/>
        <childnode refid="82917" relation="include">
        </childnode>
        <childnode refid="82919" relation="include">
        </childnode>
        <childnode refid="82920" relation="include">
        </childnode>
      </node>
      <node id="82918">
        <label>openssl/opensslconf.h</label>
        <link refid="opensslconf_8h_source"/>
      </node>
      <node id="82917">
        <label>openssl/e_os2.h</label>
        <link refid="e__os2_8h_source"/>
        <childnode refid="82918" relation="include">
        </childnode>
      </node>
      <node id="82919">
        <label>stdio.h</label>
      </node>
      <node id="82927">
        <label>openssl/ossl_typ.h</label>
        <link refid="ossl__typ_8h_source"/>
        <childnode refid="82917" relation="include">
        </childnode>
      </node>
      <node id="82922">
        <label>openssl/crypto.h</label>
        <link refid="crypto_8h_source"/>
        <childnode refid="82923" relation="include">
        </childnode>
        <childnode refid="82917" relation="include">
        </childnode>
        <childnode refid="82919" relation="include">
        </childnode>
        <childnode refid="82924" relation="include">
        </childnode>
        <childnode refid="82925" relation="include">
        </childnode>
        <childnode refid="82926" relation="include">
        </childnode>
        <childnode refid="82927" relation="include">
        </childnode>
        <childnode refid="82928" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="82938">
        <label>thirdparty/openssl/include/openssl/engine.h</label>
        <link refid="engine_8h_source"/>
      </node>
      <node id="82935">
        <label>thirdparty/openssl/include/openssl/ts.h</label>
        <link refid="ts_8h_source"/>
      </node>
      <node id="82945">
        <label>thirdparty/poppler/poppler/SignatureHandler.h</label>
        <link refid="_signature_handler_8h_source"/>
        <childnode refid="82946" relation="include">
        </childnode>
      </node>
      <node id="82937">
        <label>thirdparty/kQOAuth/kqoauthutils.cpp</label>
        <link refid="kqoauthutils_8cpp_source"/>
      </node>
      <node id="82941">
        <label>thirdparty/openssl/include/openssl/txt_db.h</label>
        <link refid="txt__db_8h_source"/>
      </node>
      <node id="82940">
        <label>thirdparty/openssl/include/openssl/ssl3.h</label>
        <link refid="ssl3_8h_source"/>
        <childnode refid="82939" relation="include">
        </childnode>
      </node>
      <node id="82943">
        <label>thirdparty/openssl/include/openssl/x509.h</label>
        <link refid="x509_8h_source"/>
        <childnode refid="82944" relation="include">
        </childnode>
        <childnode refid="82938" relation="include">
        </childnode>
        <childnode refid="82934" relation="include">
        </childnode>
        <childnode refid="82947" relation="include">
        </childnode>
        <childnode refid="82948" relation="include">
        </childnode>
        <childnode refid="82939" relation="include">
        </childnode>
        <childnode refid="82935" relation="include">
        </childnode>
        <childnode refid="82942" relation="include">
        </childnode>
        <childnode refid="82933" relation="include">
        </childnode>
      </node>
      <node id="82942">
        <label>thirdparty/openssl/include/openssl/x509_vfy.h</label>
        <link refid="x509__vfy_8h_source"/>
        <childnode refid="82943" relation="include">
        </childnode>
      </node>
      <node id="82932">
        <label>thirdparty/openssl/include/openssl/conf_api.h</label>
        <link refid="conf__api_8h_source"/>
      </node>
      <node id="82931">
        <label>thirdparty/openssl/include/openssl/conf.h</label>
        <link refid="conf_8h_source"/>
        <childnode refid="82932" relation="include">
        </childnode>
        <childnode refid="82933" relation="include">
        </childnode>
      </node>
      <node id="82947">
        <label>thirdparty/openssl/include/openssl/pem.h</label>
        <link refid="pem_8h_source"/>
        <childnode refid="82937" relation="include">
        </childnode>
        <childnode refid="82939" relation="include">
        </childnode>
      </node>
      <node id="82930">
        <label>thirdparty/openssl/include/openssl/lhash.h</label>
        <link refid="lhash_8h"/>
        <childnode refid="82931" relation="include">
        </childnode>
        <childnode refid="82932" relation="include">
        </childnode>
        <childnode refid="82936" relation="include">
        </childnode>
        <childnode refid="82939" relation="include">
        </childnode>
        <childnode refid="82941" relation="include">
        </childnode>
        <childnode refid="82942" relation="include">
        </childnode>
      </node>
      <node id="82944">
        <label>thirdparty/openssl/include/openssl/cms.h</label>
        <link refid="cms_8h_source"/>
        <childnode refid="82945" relation="include">
        </childnode>
      </node>
      <node id="82939">
        <label>thirdparty/openssl/include/openssl/ssl.h</label>
        <link refid="ssl_8h_source"/>
        <childnode refid="82937" relation="include">
        </childnode>
        <childnode refid="82940" relation="include">
        </childnode>
      </node>
      <node id="82946">
        <label>thirdparty/poppler/poppler/SignatureHandler.cc</label>
        <link refid="_signature_handler_8cc_source"/>
      </node>
      <node id="82936">
        <label>thirdparty/openssl/include/openssl/err.h</label>
        <link refid="err_8h_source"/>
        <childnode refid="82937" relation="include">
        </childnode>
        <childnode refid="82938" relation="include">
        </childnode>
      </node>
      <node id="82933">
        <label>thirdparty/openssl/include/openssl/x509v3.h</label>
        <link refid="x509v3_8h_source"/>
        <childnode refid="82934" relation="include">
        </childnode>
        <childnode refid="82935" relation="include">
        </childnode>
      </node>
      <node id="82948">
        <label>thirdparty/openssl/include/openssl/pkcs12.h</label>
        <link refid="pkcs12_8h_source"/>
      </node>
      <node id="82934">
        <label>thirdparty/openssl/include/openssl/ocsp.h</label>
        <link refid="ocsp_8h_source"/>
      </node>
    </invincdepgraph>
    <innerclass refid="structlhash__node__st" prot="public">lhash_node_st</innerclass>
    <innerclass refid="structlhash__st" prot="public">lhash_st</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="lhash_8h_1a9575d7648be71bf586cfe2b2b7172af7" prot="public" static="no">
        <name>DECLARE_LHASH_HASH_FN</name>
        <param><defname>name</defname></param>
        <param><defname>o_type</defname></param>
        <initializer>unsigned long name##_LHASH_HASH(const void *);</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/lhash.h" line="101" column="9" bodyfile="thirdparty/openssl/include/openssl/lhash.h" bodystart="101" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="lhash_8h_1a22cf19b25a990f5bf3bc54e2ae8887c9" prot="public" static="no">
        <name>IMPLEMENT_LHASH_HASH_FN</name>
        <param><defname>name</defname></param>
        <param><defname>o_type</defname></param>
        <initializer>unsigned long name##_LHASH_HASH(const void *arg) { \
		const o_type *a = arg; \
		return name##_hash(a); }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/lhash.h" line="103" column="9" bodyfile="thirdparty/openssl/include/openssl/lhash.h" bodystart="103" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="lhash_8h_1a64d32cb827153db545ade8ce9e497459" prot="public" static="no">
        <name>LHASH_HASH_FN</name>
        <param><defname>name</defname></param>
        <initializer>name##_LHASH_HASH</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/lhash.h" line="107" column="9" bodyfile="thirdparty/openssl/include/openssl/lhash.h" bodystart="107" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="lhash_8h_1af77b8db602fcc43c1b34aa147b31150f" prot="public" static="no">
        <name>DECLARE_LHASH_COMP_FN</name>
        <param><defname>name</defname></param>
        <param><defname>o_type</defname></param>
        <initializer>int name##_LHASH_COMP(const void *, const void *);</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/lhash.h" line="110" column="9" bodyfile="thirdparty/openssl/include/openssl/lhash.h" bodystart="110" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="lhash_8h_1a40c810514a28064797d3f514923850fe" prot="public" static="no">
        <name>IMPLEMENT_LHASH_COMP_FN</name>
        <param><defname>name</defname></param>
        <param><defname>o_type</defname></param>
        <initializer>int name##_LHASH_COMP(const void *arg1, const void *arg2) { \
		const o_type *a = arg1;		    \
		const o_type *b = arg2; \
		return name##_cmp(a,b); }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/lhash.h" line="112" column="9" bodyfile="thirdparty/openssl/include/openssl/lhash.h" bodystart="112" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="lhash_8h_1ab585a66963ec77cd0989dfb7bfcfc687" prot="public" static="no">
        <name>LHASH_COMP_FN</name>
        <param><defname>name</defname></param>
        <initializer>name##_LHASH_COMP</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/lhash.h" line="117" column="9" bodyfile="thirdparty/openssl/include/openssl/lhash.h" bodystart="117" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="lhash_8h_1a5833330fb537909d09d143f869725f5a" prot="public" static="no">
        <name>DECLARE_LHASH_DOALL_FN</name>
        <param><defname>name</defname></param>
        <param><defname>o_type</defname></param>
        <initializer>void name##_LHASH_DOALL(void *);</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/lhash.h" line="120" column="9" bodyfile="thirdparty/openssl/include/openssl/lhash.h" bodystart="120" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="lhash_8h_1a46990877d9eab9f62bab5dba2548e7bc" prot="public" static="no">
        <name>IMPLEMENT_LHASH_DOALL_FN</name>
        <param><defname>name</defname></param>
        <param><defname>o_type</defname></param>
        <initializer>void name##_LHASH_DOALL(void *arg) { \
		o_type *a = arg; \
		name##_doall(a); }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/lhash.h" line="122" column="9" bodyfile="thirdparty/openssl/include/openssl/lhash.h" bodystart="122" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="lhash_8h_1a0420d8a4d65a2c50d009867a73712992" prot="public" static="no">
        <name>LHASH_DOALL_FN</name>
        <param><defname>name</defname></param>
        <initializer>name##_LHASH_DOALL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/lhash.h" line="126" column="9" bodyfile="thirdparty/openssl/include/openssl/lhash.h" bodystart="126" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="lhash_8h_1ae55a3c7e6b0c3853d1c08796f37241cf" prot="public" static="no">
        <name>DECLARE_LHASH_DOALL_ARG_FN</name>
        <param><defname>name</defname></param>
        <param><defname>o_type</defname></param>
        <param><defname>a_type</defname></param>
        <initializer>void name##_LHASH_DOALL_ARG(void *, void *);</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/lhash.h" line="129" column="9" bodyfile="thirdparty/openssl/include/openssl/lhash.h" bodystart="129" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="lhash_8h_1ab06859e8dfe7ad47bea508430290523b" prot="public" static="no">
        <name>IMPLEMENT_LHASH_DOALL_ARG_FN</name>
        <param><defname>name</defname></param>
        <param><defname>o_type</defname></param>
        <param><defname>a_type</defname></param>
        <initializer>void name##_LHASH_DOALL_ARG(void *arg1, void *arg2) { \
		o_type *a = arg1; \
		a_type *b = arg2; \
		name##_doall_arg(a, b); }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/lhash.h" line="131" column="9" bodyfile="thirdparty/openssl/include/openssl/lhash.h" bodystart="131" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="lhash_8h_1ab50c173700560868f97768d0853f32a6" prot="public" static="no">
        <name>LHASH_DOALL_ARG_FN</name>
        <param><defname>name</defname></param>
        <initializer>name##_LHASH_DOALL_ARG</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/lhash.h" line="136" column="9" bodyfile="thirdparty/openssl/include/openssl/lhash.h" bodystart="136" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="lhash_8h_1a646737163890737b4b10052a377db3a7" prot="public" static="no">
        <name>LH_LOAD_MULT</name>
        <initializer>256</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/lhash.h" line="169" column="9" bodyfile="thirdparty/openssl/include/openssl/lhash.h" bodystart="169" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="lhash_8h_1a8caac24d9b1ab58f30502a27b4da40c2" prot="public" static="no">
        <name>lh_error</name>
        <param><defname>lh</defname></param>
        <initializer>((lh)-&gt;error)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/lhash.h" line="173" column="9" bodyfile="thirdparty/openssl/include/openssl/lhash.h" bodystart="173" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="lhash_8h_1a37ef10ae4febe3da9bd9948479c7acf2" prot="public" static="no">
        <name>LHASH_OF</name>
        <param><defname>type</defname></param>
        <initializer>struct lhash_st_##type</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/lhash.h" line="199" column="9" bodyfile="thirdparty/openssl/include/openssl/lhash.h" bodystart="199" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="lhash_8h_1a9192ea4e0e44e257b25d06f6704aa5a5" prot="public" static="no">
        <name>DECLARE_LHASH_OF</name>
        <param><defname>type</defname></param>
        <initializer>LHASH_OF(type) { int dummy; }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/lhash.h" line="201" column="9" bodyfile="thirdparty/openssl/include/openssl/lhash.h" bodystart="201" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="lhash_8h_1a4e1ec9b23b58f63bd95641d9672d7a33" prot="public" static="no">
        <name>CHECKED_LHASH_OF</name>
        <param><defname>type</defname></param>
        <param><defname>lh</defname></param>
        <initializer>((<ref refid="structlhash__st" kindref="compound">_LHASH</ref> *)CHECKED_PTR_OF(LHASH_OF(type),lh))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/lhash.h" line="203" column="9" bodyfile="thirdparty/openssl/include/openssl/lhash.h" bodystart="203" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="lhash_8h_1ad79a3040ade38c08d8162bc36e98b4a8" prot="public" static="no">
        <name>LHM_lh_new</name>
        <param><defname>type</defname></param>
        <param><defname>name</defname></param>
        <initializer>((LHASH_OF(type) *)lh_new(LHASH_HASH_FN(name), LHASH_COMP_FN(name)))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/lhash.h" line="207" column="9" bodyfile="thirdparty/openssl/include/openssl/lhash.h" bodystart="207" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="lhash_8h_1aefdd2e4412975b51f4357c1f42e5976b" prot="public" static="no">
        <name>LHM_lh_error</name>
        <param><defname>type</defname></param>
        <param><defname>lh</defname></param>
        <initializer>lh_error(CHECKED_LHASH_OF(type,lh))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/lhash.h" line="209" column="9" bodyfile="thirdparty/openssl/include/openssl/lhash.h" bodystart="209" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="lhash_8h_1a0c5da481c6ad7f209db4ba27fe1b3f77" prot="public" static="no">
        <name>LHM_lh_insert</name>
        <param><defname>type</defname></param>
        <param><defname>lh</defname></param>
        <param><defname>inst</defname></param>
        <initializer>((type *)lh_insert(CHECKED_LHASH_OF(type, lh), \
		     CHECKED_PTR_OF(type, inst)))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/lhash.h" line="211" column="9" bodyfile="thirdparty/openssl/include/openssl/lhash.h" bodystart="211" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="lhash_8h_1af79e4a699b3e4f48a5b7ce3dc4ebe2eb" prot="public" static="no">
        <name>LHM_lh_retrieve</name>
        <param><defname>type</defname></param>
        <param><defname>lh</defname></param>
        <param><defname>inst</defname></param>
        <initializer>((type *)lh_retrieve(CHECKED_LHASH_OF(type, lh), \
		       CHECKED_PTR_OF(type, inst)))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/lhash.h" line="214" column="9" bodyfile="thirdparty/openssl/include/openssl/lhash.h" bodystart="214" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="lhash_8h_1af86e6531df414738a49b4565b09917a0" prot="public" static="no">
        <name>LHM_lh_delete</name>
        <param><defname>type</defname></param>
        <param><defname>lh</defname></param>
        <param><defname>inst</defname></param>
        <initializer>((type *)lh_delete(CHECKED_LHASH_OF(type, lh),			\
		     CHECKED_PTR_OF(type, inst)))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/lhash.h" line="217" column="9" bodyfile="thirdparty/openssl/include/openssl/lhash.h" bodystart="217" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="lhash_8h_1a7bf696baae7b30f9827f2cc36bf01e8a" prot="public" static="no">
        <name>LHM_lh_doall</name>
        <param><defname>type</defname></param>
        <param><defname>lh</defname></param>
        <param><defname>fn</defname></param>
        <initializer>lh_doall(CHECKED_LHASH_OF(type, lh), fn)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/lhash.h" line="220" column="9" bodyfile="thirdparty/openssl/include/openssl/lhash.h" bodystart="220" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="lhash_8h_1a6a68020614498863a0c76456844de820" prot="public" static="no">
        <name>LHM_lh_doall_arg</name>
        <param><defname>type</defname></param>
        <param><defname>lh</defname></param>
        <param><defname>fn</defname></param>
        <param><defname>arg_type</defname></param>
        <param><defname>arg</defname></param>
        <initializer>lh_doall_arg(CHECKED_LHASH_OF(type, lh), fn, CHECKED_PTR_OF(arg_type, arg))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/lhash.h" line="221" column="9" bodyfile="thirdparty/openssl/include/openssl/lhash.h" bodystart="221" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="lhash_8h_1ad35bb2d39d87260530ddb7c9b171d6b3" prot="public" static="no">
        <name>LHM_lh_num_items</name>
        <param><defname>type</defname></param>
        <param><defname>lh</defname></param>
        <initializer>lh_num_items(CHECKED_LHASH_OF(type, lh))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/lhash.h" line="223" column="9" bodyfile="thirdparty/openssl/include/openssl/lhash.h" bodystart="223" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="lhash_8h_1a9b475448ebd7f15e4e8f927b5d33315e" prot="public" static="no">
        <name>LHM_lh_down_load</name>
        <param><defname>type</defname></param>
        <param><defname>lh</defname></param>
        <initializer>(CHECKED_LHASH_OF(type, lh)-&gt;down_load)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/lhash.h" line="224" column="9" bodyfile="thirdparty/openssl/include/openssl/lhash.h" bodystart="224" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="lhash_8h_1a4b99464539e5439c19a57a1283640161" prot="public" static="no">
        <name>LHM_lh_node_stats_bio</name>
        <param><defname>type</defname></param>
        <param><defname>lh</defname></param>
        <param><defname>out</defname></param>
        <initializer>lh_node_stats_bio(CHECKED_LHASH_OF(type, lh), out)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/lhash.h" line="225" column="9" bodyfile="thirdparty/openssl/include/openssl/lhash.h" bodystart="225" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="lhash_8h_1a877883eac7e782459beb2d1086eeaa83" prot="public" static="no">
        <name>LHM_lh_node_usage_stats_bio</name>
        <param><defname>type</defname></param>
        <param><defname>lh</defname></param>
        <param><defname>out</defname></param>
        <initializer>lh_node_usage_stats_bio(CHECKED_LHASH_OF(type, lh), out)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/lhash.h" line="227" column="9" bodyfile="thirdparty/openssl/include/openssl/lhash.h" bodystart="227" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="lhash_8h_1aba33aeb253e68f6d97b5caacfd7678ac" prot="public" static="no">
        <name>LHM_lh_stats_bio</name>
        <param><defname>type</defname></param>
        <param><defname>lh</defname></param>
        <param><defname>out</defname></param>
        <initializer>lh_stats_bio(CHECKED_LHASH_OF(type, lh), out)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/lhash.h" line="229" column="9" bodyfile="thirdparty/openssl/include/openssl/lhash.h" bodystart="229" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="lhash_8h_1adaf6d51ce751b17ccf980ba6916866cb" prot="public" static="no">
        <name>LHM_lh_free</name>
        <param><defname>type</defname></param>
        <param><defname>lh</defname></param>
        <initializer>lh_free(CHECKED_LHASH_OF(type, lh))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/lhash.h" line="231" column="9" bodyfile="thirdparty/openssl/include/openssl/lhash.h" bodystart="231" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="lhash_8h_1a4cb6e6cd8268a5c7eb48430fc9344c89" prot="public" static="no">
        <type>struct <ref refid="structlhash__node__st" kindref="compound">lhash_node_st</ref></type>
        <definition>typedef struct lhash_node_st  LHASH_NODE</definition>
        <argsstring></argsstring>
        <name>LHASH_NODE</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/lhash.h" line="86" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="lhash_8h_1ac07b8095350f4c1c977c5d9ef576c409" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* LHASH_COMP_FN_TYPE) (const void *, const void *)</definition>
        <argsstring>)(const void *, const void *)</argsstring>
        <name>LHASH_COMP_FN_TYPE</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/lhash.h" line="88" column="1" bodyfile="thirdparty/openssl/include/openssl/lhash.h" bodystart="88" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="lhash_8h_1a114ffb53d72638b28333462feb63226e" prot="public" static="no">
        <type>unsigned long(*</type>
        <definition>typedef unsigned long(* LHASH_HASH_FN_TYPE) (const void *)</definition>
        <argsstring>)(const void *)</argsstring>
        <name>LHASH_HASH_FN_TYPE</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/lhash.h" line="89" column="1" bodyfile="thirdparty/openssl/include/openssl/lhash.h" bodystart="89" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="lhash_8h_1a21a48fa03c2280b8033877504d34eb57" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* LHASH_DOALL_FN_TYPE) (void *)</definition>
        <argsstring>)(void *)</argsstring>
        <name>LHASH_DOALL_FN_TYPE</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/lhash.h" line="90" column="1" bodyfile="thirdparty/openssl/include/openssl/lhash.h" bodystart="90" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="lhash_8h_1aa0de4fc184f7c5a23fcb84bd5e37fc02" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* LHASH_DOALL_ARG_FN_TYPE) (void *, void *)</definition>
        <argsstring>)(void *, void *)</argsstring>
        <name>LHASH_DOALL_ARG_FN_TYPE</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/lhash.h" line="91" column="1" bodyfile="thirdparty/openssl/include/openssl/lhash.h" bodystart="91" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="lhash_8h_1a75b80bc0826a853edc89ca3e7c016052" prot="public" static="no">
        <type>struct <ref refid="structlhash__st" kindref="compound">lhash_st</ref></type>
        <definition>typedef struct lhash_st  _LHASH</definition>
        <argsstring></argsstring>
        <name>_LHASH</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/lhash.h" line="166" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="lhash_8h_1a6a95e83a80394f7dcc355b588cc5e127" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structlhash__st" kindref="compound">_LHASH</ref> *</type>
        <definition>_LHASH* lh_new</definition>
        <argsstring>(LHASH_HASH_FN_TYPE h, LHASH_COMP_FN_TYPE c)</argsstring>
        <name>lh_new</name>
        <param>
          <type>LHASH_HASH_FN_TYPE</type>
          <declname>h</declname>
        </param>
        <param>
          <type>LHASH_COMP_FN_TYPE</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/lhash.h" line="175" column="1"/>
      </memberdef>
      <memberdef kind="function" id="lhash_8h_1a040387eb4c69250cd655861e98f2ec92" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lh_free</definition>
        <argsstring>(_LHASH *lh)</argsstring>
        <name>lh_free</name>
        <param>
          <type><ref refid="structlhash__st" kindref="compound">_LHASH</ref> *</type>
          <declname>lh</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/lhash.h" line="176" column="1"/>
      </memberdef>
      <memberdef kind="function" id="lhash_8h_1a8f743e10f33a3d44f88e6ce244139078" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* lh_insert</definition>
        <argsstring>(_LHASH *lh, void *data)</argsstring>
        <name>lh_insert</name>
        <param>
          <type><ref refid="structlhash__st" kindref="compound">_LHASH</ref> *</type>
          <declname>lh</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/lhash.h" line="177" column="1"/>
      </memberdef>
      <memberdef kind="function" id="lhash_8h_1a8ff3a7908519f54e04c0bf6604ed8088" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* lh_delete</definition>
        <argsstring>(_LHASH *lh, const void *data)</argsstring>
        <name>lh_delete</name>
        <param>
          <type><ref refid="structlhash__st" kindref="compound">_LHASH</ref> *</type>
          <declname>lh</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/lhash.h" line="178" column="1"/>
      </memberdef>
      <memberdef kind="function" id="lhash_8h_1a4e65c10d0a14320186fb0f2ea946ceeb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* lh_retrieve</definition>
        <argsstring>(_LHASH *lh, const void *data)</argsstring>
        <name>lh_retrieve</name>
        <param>
          <type><ref refid="structlhash__st" kindref="compound">_LHASH</ref> *</type>
          <declname>lh</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/lhash.h" line="179" column="1"/>
      </memberdef>
      <memberdef kind="function" id="lhash_8h_1a979e778251cd07bf8462e4824ff20ead" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lh_doall</definition>
        <argsstring>(_LHASH *lh, LHASH_DOALL_FN_TYPE func)</argsstring>
        <name>lh_doall</name>
        <param>
          <type><ref refid="structlhash__st" kindref="compound">_LHASH</ref> *</type>
          <declname>lh</declname>
        </param>
        <param>
          <type>LHASH_DOALL_FN_TYPE</type>
          <declname>func</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/lhash.h" line="180" column="1"/>
      </memberdef>
      <memberdef kind="function" id="lhash_8h_1a1bd3d0993baa77cf4e76c876045c9649" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lh_doall_arg</definition>
        <argsstring>(_LHASH *lh, LHASH_DOALL_ARG_FN_TYPE func, void *arg)</argsstring>
        <name>lh_doall_arg</name>
        <param>
          <type><ref refid="structlhash__st" kindref="compound">_LHASH</ref> *</type>
          <declname>lh</declname>
        </param>
        <param>
          <type>LHASH_DOALL_ARG_FN_TYPE</type>
          <declname>func</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/lhash.h" line="181" column="1"/>
      </memberdef>
      <memberdef kind="function" id="lhash_8h_1a7bac1f37e4c347fea2158c09882f273f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned long</type>
        <definition>unsigned long lh_strhash</definition>
        <argsstring>(const char *c)</argsstring>
        <name>lh_strhash</name>
        <param>
          <type>const char *</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/lhash.h" line="182" column="1"/>
      </memberdef>
      <memberdef kind="function" id="lhash_8h_1a89aa1dae26d1c374d3f96fcb12f05204" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned long</type>
        <definition>unsigned long lh_num_items</definition>
        <argsstring>(const _LHASH *lh)</argsstring>
        <name>lh_num_items</name>
        <param>
          <type>const <ref refid="structlhash__st" kindref="compound">_LHASH</ref> *</type>
          <declname>lh</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/lhash.h" line="183" column="1"/>
      </memberdef>
      <memberdef kind="function" id="lhash_8h_1a6c7b4c3d2a0c0d7bbcd665086dbee41f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lh_stats</definition>
        <argsstring>(const _LHASH *lh, FILE *out)</argsstring>
        <name>lh_stats</name>
        <param>
          <type>const <ref refid="structlhash__st" kindref="compound">_LHASH</ref> *</type>
          <declname>lh</declname>
        </param>
        <param>
          <type>FILE *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/lhash.h" line="186" column="1"/>
      </memberdef>
      <memberdef kind="function" id="lhash_8h_1adfebd35500fe817072a9d91604e918f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lh_node_stats</definition>
        <argsstring>(const _LHASH *lh, FILE *out)</argsstring>
        <name>lh_node_stats</name>
        <param>
          <type>const <ref refid="structlhash__st" kindref="compound">_LHASH</ref> *</type>
          <declname>lh</declname>
        </param>
        <param>
          <type>FILE *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/lhash.h" line="187" column="1"/>
      </memberdef>
      <memberdef kind="function" id="lhash_8h_1a6b502a6eecfddcfa53aa8ebeb693f8cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lh_node_usage_stats</definition>
        <argsstring>(const _LHASH *lh, FILE *out)</argsstring>
        <name>lh_node_usage_stats</name>
        <param>
          <type>const <ref refid="structlhash__st" kindref="compound">_LHASH</ref> *</type>
          <declname>lh</declname>
        </param>
        <param>
          <type>FILE *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/lhash.h" line="188" column="1"/>
      </memberdef>
      <memberdef kind="function" id="lhash_8h_1af9be42e283f76d37684a4e73df810ef3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lh_stats_bio</definition>
        <argsstring>(const _LHASH *lh, BIO *out)</argsstring>
        <name>lh_stats_bio</name>
        <param>
          <type>const <ref refid="structlhash__st" kindref="compound">_LHASH</ref> *</type>
          <declname>lh</declname>
        </param>
        <param>
          <type><ref refid="structbio__st" kindref="compound">BIO</ref> *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/lhash.h" line="192" column="1"/>
      </memberdef>
      <memberdef kind="function" id="lhash_8h_1a8d45d26c18ca081300c31fdd8f6c8993" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lh_node_stats_bio</definition>
        <argsstring>(const _LHASH *lh, BIO *out)</argsstring>
        <name>lh_node_stats_bio</name>
        <param>
          <type>const <ref refid="structlhash__st" kindref="compound">_LHASH</ref> *</type>
          <declname>lh</declname>
        </param>
        <param>
          <type><ref refid="structbio__st" kindref="compound">BIO</ref> *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/lhash.h" line="193" column="1"/>
      </memberdef>
      <memberdef kind="function" id="lhash_8h_1a0159d20d0934e471be072dbb24f029e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lh_node_usage_stats_bio</definition>
        <argsstring>(const _LHASH *lh, BIO *out)</argsstring>
        <name>lh_node_usage_stats_bio</name>
        <param>
          <type>const <ref refid="structlhash__st" kindref="compound">_LHASH</ref> *</type>
          <declname>lh</declname>
        </param>
        <param>
          <type><ref refid="structbio__st" kindref="compound">BIO</ref> *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/lhash.h" line="194" column="1"/>
      </memberdef>
      <memberdef kind="function" id="lhash_8h_1a4034b42abc1682242df9969eedd0a1aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>DECLARE_LHASH_OF</definition>
        <argsstring>(OPENSSL_STRING)</argsstring>
        <name>DECLARE_LHASH_OF</name>
        <param>
          <type>OPENSSL_STRING</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/lhash.h" line="233" column="1"/>
      </memberdef>
      <memberdef kind="function" id="lhash_8h_1a345dbcc02cddbda2b2dce6d3c4d79885" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>DECLARE_LHASH_OF</definition>
        <argsstring>(OPENSSL_CSTRING)</argsstring>
        <name>DECLARE_LHASH_OF</name>
        <param>
          <type>OPENSSL_CSTRING</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/lhash.h" line="234" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>crypto/lhash/lhash.h<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Copyright<sp/>(C)<sp/>1995-1998<sp/>Eric<sp/>Young<sp/>(eay@cryptsoft.com)</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>This<sp/>package<sp/>is<sp/>an<sp/>SSL<sp/>implementation<sp/>written</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>by<sp/>Eric<sp/>Young<sp/>(eay@cryptsoft.com).</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>The<sp/>implementation<sp/>was<sp/>written<sp/>so<sp/>as<sp/>to<sp/>conform<sp/>with<sp/>Netscapes<sp/>SSL.</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>This<sp/>library<sp/>is<sp/>free<sp/>for<sp/>commercial<sp/>and<sp/>non-commercial<sp/>use<sp/>as<sp/>long<sp/>as</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>the<sp/>following<sp/>conditions<sp/>are<sp/>aheared<sp/>to.<sp/><sp/>The<sp/>following<sp/>conditions</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>apply<sp/>to<sp/>all<sp/>code<sp/>found<sp/>in<sp/>this<sp/>distribution,<sp/>be<sp/>it<sp/>the<sp/>RC4,<sp/>RSA,</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>lhash,<sp/>DES,<sp/>etc.,<sp/>code;<sp/>not<sp/>just<sp/>the<sp/>SSL<sp/>code.<sp/><sp/>The<sp/>SSL<sp/>documentation</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>included<sp/>with<sp/>this<sp/>distribution<sp/>is<sp/>covered<sp/>by<sp/>the<sp/>same<sp/>copyright<sp/>terms</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>except<sp/>that<sp/>the<sp/>holder<sp/>is<sp/>Tim<sp/>Hudson<sp/>(tjh@cryptsoft.com).</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>remains<sp/>Eric<sp/>Young&apos;s,<sp/>and<sp/>as<sp/>such<sp/>any<sp/>Copyright<sp/>notices<sp/>in</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>the<sp/>code<sp/>are<sp/>not<sp/>to<sp/>be<sp/>removed.</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>If<sp/>this<sp/>package<sp/>is<sp/>used<sp/>in<sp/>a<sp/>product,<sp/>Eric<sp/>Young<sp/>should<sp/>be<sp/>given<sp/>attribution</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>as<sp/>the<sp/>author<sp/>of<sp/>the<sp/>parts<sp/>of<sp/>the<sp/>library<sp/>used.</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>This<sp/>can<sp/>be<sp/>in<sp/>the<sp/>form<sp/>of<sp/>a<sp/>textual<sp/>message<sp/>at<sp/>program<sp/>startup<sp/>or</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>in<sp/>documentation<sp/>(online<sp/>or<sp/>textual)<sp/>provided<sp/>with<sp/>the<sp/>package.</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>1.<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>copyright</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>2.<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*<sp/>3.<sp/>All<sp/>advertising<sp/>materials<sp/>mentioning<sp/>features<sp/>or<sp/>use<sp/>of<sp/>this<sp/>software</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>must<sp/>display<sp/>the<sp/>following<sp/>acknowledgement:</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>&quot;This<sp/>product<sp/>includes<sp/>cryptographic<sp/>software<sp/>written<sp/>by</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>Eric<sp/>Young<sp/>(eay@cryptsoft.com)&quot;</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>The<sp/>word<sp/>&apos;cryptographic&apos;<sp/>can<sp/>be<sp/>left<sp/>out<sp/>if<sp/>the<sp/>rouines<sp/>from<sp/>the<sp/>library</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>being<sp/>used<sp/>are<sp/>not<sp/>cryptographic<sp/>related<sp/>:-).</highlight></codeline>
<codeline lineno="37"><highlight class="comment"><sp/>*<sp/>4.<sp/>If<sp/>you<sp/>include<sp/>any<sp/>Windows<sp/>specific<sp/>code<sp/>(or<sp/>a<sp/>derivative<sp/>thereof)<sp/>from<sp/></highlight></codeline>
<codeline lineno="38"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>the<sp/>apps<sp/>directory<sp/>(application<sp/>code)<sp/>you<sp/>must<sp/>include<sp/>an<sp/>acknowledgement:</highlight></codeline>
<codeline lineno="39"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>&quot;This<sp/>product<sp/>includes<sp/>software<sp/>written<sp/>by<sp/>Tim<sp/>Hudson<sp/>(tjh@cryptsoft.com)&quot;</highlight></codeline>
<codeline lineno="40"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="41"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>ERIC<sp/>YOUNG<sp/>``AS<sp/>IS&apos;&apos;<sp/>AND</highlight></codeline>
<codeline lineno="42"><highlight class="comment"><sp/>*<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>THE</highlight></codeline>
<codeline lineno="43"><highlight class="comment"><sp/>*<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/>*<sp/>ARE<sp/>DISCLAIMED.<sp/><sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>AUTHOR<sp/>OR<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/>*<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/>*<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/>*<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/>*<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/>*<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY</highlight></codeline>
<codeline lineno="50"><highlight class="comment"><sp/>*<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF</highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/>*<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="52"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/>*<sp/>The<sp/>licence<sp/>and<sp/>distribution<sp/>terms<sp/>for<sp/>any<sp/>publically<sp/>available<sp/>version<sp/>or</highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/>*<sp/>derivative<sp/>of<sp/>this<sp/>code<sp/>cannot<sp/>be<sp/>changed.<sp/><sp/>i.e.<sp/>this<sp/>code<sp/>cannot<sp/>simply<sp/>be</highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/>*<sp/>copied<sp/>and<sp/>put<sp/>under<sp/>another<sp/>distribution<sp/>licence</highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/>*<sp/>[including<sp/>the<sp/>GNU<sp/>Public<sp/>Licence.]</highlight></codeline>
<codeline lineno="57"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Header<sp/>for<sp/>dynamic<sp/>hash<sp/>table<sp/>routines</highlight></codeline>
<codeline lineno="60"><highlight class="comment"><sp/>*<sp/>Author<sp/>-<sp/>Eric<sp/>Young</highlight></codeline>
<codeline lineno="61"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>HEADER_LHASH_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>HEADER_LHASH_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;openssl/e_os2.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>OPENSSL_NO_FP_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>OPENSSL_NO_BIO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;openssl/bio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/><sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79" refid="structlhash__node__st" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structlhash__node__st" kindref="compound">lhash_node_st</ref></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structlhash__node__st" kindref="compound">lhash_node_st</ref><sp/>*next;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>OPENSSL_NO_HASH_COMP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>hash;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><ref refid="structlhash__node__st" kindref="compound">LHASH_NODE</ref>;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int<sp/>(*LHASH_COMP_FN_TYPE)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>long<sp/>(*LHASH_HASH_FN_TYPE)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*LHASH_DOALL_FN_TYPE)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*LHASH_DOALL_ARG_FN_TYPE)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Macros<sp/>for<sp/>declaring<sp/>and<sp/>implementing<sp/>type-safe<sp/>wrappers<sp/>for<sp/>LHASH<sp/>callbacks.</highlight></codeline>
<codeline lineno="94"><highlight class="comment"><sp/>*<sp/>This<sp/>way,<sp/>callbacks<sp/>can<sp/>be<sp/>provided<sp/>to<sp/>LHASH<sp/>structures<sp/>without<sp/>function</highlight></codeline>
<codeline lineno="95"><highlight class="comment"><sp/>*<sp/>pointer<sp/>casting<sp/>and<sp/>the<sp/>macro-defined<sp/>callbacks<sp/>provide<sp/>per-variable<sp/>casting</highlight></codeline>
<codeline lineno="96"><highlight class="comment"><sp/>*<sp/>before<sp/>deferring<sp/>to<sp/>the<sp/>underlying<sp/>type-specific<sp/>callbacks.<sp/>NB:<sp/>It<sp/>is</highlight></codeline>
<codeline lineno="97"><highlight class="comment"><sp/>*<sp/>possible<sp/>to<sp/>place<sp/>a<sp/>&quot;static&quot;<sp/>in<sp/>front<sp/>of<sp/>both<sp/>the<sp/>DECLARE<sp/>and<sp/>IMPLEMENT</highlight></codeline>
<codeline lineno="98"><highlight class="comment"><sp/>*<sp/>macros<sp/>if<sp/>the<sp/>functions<sp/>are<sp/>strictly<sp/>internal.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>First:<sp/>&quot;hash&quot;<sp/>functions<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DECLARE_LHASH_HASH_FN(name,<sp/>o_type)<sp/>\</highlight></codeline>
<codeline lineno="102"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>unsigned<sp/>long<sp/>name##_LHASH_HASH(const<sp/>void<sp/>*);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>IMPLEMENT_LHASH_HASH_FN(name,<sp/>o_type)<sp/>\</highlight></codeline>
<codeline lineno="104"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>unsigned<sp/>long<sp/>name##_LHASH_HASH(const<sp/>void<sp/>*arg)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="105"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>o_type<sp/>*a<sp/>=<sp/>arg;<sp/>\</highlight></codeline>
<codeline lineno="106"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>name##_hash(a);<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LHASH_HASH_FN(name)<sp/>name##_LHASH_HASH</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Second:<sp/>&quot;compare&quot;<sp/>functions<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DECLARE_LHASH_COMP_FN(name,<sp/>o_type)<sp/>\</highlight></codeline>
<codeline lineno="111"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>int<sp/>name##_LHASH_COMP(const<sp/>void<sp/>*,<sp/>const<sp/>void<sp/>*);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>IMPLEMENT_LHASH_COMP_FN(name,<sp/>o_type)<sp/>\</highlight></codeline>
<codeline lineno="113"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>int<sp/>name##_LHASH_COMP(const<sp/>void<sp/>*arg1,<sp/>const<sp/>void<sp/>*arg2)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="114"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>o_type<sp/>*a<sp/>=<sp/>arg1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="115"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>o_type<sp/>*b<sp/>=<sp/>arg2;<sp/>\</highlight></codeline>
<codeline lineno="116"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>name##_cmp(a,b);<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LHASH_COMP_FN(name)<sp/>name##_LHASH_COMP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Third:<sp/>&quot;doall&quot;<sp/>functions<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DECLARE_LHASH_DOALL_FN(name,<sp/>o_type)<sp/>\</highlight></codeline>
<codeline lineno="121"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>void<sp/>name##_LHASH_DOALL(void<sp/>*);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>IMPLEMENT_LHASH_DOALL_FN(name,<sp/>o_type)<sp/>\</highlight></codeline>
<codeline lineno="123"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>void<sp/>name##_LHASH_DOALL(void<sp/>*arg)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="124"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>o_type<sp/>*a<sp/>=<sp/>arg;<sp/>\</highlight></codeline>
<codeline lineno="125"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name##_doall(a);<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LHASH_DOALL_FN(name)<sp/>name##_LHASH_DOALL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Fourth:<sp/>&quot;doall_arg&quot;<sp/>functions<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DECLARE_LHASH_DOALL_ARG_FN(name,<sp/>o_type,<sp/>a_type)<sp/>\</highlight></codeline>
<codeline lineno="130"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>void<sp/>name##_LHASH_DOALL_ARG(void<sp/>*,<sp/>void<sp/>*);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>IMPLEMENT_LHASH_DOALL_ARG_FN(name,<sp/>o_type,<sp/>a_type)<sp/>\</highlight></codeline>
<codeline lineno="132"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>void<sp/>name##_LHASH_DOALL_ARG(void<sp/>*arg1,<sp/>void<sp/>*arg2)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="133"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>o_type<sp/>*a<sp/>=<sp/>arg1;<sp/>\</highlight></codeline>
<codeline lineno="134"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a_type<sp/>*b<sp/>=<sp/>arg2;<sp/>\</highlight></codeline>
<codeline lineno="135"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name##_doall_arg(a,<sp/>b);<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LHASH_DOALL_ARG_FN(name)<sp/>name##_LHASH_DOALL_ARG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138" refid="structlhash__st" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structlhash__st" kindref="compound">lhash_st</ref></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structlhash__node__st" kindref="compound">LHASH_NODE</ref><sp/>**b;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>LHASH_COMP_FN_TYPE<sp/>comp;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>LHASH_HASH_FN_TYPE<sp/>hash;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_nodes;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_alloc_nodes;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>p;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pmax;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>up_load;<sp/></highlight><highlight class="comment">/*<sp/>load<sp/>times<sp/>256<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>down_load;<sp/></highlight><highlight class="comment">/*<sp/>load<sp/>times<sp/>256<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>num_items;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>num_expands;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>num_expand_reallocs;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>num_contracts;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>num_contract_reallocs;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>num_hash_calls;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>num_comp_calls;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>num_insert;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>num_replace;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>num_delete;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>num_no_delete;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>num_retrieve;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>num_retrieve_miss;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>num_hash_comps;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>error;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><ref refid="structlhash__st" kindref="compound">_LHASH</ref>;<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Do<sp/>not<sp/>use<sp/>_LHASH<sp/>directly,<sp/>use<sp/>LHASH_OF</highlight></codeline>
<codeline lineno="167"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>and<sp/>friends<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LH_LOAD_MULT<sp/><sp/><sp/><sp/>256</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Indicates<sp/>a<sp/>malloc()<sp/>error<sp/>in<sp/>the<sp/>last<sp/>call,<sp/>this<sp/>is<sp/>only<sp/>bad</highlight></codeline>
<codeline lineno="172"><highlight class="comment"><sp/>*<sp/>in<sp/>lh_insert().<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>lh_error(lh)<sp/><sp/><sp/><sp/>((lh)-&gt;error)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><ref refid="structlhash__st" kindref="compound">_LHASH</ref><sp/>*lh_new(LHASH_HASH_FN_TYPE<sp/>h,<sp/>LHASH_COMP_FN_TYPE<sp/>c);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>lh_free(<ref refid="structlhash__st" kindref="compound">_LHASH</ref><sp/>*lh);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*lh_insert(<ref refid="structlhash__st" kindref="compound">_LHASH</ref><sp/>*lh,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*lh_delete(<ref refid="structlhash__st" kindref="compound">_LHASH</ref><sp/>*lh,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*lh_retrieve(<ref refid="structlhash__st" kindref="compound">_LHASH</ref><sp/>*lh,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>lh_doall(<ref refid="structlhash__st" kindref="compound">_LHASH</ref><sp/>*lh,<sp/>LHASH_DOALL_FN_TYPE<sp/>func);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>lh_doall_arg(<ref refid="structlhash__st" kindref="compound">_LHASH</ref><sp/>*lh,<sp/>LHASH_DOALL_ARG_FN_TYPE<sp/>func,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*arg);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>lh_strhash(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*c);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>lh_num_items(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structlhash__st" kindref="compound">_LHASH</ref><sp/>*lh);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>OPENSSL_NO_FP_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>lh_stats(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structlhash__st" kindref="compound">_LHASH</ref><sp/>*lh,<sp/>FILE<sp/>*out);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>lh_node_stats(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structlhash__st" kindref="compound">_LHASH</ref><sp/>*lh,<sp/>FILE<sp/>*out);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>lh_node_usage_stats(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structlhash__st" kindref="compound">_LHASH</ref><sp/>*lh,<sp/>FILE<sp/>*out);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>OPENSSL_NO_BIO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>lh_stats_bio(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structlhash__st" kindref="compound">_LHASH</ref><sp/>*lh,<sp/><ref refid="structbio__st" kindref="compound">BIO</ref><sp/>*out);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>lh_node_stats_bio(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structlhash__st" kindref="compound">_LHASH</ref><sp/>*lh,<sp/><ref refid="structbio__st" kindref="compound">BIO</ref><sp/>*out);</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>lh_node_usage_stats_bio(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structlhash__st" kindref="compound">_LHASH</ref><sp/>*lh,<sp/><ref refid="structbio__st" kindref="compound">BIO</ref><sp/>*out);</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Type<sp/>checking...<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LHASH_OF(type)<sp/>struct<sp/>lhash_st_##type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DECLARE_LHASH_OF(type)<sp/>LHASH_OF(type)<sp/>{<sp/>int<sp/>dummy;<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CHECKED_LHASH_OF(type,lh)<sp/>\</highlight></codeline>
<codeline lineno="204"><highlight class="preprocessor"><sp/><sp/>((_LHASH<sp/>*)CHECKED_PTR_OF(LHASH_OF(type),lh))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Define<sp/>wrapper<sp/>functions.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LHM_lh_new(type,<sp/>name)<sp/>\</highlight></codeline>
<codeline lineno="208"><highlight class="preprocessor"><sp/><sp/>((LHASH_OF(type)<sp/>*)lh_new(LHASH_HASH_FN(name),<sp/>LHASH_COMP_FN(name)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LHM_lh_error(type,<sp/>lh)<sp/>\</highlight></codeline>
<codeline lineno="210"><highlight class="preprocessor"><sp/><sp/>lh_error(CHECKED_LHASH_OF(type,lh))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LHM_lh_insert(type,<sp/>lh,<sp/>inst)<sp/>\</highlight></codeline>
<codeline lineno="212"><highlight class="preprocessor"><sp/><sp/>((type<sp/>*)lh_insert(CHECKED_LHASH_OF(type,<sp/>lh),<sp/>\</highlight></codeline>
<codeline lineno="213"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CHECKED_PTR_OF(type,<sp/>inst)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LHM_lh_retrieve(type,<sp/>lh,<sp/>inst)<sp/>\</highlight></codeline>
<codeline lineno="215"><highlight class="preprocessor"><sp/><sp/>((type<sp/>*)lh_retrieve(CHECKED_LHASH_OF(type,<sp/>lh),<sp/>\</highlight></codeline>
<codeline lineno="216"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CHECKED_PTR_OF(type,<sp/>inst)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LHM_lh_delete(type,<sp/>lh,<sp/>inst)<sp/>\</highlight></codeline>
<codeline lineno="218"><highlight class="preprocessor"><sp/><sp/>((type<sp/>*)lh_delete(CHECKED_LHASH_OF(type,<sp/>lh),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="219"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CHECKED_PTR_OF(type,<sp/>inst)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LHM_lh_doall(type,<sp/>lh,fn)<sp/>lh_doall(CHECKED_LHASH_OF(type,<sp/>lh),<sp/>fn)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LHM_lh_doall_arg(type,<sp/>lh,<sp/>fn,<sp/>arg_type,<sp/>arg)<sp/>\</highlight></codeline>
<codeline lineno="222"><highlight class="preprocessor"><sp/><sp/>lh_doall_arg(CHECKED_LHASH_OF(type,<sp/>lh),<sp/>fn,<sp/>CHECKED_PTR_OF(arg_type,<sp/>arg))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LHM_lh_num_items(type,<sp/>lh)<sp/>lh_num_items(CHECKED_LHASH_OF(type,<sp/>lh))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LHM_lh_down_load(type,<sp/>lh)<sp/>(CHECKED_LHASH_OF(type,<sp/>lh)-&gt;down_load)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LHM_lh_node_stats_bio(type,<sp/>lh,<sp/>out)<sp/>\</highlight></codeline>
<codeline lineno="226"><highlight class="preprocessor"><sp/><sp/>lh_node_stats_bio(CHECKED_LHASH_OF(type,<sp/>lh),<sp/>out)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LHM_lh_node_usage_stats_bio(type,<sp/>lh,<sp/>out)<sp/>\</highlight></codeline>
<codeline lineno="228"><highlight class="preprocessor"><sp/><sp/>lh_node_usage_stats_bio(CHECKED_LHASH_OF(type,<sp/>lh),<sp/>out)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LHM_lh_stats_bio(type,<sp/>lh,<sp/>out)<sp/>\</highlight></codeline>
<codeline lineno="230"><highlight class="preprocessor"><sp/><sp/>lh_stats_bio(CHECKED_LHASH_OF(type,<sp/>lh),<sp/>out)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LHM_lh_free(type,<sp/>lh)<sp/>lh_free(CHECKED_LHASH_OF(type,<sp/>lh))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal">DECLARE_LHASH_OF(OPENSSL_STRING);</highlight></codeline>
<codeline lineno="234"><highlight class="normal">DECLARE_LHASH_OF(OPENSSL_CSTRING);</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/><sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal">}</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="thirdparty/openssl/include/openssl/lhash.h"/>
  </compounddef>
</doxygen>
