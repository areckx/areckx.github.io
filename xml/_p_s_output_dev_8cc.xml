<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="_p_s_output_dev_8cc" kind="file" language="C++">
    <compoundname>PSOutputDev.cc</compoundname>
    <includes local="no">config.h</includes>
    <includes local="no">stdio.h</includes>
    <includes local="no">stddef.h</includes>
    <includes local="no">stdarg.h</includes>
    <includes local="no">signal.h</includes>
    <includes local="no">math.h</includes>
    <includes local="no">limits.h</includes>
    <includes refid="_goo_string_8h" local="yes">goo/GooString.h</includes>
    <includes refid="_goo_list_8h" local="yes">goo/GooList.h</includes>
    <includes refid="_goo_hash_8h" local="yes">goo/GooHash.h</includes>
    <includes refid="poppler-config_8h" local="yes">poppler-config.h</includes>
    <includes refid="_global_params_8h" local="yes">GlobalParams.h</includes>
    <includes refid="_object_8h" local="yes">Object.h</includes>
    <includes refid="_error_8h" local="yes">Error.h</includes>
    <includes refid="_function_8h" local="yes">Function.h</includes>
    <includes refid="_gfx_8h" local="yes">Gfx.h</includes>
    <includes refid="_gfx_state_8h" local="yes">GfxState.h</includes>
    <includes refid="_gfx_font_8h" local="yes">GfxFont.h</includes>
    <includes refid="_unicode_map_8h" local="yes">UnicodeMap.h</includes>
    <includes refid="_fo_fi_type1_c_8h" local="no">fofi/FoFiType1C.h</includes>
    <includes refid="_fo_fi_true_type_8h" local="no">fofi/FoFiTrueType.h</includes>
    <includes refid="_catalog_8h" local="yes">Catalog.h</includes>
    <includes refid="thirdparty_2poppler_2poppler_2page_8h" local="yes">Page.h</includes>
    <includes refid="_stream_8h" local="yes">Stream.h</includes>
    <includes refid="_annot_8h" local="yes">Annot.h</includes>
    <includes refid="_x_ref_8h" local="yes">XRef.h</includes>
    <includes refid="_pre_scan_output_dev_8h" local="yes">PreScanOutputDev.h</includes>
    <includes refid="_file_spec_8h" local="yes">FileSpec.h</includes>
    <includes refid="_char_code_to_unicode_8h" local="yes">CharCodeToUnicode.h</includes>
    <includes refid="_p_s_output_dev_8h" local="yes">PSOutputDev.h</includes>
    <includes refid="_p_d_f_doc_8h" local="yes">PDFDoc.h</includes>
    <incdepgraph>
      <node id="89439">
        <label>stdarg.h</label>
      </node>
      <node id="89463">
        <label>Function.h</label>
        <link refid="_function_8h_source"/>
        <childnode refid="89445" relation="include">
        </childnode>
        <childnode refid="89454" relation="include">
        </childnode>
        <childnode refid="89455" relation="include">
        </childnode>
      </node>
      <node id="89450">
        <label>assert.h</label>
      </node>
      <node id="89477">
        <label>XRef.h</label>
        <link refid="_x_ref_8h_source"/>
        <childnode refid="89446" relation="include">
        </childnode>
        <childnode refid="89445" relation="include">
        </childnode>
        <childnode refid="89452" relation="include">
        </childnode>
        <childnode refid="89454" relation="include">
        </childnode>
        <childnode refid="89462" relation="include">
        </childnode>
        <childnode refid="89468" relation="include">
        </childnode>
      </node>
      <node id="89465">
        <label>GfxState.h</label>
        <link refid="_gfx_state_8h_source"/>
        <childnode refid="89446" relation="include">
        </childnode>
        <childnode refid="89445" relation="include">
        </childnode>
        <childnode refid="89454" relation="include">
        </childnode>
        <childnode refid="89463" relation="include">
        </childnode>
        <childnode refid="89450" relation="include">
        </childnode>
        <childnode refid="89466" relation="include">
        </childnode>
      </node>
      <node id="89469">
        <label>GfxFont.h</label>
        <link refid="_gfx_font_8h_source"/>
        <childnode refid="89445" relation="include">
        </childnode>
        <childnode refid="89443" relation="include">
        </childnode>
        <childnode refid="89454" relation="include">
        </childnode>
        <childnode refid="89451" relation="include">
        </childnode>
      </node>
      <node id="89444">
        <label>stdlib.h</label>
      </node>
      <node id="89457">
        <label>goo/gmem.h</label>
        <link refid="gmem_8h_source"/>
        <childnode refid="89437" relation="include">
        </childnode>
        <childnode refid="89446" relation="include">
        </childnode>
      </node>
      <node id="89483">
        <label>PDFDoc.h</label>
        <link refid="_p_d_f_doc_8h_source"/>
        <childnode refid="89446" relation="include">
        </childnode>
        <childnode refid="89437" relation="include">
        </childnode>
        <childnode refid="89452" relation="include">
        </childnode>
        <childnode refid="89477" relation="include">
        </childnode>
        <childnode refid="89474" relation="include">
        </childnode>
        <childnode refid="89475" relation="include">
        </childnode>
        <childnode refid="89476" relation="include">
        </childnode>
        <childnode refid="89484" relation="include">
        </childnode>
        <childnode refid="89485" relation="include">
        </childnode>
        <childnode refid="89462" relation="include">
        </childnode>
      </node>
      <node id="89460">
        <label>Array.h</label>
        <link refid="_array_8h_source"/>
        <childnode refid="89446" relation="include">
        </childnode>
        <childnode refid="89454" relation="include">
        </childnode>
        <childnode refid="89452" relation="include">
        </childnode>
      </node>
      <node id="89474">
        <label>Catalog.h</label>
        <link refid="_catalog_8h_source"/>
        <childnode refid="89446" relation="include">
        </childnode>
        <childnode refid="89454" relation="include">
        </childnode>
        <childnode refid="89452" relation="include">
        </childnode>
        <childnode refid="89468" relation="include">
        </childnode>
      </node>
      <node id="89449">
        <label>GlobalParams.h</label>
        <link refid="_global_params_8h_source"/>
        <childnode refid="89450" relation="include">
        </childnode>
        <childnode refid="89446" relation="include">
        </childnode>
        <childnode refid="89437" relation="include">
        </childnode>
        <childnode refid="89445" relation="include">
        </childnode>
        <childnode refid="89451" relation="include">
        </childnode>
        <childnode refid="89452" relation="include">
        </childnode>
      </node>
      <node id="89466">
        <label>map</label>
      </node>
      <node id="89459">
        <label>Error.h</label>
        <link refid="_error_8h_source"/>
        <childnode refid="89439" relation="include">
        </childnode>
        <childnode refid="89446" relation="include">
        </childnode>
        <childnode refid="89445" relation="include">
        </childnode>
        <childnode refid="89443" relation="include">
        </childnode>
      </node>
      <node id="89464">
        <label>Gfx.h</label>
        <link refid="_gfx_8h_source"/>
        <childnode refid="89446" relation="include">
        </childnode>
        <childnode refid="89445" relation="include">
        </childnode>
        <childnode refid="89447" relation="include">
        </childnode>
        <childnode refid="89465" relation="include">
        </childnode>
        <childnode refid="89454" relation="include">
        </childnode>
        <childnode refid="89467" relation="include">
        </childnode>
        <childnode refid="89468" relation="include">
        </childnode>
      </node>
      <node id="89447">
        <label>goo/GooList.h</label>
        <link refid="_goo_list_8h_source"/>
        <childnode refid="89445" relation="include">
        </childnode>
      </node>
      <node id="89461">
        <label>Dict.h</label>
        <link refid="_dict_8h_source"/>
        <childnode refid="89446" relation="include">
        </childnode>
        <childnode refid="89454" relation="include">
        </childnode>
        <childnode refid="89452" relation="include">
        </childnode>
      </node>
      <node id="89476">
        <label>Annot.h</label>
        <link refid="_annot_8h_source"/>
        <childnode refid="89454" relation="include">
        </childnode>
      </node>
      <node id="89438">
        <label>stddef.h</label>
      </node>
      <node id="89475">
        <label>Page.h</label>
        <link refid="thirdparty_2poppler_2poppler_2page_8h_source"/>
        <childnode refid="89446" relation="include">
        </childnode>
        <childnode refid="89454" relation="include">
        </childnode>
        <childnode refid="89452" relation="include">
        </childnode>
      </node>
      <node id="89480">
        <label>FileSpec.h</label>
        <link refid="_file_spec_8h_source"/>
        <childnode refid="89454" relation="include">
        </childnode>
      </node>
      <node id="89442">
        <label>limits.h</label>
      </node>
      <node id="89446">
        <label>poppler-config.h</label>
        <link refid="poppler-config_8h_source"/>
        <childnode refid="89437" relation="include">
        </childnode>
      </node>
      <node id="89458">
        <label>goo/GooLikely.h</label>
        <link refid="_goo_likely_8h_source"/>
      </node>
      <node id="89462">
        <label>Stream.h</label>
        <link refid="_stream_8h_source"/>
        <childnode refid="89446" relation="include">
        </childnode>
        <childnode refid="89437" relation="include">
        </childnode>
        <childnode refid="89445" relation="include">
        </childnode>
        <childnode refid="89454" relation="include">
        </childnode>
        <childnode refid="89452" relation="include">
        </childnode>
      </node>
      <node id="89453">
        <label>pthread.h</label>
      </node>
      <node id="89467">
        <label>PopplerCache.h</label>
        <link refid="_poppler_cache_8h_source"/>
        <childnode refid="89454" relation="include">
        </childnode>
      </node>
      <node id="89472">
        <label>FoFiBase.h</label>
        <link refid="_fo_fi_base_8h_source"/>
        <childnode refid="89445" relation="include">
        </childnode>
      </node>
      <node id="89456">
        <label>string.h</label>
      </node>
      <node id="89443">
        <label>goo/GooString.h</label>
        <link refid="_goo_string_8h_source"/>
        <childnode refid="89442" relation="include">
        </childnode>
        <childnode refid="89439" relation="include">
        </childnode>
        <childnode refid="89444" relation="include">
        </childnode>
        <childnode refid="89445" relation="include">
        </childnode>
      </node>
      <node id="89484">
        <label>Form.h</label>
        <link refid="_form_8h_source"/>
        <childnode refid="89454" relation="include">
        </childnode>
        <childnode refid="89476" relation="include">
        </childnode>
        <childnode refid="89455" relation="include">
        </childnode>
      </node>
      <node id="89454">
        <label>Object.h</label>
        <link refid="_object_8h_source"/>
        <childnode refid="89455" relation="include">
        </childnode>
        <childnode refid="89437" relation="include">
        </childnode>
        <childnode refid="89456" relation="include">
        </childnode>
        <childnode refid="89445" relation="include">
        </childnode>
        <childnode refid="89457" relation="include">
        </childnode>
        <childnode refid="89443" relation="include">
        </childnode>
        <childnode refid="89458" relation="include">
        </childnode>
        <childnode refid="89459" relation="include">
        </childnode>
        <childnode refid="89460" relation="include">
        </childnode>
        <childnode refid="89461" relation="include">
        </childnode>
        <childnode refid="89462" relation="include">
        </childnode>
      </node>
      <node id="89468">
        <label>vector</label>
      </node>
      <node id="89440">
        <label>signal.h</label>
      </node>
      <node id="89473">
        <label>fofi/FoFiTrueType.h</label>
        <link refid="_fo_fi_true_type_8h_source"/>
        <childnode refid="89438" relation="include">
        </childnode>
        <childnode refid="89445" relation="include">
        </childnode>
        <childnode refid="89472" relation="include">
        </childnode>
      </node>
      <node id="89482">
        <label>PSOutputDev.h</label>
        <link refid="_p_s_output_dev_8h_source"/>
        <childnode refid="89446" relation="include">
        </childnode>
        <childnode refid="89438" relation="include">
        </childnode>
        <childnode refid="89454" relation="include">
        </childnode>
        <childnode refid="89465" relation="include">
        </childnode>
        <childnode refid="89449" relation="include">
        </childnode>
        <childnode refid="89479" relation="include">
        </childnode>
        <childnode refid="89455" relation="include">
        </childnode>
        <childnode refid="89466" relation="include">
        </childnode>
        <childnode refid="89468" relation="include">
        </childnode>
      </node>
      <node id="89479">
        <label>OutputDev.h</label>
        <link refid="_output_dev_8h_source"/>
        <childnode refid="89446" relation="include">
        </childnode>
        <childnode refid="89445" relation="include">
        </childnode>
        <childnode refid="89451" relation="include">
        </childnode>
        <childnode refid="89454" relation="include">
        </childnode>
        <childnode refid="89467" relation="include">
        </childnode>
      </node>
      <node id="89435">
        <label>thirdparty/poppler/poppler/PSOutputDev.cc</label>
        <link refid="_p_s_output_dev_8cc"/>
        <childnode refid="89436" relation="include">
        </childnode>
        <childnode refid="89437" relation="include">
        </childnode>
        <childnode refid="89438" relation="include">
        </childnode>
        <childnode refid="89439" relation="include">
        </childnode>
        <childnode refid="89440" relation="include">
        </childnode>
        <childnode refid="89441" relation="include">
        </childnode>
        <childnode refid="89442" relation="include">
        </childnode>
        <childnode refid="89443" relation="include">
        </childnode>
        <childnode refid="89447" relation="include">
        </childnode>
        <childnode refid="89448" relation="include">
        </childnode>
        <childnode refid="89446" relation="include">
        </childnode>
        <childnode refid="89449" relation="include">
        </childnode>
        <childnode refid="89454" relation="include">
        </childnode>
        <childnode refid="89459" relation="include">
        </childnode>
        <childnode refid="89463" relation="include">
        </childnode>
        <childnode refid="89464" relation="include">
        </childnode>
        <childnode refid="89465" relation="include">
        </childnode>
        <childnode refid="89469" relation="include">
        </childnode>
        <childnode refid="89470" relation="include">
        </childnode>
        <childnode refid="89471" relation="include">
        </childnode>
        <childnode refid="89473" relation="include">
        </childnode>
        <childnode refid="89474" relation="include">
        </childnode>
        <childnode refid="89475" relation="include">
        </childnode>
        <childnode refid="89462" relation="include">
        </childnode>
        <childnode refid="89476" relation="include">
        </childnode>
        <childnode refid="89477" relation="include">
        </childnode>
        <childnode refid="89478" relation="include">
        </childnode>
        <childnode refid="89480" relation="include">
        </childnode>
        <childnode refid="89481" relation="include">
        </childnode>
        <childnode refid="89482" relation="include">
        </childnode>
        <childnode refid="89483" relation="include">
        </childnode>
      </node>
      <node id="89441">
        <label>math.h</label>
      </node>
      <node id="89471">
        <label>fofi/FoFiType1C.h</label>
        <link refid="_fo_fi_type1_c_8h_source"/>
        <childnode refid="89445" relation="include">
        </childnode>
        <childnode refid="89472" relation="include">
        </childnode>
      </node>
      <node id="89452">
        <label>goo/GooMutex.h</label>
        <link refid="_goo_mutex_8h_source"/>
        <childnode refid="89453" relation="include">
        </childnode>
      </node>
      <node id="89451">
        <label>CharTypes.h</label>
        <link refid="_char_types_8h_source"/>
      </node>
      <node id="89445">
        <label>gtypes.h</label>
        <link refid="gtypes_8h_source"/>
        <childnode refid="89446" relation="include">
        </childnode>
      </node>
      <node id="89478">
        <label>PreScanOutputDev.h</label>
        <link refid="_pre_scan_output_dev_8h_source"/>
        <childnode refid="89445" relation="include">
        </childnode>
        <childnode refid="89454" relation="include">
        </childnode>
        <childnode refid="89465" relation="include">
        </childnode>
        <childnode refid="89449" relation="include">
        </childnode>
        <childnode refid="89479" relation="include">
        </childnode>
      </node>
      <node id="89470">
        <label>UnicodeMap.h</label>
        <link refid="_unicode_map_8h_source"/>
        <childnode refid="89446" relation="include">
        </childnode>
        <childnode refid="89445" relation="include">
        </childnode>
        <childnode refid="89451" relation="include">
        </childnode>
        <childnode refid="89452" relation="include">
        </childnode>
      </node>
      <node id="89455">
        <label>set</label>
      </node>
      <node id="89436">
        <label>config.h</label>
      </node>
      <node id="89485">
        <label>OptionalContent.h</label>
        <link refid="_optional_content_8h_source"/>
        <childnode refid="89454" relation="include">
        </childnode>
        <childnode refid="89451" relation="include">
        </childnode>
      </node>
      <node id="89437">
        <label>stdio.h</label>
      </node>
      <node id="89448">
        <label>goo/GooHash.h</label>
        <link refid="_goo_hash_8h_source"/>
        <childnode refid="89445" relation="include">
        </childnode>
      </node>
      <node id="89481">
        <label>CharCodeToUnicode.h</label>
        <link refid="_char_code_to_unicode_8h_source"/>
        <childnode refid="89446" relation="include">
        </childnode>
        <childnode refid="89451" relation="include">
        </childnode>
        <childnode refid="89445" relation="include">
        </childnode>
        <childnode refid="89452" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innerclass refid="struct_p_s_subst_font" prot="public">PSSubstFont</innerclass>
    <innerclass refid="struct_p_s_t1_font_name" prot="public">PST1FontName</innerclass>
    <innerclass refid="struct_p_s_font8_info" prot="public">PSFont8Info</innerclass>
    <innerclass refid="struct_p_s_font16_enc" prot="public">PSFont16Enc</innerclass>
    <innerclass refid="class_p_s_out_custom_color" prot="public">PSOutCustomColor</innerclass>
    <innerclass refid="struct_p_s_out_img_clip_rect" prot="public">PSOutImgClipRect</innerclass>
    <innerclass refid="struct_p_s_out_paper_size" prot="public">PSOutPaperSize</innerclass>
    <innerclass refid="class_device_n_recoder" prot="public">DeviceNRecoder</innerclass>
    <innerclass refid="struct_standard_media" prot="public">StandardMedia</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="_p_s_output_dev_8cc_1ae71449b1cc6e6250b91f539153a7a0d3" prot="public" static="no">
        <name>M_PI</name>
        <initializer>3.14159265358979323846</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/PSOutputDev.cc" line="94" column="9" bodyfile="thirdparty/poppler/poppler/PSOutputDev.cc" bodystart="94" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_p_s_output_dev_8cc_1ad067d0a8c3562e82f0399036e248d0a3" prot="public" static="no">
        <name>rasterizationSliceSize</name>
        <initializer>20000000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/PSOutputDev.cc" line="100" column="9" bodyfile="thirdparty/poppler/poppler/PSOutputDev.cc" bodystart="100" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_p_s_output_dev_8cc_1aa0c95dd43c926409e4bc824367acb857" prot="public" static="no">
        <name>psProcessCyan</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/PSOutputDev.cc" line="930" column="9" bodyfile="thirdparty/poppler/poppler/PSOutputDev.cc" bodystart="930" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_p_s_output_dev_8cc_1ac855941c59a722b339d355e82bd3cced" prot="public" static="no">
        <name>psProcessMagenta</name>
        <initializer>2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/PSOutputDev.cc" line="931" column="9" bodyfile="thirdparty/poppler/poppler/PSOutputDev.cc" bodystart="931" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_p_s_output_dev_8cc_1a54d0eb6a3e504e5362f2c0f8b8782a66" prot="public" static="no">
        <name>psProcessYellow</name>
        <initializer>4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/PSOutputDev.cc" line="932" column="9" bodyfile="thirdparty/poppler/poppler/PSOutputDev.cc" bodystart="932" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_p_s_output_dev_8cc_1a775744082891ea2fe1408aa713ddf2c6" prot="public" static="no">
        <name>psProcessBlack</name>
        <initializer>8</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/PSOutputDev.cc" line="933" column="9" bodyfile="thirdparty/poppler/poppler/PSOutputDev.cc" bodystart="933" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_p_s_output_dev_8cc_1ae8c25e069e473dd80b63c78ab55966df" prot="public" static="no">
        <name>psProcessCMYK</name>
        <initializer>15</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/PSOutputDev.cc" line="934" column="9" bodyfile="thirdparty/poppler/poppler/PSOutputDev.cc" bodystart="934" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="_p_s_output_dev_8cc_1a37643eb46426d831beeecfe58d45eb91" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* SignalFunc) (int)</definition>
        <argsstring>)(int)</argsstring>
        <name>SignalFunc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/PSOutputDev.cc" line="1075" column="1" bodyfile="thirdparty/poppler/poppler/PSOutputDev.cc" bodystart="1075" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="_p_s_output_dev_8cc_1a4e246acb154a729b68d3451e917761aa" prot="public" static="yes" mutable="no">
        <type>const char *</type>
        <definition>const char* prolog[]</definition>
        <argsstring>[]</argsstring>
        <name>prolog</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/PSOutputDev.cc" line="113" column="1" bodyfile="thirdparty/poppler/poppler/PSOutputDev.cc" bodystart="113" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_p_s_output_dev_8cc_1a1d656f37464e57c0f98d4b7cbf34920f" prot="public" static="yes" mutable="no">
        <type>const char *</type>
        <definition>const char* cmapProlog[]</definition>
        <argsstring>[]</argsstring>
        <name>cmapProlog</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/PSOutputDev.cc" line="834" column="1" bodyfile="thirdparty/poppler/poppler/PSOutputDev.cc" bodystart="834" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_p_s_output_dev_8cc_1ab2603076727655cc47e5eaa36c7eb6dc" prot="public" static="yes" mutable="no">
        <type><ref refid="struct_p_s_subst_font" kindref="compound">PSSubstFont</ref></type>
        <definition>PSSubstFont psBase14SubstFonts[14]</definition>
        <argsstring>[14]</argsstring>
        <name>psBase14SubstFonts</name>
        <initializer>= {
  {&quot;Courier&quot;,               0.600},
  {&quot;Courier-Oblique&quot;,       0.600},
  {&quot;Courier-Bold&quot;,          0.600},
  {&quot;Courier-BoldOblique&quot;,   0.600},
  {&quot;Helvetica&quot;,             0.833},
  {&quot;Helvetica-Oblique&quot;,     0.833},
  {&quot;Helvetica-Bold&quot;,        0.889},
  {&quot;Helvetica-BoldOblique&quot;, 0.889},
  {&quot;Times-Roman&quot;,           0.788},
  {&quot;Times-Italic&quot;,          0.722},
  {&quot;Times-Bold&quot;,            0.833},
  {&quot;Times-BoldItalic&quot;,      0.778},
  
  {&quot;Symbol&quot;,                0},
  {&quot;ZapfDingbats&quot;,          0}
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/PSOutputDev.cc" line="889" column="1" bodyfile="thirdparty/poppler/poppler/PSOutputDev.cc" bodystart="889" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_p_s_output_dev_8cc_1ac20edea238ac8f197db5769ccdd1e96a" prot="public" static="yes" mutable="no">
        <type>const <ref refid="struct_standard_media" kindref="compound">StandardMedia</ref></type>
        <definition>const StandardMedia standardMedia[]</definition>
        <argsstring>[]</argsstring>
        <name>standardMedia</name>
        <initializer>=
{
    { &quot;A0&quot;,       2384, 3371 },
    { &quot;A1&quot;,       1685, 2384 },
    { &quot;A2&quot;,       1190, 1684 },
    { &quot;A3&quot;,        842, 1190 },
    { &quot;A4&quot;,        595,  842 },
    { &quot;A5&quot;,        420,  595 },
    { &quot;B4&quot;,        729, 1032 },
    { &quot;B5&quot;,        516,  729 },
    { &quot;Letter&quot;,    612,  792 },
    { &quot;Tabloid&quot;,   792, 1224 },
    { &quot;Ledger&quot;,   1224,  792 },
    { &quot;Legal&quot;,     612, 1008 },
    { &quot;Statement&quot;, 396,  612 },
    { &quot;Executive&quot;, 540,  720 },
    { &quot;Folio&quot;,     612,  936 },
    { &quot;Quarto&quot;,    610,  780 },
    { &quot;10x14&quot;,     720, 1008 },
    { NULL,          0,    0 }
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/PSOutputDev.cc" line="1197" column="1" bodyfile="thirdparty/poppler/poppler/PSOutputDev.cc" bodystart="1197" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="_p_s_output_dev_8cc_1af466571a33f7e2a05e1f51ae516df926" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void outputToFile</definition>
        <argsstring>(void *stream, const char *data, int len)</argsstring>
        <name>outputToFile</name>
        <param>
          <type>void *</type>
          <declname>stream</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>int</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/PSOutputDev.cc" line="1078" column="1" bodyfile="thirdparty/poppler/poppler/PSOutputDev.cc" bodystart="1078" bodyend="1080"/>
      </memberdef>
      <memberdef kind="function" id="_p_s_output_dev_8cc_1a696fbeaa33fde78a680de704b74af17e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool pageDimensionEqual</definition>
        <argsstring>(int a, int b)</argsstring>
        <name>pageDimensionEqual</name>
        <param>
          <type>int</type>
          <declname>a</declname>
        </param>
        <param>
          <type>int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/PSOutputDev.cc" line="1220" column="1" bodyfile="thirdparty/poppler/poppler/PSOutputDev.cc" bodystart="1220" bodyend="1222"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//========================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>PSOutputDev.cc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>1996-2013<sp/>Glyph<sp/>&amp;<sp/>Cog,<sp/>LLC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//========================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//========================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Modified<sp/>under<sp/>the<sp/>Poppler<sp/>project<sp/>-<sp/>http://poppler.freedesktop.org</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>All<sp/>changes<sp/>made<sp/>under<sp/>the<sp/>Poppler<sp/>project<sp/>to<sp/>this<sp/>file<sp/>are<sp/>licensed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>under<sp/>GPL<sp/>version<sp/>2<sp/>or<sp/>later</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2005<sp/>Martin<sp/>Kretzschmar<sp/>&lt;martink@gnome.org&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2005,<sp/>2006<sp/>Kristian<sp/>Høgsberg<sp/>&lt;krh@redhat.com&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2006-2009,<sp/>2011-2013,<sp/>2015,<sp/>2016<sp/>Albert<sp/>Astals<sp/>Cid<sp/>&lt;aacid@kde.org&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2006<sp/>Jeff<sp/>Muizelaar<sp/>&lt;jeff@infidigm.net&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2007,<sp/>2008<sp/>Brad<sp/>Hards<sp/>&lt;bradh@kde.org&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2008,<sp/>2009<sp/>Koji<sp/>Otani<sp/>&lt;sho@bbr.jp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2008,<sp/>2010<sp/>Hib<sp/>Eris<sp/>&lt;hib@hiberis.nl&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2009-2013<sp/>Thomas<sp/>Freitag<sp/>&lt;Thomas.Freitag@alfa.de&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2009<sp/>Till<sp/>Kamppeter<sp/>&lt;till.kamppeter@gmail.com&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2009<sp/>Carlos<sp/>Garcia<sp/>Campos<sp/>&lt;carlosgc@gnome.org&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2009,<sp/>2011,<sp/>2012,<sp/>2014-2016<sp/>William<sp/>Bader<sp/>&lt;williambader@hotmail.com&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2009<sp/>Kovid<sp/>Goyal<sp/>&lt;kovid@kovidgoyal.net&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2009-2011,<sp/>2013-2015<sp/>Adrian<sp/>Johnson<sp/>&lt;ajohnson@redneon.com&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2012,<sp/>2014<sp/>Fabio<sp/>D&apos;Urso<sp/>&lt;fabiodurso@hotmail.it&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2012<sp/>Lu<sp/>Wang<sp/>&lt;coolwanglu@gmail.com&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2014<sp/>Till<sp/>Kamppeter<sp/>&lt;till.kamppeter@gmail.com&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2015<sp/>Marek<sp/>Kasik<sp/>&lt;mkasik@redhat.com&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="comment">//<sp/>To<sp/>see<sp/>a<sp/>description<sp/>of<sp/>the<sp/>changes<sp/>please<sp/>see<sp/>the<sp/>Changelog<sp/>file<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="comment">//<sp/>came<sp/>with<sp/>your<sp/>tarball<sp/>or<sp/>type<sp/>make<sp/>ChangeLog<sp/>if<sp/>you<sp/>are<sp/>building<sp/>from<sp/>git</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="comment">//========================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;config.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>USE_GCC_PRAGMAS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>implementation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stddef.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdarg.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;signal.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;math.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;limits.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;goo/GooString.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;goo/GooList.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;goo/GooHash.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;poppler-config.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;GlobalParams.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Object.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Error.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Function.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Gfx.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;GfxState.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;GfxFont.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;UnicodeMap.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;fofi/FoFiType1C.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;fofi/FoFiTrueType.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Catalog.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Page.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Stream.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>ENABLE_ZLIB</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>include<sp/>&quot;FlateEncoder.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>ENABLE_ZLIB_UNCOMPRESS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>include<sp/>&quot;FlateStream.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Annot.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;XRef.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;PreScanOutputDev.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;FileSpec.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;CharCodeToUnicode.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>HAVE_SPLASH</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>include<sp/>&quot;splash/Splash.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>include<sp/>&quot;splash/SplashBitmap.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>include<sp/>&quot;SplashOutputDev.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;PSOutputDev.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;PDFDoc.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>MACOS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="comment">//<sp/>needed<sp/>for<sp/>setting<sp/>type/creator<sp/>of<sp/>MacOS<sp/>files</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ICSupport.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>MSVC<sp/>math.h<sp/>doesn&apos;t<sp/>define<sp/>this</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>M_PI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>M_PI<sp/>3.14159265358979323846</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Max<sp/>size<sp/>of<sp/>a<sp/>slice<sp/>when<sp/>rasterizing<sp/>pages,<sp/>in<sp/>pixels.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>rasterizationSliceSize<sp/>20000000</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="comment">//<sp/>PostScript<sp/>prolog<sp/>and<sp/>setup</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>&apos;~&apos;<sp/>escapes<sp/>mark<sp/>prolog<sp/>code<sp/>that<sp/>is<sp/>emitted<sp/>only<sp/>in<sp/>certain</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="comment">//<sp/>levels:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>~[123][sn]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>^<sp/><sp/><sp/>^-----<sp/>s=psLevel*Sep,<sp/>n=psLevel*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>+-----<sp/>1=psLevel1*,<sp/>2=psLevel2*,<sp/>3=psLevel3*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*prolog[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;/xpdf<sp/>75<sp/>dict<sp/>def<sp/>xpdf<sp/>begin&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;%<sp/>PDF<sp/>special<sp/>state&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;/pdfDictSize<sp/>15<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;~1sn&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;/pdfStates<sp/>64<sp/>array<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>0<sp/>1<sp/>63<sp/>{&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>pdfStates<sp/>exch<sp/>pdfDictSize<sp/>dict&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>dup<sp/>/pdfStateIdx<sp/>3<sp/>index<sp/>put&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>put&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>}<sp/>for&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;~123sn&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;/pdfSetup<sp/>{&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>/setpagedevice<sp/>where<sp/>{&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>pop<sp/>2<sp/>dict<sp/>begin&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>/Policies<sp/>1<sp/>dict<sp/>dup<sp/>begin<sp/>/PageSize<sp/>6<sp/>def<sp/>end<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>/Duplex<sp/>true<sp/>def<sp/>}<sp/>if&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>currentdict<sp/>end<sp/>setpagedevice&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>}<sp/>{&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>pop&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>}<sp/>ifelse&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;}<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;/pdfSetupPaper<sp/>{&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>%<sp/>Change<sp/>paper<sp/>size,<sp/>but<sp/>only<sp/>if<sp/>different<sp/>from<sp/>previous<sp/>paper<sp/>size<sp/>otherwise&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>%<sp/>duplex<sp/>fails.<sp/>PLRM<sp/>specifies<sp/>a<sp/>tolerance<sp/>of<sp/>5<sp/>pts<sp/>when<sp/>matching<sp/>paper<sp/>size&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>%<sp/>so<sp/>we<sp/>use<sp/>the<sp/>same<sp/>when<sp/>checking<sp/>if<sp/>the<sp/>size<sp/>changes.&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>/setpagedevice<sp/>where<sp/>{&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>pop<sp/>currentpagedevice&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>/PageSize<sp/>known<sp/>{&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>2<sp/>copy&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>currentpagedevice<sp/>/PageSize<sp/>get<sp/>aload<sp/>pop&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>exch<sp/>4<sp/>1<sp/>roll&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>sub<sp/>abs<sp/>5<sp/>gt&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>3<sp/>1<sp/>roll&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>sub<sp/>abs<sp/>5<sp/>gt&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>or&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>}<sp/>{&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>true&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>}<sp/>ifelse&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>{&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>2<sp/>array<sp/>astore&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>2<sp/>dict<sp/>begin&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/PageSize<sp/>exch<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/ImagingBBox<sp/>null<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>currentdict<sp/>end&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>setpagedevice&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>}<sp/>{&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>pop<sp/>pop&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>}<sp/>ifelse&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>}<sp/>{&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>pop&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>}<sp/>ifelse&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;}<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;~1sn&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;/pdfOpNames<sp/>[&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>/pdfFill<sp/>/pdfStroke<sp/>/pdfLastFill<sp/>/pdfLastStroke&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>/pdfTextMat<sp/>/pdfFontSize<sp/>/pdfCharSpacing<sp/>/pdfTextRender<sp/>/pdfPatternCS&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>/pdfTextRise<sp/>/pdfWordSpacing<sp/>/pdfHorizScaling<sp/>/pdfTextClipPath&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;]<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;~123sn&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;/pdfStartPage<sp/>{&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;~1sn&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>pdfStates<sp/>0<sp/>get<sp/>begin&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;~23sn&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>pdfDictSize<sp/>dict<sp/>begin&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;~23n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>/pdfFillCS<sp/>[]<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>/pdfFillXform<sp/>{}<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>/pdfStrokeCS<sp/>[]<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>/pdfStrokeXform<sp/>{}<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;~1n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>/pdfFill<sp/>0<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>/pdfStroke<sp/>0<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;~1s&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>/pdfFill<sp/>[0<sp/>0<sp/>0<sp/>1]<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>/pdfStroke<sp/>[0<sp/>0<sp/>0<sp/>1]<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;~23sn&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>/pdfFill<sp/>[0]<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>/pdfStroke<sp/>[0]<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>/pdfFillOP<sp/>false<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>/pdfStrokeOP<sp/>false<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;~3sn&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>/pdfOPM<sp/>false<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;~123sn&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>/pdfLastFill<sp/>false<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>/pdfLastStroke<sp/>false<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>/pdfTextMat<sp/>[1<sp/>0<sp/>0<sp/>1<sp/>0<sp/>0]<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>/pdfFontSize<sp/>0<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>/pdfCharSpacing<sp/>0<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>/pdfTextRender<sp/>0<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>/pdfPatternCS<sp/>false<sp/>def&quot;</highlight><highlight class="normal">,<sp/></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>/pdfTextRise<sp/>0<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>/pdfWordSpacing<sp/>0<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>/pdfHorizScaling<sp/>1<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>/pdfTextClipPath<sp/>[]<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;}<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;/pdfEndPage<sp/>{<sp/>end<sp/>}<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;~23s&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;%<sp/>separation<sp/>convention<sp/>operators&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;/findcmykcustomcolor<sp/>where<sp/>{&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>pop&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;}{&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>/findcmykcustomcolor<sp/>{<sp/>5<sp/>array<sp/>astore<sp/>}<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;}<sp/>ifelse&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;/setcustomcolor<sp/>where<sp/>{&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>pop&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;}{&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>/setcustomcolor<sp/>{&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>exch&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>[<sp/>exch<sp/>/Separation<sp/>exch<sp/>dup<sp/>4<sp/>get<sp/>exch<sp/>/DeviceCMYK<sp/>exch&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>0<sp/>4<sp/>getinterval<sp/>cvx&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>[<sp/>exch<sp/>/dup<sp/>load<sp/>exch<sp/>{<sp/>mul<sp/>exch<sp/>dup<sp/>}<sp/>/forall<sp/>load&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/pop<sp/>load<sp/>dup<sp/>]<sp/>cvx&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>]<sp/>setcolorspace<sp/>setcolor&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>}<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;}<sp/>ifelse&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;/customcolorimage<sp/>where<sp/>{&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>pop&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;}{&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>/customcolorimage<sp/>{&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>gsave&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>[<sp/>exch<sp/>/Separation<sp/>exch<sp/>dup<sp/>4<sp/>get<sp/>exch<sp/>/DeviceCMYK<sp/>exch&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>0<sp/>4<sp/>getinterval&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>[<sp/>exch<sp/>/dup<sp/>load<sp/>exch<sp/>{<sp/>mul<sp/>exch<sp/>dup<sp/>}<sp/>/forall<sp/>load&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/pop<sp/>load<sp/>dup<sp/>]<sp/>cvx&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>]<sp/>setcolorspace&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>10<sp/>dict<sp/>begin&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>/ImageType<sp/>1<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>/DataSource<sp/>exch<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>/ImageMatrix<sp/>exch<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>/BitsPerComponent<sp/>exch<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>/Height<sp/>exch<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>/Width<sp/>exch<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>/Decode<sp/>[1<sp/>0]<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>currentdict<sp/>end&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>image&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>grestore&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>}<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;}<sp/>ifelse&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;~123sn&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;%<sp/>PDF<sp/>color<sp/>state&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;~1n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;/g<sp/>{<sp/>dup<sp/>/pdfFill<sp/>exch<sp/>def<sp/>setgray&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/>/pdfLastFill<sp/>true<sp/>def<sp/>/pdfLastStroke<sp/>false<sp/>def<sp/>}<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;/G<sp/>{<sp/>dup<sp/>/pdfStroke<sp/>exch<sp/>def<sp/>setgray&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/>/pdfLastStroke<sp/>true<sp/>def<sp/>/pdfLastFill<sp/>false<sp/>def<sp/>}<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;/fCol<sp/>{&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>pdfLastFill<sp/>not<sp/>{&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>pdfFill<sp/>setgray&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>/pdfLastFill<sp/>true<sp/>def<sp/>/pdfLastStroke<sp/>false<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>}<sp/>if&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;}<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;/sCol<sp/>{&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>pdfLastStroke<sp/>not<sp/>{&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>pdfStroke<sp/>setgray&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>/pdfLastStroke<sp/>true<sp/>def<sp/>/pdfLastFill<sp/>false<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>}<sp/>if&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;}<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;~1s&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;/k<sp/>{<sp/>4<sp/>copy<sp/>4<sp/>array<sp/>astore<sp/>/pdfFill<sp/>exch<sp/>def<sp/>setcmykcolor&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/>/pdfLastFill<sp/>true<sp/>def<sp/>/pdfLastStroke<sp/>false<sp/>def<sp/>}<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;/K<sp/>{<sp/>4<sp/>copy<sp/>4<sp/>array<sp/>astore<sp/>/pdfStroke<sp/>exch<sp/>def<sp/>setcmykcolor&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/>/pdfLastStroke<sp/>true<sp/>def<sp/>/pdfLastFill<sp/>false<sp/>def<sp/>}<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;/fCol<sp/>{&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>pdfLastFill<sp/>not<sp/>{&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>pdfFill<sp/>aload<sp/>pop<sp/>setcmykcolor&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>/pdfLastFill<sp/>true<sp/>def<sp/>/pdfLastStroke<sp/>false<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>}<sp/>if&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;}<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;/sCol<sp/>{&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>pdfLastStroke<sp/>not<sp/>{&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>pdfStroke<sp/>aload<sp/>pop<sp/>setcmykcolor&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>/pdfLastStroke<sp/>true<sp/>def<sp/>/pdfLastFill<sp/>false<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>}<sp/>if&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;}<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;~3n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;/opm<sp/>{<sp/>dup<sp/>/pdfOPM<sp/>exch<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>/setoverprintmode<sp/>where{pop<sp/>setoverprintmode}{pop}ifelse<sp/><sp/>}<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;~23n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;/cs<sp/>{<sp/>/pdfFillXform<sp/>exch<sp/>def<sp/>dup<sp/>/pdfFillCS<sp/>exch<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>setcolorspace<sp/>}<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;/CS<sp/>{<sp/>/pdfStrokeXform<sp/>exch<sp/>def<sp/>dup<sp/>/pdfStrokeCS<sp/>exch<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>setcolorspace<sp/>}<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;/sc<sp/>{<sp/>pdfLastFill<sp/>not<sp/>{<sp/>pdfFillCS<sp/>setcolorspace<sp/>}<sp/>if&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>dup<sp/>/pdfFill<sp/>exch<sp/>def<sp/>aload<sp/>pop<sp/>pdfFillXform<sp/>setcolor&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/>/pdfLastFill<sp/>true<sp/>def<sp/>/pdfLastStroke<sp/>false<sp/>def<sp/>}<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;/SC<sp/>{<sp/>pdfLastStroke<sp/>not<sp/>{<sp/>pdfStrokeCS<sp/>setcolorspace<sp/>}<sp/>if&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>dup<sp/>/pdfStroke<sp/>exch<sp/>def<sp/>aload<sp/>pop<sp/>pdfStrokeXform<sp/>setcolor&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/>/pdfLastStroke<sp/>true<sp/>def<sp/>/pdfLastFill<sp/>false<sp/>def<sp/>}<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;/op<sp/>{<sp/>/pdfFillOP<sp/>exch<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>pdfLastFill<sp/>{<sp/>pdfFillOP<sp/>setoverprint<sp/>}<sp/>if<sp/>}<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;/OP<sp/>{<sp/>/pdfStrokeOP<sp/>exch<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>pdfLastStroke<sp/>{<sp/>pdfStrokeOP<sp/>setoverprint<sp/>}<sp/>if<sp/>}<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;/fCol<sp/>{&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>pdfLastFill<sp/>not<sp/>{&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>pdfFillCS<sp/>setcolorspace&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>pdfFill<sp/>aload<sp/>pop<sp/>pdfFillXform<sp/>setcolor&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>pdfFillOP<sp/>setoverprint&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>/pdfLastFill<sp/>true<sp/>def<sp/>/pdfLastStroke<sp/>false<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>}<sp/>if&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;}<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;/sCol<sp/>{&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>pdfLastStroke<sp/>not<sp/>{&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>pdfStrokeCS<sp/>setcolorspace&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>pdfStroke<sp/>aload<sp/>pop<sp/>pdfStrokeXform<sp/>setcolor&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>pdfStrokeOP<sp/>setoverprint&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>/pdfLastStroke<sp/>true<sp/>def<sp/>/pdfLastFill<sp/>false<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>}<sp/>if&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;}<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;~3s&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;/opm<sp/>{<sp/>dup<sp/>/pdfOPM<sp/>exch<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>/setoverprintmode<sp/>where{pop<sp/>setoverprintmode}{pop}ifelse<sp/>}<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;~23s&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;/k<sp/>{<sp/>4<sp/>copy<sp/>4<sp/>array<sp/>astore<sp/>/pdfFill<sp/>exch<sp/>def<sp/>setcmykcolor&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/>/pdfLastFill<sp/>true<sp/>def<sp/>/pdfLastStroke<sp/>false<sp/>def<sp/>}<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;/K<sp/>{<sp/>4<sp/>copy<sp/>4<sp/>array<sp/>astore<sp/>/pdfStroke<sp/>exch<sp/>def<sp/>setcmykcolor&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/>/pdfLastStroke<sp/>true<sp/>def<sp/>/pdfLastFill<sp/>false<sp/>def<sp/>}<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;/ck<sp/>{<sp/>6<sp/>copy<sp/>6<sp/>array<sp/>astore<sp/>/pdfFill<sp/>exch<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>findcmykcustomcolor<sp/>exch<sp/>setcustomcolor&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>/pdfLastFill<sp/>true<sp/>def<sp/>/pdfLastStroke<sp/>false<sp/>def<sp/>}<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;/CK<sp/>{<sp/>6<sp/>copy<sp/>6<sp/>array<sp/>astore<sp/>/pdfStroke<sp/>exch<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>findcmykcustomcolor<sp/>exch<sp/>setcustomcolor&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>/pdfLastStroke<sp/>true<sp/>def<sp/>/pdfLastFill<sp/>false<sp/>def<sp/>}<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;/op<sp/>{<sp/>/pdfFillOP<sp/>exch<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>pdfLastFill<sp/>{<sp/>pdfFillOP<sp/>setoverprint<sp/>}<sp/>if<sp/>}<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;/OP<sp/>{<sp/>/pdfStrokeOP<sp/>exch<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>pdfLastStroke<sp/>{<sp/>pdfStrokeOP<sp/>setoverprint<sp/>}<sp/>if<sp/>}<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;/fCol<sp/>{&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>pdfLastFill<sp/>not<sp/>{&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>pdfFill<sp/>aload<sp/>length<sp/>4<sp/>eq<sp/>{&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>setcmykcolor&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>}{&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>findcmykcustomcolor<sp/>exch<sp/>setcustomcolor&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>}<sp/>ifelse&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>pdfFillOP<sp/>setoverprint&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>/pdfLastFill<sp/>true<sp/>def<sp/>/pdfLastStroke<sp/>false<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>}<sp/>if&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;}<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;/sCol<sp/>{&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>pdfLastStroke<sp/>not<sp/>{&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>pdfStroke<sp/>aload<sp/>length<sp/>4<sp/>eq<sp/>{&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>setcmykcolor&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>}{&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>findcmykcustomcolor<sp/>exch<sp/>setcustomcolor&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>}<sp/>ifelse&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>pdfStrokeOP<sp/>setoverprint&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>/pdfLastStroke<sp/>true<sp/>def<sp/>/pdfLastFill<sp/>false<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>}<sp/>if&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;}<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;~123sn&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;%<sp/>build<sp/>a<sp/>font&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;/pdfMakeFont<sp/>{&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>4<sp/>3<sp/>roll<sp/>findfont&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>4<sp/>2<sp/>roll<sp/>matrix<sp/>scale<sp/>makefont&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>dup<sp/>length<sp/>dict<sp/>begin&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>{<sp/>1<sp/>index<sp/>/FID<sp/>ne<sp/>{<sp/>def<sp/>}<sp/>{<sp/>pop<sp/>pop<sp/>}<sp/>ifelse<sp/>}<sp/>forall&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>/Encoding<sp/>exch<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>currentdict&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>end&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>definefont<sp/>pop&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;}<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;/pdfMakeFont16<sp/>{&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>exch<sp/>findfont&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>dup<sp/>length<sp/>dict<sp/>begin&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>{<sp/>1<sp/>index<sp/>/FID<sp/>ne<sp/>{<sp/>def<sp/>}<sp/>{<sp/>pop<sp/>pop<sp/>}<sp/>ifelse<sp/>}<sp/>forall&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>/WMode<sp/>exch<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>currentdict&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>end&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>definefont<sp/>pop&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;}<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;~3sn&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;/pdfMakeFont16L3<sp/>{&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>1<sp/>index<sp/>/CIDFont<sp/>resourcestatus<sp/>{&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>pop<sp/>pop<sp/>1<sp/>index<sp/>/CIDFont<sp/>findresource<sp/>/CIDFontType<sp/>known&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>}<sp/>{&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>false&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>}<sp/>ifelse&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>{&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>0<sp/>eq<sp/>{<sp/>/Identity-H<sp/>}<sp/>{<sp/>/Identity-V<sp/>}<sp/>ifelse&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>exch<sp/>1<sp/>array<sp/>astore<sp/>composefont<sp/>pop&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>}<sp/>{&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>pdfMakeFont16&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>}<sp/>ifelse&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;}<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;~123sn&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;%<sp/>graphics<sp/>state<sp/>operators&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;~1sn&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;/q<sp/>{&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>gsave&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>pdfOpNames<sp/>length<sp/>1<sp/>sub<sp/>-1<sp/>0<sp/>{<sp/>pdfOpNames<sp/>exch<sp/>get<sp/>load<sp/>}<sp/>for&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>pdfStates<sp/>pdfStateIdx<sp/>1<sp/>add<sp/>get<sp/>begin&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>pdfOpNames<sp/>{<sp/>exch<sp/>def<sp/>}<sp/>forall&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;}<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;/Q<sp/>{<sp/>end<sp/>grestore<sp/>}<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;~23sn&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;/q<sp/>{<sp/>gsave<sp/>pdfDictSize<sp/>dict<sp/>begin<sp/>}<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;/Q<sp/>{&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>end<sp/>grestore&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>/pdfLastFill<sp/>where<sp/>{&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>pop&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>pdfLastFill<sp/>{&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>pdfFillOP<sp/>setoverprint&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>}<sp/>{&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>pdfStrokeOP<sp/>setoverprint&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>}<sp/>ifelse&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>}<sp/>if&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;~3sn&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>/pdfOPM<sp/>where<sp/>{&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>pop&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>pdfOPM<sp/>/setoverprintmode<sp/>where{pop<sp/>setoverprintmode}{pop}ifelse<sp/>&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>}<sp/>if&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;~23sn&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;}<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;~123sn&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;/cm<sp/>{<sp/>concat<sp/>}<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;/d<sp/>{<sp/>setdash<sp/>}<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;/i<sp/>{<sp/>setflat<sp/>}<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;/j<sp/>{<sp/>setlinejoin<sp/>}<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;/J<sp/>{<sp/>setlinecap<sp/>}<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;/M<sp/>{<sp/>setmiterlimit<sp/>}<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;/w<sp/>{<sp/>setlinewidth<sp/>}<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;%<sp/>path<sp/>segment<sp/>operators&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;/m<sp/>{<sp/>moveto<sp/>}<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;/l<sp/>{<sp/>lineto<sp/>}<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;/c<sp/>{<sp/>curveto<sp/>}<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;/re<sp/>{<sp/>4<sp/>2<sp/>roll<sp/>moveto<sp/>1<sp/>index<sp/>0<sp/>rlineto<sp/>0<sp/>exch<sp/>rlineto&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>neg<sp/>0<sp/>rlineto<sp/>closepath<sp/>}<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;/h<sp/>{<sp/>closepath<sp/>}<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;%<sp/>path<sp/>painting<sp/>operators&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;/S<sp/>{<sp/>sCol<sp/>stroke<sp/>}<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;/Sf<sp/>{<sp/>fCol<sp/>stroke<sp/>}<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;/f<sp/>{<sp/>fCol<sp/>fill<sp/>}<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;/f*<sp/>{<sp/>fCol<sp/>eofill<sp/>}<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;%<sp/>clipping<sp/>operators&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;/W<sp/>{<sp/>clip<sp/>newpath<sp/>}<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;/W*<sp/>{<sp/>eoclip<sp/>newpath<sp/>}<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;/Ws<sp/>{<sp/>strokepath<sp/>clip<sp/>newpath<sp/>}<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;%<sp/>text<sp/>state<sp/>operators&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;/Tc<sp/>{<sp/>/pdfCharSpacing<sp/>exch<sp/>def<sp/>}<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;/Tf<sp/>{<sp/>dup<sp/>/pdfFontSize<sp/>exch<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>dup<sp/>pdfHorizScaling<sp/>mul<sp/>exch<sp/>matrix<sp/>scale&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>pdfTextMat<sp/>matrix<sp/>concatmatrix<sp/>dup<sp/>4<sp/>0<sp/>put<sp/>dup<sp/>5<sp/>0<sp/>put&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>exch<sp/>findfont<sp/>exch<sp/>makefont<sp/>setfont<sp/>}<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;/Tr<sp/>{<sp/>/pdfTextRender<sp/>exch<sp/>def<sp/>}<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;/Tp<sp/>{<sp/>/pdfPatternCS<sp/>exch<sp/>def<sp/>}<sp/>def&quot;</highlight><highlight class="normal">,<sp/></highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;/Ts<sp/>{<sp/>/pdfTextRise<sp/>exch<sp/>def<sp/>}<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;/Tw<sp/>{<sp/>/pdfWordSpacing<sp/>exch<sp/>def<sp/>}<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;/Tz<sp/>{<sp/>/pdfHorizScaling<sp/>exch<sp/>def<sp/>}<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;%<sp/>text<sp/>positioning<sp/>operators&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;/Td<sp/>{<sp/>pdfTextMat<sp/>transform<sp/>moveto<sp/>}<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;/Tm<sp/>{<sp/>/pdfTextMat<sp/>exch<sp/>def<sp/>}<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;%<sp/>text<sp/>string<sp/>operators&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;/xyshow<sp/>where<sp/>{&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>pop&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>/xyshow2<sp/>{&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>dup<sp/>length<sp/>array&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>0<sp/>2<sp/>2<sp/>index<sp/>length<sp/>1<sp/>sub<sp/>{&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>2<sp/>index<sp/>1<sp/>index<sp/>2<sp/>copy<sp/>get<sp/>3<sp/>1<sp/>roll<sp/>1<sp/>add<sp/>get&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>pdfTextMat<sp/>dtransform&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>4<sp/>2<sp/>roll<sp/>2<sp/>copy<sp/>6<sp/>5<sp/>roll<sp/>put<sp/>1<sp/>add<sp/>3<sp/>1<sp/>roll<sp/>dup<sp/>4<sp/>2<sp/>roll<sp/>put&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>}<sp/>for&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>exch<sp/>pop&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>xyshow&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>}<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;}{&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>/xyshow2<sp/>{&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>currentfont<sp/>/FontType<sp/>get<sp/>0<sp/>eq<sp/>{&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>0<sp/>2<sp/>3<sp/>index<sp/>length<sp/>1<sp/>sub<sp/>{&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentpoint<sp/>4<sp/>index<sp/>3<sp/>index<sp/>2<sp/>getinterval<sp/>show<sp/>moveto&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2<sp/>copy<sp/>get<sp/>2<sp/>index<sp/>3<sp/>2<sp/>roll<sp/>1<sp/>add<sp/>get&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pdfTextMat<sp/>dtransform<sp/>rmoveto&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>for&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>}<sp/>{&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>0<sp/>1<sp/>3<sp/>index<sp/>length<sp/>1<sp/>sub<sp/>{&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentpoint<sp/>4<sp/>index<sp/>3<sp/>index<sp/>1<sp/>getinterval<sp/>show<sp/>moveto&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2<sp/>copy<sp/>2<sp/>mul<sp/>get<sp/>2<sp/>index<sp/>3<sp/>2<sp/>roll<sp/>2<sp/>mul<sp/>1<sp/>add<sp/>get&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pdfTextMat<sp/>dtransform<sp/>rmoveto&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>for&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>}<sp/>ifelse&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>pop<sp/>pop&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>}<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;}<sp/>ifelse&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;/cshow<sp/>where<sp/>{&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>pop&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>/xycp<sp/>{&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="comment">//<sp/>xycharpath</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>0<sp/>3<sp/>2<sp/>roll&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>{&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>pop<sp/>pop<sp/>currentpoint<sp/>3<sp/>2<sp/>roll&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>1<sp/>string<sp/>dup<sp/>0<sp/>4<sp/>3<sp/>roll<sp/>put<sp/>false<sp/>charpath<sp/>moveto&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>2<sp/>copy<sp/>get<sp/>2<sp/>index<sp/>2<sp/>index<sp/>1<sp/>add<sp/>get&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>pdfTextMat<sp/>dtransform<sp/>rmoveto&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>2<sp/>add&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>}<sp/>exch<sp/>cshow&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>pop<sp/>pop&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>}<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;}{&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>/xycp<sp/>{&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="comment">//<sp/>xycharpath</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>currentfont<sp/>/FontType<sp/>get<sp/>0<sp/>eq<sp/>{&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>0<sp/>2<sp/>3<sp/>index<sp/>length<sp/>1<sp/>sub<sp/>{&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentpoint<sp/>4<sp/>index<sp/>3<sp/>index<sp/>2<sp/>getinterval<sp/>false<sp/>charpath<sp/>moveto&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2<sp/>copy<sp/>get<sp/>2<sp/>index<sp/>3<sp/>2<sp/>roll<sp/>1<sp/>add<sp/>get&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pdfTextMat<sp/>dtransform<sp/>rmoveto&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>for&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>}<sp/>{&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>0<sp/>1<sp/>3<sp/>index<sp/>length<sp/>1<sp/>sub<sp/>{&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentpoint<sp/>4<sp/>index<sp/>3<sp/>index<sp/>1<sp/>getinterval<sp/>false<sp/>charpath<sp/>moveto&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2<sp/>copy<sp/>2<sp/>mul<sp/>get<sp/>2<sp/>index<sp/>3<sp/>2<sp/>roll<sp/>2<sp/>mul<sp/>1<sp/>add<sp/>get&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pdfTextMat<sp/>dtransform<sp/>rmoveto&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>for&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>}<sp/>ifelse&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>pop<sp/>pop&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>}<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;}<sp/>ifelse&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;/Tj<sp/>{&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>fCol&quot;</highlight><highlight class="normal">,<sp/><sp/></highlight><highlight class="comment">//<sp/>because<sp/>stringwidth<sp/>has<sp/>to<sp/>draw<sp/>Type<sp/>3<sp/>chars</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>0<sp/>pdfTextRise<sp/>pdfTextMat<sp/>dtransform<sp/>rmoveto&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>currentpoint<sp/>4<sp/>2<sp/>roll&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>pdfTextRender<sp/>1<sp/>and<sp/>0<sp/>eq<sp/>{&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>2<sp/>copy<sp/>xyshow2&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>}<sp/>if&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>pdfTextRender<sp/>3<sp/>and<sp/>dup<sp/>1<sp/>eq<sp/>exch<sp/>2<sp/>eq<sp/>or<sp/>{&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>3<sp/>index<sp/>3<sp/>index<sp/>moveto&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>2<sp/>copy&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>currentfont<sp/>/FontType<sp/>get<sp/>3<sp/>eq<sp/>{<sp/>fCol<sp/>}<sp/>{<sp/>sCol<sp/>}<sp/>ifelse&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>xycp<sp/>currentpoint<sp/>stroke<sp/>moveto&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>}<sp/>if&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>pdfTextRender<sp/>4<sp/>and<sp/>0<sp/>ne<sp/>{&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>4<sp/>2<sp/>roll<sp/>moveto<sp/>xycp&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>/pdfTextClipPath<sp/>[<sp/>pdfTextClipPath<sp/>aload<sp/>pop&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>{/moveto<sp/>cvx}&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>{/lineto<sp/>cvx}&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>{/curveto<sp/>cvx}&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>{/closepath<sp/>cvx}&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>pathforall<sp/>]<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>currentpoint<sp/>newpath<sp/>moveto&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>}<sp/>{&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>pop<sp/>pop<sp/>pop<sp/>pop&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>}<sp/>ifelse&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>0<sp/>pdfTextRise<sp/>neg<sp/>pdfTextMat<sp/>dtransform<sp/>rmoveto&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;}<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;/TJm<sp/>{<sp/>0.001<sp/>mul<sp/>pdfFontSize<sp/>mul<sp/>pdfHorizScaling<sp/>mul<sp/>neg<sp/>0&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/>pdfTextMat<sp/>dtransform<sp/>rmoveto<sp/>}<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;/TJmV<sp/>{<sp/>0.001<sp/>mul<sp/>pdfFontSize<sp/>mul<sp/>neg<sp/>0<sp/>exch&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pdfTextMat<sp/>dtransform<sp/>rmoveto<sp/>}<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;/Tclip<sp/>{<sp/>pdfTextClipPath<sp/>cvx<sp/>exec<sp/>clip<sp/>newpath&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/pdfTextClipPath<sp/>[]<sp/>def<sp/>}<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;/Tclip*<sp/>{<sp/>pdfTextClipPath<sp/>cvx<sp/>exec<sp/>eoclip<sp/>newpath&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/pdfTextClipPath<sp/>[]<sp/>def<sp/>}<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;~1ns&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;%<sp/>Level<sp/>1<sp/>image<sp/>operators&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;/pdfIm1<sp/>{&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>/pdfImBuf1<sp/>4<sp/>index<sp/>string<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>{<sp/>currentfile<sp/>pdfImBuf1<sp/>readhexstring<sp/>pop<sp/>}<sp/>image&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;}<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;/pdfIm1Bin<sp/>{&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>/pdfImBuf1<sp/>4<sp/>index<sp/>string<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>{<sp/>currentfile<sp/>pdfImBuf1<sp/>readstring<sp/>pop<sp/>}<sp/>image&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;}<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;~1s&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;/pdfIm1Sep<sp/>{&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>/pdfImBuf1<sp/>4<sp/>index<sp/>string<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>/pdfImBuf2<sp/>4<sp/>index<sp/>string<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>/pdfImBuf3<sp/>4<sp/>index<sp/>string<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>/pdfImBuf4<sp/>4<sp/>index<sp/>string<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>{<sp/>currentfile<sp/>pdfImBuf1<sp/>readhexstring<sp/>pop<sp/>}&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>{<sp/>currentfile<sp/>pdfImBuf2<sp/>readhexstring<sp/>pop<sp/>}&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>{<sp/>currentfile<sp/>pdfImBuf3<sp/>readhexstring<sp/>pop<sp/>}&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>{<sp/>currentfile<sp/>pdfImBuf4<sp/>readhexstring<sp/>pop<sp/>}&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>true<sp/>4<sp/>colorimage&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;}<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;/pdfIm1SepBin<sp/>{&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>/pdfImBuf1<sp/>4<sp/>index<sp/>string<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>/pdfImBuf2<sp/>4<sp/>index<sp/>string<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>/pdfImBuf3<sp/>4<sp/>index<sp/>string<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>/pdfImBuf4<sp/>4<sp/>index<sp/>string<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>{<sp/>currentfile<sp/>pdfImBuf1<sp/>readstring<sp/>pop<sp/>}&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>{<sp/>currentfile<sp/>pdfImBuf2<sp/>readstring<sp/>pop<sp/>}&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>{<sp/>currentfile<sp/>pdfImBuf3<sp/>readstring<sp/>pop<sp/>}&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>{<sp/>currentfile<sp/>pdfImBuf4<sp/>readstring<sp/>pop<sp/>}&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>true<sp/>4<sp/>colorimage&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;}<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;~1ns&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;/pdfImM1<sp/>{&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>fCol<sp/>/pdfImBuf1<sp/>4<sp/>index<sp/>7<sp/>add<sp/>8<sp/>idiv<sp/>string<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>{<sp/>currentfile<sp/>pdfImBuf1<sp/>readhexstring<sp/>pop<sp/>}<sp/>imagemask&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;}<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;/pdfImM1Bin<sp/>{&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>fCol<sp/>/pdfImBuf1<sp/>4<sp/>index<sp/>7<sp/>add<sp/>8<sp/>idiv<sp/>string<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>{<sp/>currentfile<sp/>pdfImBuf1<sp/>readstring<sp/>pop<sp/>}<sp/>imagemask&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;}<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;/pdfImStr<sp/>{&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>2<sp/>copy<sp/>exch<sp/>length<sp/>lt<sp/>{&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>2<sp/>copy<sp/>get<sp/>exch<sp/>1<sp/>add<sp/>exch&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>}<sp/>{&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>()&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>}<sp/>ifelse&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;}<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;/pdfImM1a<sp/>{&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>{<sp/>pdfImStr<sp/>}<sp/>imagemask&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>pop<sp/>pop&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;}<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;~23sn&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;%<sp/>Level<sp/>2/3<sp/>image<sp/>operators&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;/pdfImBuf<sp/>100<sp/>string<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;/pdfImStr<sp/>{&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>2<sp/>copy<sp/>exch<sp/>length<sp/>lt<sp/>{&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>2<sp/>copy<sp/>get<sp/>exch<sp/>1<sp/>add<sp/>exch&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>}<sp/>{&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>()&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>}<sp/>ifelse&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;}<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;/skipEOD<sp/>{&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>{<sp/>currentfile<sp/>pdfImBuf<sp/>readline&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>not<sp/>{<sp/>pop<sp/>exit<sp/>}<sp/>if&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>(%-EOD-)<sp/>eq<sp/>{<sp/>exit<sp/>}<sp/>if<sp/>}<sp/>loop&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;}<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;/pdfIm<sp/>{<sp/>image<sp/>skipEOD<sp/>}<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;~3sn&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;/pdfMask<sp/>{&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>/ReusableStreamDecode<sp/>filter&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>skipEOD&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>/maskStream<sp/>exch<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;}<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;/pdfMaskEnd<sp/>{<sp/>maskStream<sp/>closefile<sp/>}<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;/pdfMaskInit<sp/>{&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>/maskArray<sp/>exch<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>/maskIdx<sp/>0<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;}<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;/pdfMaskSrc<sp/>{&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>maskIdx<sp/>maskArray<sp/>length<sp/>lt<sp/>{&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>maskArray<sp/>maskIdx<sp/>get&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>/maskIdx<sp/>maskIdx<sp/>1<sp/>add<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>}<sp/>{&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>()&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>}<sp/>ifelse&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;}<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;~23s&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;/pdfImSep<sp/>{&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>findcmykcustomcolor<sp/>exch&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>dup<sp/>/Width<sp/>get<sp/>/pdfImBuf1<sp/>exch<sp/>string<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>dup<sp/>/Decode<sp/>get<sp/>aload<sp/>pop<sp/>1<sp/>index<sp/>sub<sp/>/pdfImDecodeRange<sp/>exch<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>/pdfImDecodeLow<sp/>exch<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>begin<sp/>Width<sp/>Height<sp/>BitsPerComponent<sp/>ImageMatrix<sp/>DataSource<sp/>end&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>/pdfImData<sp/>exch<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>{<sp/>pdfImData<sp/>pdfImBuf1<sp/>readstring<sp/>pop&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>0<sp/>1<sp/>2<sp/>index<sp/>length<sp/>1<sp/>sub<sp/>{&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>1<sp/>index<sp/>exch<sp/>2<sp/>copy<sp/>get&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>pdfImDecodeRange<sp/>mul<sp/>255<sp/>div<sp/>pdfImDecodeLow<sp/>add<sp/>round<sp/>cvi&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>255<sp/>exch<sp/>sub<sp/>put&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>}<sp/>for<sp/>}&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>6<sp/>5<sp/>roll<sp/>customcolorimage&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>skipEOD&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;}<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;~23sn&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;/pdfImM<sp/>{<sp/>fCol<sp/>imagemask<sp/>skipEOD<sp/>}<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;~123sn&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;/pr<sp/>{<sp/>2<sp/>index<sp/>2<sp/>index<sp/>3<sp/>2<sp/>roll<sp/>putinterval<sp/>4<sp/>add<sp/>}<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;/pdfImClip<sp/>{&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>gsave&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>0<sp/>2<sp/>4<sp/>index<sp/>length<sp/>1<sp/>sub<sp/>{&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>dup<sp/>4<sp/>index<sp/>exch<sp/>2<sp/>copy&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>get<sp/>5<sp/>index<sp/>div<sp/>put&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>1<sp/>add<sp/>3<sp/>index<sp/>exch<sp/>2<sp/>copy&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>get<sp/>3<sp/>index<sp/>div<sp/>put&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>}<sp/>for&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>pop<sp/>pop<sp/>rectclip&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;}<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;/pdfImClipEnd<sp/>{<sp/>grestore<sp/>}<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;~23sn&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;%<sp/>shading<sp/>operators&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;/colordelta<sp/>{&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>false<sp/>0<sp/>1<sp/>3<sp/>index<sp/>length<sp/>1<sp/>sub<sp/>{&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>dup<sp/>4<sp/>index<sp/>exch<sp/>get<sp/>3<sp/>index<sp/>3<sp/>2<sp/>roll<sp/>get<sp/>sub<sp/>abs<sp/>0.004<sp/>gt<sp/>{&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>pop<sp/>true&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>}<sp/>if&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>}<sp/>for&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>exch<sp/>pop<sp/>exch<sp/>pop&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;}<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;/funcCol<sp/>{<sp/>func<sp/>n<sp/>array<sp/>astore<sp/>}<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;/funcSH<sp/>{&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>dup<sp/>0<sp/>eq<sp/>{&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>true&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>}<sp/>{&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>dup<sp/>6<sp/>eq<sp/>{&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>false&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>}<sp/>{&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>4<sp/>index<sp/>4<sp/>index<sp/>funcCol<sp/>dup&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>6<sp/>index<sp/>4<sp/>index<sp/>funcCol<sp/>dup&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>3<sp/>1<sp/>roll<sp/>colordelta<sp/>3<sp/>1<sp/>roll&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>5<sp/>index<sp/>5<sp/>index<sp/>funcCol<sp/>dup&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>3<sp/>1<sp/>roll<sp/>colordelta<sp/>3<sp/>1<sp/>roll&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>6<sp/>index<sp/>8<sp/>index<sp/>funcCol<sp/>dup&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>3<sp/>1<sp/>roll<sp/>colordelta<sp/>3<sp/>1<sp/>roll&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>colordelta<sp/>or<sp/>or<sp/>or&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>}<sp/>ifelse&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>}<sp/>ifelse&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>{&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>1<sp/>add&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>4<sp/>index<sp/>3<sp/>index<sp/>add<sp/>0.5<sp/>mul<sp/>exch<sp/>4<sp/>index<sp/>3<sp/>index<sp/>add<sp/>0.5<sp/>mul<sp/>exch&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>6<sp/>index<sp/>6<sp/>index<sp/>4<sp/>index<sp/>4<sp/>index<sp/>4<sp/>index<sp/>funcSH&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>2<sp/>index<sp/>6<sp/>index<sp/>6<sp/>index<sp/>4<sp/>index<sp/>4<sp/>index<sp/>funcSH&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>6<sp/>index<sp/>2<sp/>index<sp/>4<sp/>index<sp/>6<sp/>index<sp/>4<sp/>index<sp/>funcSH&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>5<sp/>3<sp/>roll<sp/>3<sp/>2<sp/>roll<sp/>funcSH<sp/>pop<sp/>pop&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>}<sp/>{&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>pop<sp/>3<sp/>index<sp/>2<sp/>index<sp/>add<sp/>0.5<sp/>mul<sp/>3<sp/>index<sp/><sp/>2<sp/>index<sp/>add<sp/>0.5<sp/>mul&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;~23n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>funcCol<sp/>sc&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;~23s&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>funcCol<sp/>aload<sp/>pop<sp/>k&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;~23sn&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>dup<sp/>4<sp/>index<sp/>exch<sp/>mat<sp/>transform<sp/>m&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>3<sp/>index<sp/>3<sp/>index<sp/>mat<sp/>transform<sp/>l&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>1<sp/>index<sp/>3<sp/>index<sp/>mat<sp/>transform<sp/>l&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>mat<sp/>transform<sp/>l<sp/>pop<sp/>pop<sp/>h<sp/>f*&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>}<sp/>ifelse&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;}<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;/axialCol<sp/>{&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>dup<sp/>0<sp/>lt<sp/>{&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>pop<sp/>t0&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>}<sp/>{&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>dup<sp/>1<sp/>gt<sp/>{&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>pop<sp/>t1&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>}<sp/>{&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>dt<sp/>mul<sp/>t0<sp/>add&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>}<sp/>ifelse&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>}<sp/>ifelse&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>func<sp/>n<sp/>array<sp/>astore&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;}<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;/axialSH<sp/>{&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>dup<sp/>0<sp/>eq<sp/>{&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>true&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>}<sp/>{&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>dup<sp/>8<sp/>eq<sp/>{&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>false&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>}<sp/>{&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>2<sp/>index<sp/>axialCol<sp/>2<sp/>index<sp/>axialCol<sp/>colordelta&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>}<sp/>ifelse&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>}<sp/>ifelse&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>{&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>1<sp/>add<sp/>3<sp/>1<sp/>roll<sp/>2<sp/>copy<sp/>add<sp/>0.5<sp/>mul&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>dup<sp/>4<sp/>3<sp/>roll<sp/>exch<sp/>4<sp/>index<sp/>axialSH&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>exch<sp/>3<sp/>2<sp/>roll<sp/>axialSH&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>}<sp/>{&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>pop<sp/>2<sp/>copy<sp/>add<sp/>0.5<sp/>mul&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;~23n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>axialCol<sp/>sc&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;~23s&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>axialCol<sp/>aload<sp/>pop<sp/>k&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;~23sn&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>exch<sp/>dup<sp/>dx<sp/>mul<sp/>x0<sp/>add<sp/>exch<sp/>dy<sp/>mul<sp/>y0<sp/>add&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>3<sp/>2<sp/>roll<sp/>dup<sp/>dx<sp/>mul<sp/>x0<sp/>add<sp/>exch<sp/>dy<sp/>mul<sp/>y0<sp/>add&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>dx<sp/>abs<sp/>dy<sp/>abs<sp/>ge<sp/>{&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>2<sp/>copy<sp/>yMin<sp/>sub<sp/>dy<sp/>mul<sp/>dx<sp/>div<sp/>add<sp/>yMin<sp/>m&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>yMax<sp/>sub<sp/>dy<sp/>mul<sp/>dx<sp/>div<sp/>add<sp/>yMax<sp/>l&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>2<sp/>copy<sp/>yMax<sp/>sub<sp/>dy<sp/>mul<sp/>dx<sp/>div<sp/>add<sp/>yMax<sp/>l&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>yMin<sp/>sub<sp/>dy<sp/>mul<sp/>dx<sp/>div<sp/>add<sp/>yMin<sp/>l&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>h<sp/>f*&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>}<sp/>{&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>exch<sp/>2<sp/>copy<sp/>xMin<sp/>sub<sp/>dx<sp/>mul<sp/>dy<sp/>div<sp/>add<sp/>xMin<sp/>exch<sp/>m&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>xMax<sp/>sub<sp/>dx<sp/>mul<sp/>dy<sp/>div<sp/>add<sp/>xMax<sp/>exch<sp/>l&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>exch<sp/>2<sp/>copy<sp/>xMax<sp/>sub<sp/>dx<sp/>mul<sp/>dy<sp/>div<sp/>add<sp/>xMax<sp/>exch<sp/>l&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>xMin<sp/>sub<sp/>dx<sp/>mul<sp/>dy<sp/>div<sp/>add<sp/>xMin<sp/>exch<sp/>l&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>h<sp/>f*&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>}<sp/>ifelse&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>}<sp/>ifelse&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;}<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;/radialCol<sp/>{&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>dup<sp/>t0<sp/>lt<sp/>{&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>pop<sp/>t0&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>}<sp/>{&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>dup<sp/>t1<sp/>gt<sp/>{&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>pop<sp/>t1&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>}<sp/>if&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>}<sp/>ifelse&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>func<sp/>n<sp/>array<sp/>astore&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;}<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;/radialSH<sp/>{&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>dup<sp/>0<sp/>eq<sp/>{&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>true&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>}<sp/>{&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>dup<sp/>8<sp/>eq<sp/>{&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>false&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>}<sp/>{&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>2<sp/>index<sp/>dt<sp/>mul<sp/>t0<sp/>add<sp/>radialCol&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>2<sp/>index<sp/>dt<sp/>mul<sp/>t0<sp/>add<sp/>radialCol<sp/>colordelta&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>}<sp/>ifelse&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>}<sp/>ifelse&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>{&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>1<sp/>add<sp/>3<sp/>1<sp/>roll<sp/>2<sp/>copy<sp/>add<sp/>0.5<sp/>mul&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>dup<sp/>4<sp/>3<sp/>roll<sp/>exch<sp/>4<sp/>index<sp/>radialSH&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>exch<sp/>3<sp/>2<sp/>roll<sp/>radialSH&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>}<sp/>{&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>pop<sp/>2<sp/>copy<sp/>add<sp/>0.5<sp/>mul<sp/>dt<sp/>mul<sp/>t0<sp/>add&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;~23n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>radialCol<sp/>sc&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;~23s&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>radialCol<sp/>aload<sp/>pop<sp/>k&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;~23sn&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>encl<sp/>{&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>exch<sp/>dup<sp/>dx<sp/>mul<sp/>x0<sp/>add<sp/>exch<sp/>dup<sp/>dy<sp/>mul<sp/>y0<sp/>add<sp/>exch<sp/>dr<sp/>mul<sp/>r0<sp/>add&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>0<sp/>360<sp/>arc<sp/>h&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>dup<sp/>dx<sp/>mul<sp/>x0<sp/>add<sp/>exch<sp/>dup<sp/>dy<sp/>mul<sp/>y0<sp/>add<sp/>exch<sp/>dr<sp/>mul<sp/>r0<sp/>add&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>360<sp/>0<sp/>arcn<sp/>h<sp/>f&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>}<sp/>{&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>2<sp/>copy&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>dup<sp/>dx<sp/>mul<sp/>x0<sp/>add<sp/>exch<sp/>dup<sp/>dy<sp/>mul<sp/>y0<sp/>add<sp/>exch<sp/>dr<sp/>mul<sp/>r0<sp/>add&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>a1<sp/>a2<sp/>arcn&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>dup<sp/>dx<sp/>mul<sp/>x0<sp/>add<sp/>exch<sp/>dup<sp/>dy<sp/>mul<sp/>y0<sp/>add<sp/>exch<sp/>dr<sp/>mul<sp/>r0<sp/>add&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>a2<sp/>a1<sp/>arcn<sp/>h&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>dup<sp/>dx<sp/>mul<sp/>x0<sp/>add<sp/>exch<sp/>dup<sp/>dy<sp/>mul<sp/>y0<sp/>add<sp/>exch<sp/>dr<sp/>mul<sp/>r0<sp/>add&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>a1<sp/>a2<sp/>arc&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>dup<sp/>dx<sp/>mul<sp/>x0<sp/>add<sp/>exch<sp/>dup<sp/>dy<sp/>mul<sp/>y0<sp/>add<sp/>exch<sp/>dr<sp/>mul<sp/>r0<sp/>add&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>a2<sp/>a1<sp/>arc<sp/>h<sp/>f&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>}<sp/>ifelse&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>}<sp/>ifelse&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;}<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;~123sn&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;end&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/>NULL</highlight></codeline>
<codeline lineno="832"><highlight class="normal">};</highlight></codeline>
<codeline lineno="833"><highlight class="normal"></highlight></codeline>
<codeline lineno="834"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*cmapProlog[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;/CIDInit<sp/>/ProcSet<sp/>findresource<sp/>begin&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;10<sp/>dict<sp/>begin&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>begincmap&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>/CMapType<sp/>1<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>/CMapName<sp/>/Identity-H<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>/CIDSystemInfo<sp/>3<sp/>dict<sp/>dup<sp/>begin&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>/Registry<sp/>(Adobe)<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>/Ordering<sp/>(Identity)<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>/Supplement<sp/>0<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>end<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>1<sp/>begincodespacerange&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>&lt;0000&gt;<sp/>&lt;ffff&gt;&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>endcodespacerange&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>0<sp/>usefont&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>1<sp/>begincidrange&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>&lt;0000&gt;<sp/>&lt;ffff&gt;<sp/>0&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>endcidrange&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>endcmap&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>currentdict<sp/>CMapName<sp/>exch<sp/>/CMap<sp/>defineresource<sp/>pop&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;end&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;10<sp/>dict<sp/>begin&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>begincmap&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>/CMapType<sp/>1<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>/CMapName<sp/>/Identity-V<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>/CIDSystemInfo<sp/>3<sp/>dict<sp/>dup<sp/>begin&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>/Registry<sp/>(Adobe)<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>/Ordering<sp/>(Identity)<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>/Supplement<sp/>0<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>end<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>/WMode<sp/>1<sp/>def&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>1<sp/>begincodespacerange&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>&lt;0000&gt;<sp/>&lt;ffff&gt;&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>endcodespacerange&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>0<sp/>usefont&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>1<sp/>begincidrange&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>&lt;0000&gt;<sp/>&lt;ffff&gt;<sp/>0&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>endcidrange&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>endcmap&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>currentdict<sp/>CMapName<sp/>exch<sp/>/CMap<sp/>defineresource<sp/>pop&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;end&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;end&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/>NULL</highlight></codeline>
<codeline lineno="877"><highlight class="normal">};</highlight></codeline>
<codeline lineno="878"><highlight class="normal"></highlight></codeline>
<codeline lineno="879"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="880"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Fonts</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="881"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="882"><highlight class="normal"></highlight></codeline>
<codeline lineno="883" refid="struct_p_s_subst_font" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_p_s_subst_font" kindref="compound">PSSubstFont</ref><sp/>{</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*psName;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>PostScript<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>mWidth;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>width<sp/>of<sp/>&apos;m&apos;<sp/>character</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="886"><highlight class="normal">};</highlight></codeline>
<codeline lineno="887"><highlight class="normal"></highlight></codeline>
<codeline lineno="888"><highlight class="normal"></highlight><highlight class="comment">//<sp/>NB:<sp/>must<sp/>be<sp/>in<sp/>same<sp/>order<sp/>as<sp/>base14SubstFonts<sp/>in<sp/>GfxFont.cc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="889"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="struct_p_s_subst_font" kindref="compound">PSSubstFont</ref><sp/>psBase14SubstFonts[14]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;Courier&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.600},</highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;Courier-Oblique&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.600},</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;Courier-Bold&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.600},</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;Courier-BoldOblique&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/>0.600},</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;Helvetica&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.833},</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;Helvetica-Oblique&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/>0.833},</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;Helvetica-Bold&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.889},</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;Helvetica-BoldOblique&quot;</highlight><highlight class="normal">,<sp/>0.889},</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;Times-Roman&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.788},</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;Times-Italic&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.722},</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;Times-Bold&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.833},</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;Times-BoldItalic&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/>0.778},</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>last<sp/>two<sp/>are<sp/>never<sp/>used<sp/>for<sp/>substitution</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;Symbol&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0},</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;ZapfDingbats&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0}</highlight></codeline>
<codeline lineno="905"><highlight class="normal">};</highlight></codeline>
<codeline lineno="906"><highlight class="normal"></highlight></codeline>
<codeline lineno="907"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Mapping<sp/>from<sp/>Type<sp/>1/1C<sp/>font<sp/>file<sp/>to<sp/>PS<sp/>font<sp/>name.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="908" refid="struct_p_s_t1_font_name" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_p_s_t1_font_name" kindref="compound">PST1FontName</ref><sp/>{</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><ref refid="struct_ref" kindref="compound">Ref</ref><sp/>fontFileID;</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*psName;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>PostScript<sp/>font<sp/>name<sp/>used<sp/>for<sp/>this</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>embedded<sp/>font<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="912"><highlight class="normal">};</highlight></codeline>
<codeline lineno="913"><highlight class="normal"></highlight></codeline>
<codeline lineno="914"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Info<sp/>for<sp/>8-bit<sp/>fonts</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="915" refid="struct_p_s_font8_info" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_p_s_font8_info" kindref="compound">PSFont8Info</ref><sp/>{</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><ref refid="struct_ref" kindref="compound">Ref</ref><sp/>fontID;</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*codeToGID;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>code-to-GID<sp/>mapping<sp/>for<sp/>TrueType<sp/>fonts</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="918"><highlight class="normal">};</highlight></codeline>
<codeline lineno="919"><highlight class="normal"></highlight></codeline>
<codeline lineno="920"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Encoding<sp/>info<sp/>for<sp/>substitute<sp/>16-bit<sp/>font</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="921" refid="struct_p_s_font16_enc" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_p_s_font16_enc" kindref="compound">PSFont16Enc</ref><sp/>{</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><ref refid="struct_ref" kindref="compound">Ref</ref><sp/>fontID;</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*enc;</highlight></codeline>
<codeline lineno="924"><highlight class="normal">};</highlight></codeline>
<codeline lineno="925"><highlight class="normal"></highlight></codeline>
<codeline lineno="926"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="927"><highlight class="normal"></highlight><highlight class="comment">//<sp/>process<sp/>colors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="928"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="929"><highlight class="normal"></highlight></codeline>
<codeline lineno="930"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>psProcessCyan<sp/><sp/><sp/><sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="931"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>psProcessMagenta<sp/><sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="932"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>psProcessYellow<sp/><sp/><sp/>4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="933"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>psProcessBlack<sp/><sp/><sp/><sp/>8</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="934"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>psProcessCMYK<sp/><sp/><sp/><sp/>15</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="935"><highlight class="normal"></highlight></codeline>
<codeline lineno="936"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="937"><highlight class="normal"></highlight><highlight class="comment">//<sp/>PSOutCustomColor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="938"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="939"><highlight class="normal"></highlight></codeline>
<codeline lineno="940" refid="class_p_s_out_custom_color" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_p_s_out_custom_color" kindref="compound">PSOutCustomColor</ref><sp/>{</highlight></codeline>
<codeline lineno="941"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="942"><highlight class="normal"></highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><ref refid="class_p_s_out_custom_color" kindref="compound">PSOutCustomColor</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>cA,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>mA,</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>yA,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>kA,<sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*nameA);</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/>~<ref refid="class_p_s_out_custom_color" kindref="compound">PSOutCustomColor</ref>();</highlight></codeline>
<codeline lineno="946"><highlight class="normal"></highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>c,<sp/>m,<sp/>y,<sp/>k;</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*name;</highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><ref refid="class_p_s_out_custom_color" kindref="compound">PSOutCustomColor</ref><sp/>*next;</highlight></codeline>
<codeline lineno="950"><highlight class="normal">};</highlight></codeline>
<codeline lineno="951"><highlight class="normal"></highlight></codeline>
<codeline lineno="952"><highlight class="normal">PSOutCustomColor::PSOutCustomColor(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>cA,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>mA,</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>yA,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>kA,<sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*nameA)<sp/>{</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/>c<sp/>=<sp/>cA;</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/>m<sp/>=<sp/>mA;</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/>y<sp/>=<sp/>yA;</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/>k<sp/>=<sp/>kA;</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/>name<sp/>=<sp/>nameA;</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/>next<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="960"><highlight class="normal">}</highlight></codeline>
<codeline lineno="961"><highlight class="normal"></highlight></codeline>
<codeline lineno="962"><highlight class="normal">PSOutCustomColor::~PSOutCustomColor()<sp/>{</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>name;</highlight></codeline>
<codeline lineno="964"><highlight class="normal">}</highlight></codeline>
<codeline lineno="965"><highlight class="normal"></highlight></codeline>
<codeline lineno="966"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="967"><highlight class="normal"></highlight></codeline>
<codeline lineno="968" refid="struct_p_s_out_img_clip_rect" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_p_s_out_img_clip_rect" kindref="compound">PSOutImgClipRect</ref><sp/>{</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x0,<sp/>x1,<sp/>y0,<sp/>y1;</highlight></codeline>
<codeline lineno="970"><highlight class="normal">};</highlight></codeline>
<codeline lineno="971"><highlight class="normal"></highlight></codeline>
<codeline lineno="972"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="973"><highlight class="normal"></highlight></codeline>
<codeline lineno="974" refid="struct_p_s_out_paper_size" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_p_s_out_paper_size" kindref="compound">PSOutPaperSize</ref><sp/>{</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><ref refid="struct_p_s_out_paper_size" kindref="compound">PSOutPaperSize</ref>(<ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*nameA,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>wA,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>hA)<sp/>{<sp/>name<sp/>=<sp/>nameA;<sp/>w<sp/>=<sp/>wA;<sp/>h<sp/>=<sp/>hA;<sp/>}</highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/>~<ref refid="struct_p_s_out_paper_size" kindref="compound">PSOutPaperSize</ref>()<sp/>{<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>name;<sp/>}</highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*name;</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>w,<sp/>h;</highlight></codeline>
<codeline lineno="979"><highlight class="normal">};</highlight></codeline>
<codeline lineno="980"><highlight class="normal"></highlight></codeline>
<codeline lineno="981"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="982"><highlight class="normal"></highlight><highlight class="comment">//<sp/>DeviceNRecoder</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="983"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="984"><highlight class="normal"></highlight></codeline>
<codeline lineno="985" refid="class_device_n_recoder" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_device_n_recoder" kindref="compound">DeviceNRecoder</ref>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="class_filter_stream" kindref="compound">FilterStream</ref><sp/>{</highlight></codeline>
<codeline lineno="986"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="987"><highlight class="normal"></highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><ref refid="class_device_n_recoder" kindref="compound">DeviceNRecoder</ref>(<ref refid="class_stream" kindref="compound">Stream</ref><sp/>*strA,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>widthA,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>heightA,</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_gfx_image_color_map" kindref="compound">GfxImageColorMap</ref><sp/>*colorMapA);</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>~<ref refid="class_device_n_recoder" kindref="compound">DeviceNRecoder</ref>();</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>StreamKind<sp/>getKind()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>strWeird;<sp/>}</highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>reset();</highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>getChar()</highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(bufIdx<sp/>&gt;=<sp/>bufSize<sp/>&amp;&amp;<sp/>!fillBuf())<sp/>?<sp/>EOF<sp/>:<sp/>buf[bufIdx++];<sp/>}</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lookChar()</highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(bufIdx<sp/>&gt;=<sp/>bufSize<sp/>&amp;&amp;<sp/>!fillBuf())<sp/>?<sp/>EOF<sp/>:<sp/>buf[bufIdx];<sp/>}</highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*getPSFilter(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>psLevel,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*indent)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;<sp/>}</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>GBool<sp/>isBinary(GBool<sp/>last<sp/>=<sp/>gTrue)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gTrue;<sp/>}</highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>GBool<sp/>isEncoder()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gTrue;<sp/>}</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"></highlight></codeline>
<codeline lineno="1001"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"></highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/>GBool<sp/>fillBuf();</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"></highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>width,<sp/>height;</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><ref refid="class_gfx_image_color_map" kindref="compound">GfxImageColorMap</ref><sp/>*colorMap;</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/><ref refid="class_function" kindref="compound">Function</ref><sp/>*func;</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><ref refid="class_image_stream" kindref="compound">ImageStream</ref><sp/>*imgStr;</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>buf[gfxColorMaxComps];</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pixelIdx;</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bufIdx;</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bufSize;</highlight></codeline>
<codeline lineno="1013"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"></highlight></codeline>
<codeline lineno="1015"><highlight class="normal">DeviceNRecoder::DeviceNRecoder(<ref refid="class_stream" kindref="compound">Stream</ref><sp/>*strA,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>widthA,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>heightA,</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_gfx_image_color_map" kindref="compound">GfxImageColorMap</ref><sp/>*colorMapA):</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_filter_stream" kindref="compound">FilterStream</ref>(strA)<sp/>{</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/>width<sp/>=<sp/>widthA;</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/>height<sp/>=<sp/>heightA;</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/>colorMap<sp/>=<sp/>colorMapA;</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/>imgStr<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/>pixelIdx<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/>bufIdx<sp/>=<sp/>gfxColorMaxComps;</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/>bufSize<sp/>=<sp/>((<ref refid="class_gfx_device_n_color_space" kindref="compound">GfxDeviceNColorSpace</ref><sp/>*)colorMap-&gt;getColorSpace())-&gt;</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getAlt()-&gt;getNComps();</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/>func<sp/>=<sp/>((<ref refid="class_gfx_device_n_color_space" kindref="compound">GfxDeviceNColorSpace</ref><sp/>*)colorMap-&gt;getColorSpace())-&gt;</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getTintTransformFunc();</highlight></codeline>
<codeline lineno="1028"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"></highlight></codeline>
<codeline lineno="1030"><highlight class="normal">DeviceNRecoder::~DeviceNRecoder()<sp/>{</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(imgStr)<sp/>{</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>imgStr;</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(str-&gt;isEncoder())<sp/>{</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>str;</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1037"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"></highlight></codeline>
<codeline lineno="1039"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DeviceNRecoder::reset()<sp/>{</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/>imgStr<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_image_stream" kindref="compound">ImageStream</ref>(str,<sp/>width,<sp/>colorMap-&gt;getNumPixelComps(),</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>colorMap-&gt;getBits());</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/>imgStr-&gt;reset();</highlight></codeline>
<codeline lineno="1043"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"></highlight></codeline>
<codeline lineno="1045"><highlight class="normal">GBool<sp/>DeviceNRecoder::fillBuf()<sp/>{</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/>Guchar<sp/>pixBuf[gfxColorMaxComps];</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/><ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/><ref refid="structcolor" kindref="compound">color</ref>;</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x[gfxColorMaxComps],<sp/>y[gfxColorMaxComps];</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"></highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pixelIdx<sp/>&gt;=<sp/>width<sp/>*<sp/>height)<sp/>{</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/>imgStr-&gt;getPixel(pixBuf);</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/>colorMap-&gt;getColor(pixBuf,<sp/>&amp;color);</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>&lt;<sp/>((<ref refid="class_gfx_device_n_color_space" kindref="compound">GfxDeviceNColorSpace</ref><sp/>*)colorMap-&gt;getColorSpace())-&gt;getNComps();</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><sp/><sp/>x[i]<sp/>=<sp/>colToDbl(color.c[i]);</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/>func-&gt;transform(x,<sp/>y);</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>bufSize;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/><sp/><sp/>buf[i]<sp/>=<sp/>(int)(y[i]<sp/>*<sp/>255<sp/>+<sp/>0.5);</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/>bufIdx<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/>++pixelIdx;</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gTrue;</highlight></codeline>
<codeline lineno="1068"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"></highlight></codeline>
<codeline lineno="1070"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1071"><highlight class="normal"></highlight><highlight class="comment">//<sp/>PSOutputDev</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1072"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1073"><highlight class="normal"></highlight></codeline>
<codeline lineno="1074"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*SignalFunc)(int);</highlight></codeline>
<codeline lineno="1076"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"></highlight></codeline>
<codeline lineno="1078"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>outputToFile(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*stream,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len)<sp/>{</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/>fwrite(data,<sp/>1,<sp/>len,<sp/>(FILE<sp/>*)stream);</highlight></codeline>
<codeline lineno="1080"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"></highlight></codeline>
<codeline lineno="1082"><highlight class="normal">PSOutputDev::PSOutputDev(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fileName,<sp/><ref refid="class_p_d_f_doc" kindref="compound">PDFDoc</ref><sp/>*doc,</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*psTitleA,</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;int&gt;<sp/>&amp;pages,<sp/>PSOutMode<sp/>modeA,</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>paperWidthA,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>paperHeightA,</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GBool<sp/>noCropA,<sp/>GBool<sp/>duplexA,</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>imgLLXA,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>imgLLYA,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>imgURXA,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>imgURYA,</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GBool<sp/>forceRasterizeA,</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GBool<sp/>manualCtrlA,</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PSOutCustomCodeCbk<sp/>customCodeCbkA,</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*customCodeCbkDataA)<sp/>{</highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/>FILE<sp/>*f;</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/>PSFileType<sp/>fileTypeA;</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"></highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/>underlayCbk<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/>underlayCbkData<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/>overlayCbk<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/>overlayCbkData<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/>customCodeCbk<sp/>=<sp/>customCodeCbkA;</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/>customCodeCbkData<sp/>=<sp/>customCodeCbkDataA;</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"></highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/>fontIDs<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/>fontNames<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_goo_hash" kindref="compound">GooHash</ref>(gTrue);</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/>t1FontNames<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/>font8Info<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/>font16Enc<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/>imgIDs<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/>formIDs<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/>paperSizes<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/>embFontList<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/>customColors<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/><sp/>haveTextClip<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><sp/><sp/>t3String<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/>forceRasterize<sp/>=<sp/>forceRasterizeA;</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/>psTitle<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"></highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>open<sp/>file<sp/>or<sp/>pipe</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!strcmp(fileName,<sp/></highlight><highlight class="stringliteral">&quot;-&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/><sp/><sp/>fileTypeA<sp/>=<sp/>psStdout;</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/><sp/><sp/>f<sp/>=<sp/>stdout;</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fileName[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;|&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/><sp/><sp/>fileTypeA<sp/>=<sp/>psPipe;</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>HAVE_POPEN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1124"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>_WIN32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/><sp/><sp/>signal(SIGPIPE,<sp/>(SignalFunc)SIG_IGN);</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(f<sp/>=<sp/>popen(fileName<sp/>+<sp/>1,<sp/></highlight><highlight class="stringliteral">&quot;w&quot;</highlight><highlight class="normal">)))<sp/>{</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error(errIO,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Couldn&apos;t<sp/>run<sp/>print<sp/>command<sp/>&apos;{0:s}&apos;&quot;</highlight><highlight class="normal">,<sp/>fileName);</highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ok<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errIO,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Print<sp/>commands<sp/>are<sp/>not<sp/>supported<sp/>(&apos;{0:s}&apos;)&quot;</highlight><highlight class="normal">,<sp/>fileName);</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/><sp/><sp/>ok<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/><sp/><sp/>fileTypeA<sp/>=<sp/>psFile;</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(f<sp/>=<sp/>fopen(fileName,<sp/></highlight><highlight class="stringliteral">&quot;w&quot;</highlight><highlight class="normal">)))<sp/>{</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error(errIO,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Couldn&apos;t<sp/>open<sp/>PostScript<sp/>file<sp/>&apos;{0:s}&apos;&quot;</highlight><highlight class="normal">,<sp/>fileName);</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ok<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"></highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/>init(outputToFile,<sp/>f,<sp/>fileTypeA,<sp/>psTitleA,</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>doc,<sp/>pages,<sp/>modeA,</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>imgLLXA,<sp/>imgLLYA,<sp/>imgURXA,<sp/>imgURYA,<sp/>manualCtrlA,</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>paperWidthA,<sp/>paperHeightA,<sp/>noCropA,<sp/>duplexA);</highlight></codeline>
<codeline lineno="1150"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"></highlight></codeline>
<codeline lineno="1152"><highlight class="normal">PSOutputDev::PSOutputDev(PSOutputFunc<sp/>outputFuncA,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*outputStreamA,</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*psTitleA,</highlight></codeline>
<codeline lineno="1154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_p_d_f_doc" kindref="compound">PDFDoc</ref><sp/>*doc,</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;int&gt;<sp/>&amp;pages,<sp/>PSOutMode<sp/>modeA,</highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>paperWidthA,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>paperHeightA,</highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GBool<sp/>noCropA,<sp/>GBool<sp/>duplexA,</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>imgLLXA,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>imgLLYA,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>imgURXA,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>imgURYA,</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GBool<sp/>forceRasterizeA,</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GBool<sp/>manualCtrlA,</highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PSOutCustomCodeCbk<sp/>customCodeCbkA,</highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*customCodeCbkDataA)<sp/>{</highlight></codeline>
<codeline lineno="1163"><highlight class="normal"><sp/><sp/>underlayCbk<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1164"><highlight class="normal"><sp/><sp/>underlayCbkData<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/>overlayCbk<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/><sp/>overlayCbkData<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/>customCodeCbk<sp/>=<sp/>customCodeCbkA;</highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/>customCodeCbkData<sp/>=<sp/>customCodeCbkDataA;</highlight></codeline>
<codeline lineno="1169"><highlight class="normal"></highlight></codeline>
<codeline lineno="1170"><highlight class="normal"><sp/><sp/>fontIDs<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1171"><highlight class="normal"><sp/><sp/>fontNames<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_goo_hash" kindref="compound">GooHash</ref>(gTrue);</highlight></codeline>
<codeline lineno="1172"><highlight class="normal"><sp/><sp/>t1FontNames<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/>font8Info<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/>font16Enc<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/>imgIDs<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/>formIDs<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/>paperSizes<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/>embFontList<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/>customColors<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/>haveTextClip<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/>t3String<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/>forceRasterize<sp/>=<sp/>forceRasterizeA;</highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/>psTitle<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"></highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/>init(outputFuncA,<sp/>outputStreamA,<sp/>psGeneric,<sp/>psTitleA,</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>doc,<sp/>pages,<sp/>modeA,</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>imgLLXA,<sp/>imgLLYA,<sp/>imgURXA,<sp/>imgURYA,<sp/>manualCtrlA,</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>paperWidthA,<sp/>paperHeightA,<sp/>noCropA,<sp/>duplexA);</highlight></codeline>
<codeline lineno="1189"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1190"><highlight class="normal"></highlight></codeline>
<codeline lineno="1191" refid="struct_standard_media" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_standard_media" kindref="compound">StandardMedia</ref><sp/>{</highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name;</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>width;</highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>height;</highlight></codeline>
<codeline lineno="1195"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1196"><highlight class="normal"></highlight></codeline>
<codeline lineno="1197"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_standard_media" kindref="compound">StandardMedia</ref><sp/>standardMedia[]<sp/>=</highlight></codeline>
<codeline lineno="1198"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;A0&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/>2384,<sp/>3371<sp/>},</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;A1&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/>1685,<sp/>2384<sp/>},</highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;A2&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/>1190,<sp/>1684<sp/>},</highlight></codeline>
<codeline lineno="1202"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;A3&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>842,<sp/>1190<sp/>},</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;A4&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>595,<sp/><sp/>842<sp/>},</highlight></codeline>
<codeline lineno="1204"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;A5&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>420,<sp/><sp/>595<sp/>},</highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;B4&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>729,<sp/>1032<sp/>},</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;B5&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>516,<sp/><sp/>729<sp/>},</highlight></codeline>
<codeline lineno="1207"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;Letter&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/>612,<sp/><sp/>792<sp/>},</highlight></codeline>
<codeline lineno="1208"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;Tabloid&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/>792,<sp/>1224<sp/>},</highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;Ledger&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/>1224,<sp/><sp/>792<sp/>},</highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;Legal&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/>612,<sp/>1008<sp/>},</highlight></codeline>
<codeline lineno="1211"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;Statement&quot;</highlight><highlight class="normal">,<sp/>396,<sp/><sp/>612<sp/>},</highlight></codeline>
<codeline lineno="1212"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;Executive&quot;</highlight><highlight class="normal">,<sp/>540,<sp/><sp/>720<sp/>},</highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;Folio&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/>612,<sp/><sp/>936<sp/>},</highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;Quarto&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/>610,<sp/><sp/>780<sp/>},</highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;10x14&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/>720,<sp/>1008<sp/>},</highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>NULL,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/>0<sp/>}</highlight></codeline>
<codeline lineno="1217"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1218"><highlight class="normal"></highlight></codeline>
<codeline lineno="1219"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>PLRM<sp/>specifies<sp/>a<sp/>tolerance<sp/>of<sp/>5<sp/>points<sp/>when<sp/>matching<sp/>page<sp/>sizes<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1220"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>pageDimensionEqual(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b)<sp/>{</highlight></codeline>
<codeline lineno="1221"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(abs<sp/>(a<sp/>-<sp/>b)<sp/>&lt;<sp/>5);</highlight></codeline>
<codeline lineno="1222"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1223"><highlight class="normal"></highlight></codeline>
<codeline lineno="1224"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Shared<sp/>initialization<sp/>of<sp/>PSOutputDev<sp/>members.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1225"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>Store<sp/>the<sp/>values<sp/>but<sp/>do<sp/>not<sp/>process<sp/>them<sp/>so<sp/>the<sp/>function<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1226"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>created<sp/>the<sp/>PSOutputDev<sp/>can<sp/>use<sp/>the<sp/>various<sp/>setters<sp/>to<sp/>change<sp/>defaults.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1227"><highlight class="normal"></highlight></codeline>
<codeline lineno="1228"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PSOutputDev::init(PSOutputFunc<sp/>outputFuncA,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*outputStreamA,</highlight></codeline>
<codeline lineno="1229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PSFileType<sp/>fileTypeA,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*psTitleA,<sp/><ref refid="class_p_d_f_doc" kindref="compound">PDFDoc</ref><sp/>*docA,</highlight></codeline>
<codeline lineno="1230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;int&gt;<sp/>&amp;pagesA,<sp/>PSOutMode<sp/>modeA,</highlight></codeline>
<codeline lineno="1231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>imgLLXA,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>imgLLYA,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>imgURXA,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>imgURYA,</highlight></codeline>
<codeline lineno="1232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GBool<sp/>manualCtrlA,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>paperWidthA,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>paperHeightA,</highlight></codeline>
<codeline lineno="1233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GBool<sp/>noCropA,<sp/>GBool<sp/>duplexA)<sp/>{</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"></highlight></codeline>
<codeline lineno="1235"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pagesA.empty())<sp/>{</highlight></codeline>
<codeline lineno="1236"><highlight class="normal"><sp/><sp/><sp/><sp/>ok<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="1237"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1238"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1239"><highlight class="normal"></highlight></codeline>
<codeline lineno="1240"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>initialize</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/><sp/>postInitDone<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"><sp/><sp/>embedType1<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="1243"><highlight class="normal"><sp/><sp/>embedTrueType<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="1244"><highlight class="normal"><sp/><sp/>embedCIDPostScript<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="1245"><highlight class="normal"><sp/><sp/>embedCIDTrueType<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="1246"><highlight class="normal"><sp/><sp/>fontPassthrough<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/><sp/>optimizeColorSpace<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="1248"><highlight class="normal"><sp/><sp/>preloadImagesForms<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="1249"><highlight class="normal"><sp/><sp/>generateOPI<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><sp/><sp/>useASCIIHex<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="1251"><highlight class="normal"><sp/><sp/>useBinary<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="1252"><highlight class="normal"><sp/><sp/>enableLZW<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="1253"><highlight class="normal"><sp/><sp/>enableFlate<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="1254"><highlight class="normal"><sp/><sp/>rasterMono<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><sp/><sp/>rasterResolution<sp/>=<sp/>300;</highlight></codeline>
<codeline lineno="1256"><highlight class="normal"><sp/><sp/>uncompressPreloadedImages<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/><sp/>rasterAntialias<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="1258"><highlight class="normal"><sp/><sp/>displayText<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/><sp/>ok<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="1260"><highlight class="normal"><sp/><sp/>outputFunc<sp/>=<sp/>outputFuncA;</highlight></codeline>
<codeline lineno="1261"><highlight class="normal"><sp/><sp/>outputStream<sp/>=<sp/>outputStreamA;</highlight></codeline>
<codeline lineno="1262"><highlight class="normal"><sp/><sp/>fileType<sp/>=<sp/>fileTypeA;</highlight></codeline>
<codeline lineno="1263"><highlight class="normal"><sp/><sp/>psTitle<sp/>=<sp/>(psTitleA?<sp/>strdup(psTitleA):<sp/>NULL);</highlight></codeline>
<codeline lineno="1264"><highlight class="normal"><sp/><sp/>doc<sp/>=<sp/>docA;</highlight></codeline>
<codeline lineno="1265"><highlight class="normal"><sp/><sp/>level<sp/>=<sp/>globalParams-&gt;getPSLevel();</highlight></codeline>
<codeline lineno="1266"><highlight class="normal"><sp/><sp/>pages<sp/>=<sp/>pagesA;</highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><sp/><sp/>mode<sp/>=<sp/>modeA;</highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/>paperWidth<sp/>=<sp/>paperWidthA;</highlight></codeline>
<codeline lineno="1269"><highlight class="normal"><sp/><sp/>paperHeight<sp/>=<sp/>paperHeightA;</highlight></codeline>
<codeline lineno="1270"><highlight class="normal"><sp/><sp/>noCrop<sp/>=<sp/>noCropA;</highlight></codeline>
<codeline lineno="1271"><highlight class="normal"><sp/><sp/>duplex<sp/>=<sp/>duplexA;</highlight></codeline>
<codeline lineno="1272"><highlight class="normal"><sp/><sp/>imgLLX<sp/>=<sp/>imgLLXA;</highlight></codeline>
<codeline lineno="1273"><highlight class="normal"><sp/><sp/>imgLLY<sp/>=<sp/>imgLLYA;</highlight></codeline>
<codeline lineno="1274"><highlight class="normal"><sp/><sp/>imgURX<sp/>=<sp/>imgURXA;</highlight></codeline>
<codeline lineno="1275"><highlight class="normal"><sp/><sp/>imgURY<sp/>=<sp/>imgURYA;</highlight></codeline>
<codeline lineno="1276"><highlight class="normal"><sp/><sp/>manualCtrl<sp/>=<sp/>manualCtrlA;</highlight></codeline>
<codeline lineno="1277"><highlight class="normal"></highlight></codeline>
<codeline lineno="1278"><highlight class="normal"><sp/><sp/>xref<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1279"><highlight class="normal"></highlight></codeline>
<codeline lineno="1280"><highlight class="normal"><sp/><sp/>processColors<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1281"><highlight class="normal"><sp/><sp/>inType3Char<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="1282"><highlight class="normal"><sp/><sp/>inUncoloredPattern<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="1283"><highlight class="normal"><sp/><sp/>t3FillColorOnly<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="1284"><highlight class="normal"></highlight></codeline>
<codeline lineno="1285"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>OPI_SUPPORT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1286"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>initialize<sp/>OPI<sp/>nesting<sp/>levels</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1287"><highlight class="normal"><sp/><sp/>opi13Nest<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1288"><highlight class="normal"><sp/><sp/>opi20Nest<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1289"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1290"><highlight class="normal"></highlight></codeline>
<codeline lineno="1291"><highlight class="normal"><sp/><sp/>tx0<sp/>=<sp/>ty0<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="1292"><highlight class="normal"><sp/><sp/>xScale0<sp/>=<sp/>yScale0<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1293"><highlight class="normal"><sp/><sp/>rotate0<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="1294"><highlight class="normal"><sp/><sp/>clipLLX0<sp/>=<sp/>clipLLY0<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1295"><highlight class="normal"><sp/><sp/>clipURX0<sp/>=<sp/>clipURY0<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="1296"><highlight class="normal"></highlight></codeline>
<codeline lineno="1297"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>initialize<sp/>sequential<sp/>page<sp/>number</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1298"><highlight class="normal"><sp/><sp/>seqPage<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1299"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1300"><highlight class="normal"></highlight></codeline>
<codeline lineno="1301"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Complete<sp/>the<sp/>initialization<sp/>after<sp/>the<sp/>function<sp/>that<sp/>created<sp/>the<sp/>PSOutputDev</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1302"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>has<sp/>had<sp/>a<sp/>chance<sp/>to<sp/>modify<sp/>default<sp/>values<sp/>with<sp/>the<sp/>various<sp/>setters.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1303"><highlight class="normal"></highlight></codeline>
<codeline lineno="1304"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PSOutputDev::postInit()</highlight></codeline>
<codeline lineno="1305"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1306"><highlight class="normal"><sp/><sp/><ref refid="class_catalog" kindref="compound">Catalog</ref><sp/>*catalog;</highlight></codeline>
<codeline lineno="1307"><highlight class="normal"><sp/><sp/><ref refid="class_p_d_f_rectangle" kindref="compound">PDFRectangle</ref><sp/>*box;</highlight></codeline>
<codeline lineno="1308"><highlight class="normal"><sp/><sp/><ref refid="struct_p_s_out_paper_size" kindref="compound">PSOutPaperSize</ref><sp/>*size;</highlight></codeline>
<codeline lineno="1309"><highlight class="normal"><sp/><sp/><ref refid="class_goo_list" kindref="compound">GooList</ref><sp/>*names;</highlight></codeline>
<codeline lineno="1310"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>w,<sp/>h,<sp/>i;</highlight></codeline>
<codeline lineno="1311"><highlight class="normal"></highlight></codeline>
<codeline lineno="1312"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(postInitDone<sp/>||<sp/>!ok)<sp/>{</highlight></codeline>
<codeline lineno="1313"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1314"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1315"><highlight class="normal"></highlight></codeline>
<codeline lineno="1316"><highlight class="normal"><sp/><sp/>postInitDone<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="1317"><highlight class="normal"></highlight></codeline>
<codeline lineno="1318"><highlight class="normal"><sp/><sp/>xref<sp/>=<sp/>doc-&gt;getXRef();</highlight></codeline>
<codeline lineno="1319"><highlight class="normal"><sp/><sp/>catalog<sp/>=<sp/>doc-&gt;getCatalog();</highlight></codeline>
<codeline lineno="1320"><highlight class="normal"></highlight></codeline>
<codeline lineno="1321"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(paperWidth<sp/>&lt;<sp/>0<sp/>||<sp/>paperHeight<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1322"><highlight class="normal"><sp/><sp/><sp/><sp/>paperMatch<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="1323"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1324"><highlight class="normal"><sp/><sp/><sp/><sp/>paperMatch<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="1325"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1326"><highlight class="normal"><sp/><sp/><ref refid="class_page" kindref="compound">Page</ref><sp/>*page;</highlight></codeline>
<codeline lineno="1327"><highlight class="normal"><sp/><sp/>paperSizes<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_goo_list" kindref="compound">GooList</ref>();</highlight></codeline>
<codeline lineno="1328"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>pgi<sp/>=<sp/>0;<sp/>pgi<sp/>&lt;<sp/>pages.size();<sp/>++pgi)<sp/>{</highlight></codeline>
<codeline lineno="1329"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pg<sp/>=<sp/>pages[pgi];</highlight></codeline>
<codeline lineno="1330"><highlight class="normal"><sp/><sp/><sp/><sp/>page<sp/>=<sp/>catalog-&gt;getPage(pg);</highlight></codeline>
<codeline lineno="1331"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(page<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="1332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>paperMatch<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="1333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!paperMatch)<sp/>{</highlight></codeline>
<codeline lineno="1334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>w<sp/>=<sp/>paperWidth;</highlight></codeline>
<codeline lineno="1335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>h<sp/>=<sp/>paperHeight;</highlight></codeline>
<codeline lineno="1336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(w<sp/>&lt;<sp/>0<sp/>||<sp/>h<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Unable<sp/>to<sp/>obtain<sp/>a<sp/>paper<sp/>size<sp/>from<sp/>the<sp/>document<sp/>and<sp/>no<sp/>page<sp/>size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>specified.<sp/>In<sp/>this<sp/>case<sp/>use<sp/>A4<sp/>as<sp/>the<sp/>page<sp/>size<sp/>to<sp/>ensure<sp/>the<sp/>PS<sp/>output<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>valid.<sp/>This<sp/>will<sp/>only<sp/>occur<sp/>if<sp/>the<sp/>PDF<sp/>is<sp/>very<sp/>broken.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>w<sp/>=<sp/>595;</highlight></codeline>
<codeline lineno="1341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>h<sp/>=<sp/>842;</highlight></codeline>
<codeline lineno="1342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1343"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(noCrop)<sp/>{</highlight></codeline>
<codeline lineno="1344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>w<sp/>=<sp/>(int)ceil(page-&gt;getMediaWidth());</highlight></codeline>
<codeline lineno="1345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>h<sp/>=<sp/>(int)ceil(page-&gt;getMediaHeight());</highlight></codeline>
<codeline lineno="1346"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>w<sp/>=<sp/>(int)ceil(page-&gt;getCropWidth());</highlight></codeline>
<codeline lineno="1348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>h<sp/>=<sp/>(int)ceil(page-&gt;getCropHeight());</highlight></codeline>
<codeline lineno="1349"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1350"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(paperMatch)<sp/>{</highlight></codeline>
<codeline lineno="1351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rotate<sp/>=<sp/>page-&gt;getRotate();</highlight></codeline>
<codeline lineno="1352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rotate<sp/>==<sp/>90<sp/>||<sp/>rotate<sp/>==<sp/>270)</highlight></codeline>
<codeline lineno="1353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::swap(w,<sp/>h);</highlight></codeline>
<codeline lineno="1354"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1355"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(w<sp/><sp/>&gt;<sp/>paperWidth)</highlight></codeline>
<codeline lineno="1356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>paperWidth<sp/>=<sp/>w;</highlight></codeline>
<codeline lineno="1357"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(h<sp/><sp/>&gt;<sp/>paperHeight)</highlight></codeline>
<codeline lineno="1358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>paperHeight<sp/>=<sp/>h;</highlight></codeline>
<codeline lineno="1359"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>paperSizes-&gt;getLength();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>size<sp/>=<sp/>(<ref refid="struct_p_s_out_paper_size" kindref="compound">PSOutPaperSize</ref><sp/>*)paperSizes-&gt;get(i);</highlight></codeline>
<codeline lineno="1361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pageDimensionEqual(w,<sp/>size-&gt;w)<sp/>&amp;&amp;<sp/>pageDimensionEqual(h,<sp/>size-&gt;h))</highlight></codeline>
<codeline lineno="1362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1363"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1364"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>==<sp/>paperSizes-&gt;getLength())<sp/>{</highlight></codeline>
<codeline lineno="1365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_standard_media" kindref="compound">StandardMedia</ref><sp/>*media<sp/>=<sp/>standardMedia;</highlight></codeline>
<codeline lineno="1366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*name<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(media-&gt;name)<sp/>{</highlight></codeline>
<codeline lineno="1368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pageDimensionEqual(w,<sp/>media-&gt;width)<sp/>&amp;&amp;<sp/>pageDimensionEqual(h,<sp/>media-&gt;height))<sp/>{</highlight></codeline>
<codeline lineno="1369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref>(media-&gt;name);</highlight></codeline>
<codeline lineno="1370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>w<sp/>=<sp/>media-&gt;width;</highlight></codeline>
<codeline lineno="1371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>h<sp/>=<sp/>media-&gt;height;</highlight></codeline>
<codeline lineno="1372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>media++;</highlight></codeline>
<codeline lineno="1375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!name)</highlight></codeline>
<codeline lineno="1377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name<sp/>=<sp/>GooString::format(</highlight><highlight class="stringliteral">&quot;{0:d}x{1:d}mm&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(w*25.4/72),<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(h*25.4/72));</highlight></codeline>
<codeline lineno="1378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>paperSizes-&gt;append(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="struct_p_s_out_paper_size" kindref="compound">PSOutPaperSize</ref>(name,<sp/>w,<sp/>h));</highlight></codeline>
<codeline lineno="1379"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1380"><highlight class="normal"><sp/><sp/><sp/><sp/>pagePaperSize.insert(std::pair&lt;int,int&gt;(pg,<sp/>i));</highlight></codeline>
<codeline lineno="1381"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!paperMatch)</highlight></codeline>
<codeline lineno="1382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>we<sp/>only<sp/>need<sp/>one<sp/>entry<sp/>when<sp/>all<sp/>pages<sp/>are<sp/>the<sp/>same<sp/>size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1383"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1384"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(imgLLX<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>imgURX<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>imgLLY<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>imgURY<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1385"><highlight class="normal"><sp/><sp/><sp/><sp/>imgLLX<sp/>=<sp/>imgLLY<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1386"><highlight class="normal"><sp/><sp/><sp/><sp/>imgURX<sp/>=<sp/>paperWidth;</highlight></codeline>
<codeline lineno="1387"><highlight class="normal"><sp/><sp/><sp/><sp/>imgURY<sp/>=<sp/>paperHeight;</highlight></codeline>
<codeline lineno="1388"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1389"><highlight class="normal"><sp/><sp/>std::vector&lt;int&gt;<sp/>pageList;</highlight></codeline>
<codeline lineno="1390"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mode<sp/>==<sp/>psModeForm)<sp/>{</highlight></codeline>
<codeline lineno="1391"><highlight class="normal"><sp/><sp/><sp/><sp/>pageList.push_back(pages[0]);</highlight></codeline>
<codeline lineno="1392"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1393"><highlight class="normal"><sp/><sp/><sp/><sp/>pageList<sp/>=<sp/>pages;</highlight></codeline>
<codeline lineno="1394"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1395"><highlight class="normal"></highlight></codeline>
<codeline lineno="1396"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>initialize<sp/>fontIDs,<sp/>fontFileIDs,<sp/>and<sp/>fontFileNames<sp/>lists</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1397"><highlight class="normal"><sp/><sp/>fontIDSize<sp/>=<sp/>64;</highlight></codeline>
<codeline lineno="1398"><highlight class="normal"><sp/><sp/>fontIDLen<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1399"><highlight class="normal"><sp/><sp/>fontIDs<sp/>=<sp/>(<ref refid="struct_ref" kindref="compound">Ref</ref><sp/>*)gmallocn(fontIDSize,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_ref" kindref="compound">Ref</ref>));</highlight></codeline>
<codeline lineno="1400"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>14;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1401"><highlight class="normal"><sp/><sp/><sp/><sp/>fontNames-&gt;add(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref>(psBase14SubstFonts[i].psName),<sp/>1);</highlight></codeline>
<codeline lineno="1402"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1403"><highlight class="normal"><sp/><sp/>names<sp/>=<sp/>globalParams-&gt;getPSResidentFonts();</highlight></codeline>
<codeline lineno="1404"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>names-&gt;getLength();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1405"><highlight class="normal"><sp/><sp/><sp/><sp/>fontNames-&gt;add((<ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*)names-&gt;get(i),<sp/>1);</highlight></codeline>
<codeline lineno="1406"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1407"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>names;</highlight></codeline>
<codeline lineno="1408"><highlight class="normal"><sp/><sp/>t1FontNameSize<sp/>=<sp/>64;</highlight></codeline>
<codeline lineno="1409"><highlight class="normal"><sp/><sp/>t1FontNameLen<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1410"><highlight class="normal"><sp/><sp/>t1FontNames<sp/>=<sp/>(<ref refid="struct_p_s_t1_font_name" kindref="compound">PST1FontName</ref><sp/>*)gmallocn(t1FontNameSize,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_p_s_t1_font_name" kindref="compound">PST1FontName</ref>));</highlight></codeline>
<codeline lineno="1411"><highlight class="normal"><sp/><sp/>font8InfoLen<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1412"><highlight class="normal"><sp/><sp/>font8InfoSize<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1413"><highlight class="normal"><sp/><sp/>font16EncLen<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1414"><highlight class="normal"><sp/><sp/>font16EncSize<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1415"><highlight class="normal"><sp/><sp/>imgIDLen<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1416"><highlight class="normal"><sp/><sp/>imgIDSize<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1417"><highlight class="normal"><sp/><sp/>formIDLen<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1418"><highlight class="normal"><sp/><sp/>formIDSize<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1419"><highlight class="normal"></highlight></codeline>
<codeline lineno="1420"><highlight class="normal"><sp/><sp/>numSaves<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1421"><highlight class="normal"><sp/><sp/>numTilingPatterns<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1422"><highlight class="normal"><sp/><sp/>nextFunc<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1423"><highlight class="normal"></highlight></codeline>
<codeline lineno="1424"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>initialize<sp/>embedded<sp/>font<sp/>resource<sp/>comment<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1425"><highlight class="normal"><sp/><sp/>embFontList<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref>();</highlight></codeline>
<codeline lineno="1426"><highlight class="normal"></highlight></codeline>
<codeline lineno="1427"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!manualCtrl)<sp/>{</highlight></codeline>
<codeline lineno="1428"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_page" kindref="compound">Page</ref><sp/>*page;</highlight></codeline>
<codeline lineno="1429"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>check<sp/>is<sp/>needed<sp/>in<sp/>case<sp/>the<sp/>document<sp/>has<sp/>zero<sp/>pages</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1430"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((page<sp/>=<sp/>doc-&gt;getPage(pageList[0])))<sp/>{</highlight></codeline>
<codeline lineno="1431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writeHeader(pageList,</highlight></codeline>
<codeline lineno="1432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>page-&gt;getMediaBox(),</highlight></codeline>
<codeline lineno="1433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>page-&gt;getCropBox(),</highlight></codeline>
<codeline lineno="1434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>page-&gt;getRotate(),</highlight></codeline>
<codeline lineno="1435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>psTitle);</highlight></codeline>
<codeline lineno="1436"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>page<sp/>{0:d}&quot;</highlight><highlight class="normal">,<sp/>pageList[0]);</highlight></codeline>
<codeline lineno="1438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>box<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_p_d_f_rectangle" kindref="compound">PDFRectangle</ref>(0,<sp/>0,<sp/>1,<sp/>1);</highlight></codeline>
<codeline lineno="1439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writeHeader(pageList,<sp/>box,<sp/>box,<sp/>0,<sp/>psTitle);</highlight></codeline>
<codeline lineno="1440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>box;</highlight></codeline>
<codeline lineno="1441"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1442"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mode<sp/>!=<sp/>psModeForm)<sp/>{</highlight></codeline>
<codeline lineno="1443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;%%BeginProlog\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1444"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1445"><highlight class="normal"><sp/><sp/><sp/><sp/>writeXpdfProcset();</highlight></codeline>
<codeline lineno="1446"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mode<sp/>!=<sp/>psModeForm)<sp/>{</highlight></codeline>
<codeline lineno="1447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;%%EndProlog\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;%%BeginSetup\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1449"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1450"><highlight class="normal"><sp/><sp/><sp/><sp/>writeDocSetup(doc,<sp/>catalog,<sp/>pageList,<sp/>duplex);</highlight></codeline>
<codeline lineno="1451"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mode<sp/>!=<sp/>psModeForm)<sp/>{</highlight></codeline>
<codeline lineno="1452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;%%EndSetup\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1453"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1454"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1455"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1456"><highlight class="normal"></highlight></codeline>
<codeline lineno="1457"><highlight class="normal">PSOutputDev::~PSOutputDev()<sp/>{</highlight></codeline>
<codeline lineno="1458"><highlight class="normal"><sp/><sp/><ref refid="class_p_s_out_custom_color" kindref="compound">PSOutCustomColor</ref><sp/>*cc;</highlight></codeline>
<codeline lineno="1459"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="1460"><highlight class="normal"></highlight></codeline>
<codeline lineno="1461"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ok)<sp/>{</highlight></codeline>
<codeline lineno="1462"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!postInitDone)<sp/>{</highlight></codeline>
<codeline lineno="1463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>postInit();</highlight></codeline>
<codeline lineno="1464"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1465"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!manualCtrl)<sp/>{</highlight></codeline>
<codeline lineno="1466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;%%Trailer\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writeTrailer();</highlight></codeline>
<codeline lineno="1468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mode<sp/>!=<sp/>psModeForm)<sp/>{</highlight></codeline>
<codeline lineno="1469"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;%%EOF\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1471"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1472"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fileType<sp/>==<sp/>psFile)<sp/>{</highlight></codeline>
<codeline lineno="1473"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>MACOS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ICS_MapRefNumAndAssign((</highlight><highlight class="keywordtype">short</highlight><highlight class="normal">)((FILE<sp/>*)outputStream)-&gt;handle);</highlight></codeline>
<codeline lineno="1475"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fclose((FILE<sp/>*)outputStream);</highlight></codeline>
<codeline lineno="1477"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1478"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>HAVE_POPEN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1479"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fileType<sp/>==<sp/>psPipe)<sp/>{</highlight></codeline>
<codeline lineno="1480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pclose((FILE<sp/>*)outputStream);</highlight></codeline>
<codeline lineno="1481"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>_WIN32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>signal(SIGPIPE,<sp/>(SignalFunc)SIG_DFL);</highlight></codeline>
<codeline lineno="1483"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1484"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1485"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1486"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1487"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(paperSizes)<sp/>{</highlight></codeline>
<codeline lineno="1488"><highlight class="normal"><sp/><sp/><sp/><sp/>deleteGooList(paperSizes,<sp/><ref refid="struct_p_s_out_paper_size" kindref="compound">PSOutPaperSize</ref>);</highlight></codeline>
<codeline lineno="1489"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1490"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(embFontList)<sp/>{</highlight></codeline>
<codeline lineno="1491"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>embFontList;</highlight></codeline>
<codeline lineno="1492"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1493"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fontIDs)<sp/>{</highlight></codeline>
<codeline lineno="1494"><highlight class="normal"><sp/><sp/><sp/><sp/>gfree(fontIDs);</highlight></codeline>
<codeline lineno="1495"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1496"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>fontNames;</highlight></codeline>
<codeline lineno="1497"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t1FontNames)<sp/>{</highlight></codeline>
<codeline lineno="1498"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>t1FontNameLen;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>t1FontNames[i].psName;</highlight></codeline>
<codeline lineno="1500"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1501"><highlight class="normal"><sp/><sp/><sp/><sp/>gfree(t1FontNames);</highlight></codeline>
<codeline lineno="1502"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1503"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(font8Info)<sp/>{</highlight></codeline>
<codeline lineno="1504"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>font8InfoLen;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>gfree(font8Info[i].codeToGID);</highlight></codeline>
<codeline lineno="1506"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1507"><highlight class="normal"><sp/><sp/><sp/><sp/>gfree(font8Info);</highlight></codeline>
<codeline lineno="1508"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1509"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(font16Enc)<sp/>{</highlight></codeline>
<codeline lineno="1510"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>font16EncLen;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(font16Enc[i].enc)<sp/>{</highlight></codeline>
<codeline lineno="1512"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>font16Enc[i].enc;</highlight></codeline>
<codeline lineno="1513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1514"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1515"><highlight class="normal"><sp/><sp/><sp/><sp/>gfree(font16Enc);</highlight></codeline>
<codeline lineno="1516"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1517"><highlight class="normal"><sp/><sp/>gfree(imgIDs);</highlight></codeline>
<codeline lineno="1518"><highlight class="normal"><sp/><sp/>gfree(formIDs);</highlight></codeline>
<codeline lineno="1519"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(customColors)<sp/>{</highlight></codeline>
<codeline lineno="1520"><highlight class="normal"><sp/><sp/><sp/><sp/>cc<sp/>=<sp/>customColors;</highlight></codeline>
<codeline lineno="1521"><highlight class="normal"><sp/><sp/><sp/><sp/>customColors<sp/>=<sp/>cc-&gt;next;</highlight></codeline>
<codeline lineno="1522"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>cc;</highlight></codeline>
<codeline lineno="1523"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1524"><highlight class="normal"><sp/><sp/>gfree(psTitle);</highlight></codeline>
<codeline lineno="1525"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1526"><highlight class="normal"></highlight></codeline>
<codeline lineno="1527"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PSOutputDev::writeHeader(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;int&gt;<sp/>&amp;pages,</highlight></codeline>
<codeline lineno="1528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_p_d_f_rectangle" kindref="compound">PDFRectangle</ref><sp/>*mediaBox,<sp/><ref refid="class_p_d_f_rectangle" kindref="compound">PDFRectangle</ref><sp/>*cropBox,</highlight></codeline>
<codeline lineno="1529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pageRotate,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*psTitle)<sp/>{</highlight></codeline>
<codeline lineno="1530"><highlight class="normal"><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>info,<sp/>obj1;</highlight></codeline>
<codeline lineno="1531"><highlight class="normal"><sp/><sp/><ref refid="struct_p_s_out_paper_size" kindref="compound">PSOutPaperSize</ref><sp/>*size;</highlight></codeline>
<codeline lineno="1532"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x1,<sp/>y1,<sp/>x2,<sp/>y2;</highlight></codeline>
<codeline lineno="1533"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="1534"><highlight class="normal"></highlight></codeline>
<codeline lineno="1535"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(mode)<sp/>{</highlight></codeline>
<codeline lineno="1536"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>psModePS:</highlight></codeline>
<codeline lineno="1537"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;%!PS-Adobe-3.0\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1538"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1539"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>psModeEPS:</highlight></codeline>
<codeline lineno="1540"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;%!PS-Adobe-3.0<sp/>EPSF-3.0\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1541"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1542"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>psModeForm:</highlight></codeline>
<codeline lineno="1543"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;%!PS-Adobe-3.0<sp/>Resource-Form\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1544"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1545"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1546"><highlight class="normal"><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;%Produced<sp/>by<sp/>poppler<sp/>pdftops<sp/>version:<sp/>{0:s}<sp/>(http://poppler.freedesktop.org)\n&quot;</highlight><highlight class="normal">,<sp/>PACKAGE_VERSION);</highlight></codeline>
<codeline lineno="1547"><highlight class="normal"><sp/><sp/>xref-&gt;getDocInfo(&amp;info);</highlight></codeline>
<codeline lineno="1548"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(info.isDict()<sp/>&amp;&amp;<sp/>info.dictLookup(</highlight><highlight class="stringliteral">&quot;Creator&quot;</highlight><highlight class="normal">,<sp/>&amp;obj1)-&gt;isString())<sp/>{</highlight></codeline>
<codeline lineno="1549"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;%%Creator:<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1550"><highlight class="normal"><sp/><sp/><sp/><sp/>writePSTextLine(obj1.getString());</highlight></codeline>
<codeline lineno="1551"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1552"><highlight class="normal"><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="1553"><highlight class="normal"><sp/><sp/>info.free();</highlight></codeline>
<codeline lineno="1554"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(psTitle)<sp/>{</highlight></codeline>
<codeline lineno="1555"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*sanitizedTitle<sp/>=<sp/>strdup(psTitle);</highlight></codeline>
<codeline lineno="1556"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(Guint<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>strlen(sanitizedTitle);<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sanitizedTitle[i]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal"><sp/>||<sp/>sanitizedTitle[i]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\r&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sanitizedTitle[i]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1560"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1561"><highlight class="normal"><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;%%Title:<sp/>{0:s}\n&quot;</highlight><highlight class="normal">,<sp/>sanitizedTitle);</highlight></codeline>
<codeline lineno="1562"><highlight class="normal"><sp/><sp/><sp/><sp/>free(sanitizedTitle);</highlight></codeline>
<codeline lineno="1563"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1564"><highlight class="normal"><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;%%LanguageLevel:<sp/>{0:d}\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(level<sp/>==<sp/>psLevel1<sp/>||<sp/>level<sp/>==<sp/>psLevel1Sep)<sp/>?<sp/>1<sp/>:</highlight></codeline>
<codeline lineno="1566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(level<sp/>==<sp/>psLevel2<sp/>||<sp/>level<sp/>==<sp/>psLevel2Sep)<sp/>?<sp/>2<sp/>:<sp/>3);</highlight></codeline>
<codeline lineno="1567"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(level<sp/>==<sp/>psLevel1Sep<sp/>||<sp/>level<sp/>==<sp/>psLevel2Sep<sp/>||<sp/>level<sp/>==<sp/>psLevel3Sep)<sp/>{</highlight></codeline>
<codeline lineno="1568"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;%%DocumentProcessColors:<sp/>(atend)\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1569"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;%%DocumentCustomColors:<sp/>(atend)\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1570"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1571"><highlight class="normal"><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;%%DocumentSuppliedResources:<sp/>(atend)\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1572"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((level<sp/>==<sp/>psLevel1<sp/>||<sp/>level<sp/>==<sp/>psLevel1Sep)<sp/>&amp;&amp;<sp/>useBinary)<sp/>{</highlight></codeline>
<codeline lineno="1573"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;%%DocumentData:<sp/>Binary\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1574"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1575"><highlight class="normal"></highlight></codeline>
<codeline lineno="1576"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(mode)<sp/>{</highlight></codeline>
<codeline lineno="1577"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>psModePS:</highlight></codeline>
<codeline lineno="1578"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>paperSizes-&gt;getLength();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>size<sp/>=<sp/>(<ref refid="struct_p_s_out_paper_size" kindref="compound">PSOutPaperSize</ref><sp/>*)paperSizes-&gt;get(i);</highlight></codeline>
<codeline lineno="1580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;%%{0:s}<sp/>{1:t}<sp/>{2:d}<sp/>{3:d}<sp/>0<sp/>()<sp/>()\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i==0<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;DocumentMedia:&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;+&quot;</highlight><highlight class="normal">,<sp/>size-&gt;name,<sp/>size-&gt;w,<sp/>size-&gt;h);</highlight></codeline>
<codeline lineno="1582"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1583"><highlight class="normal"><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;%%BoundingBox:<sp/>0<sp/>0<sp/>{0:d}<sp/>{1:d}\n&quot;</highlight><highlight class="normal">,<sp/>paperWidth,<sp/>paperHeight);</highlight></codeline>
<codeline lineno="1584"><highlight class="normal"><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;%%Pages:<sp/>{0:d}\n&quot;</highlight><highlight class="normal">,<sp/>static_cast&lt;int&gt;(pages.size()));</highlight></codeline>
<codeline lineno="1585"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;%%EndComments\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1586"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!paperMatch)<sp/>{</highlight></codeline>
<codeline lineno="1587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>size<sp/>=<sp/>(<ref refid="struct_p_s_out_paper_size" kindref="compound">PSOutPaperSize</ref><sp/>*)paperSizes-&gt;get(0);</highlight></codeline>
<codeline lineno="1588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;%%BeginDefaults\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;%%PageMedia:<sp/>{0:t}\n&quot;</highlight><highlight class="normal">,<sp/>size-&gt;name);</highlight></codeline>
<codeline lineno="1590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;%%EndDefaults\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1591"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1592"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1593"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>psModeEPS:</highlight></codeline>
<codeline lineno="1594"><highlight class="normal"><sp/><sp/><sp/><sp/>epsX1<sp/>=<sp/>cropBox-&gt;x1;</highlight></codeline>
<codeline lineno="1595"><highlight class="normal"><sp/><sp/><sp/><sp/>epsY1<sp/>=<sp/>cropBox-&gt;y1;</highlight></codeline>
<codeline lineno="1596"><highlight class="normal"><sp/><sp/><sp/><sp/>epsX2<sp/>=<sp/>cropBox-&gt;x2;</highlight></codeline>
<codeline lineno="1597"><highlight class="normal"><sp/><sp/><sp/><sp/>epsY2<sp/>=<sp/>cropBox-&gt;y2;</highlight></codeline>
<codeline lineno="1598"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pageRotate<sp/>==<sp/>0<sp/>||<sp/>pageRotate<sp/>==<sp/>180)<sp/>{</highlight></codeline>
<codeline lineno="1599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>x1<sp/>=<sp/>epsX1;</highlight></codeline>
<codeline lineno="1600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>y1<sp/>=<sp/>epsY1;</highlight></codeline>
<codeline lineno="1601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>x2<sp/>=<sp/>epsX2;</highlight></codeline>
<codeline lineno="1602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>y2<sp/>=<sp/>epsY2;</highlight></codeline>
<codeline lineno="1603"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="comment">//<sp/>pageRotate<sp/>==<sp/>90<sp/>||<sp/>pageRotate<sp/>==<sp/>270</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>x1<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>y1<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>x2<sp/>=<sp/>epsY2<sp/>-<sp/>epsY1;</highlight></codeline>
<codeline lineno="1607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>y2<sp/>=<sp/>epsX2<sp/>-<sp/>epsX1;</highlight></codeline>
<codeline lineno="1608"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1609"><highlight class="normal"><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;%%BoundingBox:<sp/>{0:d}<sp/>{1:d}<sp/>{2:d}<sp/>{3:d}\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)floor(x1),<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)floor(y1),<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)ceil(x2),<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)ceil(y2));</highlight></codeline>
<codeline lineno="1611"><highlight class="normal"><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;%%HiResBoundingBox:<sp/>{0:.6g}<sp/>{1:.6g}<sp/>{2:.6g}<sp/>{3:.6g}\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x1,<sp/>y1,<sp/>x2,<sp/>y2);</highlight></codeline>
<codeline lineno="1613"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;%%DocumentSuppliedResources:<sp/>(atend)\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1614"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;%%EndComments\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1615"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1616"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>psModeForm:</highlight></codeline>
<codeline lineno="1617"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;%%EndComments\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1618"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;32<sp/>dict<sp/>dup<sp/>begin\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1619"><highlight class="normal"><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;/BBox<sp/>[{0:d}<sp/>{1:d}<sp/>{2:d}<sp/>{3:d}]<sp/>def\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)floor(mediaBox-&gt;x1),<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)floor(mediaBox-&gt;y1),</highlight></codeline>
<codeline lineno="1621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)ceil(mediaBox-&gt;x2),<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)ceil(mediaBox-&gt;y2));</highlight></codeline>
<codeline lineno="1622"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;/FormType<sp/>1<sp/>def\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1623"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;/Matrix<sp/>[1<sp/>0<sp/>0<sp/>1<sp/>0<sp/>0]<sp/>def\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1624"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1625"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1626"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1627"><highlight class="normal"></highlight></codeline>
<codeline lineno="1628"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PSOutputDev::writeXpdfProcset()<sp/>{</highlight></codeline>
<codeline lineno="1629"><highlight class="normal"><sp/><sp/>GBool<sp/>lev1,<sp/>lev2,<sp/>lev3,<sp/>sep,<sp/>nonSep;</highlight></codeline>
<codeline lineno="1630"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**p;</highlight></codeline>
<codeline lineno="1631"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*q;</highlight></codeline>
<codeline lineno="1632"><highlight class="normal"></highlight></codeline>
<codeline lineno="1633"><highlight class="normal"><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;%%BeginResource:<sp/>procset<sp/>xpdf<sp/>{0:s}<sp/>0\n&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;3.00&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1634"><highlight class="normal"><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;%%Copyright:<sp/>{0:s}\n&quot;</highlight><highlight class="normal">,<sp/>xpdfCopyright);</highlight></codeline>
<codeline lineno="1635"><highlight class="normal"><sp/><sp/>lev1<sp/>=<sp/>lev2<sp/>=<sp/>lev3<sp/>=<sp/>sep<sp/>=<sp/>nonSep<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="1636"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(p<sp/>=<sp/>prolog;<sp/>*p;<sp/>++p)<sp/>{</highlight></codeline>
<codeline lineno="1637"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((*p)[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;~&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lev1<sp/>=<sp/>lev2<sp/>=<sp/>lev3<sp/>=<sp/>sep<sp/>=<sp/>nonSep<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="1639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(q<sp/>=<sp/>*p<sp/>+<sp/>1;<sp/>*q;<sp/>++q)<sp/>{</highlight></codeline>
<codeline lineno="1640"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(*q)<sp/>{</highlight></codeline>
<codeline lineno="1641"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;1&apos;</highlight><highlight class="normal">:<sp/>lev1<sp/>=<sp/>gTrue;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1642"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;2&apos;</highlight><highlight class="normal">:<sp/>lev2<sp/>=<sp/>gTrue;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1643"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;3&apos;</highlight><highlight class="normal">:<sp/>lev3<sp/>=<sp/>gTrue;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1644"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;s&apos;</highlight><highlight class="normal">:<sp/>sep<sp/>=<sp/>gTrue;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1645"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;n&apos;</highlight><highlight class="normal">:<sp/>nonSep<sp/>=<sp/>gTrue;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1646"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1648"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((level<sp/>==<sp/>psLevel1<sp/>&amp;&amp;<sp/>lev1<sp/>&amp;&amp;<sp/>nonSep)<sp/>||</highlight></codeline>
<codeline lineno="1649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(level<sp/>==<sp/>psLevel1Sep<sp/>&amp;&amp;<sp/>lev1<sp/>&amp;&amp;<sp/>sep)<sp/>||</highlight></codeline>
<codeline lineno="1650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(level<sp/>==<sp/>psLevel2<sp/>&amp;&amp;<sp/>lev2<sp/>&amp;&amp;<sp/>nonSep)<sp/>||</highlight></codeline>
<codeline lineno="1651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(level<sp/>==<sp/>psLevel2Sep<sp/>&amp;&amp;<sp/>lev2<sp/>&amp;&amp;<sp/>sep)<sp/>||</highlight></codeline>
<codeline lineno="1652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(level<sp/>==<sp/>psLevel3<sp/>&amp;&amp;<sp/>lev3<sp/>&amp;&amp;<sp/>nonSep)<sp/>||</highlight></codeline>
<codeline lineno="1653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(level<sp/>==<sp/>psLevel3Sep<sp/>&amp;&amp;<sp/>lev3<sp/>&amp;&amp;<sp/>sep))<sp/>{</highlight></codeline>
<codeline lineno="1654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;{0:s}\n&quot;</highlight><highlight class="normal">,<sp/>*p);</highlight></codeline>
<codeline lineno="1655"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1656"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1657"><highlight class="normal"><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;%%EndResource\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1658"><highlight class="normal"></highlight></codeline>
<codeline lineno="1659"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(level<sp/>&gt;=<sp/>psLevel3)<sp/>{</highlight></codeline>
<codeline lineno="1660"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(p<sp/>=<sp/>cmapProlog;<sp/>*p;<sp/>++p)<sp/>{</highlight></codeline>
<codeline lineno="1661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;{0:s}\n&quot;</highlight><highlight class="normal">,<sp/>*p);</highlight></codeline>
<codeline lineno="1662"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1663"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1664"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1665"><highlight class="normal"></highlight></codeline>
<codeline lineno="1666"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PSOutputDev::writeDocSetup(<ref refid="class_p_d_f_doc" kindref="compound">PDFDoc</ref><sp/>*doc,<sp/><ref refid="class_catalog" kindref="compound">Catalog</ref><sp/>*catalog,</highlight></codeline>
<codeline lineno="1667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;int&gt;<sp/>&amp;pages,</highlight></codeline>
<codeline lineno="1668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GBool<sp/>duplexA)<sp/>{</highlight></codeline>
<codeline lineno="1669"><highlight class="normal"><sp/><sp/><ref refid="class_page" kindref="compound">Page</ref><sp/>*page;</highlight></codeline>
<codeline lineno="1670"><highlight class="normal"><sp/><sp/><ref refid="class_dict" kindref="compound">Dict</ref><sp/>*resDict;</highlight></codeline>
<codeline lineno="1671"><highlight class="normal"><sp/><sp/><ref refid="class_annots" kindref="compound">Annots</ref><sp/>*annots;</highlight></codeline>
<codeline lineno="1672"><highlight class="normal"><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>*acroForm;</highlight></codeline>
<codeline lineno="1673"><highlight class="normal"><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>obj1,<sp/>obj2,<sp/>obj3;</highlight></codeline>
<codeline lineno="1674"><highlight class="normal"><sp/><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*s;</highlight></codeline>
<codeline lineno="1675"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="1676"><highlight class="normal"></highlight></codeline>
<codeline lineno="1677"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mode<sp/>==<sp/>psModeForm)<sp/>{</highlight></codeline>
<codeline lineno="1678"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>swap<sp/>the<sp/>form<sp/>and<sp/>xpdf<sp/>dicts</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1679"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;xpdf<sp/>end<sp/>begin<sp/>dup<sp/>begin\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1680"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1681"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;xpdf<sp/>begin\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1682"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1683"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>pgi<sp/>=<sp/>0;<sp/>pgi<sp/>&lt;<sp/>pages.size();<sp/>++pgi)<sp/>{</highlight></codeline>
<codeline lineno="1684"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pg<sp/>=<sp/>pages[pgi];</highlight></codeline>
<codeline lineno="1685"><highlight class="normal"><sp/><sp/><sp/><sp/>page<sp/>=<sp/>doc-&gt;getPage(pg);</highlight></codeline>
<codeline lineno="1686"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!page)<sp/>{</highlight></codeline>
<codeline lineno="1687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>writing<sp/>resources<sp/>for<sp/>page<sp/>{0:d}&quot;</highlight><highlight class="normal">,<sp/>pg);</highlight></codeline>
<codeline lineno="1688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1689"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1690"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((resDict<sp/>=<sp/>page-&gt;getResourceDict()))<sp/>{</highlight></codeline>
<codeline lineno="1691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>setupResources(resDict);</highlight></codeline>
<codeline lineno="1692"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1693"><highlight class="normal"><sp/><sp/><sp/><sp/>annots<sp/>=<sp/>page-&gt;getAnnots();</highlight></codeline>
<codeline lineno="1694"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>annots-&gt;getNumAnnots();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(annots-&gt;getAnnot(i)-&gt;getAppearanceResDict(&amp;obj1)-&gt;isDict())<sp/>{</highlight></codeline>
<codeline lineno="1696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>setupResources(obj1.getDict());</highlight></codeline>
<codeline lineno="1697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="1699"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1700"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1701"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((acroForm<sp/>=<sp/>catalog-&gt;getAcroForm())<sp/>&amp;&amp;<sp/>acroForm-&gt;isDict())<sp/>{</highlight></codeline>
<codeline lineno="1702"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(acroForm-&gt;dictLookup(</highlight><highlight class="stringliteral">&quot;DR&quot;</highlight><highlight class="normal">,<sp/>&amp;obj1)-&gt;isDict())<sp/>{</highlight></codeline>
<codeline lineno="1703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>setupResources(obj1.getDict());</highlight></codeline>
<codeline lineno="1704"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1705"><highlight class="normal"><sp/><sp/><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="1706"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(acroForm-&gt;dictLookup(</highlight><highlight class="stringliteral">&quot;Fields&quot;</highlight><highlight class="normal">,<sp/>&amp;obj1)-&gt;isArray())<sp/>{</highlight></codeline>
<codeline lineno="1707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>obj1.arrayGetLength();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1708"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj1.arrayGet(i,<sp/>&amp;obj2)-&gt;isDict())<sp/>{</highlight></codeline>
<codeline lineno="1709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj2.dictLookup(</highlight><highlight class="stringliteral">&quot;DR&quot;</highlight><highlight class="normal">,<sp/>&amp;obj3)-&gt;isDict())<sp/>{</highlight></codeline>
<codeline lineno="1710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>setupResources(obj3.getDict());</highlight></codeline>
<codeline lineno="1711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj3.free();</highlight></codeline>
<codeline lineno="1713"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1714"><highlight class="normal"><sp/><sp/><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="1715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1716"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1717"><highlight class="normal"><sp/><sp/><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="1718"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1719"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mode<sp/>!=<sp/>psModeForm)<sp/>{</highlight></codeline>
<codeline lineno="1720"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mode<sp/>!=<sp/>psModeEPS<sp/>&amp;&amp;<sp/>!manualCtrl)<sp/>{</highlight></codeline>
<codeline lineno="1721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;{0:s}<sp/>pdfSetup\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>duplexA<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;true&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;false&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!paperMatch)<sp/>{</highlight></codeline>
<codeline lineno="1724"><highlight class="normal"><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;{0:d}<sp/>{1:d}<sp/>pdfSetupPaper\n&quot;</highlight><highlight class="normal">,<sp/>paperWidth,<sp/>paperHeight);</highlight></codeline>
<codeline lineno="1725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1726"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1727"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>OPI_SUPPORT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1728"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(generateOPI)<sp/>{</highlight></codeline>
<codeline lineno="1729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;/opiMatrix<sp/>matrix<sp/>currentmatrix<sp/>def\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1730"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1731"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1732"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1733"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(customCodeCbk)<sp/>{</highlight></codeline>
<codeline lineno="1734"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((s<sp/>=<sp/>(*customCodeCbk)(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>psOutCustomDocSetup,<sp/>0,</highlight></codeline>
<codeline lineno="1735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>customCodeCbkData)))<sp/>{</highlight></codeline>
<codeline lineno="1736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePS(s-&gt;getCString());</highlight></codeline>
<codeline lineno="1737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>s;</highlight></codeline>
<codeline lineno="1738"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1739"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1740"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1741"><highlight class="normal"></highlight></codeline>
<codeline lineno="1742"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PSOutputDev::writePageTrailer()<sp/>{</highlight></codeline>
<codeline lineno="1743"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mode<sp/>!=<sp/>psModeForm)<sp/>{</highlight></codeline>
<codeline lineno="1744"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;pdfEndPage\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1745"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1746"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1747"><highlight class="normal"></highlight></codeline>
<codeline lineno="1748"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PSOutputDev::writeTrailer()<sp/>{</highlight></codeline>
<codeline lineno="1749"><highlight class="normal"><sp/><sp/><ref refid="class_p_s_out_custom_color" kindref="compound">PSOutCustomColor</ref><sp/>*cc;</highlight></codeline>
<codeline lineno="1750"><highlight class="normal"></highlight></codeline>
<codeline lineno="1751"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mode<sp/>==<sp/>psModeForm)<sp/>{</highlight></codeline>
<codeline lineno="1752"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;/Foo<sp/>exch<sp/>/Form<sp/>defineresource<sp/>pop\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1753"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1754"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;end\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1755"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;%%DocumentSuppliedResources:\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1756"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(embFontList-&gt;getCString());</highlight></codeline>
<codeline lineno="1757"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(level<sp/>==<sp/>psLevel1Sep<sp/>||<sp/>level<sp/>==<sp/>psLevel2Sep<sp/>||</highlight></codeline>
<codeline lineno="1758"><highlight class="normal"><sp/><sp/><sp/><sp/>level<sp/>==<sp/>psLevel3Sep)<sp/>{</highlight></codeline>
<codeline lineno="1759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;%%DocumentProcessColors:&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(processColors<sp/>&amp;<sp/>psProcessCyan)<sp/>{</highlight></codeline>
<codeline lineno="1761"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;<sp/>Cyan&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(processColors<sp/>&amp;<sp/>psProcessMagenta)<sp/>{</highlight></codeline>
<codeline lineno="1764"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;<sp/>Magenta&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(processColors<sp/>&amp;<sp/>psProcessYellow)<sp/>{</highlight></codeline>
<codeline lineno="1767"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;<sp/>Yellow&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(processColors<sp/>&amp;<sp/>psProcessBlack)<sp/>{</highlight></codeline>
<codeline lineno="1770"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;<sp/>Black&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;%%DocumentCustomColors:&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(cc<sp/>=<sp/>customColors;<sp/>cc;<sp/>cc<sp/>=<sp/>cc-&gt;next)<sp/>{</highlight></codeline>
<codeline lineno="1775"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1776"><highlight class="normal"><sp/><sp/><sp/><sp/>writePSString(cc-&gt;name);</highlight></codeline>
<codeline lineno="1777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;%%CMYKCustomColor:\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(cc<sp/>=<sp/>customColors;<sp/>cc;<sp/>cc<sp/>=<sp/>cc-&gt;next)<sp/>{</highlight></codeline>
<codeline lineno="1781"><highlight class="normal"><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;%%+<sp/>{0:.4g}<sp/>{1:.4g}<sp/>{2:.4g}<sp/>{3:.4g}<sp/>&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cc-&gt;c,<sp/>cc-&gt;m,<sp/>cc-&gt;y,<sp/>cc-&gt;k);</highlight></codeline>
<codeline lineno="1783"><highlight class="normal"><sp/><sp/><sp/><sp/>writePSString(cc-&gt;name);</highlight></codeline>
<codeline lineno="1784"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1786"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1787"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1788"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1789"><highlight class="normal"></highlight></codeline>
<codeline lineno="1790"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PSOutputDev::setupResources(<ref refid="class_dict" kindref="compound">Dict</ref><sp/>*resDict)<sp/>{</highlight></codeline>
<codeline lineno="1791"><highlight class="normal"><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>xObjDict,<sp/>xObjRef,<sp/>xObj,<sp/>patDict,<sp/>patRef,<sp/>pat,<sp/>resObj;</highlight></codeline>
<codeline lineno="1792"><highlight class="normal"><sp/><sp/><ref refid="struct_ref" kindref="compound">Ref</ref><sp/>ref0;</highlight></codeline>
<codeline lineno="1793"><highlight class="normal"><sp/><sp/>GBool<sp/>skip;</highlight></codeline>
<codeline lineno="1794"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="1795"><highlight class="normal"></highlight></codeline>
<codeline lineno="1796"><highlight class="normal"><sp/><sp/>setupFonts(resDict);</highlight></codeline>
<codeline lineno="1797"><highlight class="normal"><sp/><sp/>setupImages(resDict);</highlight></codeline>
<codeline lineno="1798"><highlight class="normal"><sp/><sp/>setupForms(resDict);</highlight></codeline>
<codeline lineno="1799"><highlight class="normal"></highlight></codeline>
<codeline lineno="1800"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//-----<sp/>recursively<sp/>scan<sp/>XObjects</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1801"><highlight class="normal"><sp/><sp/>resDict-&gt;lookup(</highlight><highlight class="stringliteral">&quot;XObject&quot;</highlight><highlight class="normal">,<sp/>&amp;xObjDict);</highlight></codeline>
<codeline lineno="1802"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(xObjDict.isDict())<sp/>{</highlight></codeline>
<codeline lineno="1803"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>xObjDict.dictGetLength();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1804"><highlight class="normal"></highlight></codeline>
<codeline lineno="1805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>avoid<sp/>infinite<sp/>recursion<sp/>on<sp/>XObjects</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>skip<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="1807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((xObjDict.dictGetValNF(i,<sp/>&amp;xObjRef)-&gt;isRef()))<sp/>{</highlight></codeline>
<codeline lineno="1808"><highlight class="normal"><sp/><sp/><sp/><sp/>ref0<sp/>=<sp/>xObjRef.getRef();</highlight></codeline>
<codeline lineno="1809"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(resourceIDs.find(ref0.num)<sp/>!=<sp/>resourceIDs.end())<sp/>{</highlight></codeline>
<codeline lineno="1810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>skip<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="1811"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>resourceIDs.insert(ref0.num);</highlight></codeline>
<codeline lineno="1813"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!skip)<sp/>{</highlight></codeline>
<codeline lineno="1816"><highlight class="normal"></highlight></codeline>
<codeline lineno="1817"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>process<sp/>the<sp/>XObject&apos;s<sp/>resource<sp/>dictionary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1818"><highlight class="normal"><sp/><sp/><sp/><sp/>xObjDict.dictGetVal(i,<sp/>&amp;xObj);</highlight></codeline>
<codeline lineno="1819"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(xObj.isStream())<sp/>{</highlight></codeline>
<codeline lineno="1820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xObj.streamGetDict()-&gt;lookup(</highlight><highlight class="stringliteral">&quot;Resources&quot;</highlight><highlight class="normal">,<sp/>&amp;resObj);</highlight></codeline>
<codeline lineno="1821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(resObj.isDict())<sp/>{</highlight></codeline>
<codeline lineno="1822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>setupResources(resObj.getDict());</highlight></codeline>
<codeline lineno="1823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>resObj.free();</highlight></codeline>
<codeline lineno="1825"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1826"><highlight class="normal"><sp/><sp/><sp/><sp/>xObj.free();</highlight></codeline>
<codeline lineno="1827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1828"><highlight class="normal"></highlight></codeline>
<codeline lineno="1829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xObjRef.free();</highlight></codeline>
<codeline lineno="1830"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1831"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1832"><highlight class="normal"><sp/><sp/>xObjDict.free();</highlight></codeline>
<codeline lineno="1833"><highlight class="normal"></highlight></codeline>
<codeline lineno="1834"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//-----<sp/>recursively<sp/>scan<sp/>Patterns</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1835"><highlight class="normal"><sp/><sp/>resDict-&gt;lookup(</highlight><highlight class="stringliteral">&quot;Pattern&quot;</highlight><highlight class="normal">,<sp/>&amp;patDict);</highlight></codeline>
<codeline lineno="1836"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(patDict.isDict())<sp/>{</highlight></codeline>
<codeline lineno="1837"><highlight class="normal"><sp/><sp/><sp/><sp/>inType3Char<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="1838"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>patDict.dictGetLength();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1839"><highlight class="normal"></highlight></codeline>
<codeline lineno="1840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>avoid<sp/>infinite<sp/>recursion<sp/>on<sp/>Patterns</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>skip<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="1842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((patDict.dictGetValNF(i,<sp/>&amp;patRef)-&gt;isRef()))<sp/>{</highlight></codeline>
<codeline lineno="1843"><highlight class="normal"><sp/><sp/><sp/><sp/>ref0<sp/>=<sp/>patRef.getRef();</highlight></codeline>
<codeline lineno="1844"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(resourceIDs.find(ref0.num)<sp/>!=<sp/>resourceIDs.end())<sp/>{</highlight></codeline>
<codeline lineno="1845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>skip<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="1846"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>resourceIDs.insert(ref0.num);</highlight></codeline>
<codeline lineno="1848"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!skip)<sp/>{</highlight></codeline>
<codeline lineno="1851"><highlight class="normal"></highlight></codeline>
<codeline lineno="1852"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>process<sp/>the<sp/>Pattern&apos;s<sp/>resource<sp/>dictionary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1853"><highlight class="normal"><sp/><sp/><sp/><sp/>patDict.dictGetVal(i,<sp/>&amp;pat);</highlight></codeline>
<codeline lineno="1854"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pat.isStream())<sp/>{</highlight></codeline>
<codeline lineno="1855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pat.streamGetDict()-&gt;lookup(</highlight><highlight class="stringliteral">&quot;Resources&quot;</highlight><highlight class="normal">,<sp/>&amp;resObj);</highlight></codeline>
<codeline lineno="1856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(resObj.isDict())<sp/>{</highlight></codeline>
<codeline lineno="1857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>setupResources(resObj.getDict());</highlight></codeline>
<codeline lineno="1858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>resObj.free();</highlight></codeline>
<codeline lineno="1860"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1861"><highlight class="normal"><sp/><sp/><sp/><sp/>pat.free();</highlight></codeline>
<codeline lineno="1862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1863"><highlight class="normal"></highlight></codeline>
<codeline lineno="1864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>patRef.free();</highlight></codeline>
<codeline lineno="1865"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1866"><highlight class="normal"><sp/><sp/><sp/><sp/>inType3Char<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="1867"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1868"><highlight class="normal"><sp/><sp/>patDict.free();</highlight></codeline>
<codeline lineno="1869"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1870"><highlight class="normal"></highlight></codeline>
<codeline lineno="1871"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PSOutputDev::setupFonts(<ref refid="class_dict" kindref="compound">Dict</ref><sp/>*resDict)<sp/>{</highlight></codeline>
<codeline lineno="1872"><highlight class="normal"><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>obj1,<sp/>obj2;</highlight></codeline>
<codeline lineno="1873"><highlight class="normal"><sp/><sp/><ref refid="struct_ref" kindref="compound">Ref</ref><sp/>r;</highlight></codeline>
<codeline lineno="1874"><highlight class="normal"><sp/><sp/><ref refid="class_gfx_font_dict" kindref="compound">GfxFontDict</ref><sp/>*gfxFontDict;</highlight></codeline>
<codeline lineno="1875"><highlight class="normal"><sp/><sp/><ref refid="class_gfx_font" kindref="compound">GfxFont</ref><sp/>*<ref refid="structfont" kindref="compound">font</ref>;</highlight></codeline>
<codeline lineno="1876"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="1877"><highlight class="normal"></highlight></codeline>
<codeline lineno="1878"><highlight class="normal"><sp/><sp/>gfxFontDict<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1879"><highlight class="normal"><sp/><sp/>resDict-&gt;lookupNF(</highlight><highlight class="stringliteral">&quot;Font&quot;</highlight><highlight class="normal">,<sp/>&amp;obj1);</highlight></codeline>
<codeline lineno="1880"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj1.isRef())<sp/>{</highlight></codeline>
<codeline lineno="1881"><highlight class="normal"><sp/><sp/><sp/><sp/>obj1.fetch(xref,<sp/>&amp;obj2);</highlight></codeline>
<codeline lineno="1882"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj2.isDict())<sp/>{</highlight></codeline>
<codeline lineno="1883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>obj1.getRef();</highlight></codeline>
<codeline lineno="1884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>gfxFontDict<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_gfx_font_dict" kindref="compound">GfxFontDict</ref>(xref,<sp/>&amp;r,<sp/>obj2.getDict());</highlight></codeline>
<codeline lineno="1885"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1886"><highlight class="normal"><sp/><sp/><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="1887"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj1.isDict())<sp/>{</highlight></codeline>
<codeline lineno="1888"><highlight class="normal"><sp/><sp/><sp/><sp/>gfxFontDict<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_gfx_font_dict" kindref="compound">GfxFontDict</ref>(xref,<sp/>NULL,<sp/>obj1.getDict());</highlight></codeline>
<codeline lineno="1889"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1890"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(gfxFontDict)<sp/>{</highlight></codeline>
<codeline lineno="1891"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>gfxFontDict-&gt;getNumFonts();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((font<sp/>=<sp/>gfxFontDict-&gt;getFont(i)))<sp/>{</highlight></codeline>
<codeline lineno="1893"><highlight class="normal"><sp/><sp/><sp/><sp/>setupFont(font,<sp/>resDict);</highlight></codeline>
<codeline lineno="1894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1895"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1896"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>gfxFontDict;</highlight></codeline>
<codeline lineno="1897"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1898"><highlight class="normal"><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="1899"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1900"><highlight class="normal"></highlight></codeline>
<codeline lineno="1901"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PSOutputDev::setupFont(<ref refid="class_gfx_font" kindref="compound">GfxFont</ref><sp/>*<ref refid="structfont" kindref="compound">font</ref>,<sp/><ref refid="class_dict" kindref="compound">Dict</ref><sp/>*parentResDict)<sp/>{</highlight></codeline>
<codeline lineno="1902"><highlight class="normal"><sp/><sp/><ref refid="class_gfx_font_loc" kindref="compound">GfxFontLoc</ref><sp/>*fontLoc;</highlight></codeline>
<codeline lineno="1903"><highlight class="normal"><sp/><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*psName;</highlight></codeline>
<codeline lineno="1904"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buf[16];</highlight></codeline>
<codeline lineno="1905"><highlight class="normal"><sp/><sp/>GBool<sp/>subst;</highlight></codeline>
<codeline lineno="1906"><highlight class="normal"><sp/><sp/><ref refid="class_unicode_map" kindref="compound">UnicodeMap</ref><sp/>*uMap;</highlight></codeline>
<codeline lineno="1907"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*charName;</highlight></codeline>
<codeline lineno="1908"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>xs,<sp/>ys;</highlight></codeline>
<codeline lineno="1909"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>code;</highlight></codeline>
<codeline lineno="1910"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>w1,<sp/>w2;</highlight></codeline>
<codeline lineno="1911"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="1912"><highlight class="normal"></highlight></codeline>
<codeline lineno="1913"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>if<sp/>font<sp/>is<sp/>already<sp/>set<sp/>up</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1914"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>fontIDLen;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1915"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fontIDs[i].num<sp/>==<sp/>font-&gt;getID()-&gt;num<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1916"><highlight class="normal"><sp/><sp/><sp/><sp/>fontIDs[i].gen<sp/>==<sp/>font-&gt;getID()-&gt;gen)<sp/>{</highlight></codeline>
<codeline lineno="1917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1918"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1919"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1920"><highlight class="normal"></highlight></codeline>
<codeline lineno="1921"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>entry<sp/>to<sp/>fontIDs<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1922"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fontIDLen<sp/>&gt;=<sp/>fontIDSize)<sp/>{</highlight></codeline>
<codeline lineno="1923"><highlight class="normal"><sp/><sp/><sp/><sp/>fontIDSize<sp/>+=<sp/>64;</highlight></codeline>
<codeline lineno="1924"><highlight class="normal"><sp/><sp/><sp/><sp/>fontIDs<sp/>=<sp/>(<ref refid="struct_ref" kindref="compound">Ref</ref><sp/>*)greallocn(fontIDs,<sp/>fontIDSize,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_ref" kindref="compound">Ref</ref>));</highlight></codeline>
<codeline lineno="1925"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1926"><highlight class="normal"><sp/><sp/>fontIDs[fontIDLen++]<sp/>=<sp/>*font-&gt;getID();</highlight></codeline>
<codeline lineno="1927"><highlight class="normal"></highlight></codeline>
<codeline lineno="1928"><highlight class="normal"><sp/><sp/>psName<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1929"><highlight class="normal"><sp/><sp/>xs<sp/>=<sp/>ys<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1930"><highlight class="normal"><sp/><sp/>subst<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="1931"><highlight class="normal"></highlight></codeline>
<codeline lineno="1932"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(font-&gt;getType()<sp/>==<sp/>fontType3)<sp/>{</highlight></codeline>
<codeline lineno="1933"><highlight class="normal"><sp/><sp/><sp/><sp/>psName<sp/>=<sp/>GooString::format(</highlight><highlight class="stringliteral">&quot;T3_{0:d}_{1:d}&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>font-&gt;getID()-&gt;num,<sp/>font-&gt;getID()-&gt;gen);</highlight></codeline>
<codeline lineno="1935"><highlight class="normal"><sp/><sp/><sp/><sp/>setupType3Font(font,<sp/>psName,<sp/>parentResDict);</highlight></codeline>
<codeline lineno="1936"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1937"><highlight class="normal"><sp/><sp/><sp/><sp/>fontLoc<sp/>=<sp/>font-&gt;locateFont(xref,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1938"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fontLoc<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(fontLoc-&gt;locType)<sp/>{</highlight></codeline>
<codeline lineno="1940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>gfxFontLocEmbedded:</highlight></codeline>
<codeline lineno="1941"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(fontLoc-&gt;fontType)<sp/>{</highlight></codeline>
<codeline lineno="1942"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>fontType1:</highlight></codeline>
<codeline lineno="1943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>assumes<sp/>that<sp/>the<sp/>PS<sp/>font<sp/>name<sp/>matches<sp/>the<sp/>PDF<sp/>font<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>psName<sp/>=<sp/>font-&gt;getEmbeddedFontName()<sp/>?<sp/>font-&gt;getEmbeddedFontName()-&gt;copy()<sp/>:<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref>();</highlight></codeline>
<codeline lineno="1945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>setupEmbeddedType1Font(&amp;fontLoc-&gt;embFontID,<sp/>psName);</highlight></codeline>
<codeline lineno="1946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1947"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>fontType1C:</highlight></codeline>
<codeline lineno="1948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>psName<sp/>=<sp/>makePSFontName(font,<sp/>&amp;fontLoc-&gt;embFontID);</highlight></codeline>
<codeline lineno="1949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>setupEmbeddedType1CFont(font,<sp/>&amp;fontLoc-&gt;embFontID,<sp/>psName);</highlight></codeline>
<codeline lineno="1950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1951"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>fontType1COT:</highlight></codeline>
<codeline lineno="1952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>psName<sp/>=<sp/>makePSFontName(font,<sp/>&amp;fontLoc-&gt;embFontID);</highlight></codeline>
<codeline lineno="1953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>setupEmbeddedOpenTypeT1CFont(font,<sp/>&amp;fontLoc-&gt;embFontID,<sp/>psName);</highlight></codeline>
<codeline lineno="1954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1955"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>fontTrueType:</highlight></codeline>
<codeline lineno="1956"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>fontTrueTypeOT:</highlight></codeline>
<codeline lineno="1957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>psName<sp/>=<sp/>makePSFontName(font,<sp/>font-&gt;getID());</highlight></codeline>
<codeline lineno="1958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>setupEmbeddedTrueTypeFont(font,<sp/>&amp;fontLoc-&gt;embFontID,<sp/>psName);</highlight></codeline>
<codeline lineno="1959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1960"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>fontCIDType0C:</highlight></codeline>
<codeline lineno="1961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>psName<sp/>=<sp/>makePSFontName(font,<sp/>&amp;fontLoc-&gt;embFontID);</highlight></codeline>
<codeline lineno="1962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>setupEmbeddedCIDType0Font(font,<sp/>&amp;fontLoc-&gt;embFontID,<sp/>psName);</highlight></codeline>
<codeline lineno="1963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1964"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>fontCIDType2:</highlight></codeline>
<codeline lineno="1965"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>fontCIDType2OT:</highlight></codeline>
<codeline lineno="1966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>psName<sp/>=<sp/>makePSFontName(font,<sp/>font-&gt;getID());</highlight></codeline>
<codeline lineno="1967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//~<sp/>should<sp/>check<sp/>to<sp/>see<sp/>if<sp/>font<sp/>actually<sp/>uses<sp/>vertical<sp/>mode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>setupEmbeddedCIDTrueTypeFont(font,<sp/>&amp;fontLoc-&gt;embFontID,<sp/>psName,<sp/>gTrue);</highlight></codeline>
<codeline lineno="1969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1970"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>fontCIDType0COT:</highlight></codeline>
<codeline lineno="1971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>psName<sp/>=<sp/>makePSFontName(font,<sp/>&amp;fontLoc-&gt;embFontID);</highlight></codeline>
<codeline lineno="1972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>setupEmbeddedOpenTypeCFFFont(font,<sp/>&amp;fontLoc-&gt;embFontID,<sp/>psName);</highlight></codeline>
<codeline lineno="1973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1974"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1976"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1977"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>gfxFontLocExternal:</highlight></codeline>
<codeline lineno="1979"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//~<sp/>add<sp/>cases<sp/>for<sp/>external<sp/>16-bit<sp/>fonts</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1980"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(fontLoc-&gt;fontType)<sp/>{</highlight></codeline>
<codeline lineno="1981"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>fontType1:</highlight></codeline>
<codeline lineno="1982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(font-&gt;getEmbeddedFontName())<sp/>{</highlight></codeline>
<codeline lineno="1983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>assumes<sp/>that<sp/>the<sp/>PS<sp/>font<sp/>name<sp/>matches<sp/>the<sp/>PDF<sp/>font<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>psName<sp/>=<sp/>font-&gt;getEmbeddedFontName()-&gt;copy();</highlight></codeline>
<codeline lineno="1985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//~<sp/>this<sp/>won&apos;t<sp/>work<sp/>--<sp/>the<sp/>PS<sp/>font<sp/>name<sp/>won&apos;t<sp/>match</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>psName<sp/>=<sp/>makePSFontName(font,<sp/>font-&gt;getID());</highlight></codeline>
<codeline lineno="1988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>setupExternalType1Font(fontLoc-&gt;path,<sp/>psName);</highlight></codeline>
<codeline lineno="1990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1991"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>fontTrueType:</highlight></codeline>
<codeline lineno="1992"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>fontTrueTypeOT:</highlight></codeline>
<codeline lineno="1993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>psName<sp/>=<sp/>makePSFontName(font,<sp/>font-&gt;getID());</highlight></codeline>
<codeline lineno="1994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>setupExternalTrueTypeFont(font,<sp/>fontLoc-&gt;path,<sp/>psName);</highlight></codeline>
<codeline lineno="1995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1996"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>fontCIDType2:</highlight></codeline>
<codeline lineno="1997"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>fontCIDType2OT:</highlight></codeline>
<codeline lineno="1998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>psName<sp/>=<sp/>makePSFontName(font,<sp/>font-&gt;getID());</highlight></codeline>
<codeline lineno="1999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//~<sp/>should<sp/>check<sp/>to<sp/>see<sp/>if<sp/>font<sp/>actually<sp/>uses<sp/>vertical<sp/>mode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>setupExternalCIDTrueTypeFont(font,<sp/>fontLoc-&gt;path,<sp/>psName,<sp/>gTrue);</highlight></codeline>
<codeline lineno="2001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2002"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2004"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2005"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>gfxFontLocResident:</highlight></codeline>
<codeline lineno="2007"><highlight class="normal"><sp/><sp/><sp/><sp/>psName<sp/>=<sp/>fontLoc-&gt;path-&gt;copy();</highlight></codeline>
<codeline lineno="2008"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2010"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2011"><highlight class="normal"></highlight></codeline>
<codeline lineno="2012"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!psName)<sp/>{</highlight></codeline>
<codeline lineno="2013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(font-&gt;isCIDFont())<sp/>{</highlight></codeline>
<codeline lineno="2014"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>-1,</highlight></codeline>
<codeline lineno="2015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Couldn&apos;t<sp/>find<sp/>a<sp/>font<sp/>to<sp/>substitute<sp/>for<sp/>&apos;{0:s}&apos;<sp/>(&apos;{1:s}&apos;<sp/>character<sp/>collection)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>font-&gt;getName()<sp/>?<sp/>font-&gt;getName()-&gt;getCString()</highlight></codeline>
<codeline lineno="2017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;(unnamed)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((<ref refid="class_gfx_c_i_d_font" kindref="compound">GfxCIDFont</ref><sp/>*)font)-&gt;getCollection()</highlight></codeline>
<codeline lineno="2019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>((<ref refid="class_gfx_c_i_d_font" kindref="compound">GfxCIDFont</ref><sp/>*)font)-&gt;getCollection()-&gt;getCString()</highlight></codeline>
<codeline lineno="2020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;(unknown)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2021"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(font16EncLen<sp/>&gt;=<sp/>font16EncSize)<sp/>{</highlight></codeline>
<codeline lineno="2022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>font16EncSize<sp/>+=<sp/>16;</highlight></codeline>
<codeline lineno="2023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>font16Enc<sp/>=<sp/>(<ref refid="struct_p_s_font16_enc" kindref="compound">PSFont16Enc</ref><sp/>*)greallocn(font16Enc,</highlight></codeline>
<codeline lineno="2024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>font16EncSize,</highlight></codeline>
<codeline lineno="2025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_p_s_font16_enc" kindref="compound">PSFont16Enc</ref>));</highlight></codeline>
<codeline lineno="2026"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2027"><highlight class="normal"><sp/><sp/><sp/><sp/>font16Enc[font16EncLen].fontID<sp/>=<sp/>*font-&gt;getID();</highlight></codeline>
<codeline lineno="2028"><highlight class="normal"><sp/><sp/><sp/><sp/>font16Enc[font16EncLen].enc<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2029"><highlight class="normal"><sp/><sp/><sp/><sp/>++font16EncLen;</highlight></codeline>
<codeline lineno="2030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2031"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>-1,</highlight></codeline>
<codeline lineno="2032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Couldn&apos;t<sp/>find<sp/>a<sp/>font<sp/>to<sp/>substitute<sp/>for<sp/>&apos;{0:s}&apos;&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>font-&gt;getName()<sp/>?<sp/>font-&gt;getName()-&gt;getCString()</highlight></codeline>
<codeline lineno="2034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;(unnamed)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>fontLoc;</highlight></codeline>
<codeline lineno="2037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2038"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2039"><highlight class="normal"></highlight></codeline>
<codeline lineno="2040"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>scale<sp/>substituted<sp/>8-bit<sp/>fonts</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2041"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fontLoc-&gt;locType<sp/>==<sp/>gfxFontLocResident<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2042"><highlight class="normal"><sp/><sp/><sp/><sp/>fontLoc-&gt;substIdx<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>subst<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="2044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(code<sp/>=<sp/>0;<sp/>code<sp/>&lt;<sp/>256;<sp/>++code)<sp/>{</highlight></codeline>
<codeline lineno="2045"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((charName<sp/>=<sp/>((<ref refid="class_gfx8_bit_font" kindref="compound">Gfx8BitFont</ref><sp/>*)font)-&gt;getCharName(code))<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>charName[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;m&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>charName[1]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="2047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2048"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(code<sp/>&lt;<sp/>256)<sp/>{</highlight></codeline>
<codeline lineno="2051"><highlight class="normal"><sp/><sp/><sp/><sp/>w1<sp/>=<sp/>((<ref refid="class_gfx8_bit_font" kindref="compound">Gfx8BitFont</ref><sp/>*)font)-&gt;getWidth(code);</highlight></codeline>
<codeline lineno="2052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2053"><highlight class="normal"><sp/><sp/><sp/><sp/>w1<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>w2<sp/>=<sp/>psBase14SubstFonts[fontLoc-&gt;substIdx].mWidth;</highlight></codeline>
<codeline lineno="2056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xs<sp/>=<sp/>w1<sp/>/<sp/>w2;</highlight></codeline>
<codeline lineno="2057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(xs<sp/>&lt;<sp/>0.1)<sp/>{</highlight></codeline>
<codeline lineno="2058"><highlight class="normal"><sp/><sp/><sp/><sp/>xs<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="2059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2060"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2061"><highlight class="normal"></highlight></codeline>
<codeline lineno="2062"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>handle<sp/>encodings<sp/>for<sp/>substituted<sp/>CID<sp/>fonts</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2063"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fontLoc-&gt;locType<sp/>==<sp/>gfxFontLocResident<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2064"><highlight class="normal"><sp/><sp/><sp/><sp/>fontLoc-&gt;fontType<sp/>&gt;=<sp/>fontCIDType0)<sp/>{</highlight></codeline>
<codeline lineno="2065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>subst<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="2066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(font16EncLen<sp/>&gt;=<sp/>font16EncSize)<sp/>{</highlight></codeline>
<codeline lineno="2067"><highlight class="normal"><sp/><sp/><sp/><sp/>font16EncSize<sp/>+=<sp/>16;</highlight></codeline>
<codeline lineno="2068"><highlight class="normal"><sp/><sp/><sp/><sp/>font16Enc<sp/>=<sp/>(<ref refid="struct_p_s_font16_enc" kindref="compound">PSFont16Enc</ref><sp/>*)greallocn(font16Enc,</highlight></codeline>
<codeline lineno="2069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>font16EncSize,</highlight></codeline>
<codeline lineno="2070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_p_s_font16_enc" kindref="compound">PSFont16Enc</ref>));</highlight></codeline>
<codeline lineno="2071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>font16Enc[font16EncLen].fontID<sp/>=<sp/>*font-&gt;getID();</highlight></codeline>
<codeline lineno="2073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((uMap<sp/>=<sp/>globalParams-&gt;getUnicodeMap(fontLoc-&gt;encoding)))<sp/>{</highlight></codeline>
<codeline lineno="2074"><highlight class="normal"><sp/><sp/><sp/><sp/>font16Enc[font16EncLen].enc<sp/>=<sp/>fontLoc-&gt;encoding-&gt;copy();</highlight></codeline>
<codeline lineno="2075"><highlight class="normal"><sp/><sp/><sp/><sp/>uMap-&gt;decRefCnt();</highlight></codeline>
<codeline lineno="2076"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2077"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>-1,</highlight></codeline>
<codeline lineno="2078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Couldn&apos;t<sp/>find<sp/>Unicode<sp/>map<sp/>for<sp/>16-bit<sp/>font<sp/>encoding<sp/>&apos;{0:t}&apos;&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fontLoc-&gt;encoding);</highlight></codeline>
<codeline lineno="2080"><highlight class="normal"><sp/><sp/><sp/><sp/>font16Enc[font16EncLen].enc<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++font16EncLen;</highlight></codeline>
<codeline lineno="2083"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2084"><highlight class="normal"></highlight></codeline>
<codeline lineno="2085"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>fontLoc;</highlight></codeline>
<codeline lineno="2086"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2087"><highlight class="normal"></highlight></codeline>
<codeline lineno="2088"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>generate<sp/>PostScript<sp/>code<sp/>to<sp/>set<sp/>up<sp/>the<sp/>font</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2089"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(font-&gt;isCIDFont())<sp/>{</highlight></codeline>
<codeline lineno="2090"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(level<sp/>==<sp/>psLevel3<sp/>||<sp/>level<sp/>==<sp/>psLevel3Sep)<sp/>{</highlight></codeline>
<codeline lineno="2091"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;/F{0:d}_{1:d}<sp/>/{2:t}<sp/>{3:d}<sp/>pdfMakeFont16L3\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2092"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>font-&gt;getID()-&gt;num,<sp/>font-&gt;getID()-&gt;gen,<sp/>psName,</highlight></codeline>
<codeline lineno="2093"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>font-&gt;getWMode());</highlight></codeline>
<codeline lineno="2094"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;/F{0:d}_{1:d}<sp/>/{2:t}<sp/>{3:d}<sp/>pdfMakeFont16\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>font-&gt;getID()-&gt;num,<sp/>font-&gt;getID()-&gt;gen,<sp/>psName,</highlight></codeline>
<codeline lineno="2097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>font-&gt;getWMode());</highlight></codeline>
<codeline lineno="2098"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2099"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2100"><highlight class="normal"><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;/F{0:d}_{1:d}<sp/>/{2:t}<sp/>{3:.6g}<sp/>{4:.6g}\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>font-&gt;getID()-&gt;num,<sp/>font-&gt;getID()-&gt;gen,<sp/>psName,<sp/>xs,<sp/>ys);</highlight></codeline>
<codeline lineno="2102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>256;<sp/>i<sp/>+=<sp/>8)<sp/>{</highlight></codeline>
<codeline lineno="2103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePS((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)((i<sp/>==<sp/>0)<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;[<sp/>&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>8;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="2105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(font-&gt;getType()<sp/>==<sp/>fontTrueType<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!subst<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!((<ref refid="class_gfx8_bit_font" kindref="compound">Gfx8BitFont</ref><sp/>*)font)-&gt;getHasEncoding())<sp/>{</highlight></codeline>
<codeline lineno="2108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(buf,<sp/></highlight><highlight class="stringliteral">&quot;c%02x&quot;</highlight><highlight class="normal">,<sp/>i+j);</highlight></codeline>
<codeline lineno="2109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>charName<sp/>=<sp/>buf;</highlight></codeline>
<codeline lineno="2110"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>charName<sp/>=<sp/>((<ref refid="class_gfx8_bit_font" kindref="compound">Gfx8BitFont</ref><sp/>*)font)-&gt;getCharName(i+j);</highlight></codeline>
<codeline lineno="2112"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2113"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2114"><highlight class="normal"><sp/><sp/><sp/><sp/>writePSName(charName<sp/>?<sp/>charName<sp/>:<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)</highlight><highlight class="stringliteral">&quot;.notdef&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>empty<sp/>name<sp/>is<sp/>legal<sp/>in<sp/>PDF<sp/>and<sp/>PostScript,<sp/>but<sp/>PostScript</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>uses<sp/>a<sp/>double-slash<sp/>(//...)<sp/>for<sp/>&quot;immediately<sp/>evaluated<sp/>names&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>so<sp/>we<sp/>need<sp/>to<sp/>add<sp/>a<sp/>space<sp/>character<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(charName<sp/>&amp;&amp;<sp/>!charName[0])<sp/>{</highlight></codeline>
<codeline lineno="2119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2120"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePS((i<sp/>==<sp/>256-8)<sp/>?<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)</highlight><highlight class="stringliteral">&quot;]\n&quot;</highlight><highlight class="normal"><sp/>:<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2123"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2124"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;pdfMakeFont\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2125"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2126"><highlight class="normal"></highlight></codeline>
<codeline lineno="2127"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>psName;</highlight></codeline>
<codeline lineno="2128"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2129"><highlight class="normal"></highlight></codeline>
<codeline lineno="2130"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PSOutputDev::setupEmbeddedType1Font(<ref refid="struct_ref" kindref="compound">Ref</ref><sp/>*</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*psName)<sp/>{</highlight></codeline>
<codeline lineno="2131"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>hexChar[17]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;0123456789abcdef&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2132"><highlight class="normal"><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>refObj,<sp/>strObj,<sp/>obj1,<sp/>obj2,<sp/>obj3;</highlight></codeline>
<codeline lineno="2133"><highlight class="normal"><sp/><sp/><ref refid="class_dict" kindref="compound">Dict</ref><sp/>*dict;</highlight></codeline>
<codeline lineno="2134"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>length1,<sp/>length2,<sp/>length3;</highlight></codeline>
<codeline lineno="2135"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="2136"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>start[4];</highlight></codeline>
<codeline lineno="2137"><highlight class="normal"><sp/><sp/>GBool<sp/>binMode;</highlight></codeline>
<codeline lineno="2138"><highlight class="normal"><sp/><sp/>GBool<sp/>writePadding<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="2139"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="2140"><highlight class="normal"></highlight></codeline>
<codeline lineno="2141"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>if<sp/>font<sp/>is<sp/>already<sp/>embedded</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2142"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fontNames-&gt;lookupInt(psName))<sp/>{</highlight></codeline>
<codeline lineno="2143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2144"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2145"><highlight class="normal"><sp/><sp/>fontNames-&gt;add(psName-&gt;copy(),<sp/>1);</highlight></codeline>
<codeline lineno="2146"><highlight class="normal"></highlight></codeline>
<codeline lineno="2147"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>the<sp/>font<sp/>stream<sp/>and<sp/>info</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2148"><highlight class="normal"><sp/><sp/>refObj.initRef(id-&gt;num,<sp/>id-&gt;gen);</highlight></codeline>
<codeline lineno="2149"><highlight class="normal"><sp/><sp/>refObj.fetch(xref,<sp/>&amp;strObj);</highlight></codeline>
<codeline lineno="2150"><highlight class="normal"><sp/><sp/>refObj.free();</highlight></codeline>
<codeline lineno="2151"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!strObj.isStream())<sp/>{</highlight></codeline>
<codeline lineno="2152"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Embedded<sp/>font<sp/>file<sp/>object<sp/>is<sp/>not<sp/>a<sp/>stream&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err1;</highlight></codeline>
<codeline lineno="2154"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2155"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(dict<sp/>=<sp/>strObj.streamGetDict()))<sp/>{</highlight></codeline>
<codeline lineno="2156"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>-1,</highlight></codeline>
<codeline lineno="2157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Embedded<sp/>font<sp/>stream<sp/>is<sp/>missing<sp/>its<sp/>dictionary&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err1;</highlight></codeline>
<codeline lineno="2159"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2160"><highlight class="normal"><sp/><sp/>dict-&gt;lookup(</highlight><highlight class="stringliteral">&quot;Length1&quot;</highlight><highlight class="normal">,<sp/>&amp;obj1);</highlight></codeline>
<codeline lineno="2161"><highlight class="normal"><sp/><sp/>dict-&gt;lookup(</highlight><highlight class="stringliteral">&quot;Length2&quot;</highlight><highlight class="normal">,<sp/>&amp;obj2);</highlight></codeline>
<codeline lineno="2162"><highlight class="normal"><sp/><sp/>dict-&gt;lookup(</highlight><highlight class="stringliteral">&quot;Length3&quot;</highlight><highlight class="normal">,<sp/>&amp;obj3);</highlight></codeline>
<codeline lineno="2163"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!obj1.isInt()<sp/>||<sp/>!obj2.isInt()<sp/>||<sp/>!obj3.isInt())<sp/>{</highlight></codeline>
<codeline lineno="2164"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>-1,</highlight></codeline>
<codeline lineno="2165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Missing<sp/>length<sp/>fields<sp/>in<sp/>embedded<sp/>font<sp/>stream<sp/>dictionary&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2166"><highlight class="normal"><sp/><sp/><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="2167"><highlight class="normal"><sp/><sp/><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="2168"><highlight class="normal"><sp/><sp/><sp/><sp/>obj3.free();</highlight></codeline>
<codeline lineno="2169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err1;</highlight></codeline>
<codeline lineno="2170"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2171"><highlight class="normal"><sp/><sp/>length1<sp/>=<sp/>obj1.getInt();</highlight></codeline>
<codeline lineno="2172"><highlight class="normal"><sp/><sp/>length2<sp/>=<sp/>obj2.getInt();</highlight></codeline>
<codeline lineno="2173"><highlight class="normal"><sp/><sp/>length3<sp/>=<sp/>obj3.getInt();</highlight></codeline>
<codeline lineno="2174"><highlight class="normal"><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="2175"><highlight class="normal"><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="2176"><highlight class="normal"><sp/><sp/>obj3.free();</highlight></codeline>
<codeline lineno="2177"><highlight class="normal"></highlight></codeline>
<codeline lineno="2178"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>beginning<sp/>comment</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2179"><highlight class="normal"><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;%%BeginResource:<sp/>font<sp/>{0:t}\n&quot;</highlight><highlight class="normal">,<sp/>psName);</highlight></codeline>
<codeline lineno="2180"><highlight class="normal"><sp/><sp/>embFontList-&gt;append(</highlight><highlight class="stringliteral">&quot;%%+<sp/>font<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2181"><highlight class="normal"><sp/><sp/>embFontList-&gt;append(psName-&gt;getCString());</highlight></codeline>
<codeline lineno="2182"><highlight class="normal"><sp/><sp/>embFontList-&gt;append(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2183"><highlight class="normal"></highlight></codeline>
<codeline lineno="2184"><highlight class="normal"><sp/><sp/>strObj.streamReset();</highlight></codeline>
<codeline lineno="2185"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strObj.streamGetChar()<sp/>==<sp/>0x80<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>strObj.streamGetChar()<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="2187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>PFB<sp/>format</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2188"><highlight class="normal"><sp/><sp/><sp/><sp/>length1<sp/>=<sp/>strObj.streamGetChar()<sp/>|</highlight></codeline>
<codeline lineno="2189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(strObj.streamGetChar()<sp/>&lt;&lt;<sp/>8)<sp/>|</highlight></codeline>
<codeline lineno="2190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(strObj.streamGetChar()<sp/>&lt;&lt;<sp/>16)<sp/>|</highlight></codeline>
<codeline lineno="2191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(strObj.streamGetChar()<sp/>&lt;&lt;<sp/>24);</highlight></codeline>
<codeline lineno="2192"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2193"><highlight class="normal"><sp/><sp/><sp/><sp/>strObj.streamReset();</highlight></codeline>
<codeline lineno="2194"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2195"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>copy<sp/>ASCII<sp/>portion<sp/>of<sp/>font</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2196"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>length1<sp/>&amp;&amp;<sp/>(c<sp/>=<sp/>strObj.streamGetChar())<sp/>!=<sp/>EOF;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="2197"><highlight class="normal"><sp/><sp/><sp/><sp/>writePSChar(c);</highlight></codeline>
<codeline lineno="2198"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2199"><highlight class="normal"></highlight></codeline>
<codeline lineno="2200"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>figure<sp/>out<sp/>if<sp/>encrypted<sp/>portion<sp/>is<sp/>binary<sp/>or<sp/>ASCII</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2201"><highlight class="normal"><sp/><sp/>binMode<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="2202"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>4;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="2203"><highlight class="normal"><sp/><sp/><sp/><sp/>start[i]<sp/>=<sp/>strObj.streamGetChar();</highlight></codeline>
<codeline lineno="2204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(start[i]<sp/>==<sp/>EOF)<sp/>{</highlight></codeline>
<codeline lineno="2205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>-1,</highlight></codeline>
<codeline lineno="2206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Unexpected<sp/>end<sp/>of<sp/>file<sp/>in<sp/>embedded<sp/>font<sp/>stream&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err1;</highlight></codeline>
<codeline lineno="2208"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2209"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!((start[i]<sp/>&gt;=<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>start[i]<sp/>&lt;=<sp/></highlight><highlight class="charliteral">&apos;9&apos;</highlight><highlight class="normal">)<sp/>||</highlight></codeline>
<codeline lineno="2210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(start[i]<sp/>&gt;=<sp/></highlight><highlight class="charliteral">&apos;A&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>start[i]<sp/>&lt;=<sp/></highlight><highlight class="charliteral">&apos;F&apos;</highlight><highlight class="normal">)<sp/>||</highlight></codeline>
<codeline lineno="2211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(start[i]<sp/>&gt;=<sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>start[i]<sp/>&lt;=<sp/></highlight><highlight class="charliteral">&apos;f&apos;</highlight><highlight class="normal">)))</highlight></codeline>
<codeline lineno="2212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>binMode<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="2213"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2214"><highlight class="normal"></highlight></codeline>
<codeline lineno="2215"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(length2<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="2216"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>length2<sp/>==<sp/>0<sp/>is<sp/>an<sp/>error</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2218"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>trying<sp/>to<sp/>solve<sp/>it<sp/>by<sp/>just<sp/>piping<sp/>all</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2219"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>stream<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2220"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errSyntaxWarning,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Font<sp/>has<sp/>length2<sp/>as<sp/>0,<sp/>trying<sp/>to<sp/>overcome<sp/>the<sp/>problem<sp/>reading<sp/>the<sp/>stream<sp/>until<sp/>the<sp/>end&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2221"><highlight class="normal"><sp/><sp/><sp/><sp/>length2<sp/>=<sp/>INT_MAX;</highlight></codeline>
<codeline lineno="2222"><highlight class="normal"><sp/><sp/><sp/><sp/>writePadding<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="2223"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2224"><highlight class="normal"></highlight></codeline>
<codeline lineno="2225"><highlight class="normal"></highlight></codeline>
<codeline lineno="2226"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>convert<sp/>binary<sp/>data<sp/>to<sp/>ASCII</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2227"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(binMode)<sp/>{</highlight></codeline>
<codeline lineno="2228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(start[0]<sp/>==<sp/>0x80<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start[1]<sp/>==<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="2230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>length2<sp/>=<sp/>start[2]<sp/>|</highlight></codeline>
<codeline lineno="2231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(start[3]<sp/>&lt;&lt;<sp/>8)<sp/>|</highlight></codeline>
<codeline lineno="2232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(strObj.streamGetChar()<sp/>&lt;&lt;<sp/>16)<sp/>|</highlight></codeline>
<codeline lineno="2233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(strObj.streamGetChar()<sp/>&lt;&lt;<sp/>24);</highlight></codeline>
<codeline lineno="2234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2235"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>4;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="2237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writePSChar(hexChar[(start[i]<sp/>&gt;&gt;<sp/>4)<sp/>&amp;<sp/>0x0f]);</highlight></codeline>
<codeline lineno="2238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writePSChar(hexChar[start[i]<sp/>&amp;<sp/>0x0f]);</highlight></codeline>
<codeline lineno="2239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2240"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2241"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>0<sp/>//<sp/>this<sp/>causes<sp/>trouble<sp/>for<sp/>various<sp/>PostScript<sp/>printers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>Length2<sp/>is<sp/>incorrect<sp/>(too<sp/>small),<sp/>font<sp/>data<sp/>gets<sp/>chopped,<sp/>so</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2243"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>take<sp/>a<sp/>few<sp/>extra<sp/>characters<sp/>from<sp/>the<sp/>trailer<sp/>just<sp/>in<sp/>case</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2244"><highlight class="normal"><sp/><sp/><sp/><sp/>length2<sp/>+=<sp/>length3<sp/>&gt;=<sp/>8<sp/>?<sp/>8<sp/>:<sp/>length3;</highlight></codeline>
<codeline lineno="2245"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2246"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>length2)<sp/>{</highlight></codeline>
<codeline lineno="2247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((c<sp/>=<sp/>strObj.streamGetChar())<sp/>==<sp/>EOF)<sp/>{</highlight></codeline>
<codeline lineno="2248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePSChar(hexChar[(c<sp/>&gt;&gt;<sp/>4)<sp/>&amp;<sp/>0x0f]);</highlight></codeline>
<codeline lineno="2251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePSChar(hexChar[c<sp/>&amp;<sp/>0x0f]);</highlight></codeline>
<codeline lineno="2252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(++i<sp/>%<sp/>32<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2253"><highlight class="normal"><sp/><sp/><sp/><sp/>writePSChar(</highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2255"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2256"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>%<sp/>32<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePSChar(</highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2258"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2259"><highlight class="normal"></highlight></codeline>
<codeline lineno="2260"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>already<sp/>in<sp/>ASCII<sp/>format<sp/>--<sp/>just<sp/>copy<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2261"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2262"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>4;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="2263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePSChar(start[i]);</highlight></codeline>
<codeline lineno="2264"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2265"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>4;<sp/>i<sp/>&lt;<sp/>length2;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="2266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((c<sp/>=<sp/>strObj.streamGetChar())<sp/>==<sp/>EOF)<sp/>{</highlight></codeline>
<codeline lineno="2267"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePSChar(c);</highlight></codeline>
<codeline lineno="2270"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2271"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2272"><highlight class="normal"></highlight></codeline>
<codeline lineno="2273"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(writePadding)</highlight></codeline>
<codeline lineno="2274"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2275"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(length3<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>write<sp/>fixed-content<sp/>portion</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>strObj.streamGetChar();</highlight></codeline>
<codeline lineno="2278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/>0x80)<sp/>{</highlight></codeline>
<codeline lineno="2279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>strObj.streamGetChar();</highlight></codeline>
<codeline lineno="2280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="2281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>length3<sp/>=<sp/>strObj.streamGetChar()<sp/>|</highlight></codeline>
<codeline lineno="2282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(strObj.streamGetChar()<sp/>&lt;&lt;<sp/>8)<sp/>|</highlight></codeline>
<codeline lineno="2283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(strObj.streamGetChar()<sp/>&lt;&lt;<sp/>16)<sp/>|</highlight></codeline>
<codeline lineno="2284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(strObj.streamGetChar()<sp/>&lt;&lt;<sp/>24);</highlight></codeline>
<codeline lineno="2285"><highlight class="normal"></highlight></codeline>
<codeline lineno="2286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>length3)<sp/>{</highlight></codeline>
<codeline lineno="2288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((c<sp/>=<sp/>strObj.streamGetChar())<sp/>==<sp/>EOF)<sp/>{</highlight></codeline>
<codeline lineno="2289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writePSChar(c);</highlight></codeline>
<codeline lineno="2292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++i;</highlight></codeline>
<codeline lineno="2293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>!=<sp/>EOF)<sp/>{</highlight></codeline>
<codeline lineno="2297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writePSChar(c);</highlight></codeline>
<codeline lineno="2298"><highlight class="normal"></highlight></codeline>
<codeline lineno="2299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((c<sp/>=<sp/>strObj.streamGetChar())<sp/>!=<sp/>EOF)<sp/>{</highlight></codeline>
<codeline lineno="2300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writePSChar(c);</highlight></codeline>
<codeline lineno="2301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2304"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>write<sp/>padding<sp/>and<sp/>&quot;cleartomark&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>8;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="2307"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;00000000000000000000000000000000&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;00000000000000000000000000000000\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;cleartomark\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2311"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2312"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2313"><highlight class="normal"></highlight></codeline>
<codeline lineno="2314"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>ending<sp/>comment</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2315"><highlight class="normal"><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;%%EndResource\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2316"><highlight class="normal"></highlight></codeline>
<codeline lineno="2317"><highlight class="normal"><sp/>err1:</highlight></codeline>
<codeline lineno="2318"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strObj.isStream())</highlight></codeline>
<codeline lineno="2319"><highlight class="normal"><sp/><sp/><sp/><sp/>strObj.streamClose();</highlight></codeline>
<codeline lineno="2320"><highlight class="normal"><sp/><sp/>strObj.free();</highlight></codeline>
<codeline lineno="2321"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2322"><highlight class="normal"></highlight></codeline>
<codeline lineno="2323"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PSOutputDev::setupExternalType1Font(<ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*fileName,<sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*psName)<sp/>{</highlight></codeline>
<codeline lineno="2324"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>hexChar[17]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;0123456789abcdef&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2325"><highlight class="normal"><sp/><sp/>FILE<sp/>*fontFile;</highlight></codeline>
<codeline lineno="2326"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="2327"><highlight class="normal"></highlight></codeline>
<codeline lineno="2328"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fontNames-&gt;lookupInt(psName))<sp/>{</highlight></codeline>
<codeline lineno="2329"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2330"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2331"><highlight class="normal"><sp/><sp/>fontNames-&gt;add(psName-&gt;copy(),<sp/>1);</highlight></codeline>
<codeline lineno="2332"><highlight class="normal"></highlight></codeline>
<codeline lineno="2333"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>beginning<sp/>comment</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2334"><highlight class="normal"><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;%%BeginResource:<sp/>font<sp/>{0:t}\n&quot;</highlight><highlight class="normal">,<sp/>psName);</highlight></codeline>
<codeline lineno="2335"><highlight class="normal"><sp/><sp/>embFontList-&gt;append(</highlight><highlight class="stringliteral">&quot;%%+<sp/>font<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2336"><highlight class="normal"><sp/><sp/>embFontList-&gt;append(psName-&gt;getCString());</highlight></codeline>
<codeline lineno="2337"><highlight class="normal"><sp/><sp/>embFontList-&gt;append(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2338"><highlight class="normal"></highlight></codeline>
<codeline lineno="2339"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>copy<sp/>the<sp/>font<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2340"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(fontFile<sp/>=<sp/>fopen(fileName-&gt;getCString(),<sp/></highlight><highlight class="stringliteral">&quot;rb&quot;</highlight><highlight class="normal">)))<sp/>{</highlight></codeline>
<codeline lineno="2341"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errIO,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Couldn&apos;t<sp/>open<sp/>external<sp/>font<sp/>file&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2342"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2343"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2344"><highlight class="normal"></highlight></codeline>
<codeline lineno="2345"><highlight class="normal"><sp/><sp/>c<sp/>=<sp/>fgetc(fontFile);</highlight></codeline>
<codeline lineno="2346"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/>0x80)<sp/>{</highlight></codeline>
<codeline lineno="2347"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>PFB<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2348"><highlight class="normal"><sp/><sp/><sp/><sp/>ungetc(c,<sp/>fontFile);</highlight></codeline>
<codeline lineno="2349"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!feof(fontFile))<sp/>{</highlight></codeline>
<codeline lineno="2350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fgetc(fontFile);<sp/></highlight><highlight class="comment">//<sp/>skip<sp/>start<sp/>of<sp/>segment<sp/>byte<sp/>(0x80)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>segType<sp/>=<sp/>fgetc(fontFile);</highlight></codeline>
<codeline lineno="2352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>segLen<sp/>=<sp/>fgetc(fontFile)<sp/>|</highlight></codeline>
<codeline lineno="2353"><highlight class="normal"><sp/><sp/><sp/><sp/>(fgetc(fontFile)<sp/>&lt;&lt;<sp/>8)<sp/>|</highlight></codeline>
<codeline lineno="2354"><highlight class="normal"><sp/><sp/><sp/><sp/>(fgetc(fontFile)<sp/>&lt;&lt;<sp/>16)<sp/>|</highlight></codeline>
<codeline lineno="2355"><highlight class="normal"><sp/><sp/><sp/><sp/>(fgetc(fontFile)<sp/>&lt;&lt;<sp/>24);</highlight></codeline>
<codeline lineno="2356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(feof(fontFile))</highlight></codeline>
<codeline lineno="2357"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2358"><highlight class="normal"></highlight></codeline>
<codeline lineno="2359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(segType<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="2360"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ASCII<sp/>segment</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2361"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>segLen;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="2362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>fgetc(fontFile);</highlight></codeline>
<codeline lineno="2363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/>EOF)</highlight></codeline>
<codeline lineno="2364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePSChar(c);</highlight></codeline>
<codeline lineno="2366"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(segType<sp/>==<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="2368"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>binary<sp/>segment</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2369"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>segLen;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="2370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>fgetc(fontFile);</highlight></codeline>
<codeline lineno="2371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/>EOF)</highlight></codeline>
<codeline lineno="2372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePSChar(hexChar[(c<sp/>&gt;&gt;<sp/>4)<sp/>&amp;<sp/>0x0f]);</highlight></codeline>
<codeline lineno="2374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePSChar(hexChar[c<sp/>&amp;<sp/>0x0f]);</highlight></codeline>
<codeline lineno="2375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>%<sp/>36<sp/>==<sp/>35)</highlight></codeline>
<codeline lineno="2376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writePSChar(</highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2377"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2379"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>end<sp/>of<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2380"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2382"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2383"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>!=<sp/>EOF)<sp/>{</highlight></codeline>
<codeline lineno="2384"><highlight class="normal"><sp/><sp/><sp/><sp/>writePSChar(c);</highlight></codeline>
<codeline lineno="2385"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((c<sp/>=<sp/>fgetc(fontFile))<sp/>!=<sp/>EOF)</highlight></codeline>
<codeline lineno="2386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePSChar(c);</highlight></codeline>
<codeline lineno="2387"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2388"><highlight class="normal"><sp/><sp/>fclose(fontFile);</highlight></codeline>
<codeline lineno="2389"><highlight class="normal"></highlight></codeline>
<codeline lineno="2390"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>ending<sp/>comment</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2391"><highlight class="normal"><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;%%EndResource\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2392"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2393"><highlight class="normal"></highlight></codeline>
<codeline lineno="2394"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PSOutputDev::setupEmbeddedType1CFont(<ref refid="class_gfx_font" kindref="compound">GfxFont</ref><sp/>*font,<sp/><ref refid="struct_ref" kindref="compound">Ref</ref><sp/>*</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*psName)<sp/>{</highlight></codeline>
<codeline lineno="2396"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fontBuf;</highlight></codeline>
<codeline lineno="2397"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fontLen;</highlight></codeline>
<codeline lineno="2398"><highlight class="normal"><sp/><sp/><ref refid="class_fo_fi_type1_c" kindref="compound">FoFiType1C</ref><sp/>*ffT1C;</highlight></codeline>
<codeline lineno="2399"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="2400"><highlight class="normal"></highlight></codeline>
<codeline lineno="2401"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>if<sp/>font<sp/>is<sp/>already<sp/>embedded</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2402"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>t1FontNameLen;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="2403"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t1FontNames[i].fontFileID.num<sp/>==<sp/>id-&gt;num<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2404"><highlight class="normal"><sp/><sp/><sp/><sp/>t1FontNames[i].fontFileID.gen<sp/>==<sp/>id-&gt;gen)<sp/>{</highlight></codeline>
<codeline lineno="2405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>psName-&gt;clear();</highlight></codeline>
<codeline lineno="2406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>psName-&gt;insert(0,<sp/>t1FontNames[i].psName);</highlight></codeline>
<codeline lineno="2407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2408"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2409"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2410"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t1FontNameLen<sp/>==<sp/>t1FontNameSize)<sp/>{</highlight></codeline>
<codeline lineno="2411"><highlight class="normal"><sp/><sp/><sp/><sp/>t1FontNameSize<sp/>*=<sp/>2;</highlight></codeline>
<codeline lineno="2412"><highlight class="normal"><sp/><sp/><sp/><sp/>t1FontNames<sp/>=<sp/>(<ref refid="struct_p_s_t1_font_name" kindref="compound">PST1FontName</ref><sp/>*)greallocn(t1FontNames,<sp/>t1FontNameSize,</highlight></codeline>
<codeline lineno="2413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_p_s_t1_font_name" kindref="compound">PST1FontName</ref>));</highlight></codeline>
<codeline lineno="2414"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2415"><highlight class="normal"><sp/><sp/>t1FontNames[t1FontNameLen].fontFileID<sp/>=<sp/>*id;</highlight></codeline>
<codeline lineno="2416"><highlight class="normal"><sp/><sp/>t1FontNames[t1FontNameLen].psName<sp/>=<sp/>psName-&gt;copy();</highlight></codeline>
<codeline lineno="2417"><highlight class="normal"><sp/><sp/>++t1FontNameLen;</highlight></codeline>
<codeline lineno="2418"><highlight class="normal"></highlight></codeline>
<codeline lineno="2419"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>beginning<sp/>comment</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2420"><highlight class="normal"><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;%%BeginResource:<sp/>font<sp/>{0:t}\n&quot;</highlight><highlight class="normal">,<sp/>psName);</highlight></codeline>
<codeline lineno="2421"><highlight class="normal"><sp/><sp/>embFontList-&gt;append(</highlight><highlight class="stringliteral">&quot;%%+<sp/>font<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2422"><highlight class="normal"><sp/><sp/>embFontList-&gt;append(psName-&gt;getCString());</highlight></codeline>
<codeline lineno="2423"><highlight class="normal"><sp/><sp/>embFontList-&gt;append(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2424"><highlight class="normal"></highlight></codeline>
<codeline lineno="2425"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>convert<sp/>it<sp/>to<sp/>a<sp/>Type<sp/>1<sp/>font</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2426"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((fontBuf<sp/>=<sp/>font-&gt;readEmbFontFile(xref,<sp/>&amp;fontLen)))<sp/>{</highlight></codeline>
<codeline lineno="2427"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((ffT1C<sp/>=<sp/>FoFiType1C::make(fontBuf,<sp/>fontLen)))<sp/>{</highlight></codeline>
<codeline lineno="2428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ffT1C-&gt;convertToType1(psName-&gt;getCString(),<sp/>NULL,<sp/>gTrue,</highlight></codeline>
<codeline lineno="2429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outputFunc,<sp/>outputStream);</highlight></codeline>
<codeline lineno="2430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>ffT1C;</highlight></codeline>
<codeline lineno="2431"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2432"><highlight class="normal"><sp/><sp/><sp/><sp/>gfree(fontBuf);</highlight></codeline>
<codeline lineno="2433"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2434"><highlight class="normal"></highlight></codeline>
<codeline lineno="2435"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>ending<sp/>comment</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2436"><highlight class="normal"><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;%%EndResource\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2437"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2438"><highlight class="normal"></highlight></codeline>
<codeline lineno="2439"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PSOutputDev::setupEmbeddedOpenTypeT1CFont(<ref refid="class_gfx_font" kindref="compound">GfxFont</ref><sp/>*font,<sp/><ref refid="struct_ref" kindref="compound">Ref</ref><sp/>*</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*psName)<sp/>{</highlight></codeline>
<codeline lineno="2441"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fontBuf;</highlight></codeline>
<codeline lineno="2442"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fontLen;</highlight></codeline>
<codeline lineno="2443"><highlight class="normal"><sp/><sp/><ref refid="class_fo_fi_true_type" kindref="compound">FoFiTrueType</ref><sp/>*ffTT;</highlight></codeline>
<codeline lineno="2444"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="2445"><highlight class="normal"></highlight></codeline>
<codeline lineno="2446"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>if<sp/>font<sp/>is<sp/>already<sp/>embedded</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2447"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>t1FontNameLen;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="2448"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t1FontNames[i].fontFileID.num<sp/>==<sp/>id-&gt;num<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2449"><highlight class="normal"><sp/><sp/><sp/><sp/>t1FontNames[i].fontFileID.gen<sp/>==<sp/>id-&gt;gen)<sp/>{</highlight></codeline>
<codeline lineno="2450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>psName-&gt;clear();</highlight></codeline>
<codeline lineno="2451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>psName-&gt;insert(0,<sp/>t1FontNames[i].psName);</highlight></codeline>
<codeline lineno="2452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2453"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2454"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2455"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t1FontNameLen<sp/>==<sp/>t1FontNameSize)<sp/>{</highlight></codeline>
<codeline lineno="2456"><highlight class="normal"><sp/><sp/><sp/><sp/>t1FontNameSize<sp/>*=<sp/>2;</highlight></codeline>
<codeline lineno="2457"><highlight class="normal"><sp/><sp/><sp/><sp/>t1FontNames<sp/>=<sp/>(<ref refid="struct_p_s_t1_font_name" kindref="compound">PST1FontName</ref><sp/>*)greallocn(t1FontNames,<sp/>t1FontNameSize,</highlight></codeline>
<codeline lineno="2458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_p_s_t1_font_name" kindref="compound">PST1FontName</ref>));</highlight></codeline>
<codeline lineno="2459"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2460"><highlight class="normal"><sp/><sp/>t1FontNames[t1FontNameLen].fontFileID<sp/>=<sp/>*id;</highlight></codeline>
<codeline lineno="2461"><highlight class="normal"><sp/><sp/>t1FontNames[t1FontNameLen].psName<sp/>=<sp/>psName-&gt;copy();</highlight></codeline>
<codeline lineno="2462"><highlight class="normal"><sp/><sp/>++t1FontNameLen;</highlight></codeline>
<codeline lineno="2463"><highlight class="normal"></highlight></codeline>
<codeline lineno="2464"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>beginning<sp/>comment</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2465"><highlight class="normal"><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;%%BeginResource:<sp/>font<sp/>{0:t}\n&quot;</highlight><highlight class="normal">,<sp/>psName);</highlight></codeline>
<codeline lineno="2466"><highlight class="normal"><sp/><sp/>embFontList-&gt;append(</highlight><highlight class="stringliteral">&quot;%%+<sp/>font<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2467"><highlight class="normal"><sp/><sp/>embFontList-&gt;append(psName-&gt;getCString());</highlight></codeline>
<codeline lineno="2468"><highlight class="normal"><sp/><sp/>embFontList-&gt;append(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2469"><highlight class="normal"></highlight></codeline>
<codeline lineno="2470"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>convert<sp/>it<sp/>to<sp/>a<sp/>Type<sp/>1<sp/>font</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2471"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((fontBuf<sp/>=<sp/>font-&gt;readEmbFontFile(xref,<sp/>&amp;fontLen)))<sp/>{</highlight></codeline>
<codeline lineno="2472"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((ffTT<sp/>=<sp/>FoFiTrueType::make(fontBuf,<sp/>fontLen)))<sp/>{</highlight></codeline>
<codeline lineno="2473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ffTT-&gt;isOpenTypeCFF())<sp/>{</highlight></codeline>
<codeline lineno="2474"><highlight class="normal"><sp/><sp/><sp/><sp/>ffTT-&gt;convertToType1(psName-&gt;getCString(),<sp/>NULL,<sp/>gTrue,</highlight></codeline>
<codeline lineno="2475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outputFunc,<sp/>outputStream);</highlight></codeline>
<codeline lineno="2476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>ffTT;</highlight></codeline>
<codeline lineno="2478"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2479"><highlight class="normal"><sp/><sp/><sp/><sp/>gfree(fontBuf);</highlight></codeline>
<codeline lineno="2480"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2481"><highlight class="normal"></highlight></codeline>
<codeline lineno="2482"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>ending<sp/>comment</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2483"><highlight class="normal"><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;%%EndResource\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2484"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2485"><highlight class="normal"></highlight></codeline>
<codeline lineno="2486"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PSOutputDev::setupEmbeddedTrueTypeFont(<ref refid="class_gfx_font" kindref="compound">GfxFont</ref><sp/>*font,<sp/><ref refid="struct_ref" kindref="compound">Ref</ref><sp/>*</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*psName)<sp/>{</highlight></codeline>
<codeline lineno="2488"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fontBuf;</highlight></codeline>
<codeline lineno="2489"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fontLen;</highlight></codeline>
<codeline lineno="2490"><highlight class="normal"><sp/><sp/><ref refid="class_fo_fi_true_type" kindref="compound">FoFiTrueType</ref><sp/>*ffTT;</highlight></codeline>
<codeline lineno="2491"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*codeToGID;</highlight></codeline>
<codeline lineno="2492"><highlight class="normal"></highlight></codeline>
<codeline lineno="2493"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>beginning<sp/>comment</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2494"><highlight class="normal"><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;%%BeginResource:<sp/>font<sp/>{0:t}\n&quot;</highlight><highlight class="normal">,<sp/>psName);</highlight></codeline>
<codeline lineno="2495"><highlight class="normal"><sp/><sp/>embFontList-&gt;append(</highlight><highlight class="stringliteral">&quot;%%+<sp/>font<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2496"><highlight class="normal"><sp/><sp/>embFontList-&gt;append(psName-&gt;getCString());</highlight></codeline>
<codeline lineno="2497"><highlight class="normal"><sp/><sp/>embFontList-&gt;append(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2498"><highlight class="normal"></highlight></codeline>
<codeline lineno="2499"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>convert<sp/>it<sp/>to<sp/>a<sp/>Type<sp/>42<sp/>font</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2500"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((fontBuf<sp/>=<sp/>font-&gt;readEmbFontFile(xref,<sp/>&amp;fontLen)))<sp/>{</highlight></codeline>
<codeline lineno="2501"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((ffTT<sp/>=<sp/>FoFiTrueType::make(fontBuf,<sp/>fontLen)))<sp/>{</highlight></codeline>
<codeline lineno="2502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>codeToGID<sp/>=<sp/>((<ref refid="class_gfx8_bit_font" kindref="compound">Gfx8BitFont</ref><sp/>*)font)-&gt;getCodeToGIDMap(ffTT);</highlight></codeline>
<codeline lineno="2503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ffTT-&gt;convertToType42(psName-&gt;getCString(),</highlight></codeline>
<codeline lineno="2504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((<ref refid="class_gfx8_bit_font" kindref="compound">Gfx8BitFont</ref><sp/>*)font)-&gt;getHasEncoding()</highlight></codeline>
<codeline lineno="2505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>((<ref refid="class_gfx8_bit_font" kindref="compound">Gfx8BitFont</ref><sp/>*)font)-&gt;getEncoding()</highlight></codeline>
<codeline lineno="2506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**)NULL,</highlight></codeline>
<codeline lineno="2507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>codeToGID,<sp/>outputFunc,<sp/>outputStream);</highlight></codeline>
<codeline lineno="2508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(codeToGID)<sp/>{</highlight></codeline>
<codeline lineno="2509"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(font8InfoLen<sp/>&gt;=<sp/>font8InfoSize)<sp/>{</highlight></codeline>
<codeline lineno="2510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>font8InfoSize<sp/>+=<sp/>16;</highlight></codeline>
<codeline lineno="2511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>font8Info<sp/>=<sp/>(<ref refid="struct_p_s_font8_info" kindref="compound">PSFont8Info</ref><sp/>*)greallocn(font8Info,</highlight></codeline>
<codeline lineno="2512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>font8InfoSize,</highlight></codeline>
<codeline lineno="2513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_p_s_font8_info" kindref="compound">PSFont8Info</ref>));</highlight></codeline>
<codeline lineno="2514"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2515"><highlight class="normal"><sp/><sp/><sp/><sp/>font8Info[font8InfoLen].fontID<sp/>=<sp/>*font-&gt;getID();</highlight></codeline>
<codeline lineno="2516"><highlight class="normal"><sp/><sp/><sp/><sp/>font8Info[font8InfoLen].codeToGID<sp/>=<sp/>codeToGID;</highlight></codeline>
<codeline lineno="2517"><highlight class="normal"><sp/><sp/><sp/><sp/>++font8InfoLen;</highlight></codeline>
<codeline lineno="2518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>ffTT;</highlight></codeline>
<codeline lineno="2520"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2521"><highlight class="normal"><sp/><sp/><sp/><sp/>gfree(fontBuf);</highlight></codeline>
<codeline lineno="2522"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2523"><highlight class="normal"></highlight></codeline>
<codeline lineno="2524"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>ending<sp/>comment</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2525"><highlight class="normal"><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;%%EndResource\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2526"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2527"><highlight class="normal"></highlight></codeline>
<codeline lineno="2528"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PSOutputDev::setupExternalTrueTypeFont(<ref refid="class_gfx_font" kindref="compound">GfxFont</ref><sp/>*font,<sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*fileName,</highlight></codeline>
<codeline lineno="2529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*psName)<sp/>{</highlight></codeline>
<codeline lineno="2530"><highlight class="normal"><sp/><sp/><ref refid="class_fo_fi_true_type" kindref="compound">FoFiTrueType</ref><sp/>*ffTT;</highlight></codeline>
<codeline lineno="2531"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*codeToGID;</highlight></codeline>
<codeline lineno="2532"><highlight class="normal"></highlight></codeline>
<codeline lineno="2533"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>beginning<sp/>comment</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2534"><highlight class="normal"><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;%%BeginResource:<sp/>font<sp/>{0:t}\n&quot;</highlight><highlight class="normal">,<sp/>psName);</highlight></codeline>
<codeline lineno="2535"><highlight class="normal"><sp/><sp/>embFontList-&gt;append(</highlight><highlight class="stringliteral">&quot;%%+<sp/>font<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2536"><highlight class="normal"><sp/><sp/>embFontList-&gt;append(psName-&gt;getCString());</highlight></codeline>
<codeline lineno="2537"><highlight class="normal"><sp/><sp/>embFontList-&gt;append(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2538"><highlight class="normal"></highlight></codeline>
<codeline lineno="2539"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>convert<sp/>it<sp/>to<sp/>a<sp/>Type<sp/>42<sp/>font</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2540"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((ffTT<sp/>=<sp/>FoFiTrueType::load(fileName-&gt;getCString())))<sp/>{</highlight></codeline>
<codeline lineno="2541"><highlight class="normal"><sp/><sp/><sp/><sp/>codeToGID<sp/>=<sp/>((<ref refid="class_gfx8_bit_font" kindref="compound">Gfx8BitFont</ref><sp/>*)font)-&gt;getCodeToGIDMap(ffTT);</highlight></codeline>
<codeline lineno="2542"><highlight class="normal"><sp/><sp/><sp/><sp/>ffTT-&gt;convertToType42(psName-&gt;getCString(),</highlight></codeline>
<codeline lineno="2543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((<ref refid="class_gfx8_bit_font" kindref="compound">Gfx8BitFont</ref><sp/>*)font)-&gt;getHasEncoding()</highlight></codeline>
<codeline lineno="2544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>((<ref refid="class_gfx8_bit_font" kindref="compound">Gfx8BitFont</ref><sp/>*)font)-&gt;getEncoding()</highlight></codeline>
<codeline lineno="2545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**)NULL,</highlight></codeline>
<codeline lineno="2546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>codeToGID,<sp/>outputFunc,<sp/>outputStream);</highlight></codeline>
<codeline lineno="2547"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(codeToGID)<sp/>{</highlight></codeline>
<codeline lineno="2548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(font8InfoLen<sp/>&gt;=<sp/>font8InfoSize)<sp/>{</highlight></codeline>
<codeline lineno="2549"><highlight class="normal"><sp/><sp/><sp/><sp/>font8InfoSize<sp/>+=<sp/>16;</highlight></codeline>
<codeline lineno="2550"><highlight class="normal"><sp/><sp/><sp/><sp/>font8Info<sp/>=<sp/>(<ref refid="struct_p_s_font8_info" kindref="compound">PSFont8Info</ref><sp/>*)greallocn(font8Info,</highlight></codeline>
<codeline lineno="2551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>font8InfoSize,</highlight></codeline>
<codeline lineno="2552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_p_s_font8_info" kindref="compound">PSFont8Info</ref>));</highlight></codeline>
<codeline lineno="2553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>font8Info[font8InfoLen].fontID<sp/>=<sp/>*font-&gt;getID();</highlight></codeline>
<codeline lineno="2555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>font8Info[font8InfoLen].codeToGID<sp/>=<sp/>codeToGID;</highlight></codeline>
<codeline lineno="2556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++font8InfoLen;</highlight></codeline>
<codeline lineno="2557"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2558"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>ffTT;</highlight></codeline>
<codeline lineno="2559"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2560"><highlight class="normal"></highlight></codeline>
<codeline lineno="2561"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>ending<sp/>comment</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2562"><highlight class="normal"><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;%%EndResource\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2563"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2564"><highlight class="normal"></highlight></codeline>
<codeline lineno="2565"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PSOutputDev::setupExternalCIDTrueTypeFont(<ref refid="class_gfx_font" kindref="compound">GfxFont</ref><sp/>*font,</highlight></codeline>
<codeline lineno="2566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*fileName,</highlight></codeline>
<codeline lineno="2567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*psName,</highlight></codeline>
<codeline lineno="2568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GBool<sp/>needVerticalMetrics)<sp/>{</highlight></codeline>
<codeline lineno="2569"><highlight class="normal"><sp/><sp/><ref refid="class_fo_fi_true_type" kindref="compound">FoFiTrueType</ref><sp/>*ffTT;</highlight></codeline>
<codeline lineno="2570"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*codeToGID;</highlight></codeline>
<codeline lineno="2571"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>codeToGIDLen;</highlight></codeline>
<codeline lineno="2572"><highlight class="normal"></highlight></codeline>
<codeline lineno="2573"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>beginning<sp/>comment</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2574"><highlight class="normal"><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;%%BeginResource:<sp/>font<sp/>{0:t}\n&quot;</highlight><highlight class="normal">,<sp/>psName);</highlight></codeline>
<codeline lineno="2575"><highlight class="normal"><sp/><sp/>embFontList-&gt;append(</highlight><highlight class="stringliteral">&quot;%%+<sp/>font<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2576"><highlight class="normal"><sp/><sp/>embFontList-&gt;append(psName-&gt;getCString());</highlight></codeline>
<codeline lineno="2577"><highlight class="normal"><sp/><sp/>embFontList-&gt;append(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2578"><highlight class="normal"></highlight></codeline>
<codeline lineno="2579"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>convert<sp/>it<sp/>to<sp/>a<sp/>Type<sp/>0<sp/>font</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2580"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//~<sp/>this<sp/>should<sp/>use<sp/>fontNum<sp/>to<sp/>load<sp/>the<sp/>correct<sp/>font</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2581"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((ffTT<sp/>=<sp/>FoFiTrueType::load(fileName-&gt;getCString())))<sp/>{</highlight></codeline>
<codeline lineno="2582"><highlight class="normal"></highlight></codeline>
<codeline lineno="2583"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>for<sp/>embedding<sp/>permission</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2584"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ffTT-&gt;getEmbeddingRights()<sp/>&gt;=<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="2585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>codeToGID<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>codeToGIDLen<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(((<ref refid="class_gfx_c_i_d_font" kindref="compound">GfxCIDFont</ref><sp/>*)font)-&gt;getCIDToGID())<sp/>{</highlight></codeline>
<codeline lineno="2588"><highlight class="normal"><sp/><sp/><sp/><sp/>codeToGIDLen<sp/>=<sp/>((<ref refid="class_gfx_c_i_d_font" kindref="compound">GfxCIDFont</ref><sp/>*)font)-&gt;getCIDToGIDLen();</highlight></codeline>
<codeline lineno="2589"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(codeToGIDLen)<sp/>{</highlight></codeline>
<codeline lineno="2590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>codeToGID<sp/>=<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)gmallocn(codeToGIDLen,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(codeToGID,<sp/>((<ref refid="class_gfx_c_i_d_font" kindref="compound">GfxCIDFont</ref><sp/>*)font)-&gt;getCIDToGID(),</highlight></codeline>
<codeline lineno="2592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>codeToGIDLen<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2593"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2595"><highlight class="normal"><sp/><sp/><sp/><sp/>codeToGID<sp/>=<sp/>((<ref refid="class_gfx_c_i_d_font" kindref="compound">GfxCIDFont</ref><sp/>*)font)-&gt;getCodeToGIDMap(ffTT,<sp/>&amp;codeToGIDLen);</highlight></codeline>
<codeline lineno="2596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ffTT-&gt;isOpenTypeCFF())<sp/>{</highlight></codeline>
<codeline lineno="2598"><highlight class="normal"><sp/><sp/><sp/><sp/>ffTT-&gt;convertToCIDType0(psName-&gt;getCString(),</highlight></codeline>
<codeline lineno="2599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>codeToGID,<sp/>codeToGIDLen,</highlight></codeline>
<codeline lineno="2600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outputFunc,<sp/>outputStream);</highlight></codeline>
<codeline lineno="2601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(globalParams-&gt;getPSLevel()<sp/>&gt;=<sp/>psLevel3)<sp/>{</highlight></codeline>
<codeline lineno="2602"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Level<sp/>3:<sp/>use<sp/>a<sp/>CID<sp/>font</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2603"><highlight class="normal"><sp/><sp/><sp/><sp/>ffTT-&gt;convertToCIDType2(psName-&gt;getCString(),</highlight></codeline>
<codeline lineno="2604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>codeToGID,<sp/>codeToGIDLen,</highlight></codeline>
<codeline lineno="2605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>needVerticalMetrics,</highlight></codeline>
<codeline lineno="2606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outputFunc,<sp/>outputStream);</highlight></codeline>
<codeline lineno="2607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2608"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>otherwise:<sp/>use<sp/>a<sp/>non-CID<sp/>composite<sp/>font</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2609"><highlight class="normal"><sp/><sp/><sp/><sp/>ffTT-&gt;convertToType0(psName-&gt;getCString(),</highlight></codeline>
<codeline lineno="2610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>codeToGID,<sp/>codeToGIDLen,</highlight></codeline>
<codeline lineno="2611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>needVerticalMetrics,</highlight></codeline>
<codeline lineno="2612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outputFunc,<sp/>outputStream);</highlight></codeline>
<codeline lineno="2613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>gfree(codeToGID);</highlight></codeline>
<codeline lineno="2615"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>-1,</highlight></codeline>
<codeline lineno="2617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;TrueType<sp/>font<sp/>&apos;{0:s}&apos;<sp/>does<sp/>not<sp/>allow<sp/>embedding&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>font-&gt;getName()<sp/>?<sp/>font-&gt;getName()-&gt;getCString()<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;(unnamed)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2620"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2621"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>ffTT;</highlight></codeline>
<codeline lineno="2622"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2623"><highlight class="normal"></highlight></codeline>
<codeline lineno="2624"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>ending<sp/>comment</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2625"><highlight class="normal"><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;%%EndResource\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2626"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2627"><highlight class="normal"></highlight></codeline>
<codeline lineno="2628"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PSOutputDev::setupEmbeddedCIDType0Font(<ref refid="class_gfx_font" kindref="compound">GfxFont</ref><sp/>*font,<sp/><ref refid="struct_ref" kindref="compound">Ref</ref><sp/>*</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*psName)<sp/>{</highlight></codeline>
<codeline lineno="2630"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fontBuf;</highlight></codeline>
<codeline lineno="2631"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fontLen;</highlight></codeline>
<codeline lineno="2632"><highlight class="normal"><sp/><sp/><ref refid="class_fo_fi_type1_c" kindref="compound">FoFiType1C</ref><sp/>*ffT1C;</highlight></codeline>
<codeline lineno="2633"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="2634"><highlight class="normal"></highlight></codeline>
<codeline lineno="2635"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>if<sp/>font<sp/>is<sp/>already<sp/>embedded</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2636"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>t1FontNameLen;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="2637"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t1FontNames[i].fontFileID.num<sp/>==<sp/>id-&gt;num<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2638"><highlight class="normal"><sp/><sp/><sp/><sp/>t1FontNames[i].fontFileID.gen<sp/>==<sp/>id-&gt;gen)<sp/>{</highlight></codeline>
<codeline lineno="2639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>psName-&gt;clear();</highlight></codeline>
<codeline lineno="2640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>psName-&gt;insert(0,<sp/>t1FontNames[i].psName);</highlight></codeline>
<codeline lineno="2641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2642"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2643"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2644"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t1FontNameLen<sp/>==<sp/>t1FontNameSize)<sp/>{</highlight></codeline>
<codeline lineno="2645"><highlight class="normal"><sp/><sp/><sp/><sp/>t1FontNameSize<sp/>*=<sp/>2;</highlight></codeline>
<codeline lineno="2646"><highlight class="normal"><sp/><sp/><sp/><sp/>t1FontNames<sp/>=<sp/>(<ref refid="struct_p_s_t1_font_name" kindref="compound">PST1FontName</ref><sp/>*)greallocn(t1FontNames,<sp/>t1FontNameSize,</highlight></codeline>
<codeline lineno="2647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_p_s_t1_font_name" kindref="compound">PST1FontName</ref>));</highlight></codeline>
<codeline lineno="2648"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2649"><highlight class="normal"><sp/><sp/>t1FontNames[t1FontNameLen].fontFileID<sp/>=<sp/>*id;</highlight></codeline>
<codeline lineno="2650"><highlight class="normal"><sp/><sp/>t1FontNames[t1FontNameLen].psName<sp/>=<sp/>psName-&gt;copy();</highlight></codeline>
<codeline lineno="2651"><highlight class="normal"><sp/><sp/>++t1FontNameLen;</highlight></codeline>
<codeline lineno="2652"><highlight class="normal"></highlight></codeline>
<codeline lineno="2653"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>beginning<sp/>comment</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2654"><highlight class="normal"><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;%%BeginResource:<sp/>font<sp/>{0:t}\n&quot;</highlight><highlight class="normal">,<sp/>psName);</highlight></codeline>
<codeline lineno="2655"><highlight class="normal"><sp/><sp/>embFontList-&gt;append(</highlight><highlight class="stringliteral">&quot;%%+<sp/>font<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2656"><highlight class="normal"><sp/><sp/>embFontList-&gt;append(psName-&gt;getCString());</highlight></codeline>
<codeline lineno="2657"><highlight class="normal"><sp/><sp/>embFontList-&gt;append(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2658"><highlight class="normal"></highlight></codeline>
<codeline lineno="2659"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>convert<sp/>it<sp/>to<sp/>a<sp/>Type<sp/>0<sp/>font</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2660"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((fontBuf<sp/>=<sp/>font-&gt;readEmbFontFile(xref,<sp/>&amp;fontLen)))<sp/>{</highlight></codeline>
<codeline lineno="2661"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((ffT1C<sp/>=<sp/>FoFiType1C::make(fontBuf,<sp/>fontLen)))<sp/>{</highlight></codeline>
<codeline lineno="2662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(globalParams-&gt;getPSLevel()<sp/>&gt;=<sp/>psLevel3)<sp/>{</highlight></codeline>
<codeline lineno="2663"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Level<sp/>3:<sp/>use<sp/>a<sp/>CID<sp/>font</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2664"><highlight class="normal"><sp/><sp/><sp/><sp/>ffT1C-&gt;convertToCIDType0(psName-&gt;getCString(),<sp/>NULL,<sp/>0,</highlight></codeline>
<codeline lineno="2665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outputFunc,<sp/>outputStream);</highlight></codeline>
<codeline lineno="2666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2667"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>otherwise:<sp/>use<sp/>a<sp/>non-CID<sp/>composite<sp/>font</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2668"><highlight class="normal"><sp/><sp/><sp/><sp/>ffT1C-&gt;convertToType0(psName-&gt;getCString(),<sp/>NULL,<sp/>0,</highlight></codeline>
<codeline lineno="2669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outputFunc,<sp/>outputStream);</highlight></codeline>
<codeline lineno="2670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>ffT1C;</highlight></codeline>
<codeline lineno="2672"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2673"><highlight class="normal"><sp/><sp/><sp/><sp/>gfree(fontBuf);</highlight></codeline>
<codeline lineno="2674"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2675"><highlight class="normal"></highlight></codeline>
<codeline lineno="2676"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>ending<sp/>comment</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2677"><highlight class="normal"><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;%%EndResource\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2678"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2679"><highlight class="normal"></highlight></codeline>
<codeline lineno="2680"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PSOutputDev::setupEmbeddedCIDTrueTypeFont(<ref refid="class_gfx_font" kindref="compound">GfxFont</ref><sp/>*font,<sp/><ref refid="struct_ref" kindref="compound">Ref</ref><sp/>*</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*psName,</highlight></codeline>
<codeline lineno="2682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GBool<sp/>needVerticalMetrics)<sp/>{</highlight></codeline>
<codeline lineno="2683"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fontBuf;</highlight></codeline>
<codeline lineno="2684"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fontLen;</highlight></codeline>
<codeline lineno="2685"><highlight class="normal"><sp/><sp/><ref refid="class_fo_fi_true_type" kindref="compound">FoFiTrueType</ref><sp/>*ffTT;</highlight></codeline>
<codeline lineno="2686"><highlight class="normal"></highlight></codeline>
<codeline lineno="2687"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>beginning<sp/>comment</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2688"><highlight class="normal"><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;%%BeginResource:<sp/>font<sp/>{0:t}\n&quot;</highlight><highlight class="normal">,<sp/>psName);</highlight></codeline>
<codeline lineno="2689"><highlight class="normal"><sp/><sp/>embFontList-&gt;append(</highlight><highlight class="stringliteral">&quot;%%+<sp/>font<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2690"><highlight class="normal"><sp/><sp/>embFontList-&gt;append(psName-&gt;getCString());</highlight></codeline>
<codeline lineno="2691"><highlight class="normal"><sp/><sp/>embFontList-&gt;append(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2692"><highlight class="normal"></highlight></codeline>
<codeline lineno="2693"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>convert<sp/>it<sp/>to<sp/>a<sp/>Type<sp/>0<sp/>font</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2694"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((fontBuf<sp/>=<sp/>font-&gt;readEmbFontFile(xref,<sp/>&amp;fontLen)))<sp/>{</highlight></codeline>
<codeline lineno="2695"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((ffTT<sp/>=<sp/>FoFiTrueType::make(fontBuf,<sp/>fontLen)))<sp/>{</highlight></codeline>
<codeline lineno="2696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(globalParams-&gt;getPSLevel()<sp/>&gt;=<sp/>psLevel3)<sp/>{</highlight></codeline>
<codeline lineno="2697"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Level<sp/>3:<sp/>use<sp/>a<sp/>CID<sp/>font</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2698"><highlight class="normal"><sp/><sp/><sp/><sp/>ffTT-&gt;convertToCIDType2(psName-&gt;getCString(),</highlight></codeline>
<codeline lineno="2699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((<ref refid="class_gfx_c_i_d_font" kindref="compound">GfxCIDFont</ref><sp/>*)font)-&gt;getCIDToGID(),</highlight></codeline>
<codeline lineno="2700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((<ref refid="class_gfx_c_i_d_font" kindref="compound">GfxCIDFont</ref><sp/>*)font)-&gt;getCIDToGIDLen(),</highlight></codeline>
<codeline lineno="2701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>needVerticalMetrics,</highlight></codeline>
<codeline lineno="2702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outputFunc,<sp/>outputStream);</highlight></codeline>
<codeline lineno="2703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2704"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>otherwise:<sp/>use<sp/>a<sp/>non-CID<sp/>composite<sp/>font</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2705"><highlight class="normal"><sp/><sp/><sp/><sp/>ffTT-&gt;convertToType0(psName-&gt;getCString(),</highlight></codeline>
<codeline lineno="2706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((<ref refid="class_gfx_c_i_d_font" kindref="compound">GfxCIDFont</ref><sp/>*)font)-&gt;getCIDToGID(),</highlight></codeline>
<codeline lineno="2707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((<ref refid="class_gfx_c_i_d_font" kindref="compound">GfxCIDFont</ref><sp/>*)font)-&gt;getCIDToGIDLen(),</highlight></codeline>
<codeline lineno="2708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>needVerticalMetrics,</highlight></codeline>
<codeline lineno="2709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outputFunc,<sp/>outputStream);</highlight></codeline>
<codeline lineno="2710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>ffTT;</highlight></codeline>
<codeline lineno="2712"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2713"><highlight class="normal"><sp/><sp/><sp/><sp/>gfree(fontBuf);</highlight></codeline>
<codeline lineno="2714"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2715"><highlight class="normal"></highlight></codeline>
<codeline lineno="2716"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>ending<sp/>comment</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2717"><highlight class="normal"><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;%%EndResource\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2718"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2719"><highlight class="normal"></highlight></codeline>
<codeline lineno="2720"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PSOutputDev::setupEmbeddedOpenTypeCFFFont(<ref refid="class_gfx_font" kindref="compound">GfxFont</ref><sp/>*font,<sp/><ref refid="struct_ref" kindref="compound">Ref</ref><sp/>*</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*psName)<sp/>{</highlight></codeline>
<codeline lineno="2722"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fontBuf;</highlight></codeline>
<codeline lineno="2723"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fontLen;</highlight></codeline>
<codeline lineno="2724"><highlight class="normal"><sp/><sp/><ref refid="class_fo_fi_true_type" kindref="compound">FoFiTrueType</ref><sp/>*ffTT;</highlight></codeline>
<codeline lineno="2725"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="2726"><highlight class="normal"></highlight></codeline>
<codeline lineno="2727"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>if<sp/>font<sp/>is<sp/>already<sp/>embedded</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2728"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>t1FontNameLen;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="2729"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t1FontNames[i].fontFileID.num<sp/>==<sp/>id-&gt;num<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2730"><highlight class="normal"><sp/><sp/><sp/><sp/>t1FontNames[i].fontFileID.gen<sp/>==<sp/>id-&gt;gen)<sp/>{</highlight></codeline>
<codeline lineno="2731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>psName-&gt;clear();</highlight></codeline>
<codeline lineno="2732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>psName-&gt;insert(0,<sp/>t1FontNames[i].psName);</highlight></codeline>
<codeline lineno="2733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2734"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2735"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2736"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t1FontNameLen<sp/>==<sp/>t1FontNameSize)<sp/>{</highlight></codeline>
<codeline lineno="2737"><highlight class="normal"><sp/><sp/><sp/><sp/>t1FontNameSize<sp/>*=<sp/>2;</highlight></codeline>
<codeline lineno="2738"><highlight class="normal"><sp/><sp/><sp/><sp/>t1FontNames<sp/>=<sp/>(<ref refid="struct_p_s_t1_font_name" kindref="compound">PST1FontName</ref><sp/>*)greallocn(t1FontNames,<sp/>t1FontNameSize,</highlight></codeline>
<codeline lineno="2739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_p_s_t1_font_name" kindref="compound">PST1FontName</ref>));</highlight></codeline>
<codeline lineno="2740"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2741"><highlight class="normal"><sp/><sp/>t1FontNames[t1FontNameLen].fontFileID<sp/>=<sp/>*id;</highlight></codeline>
<codeline lineno="2742"><highlight class="normal"><sp/><sp/>t1FontNames[t1FontNameLen].psName<sp/>=<sp/>psName-&gt;copy();</highlight></codeline>
<codeline lineno="2743"><highlight class="normal"><sp/><sp/>++t1FontNameLen;</highlight></codeline>
<codeline lineno="2744"><highlight class="normal"></highlight></codeline>
<codeline lineno="2745"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>beginning<sp/>comment</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2746"><highlight class="normal"><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;%%BeginResource:<sp/>font<sp/>{0:t}\n&quot;</highlight><highlight class="normal">,<sp/>psName);</highlight></codeline>
<codeline lineno="2747"><highlight class="normal"><sp/><sp/>embFontList-&gt;append(</highlight><highlight class="stringliteral">&quot;%%+<sp/>font<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2748"><highlight class="normal"><sp/><sp/>embFontList-&gt;append(psName-&gt;getCString());</highlight></codeline>
<codeline lineno="2749"><highlight class="normal"><sp/><sp/>embFontList-&gt;append(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2750"><highlight class="normal"></highlight></codeline>
<codeline lineno="2751"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>convert<sp/>it<sp/>to<sp/>a<sp/>Type<sp/>0<sp/>font</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2752"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((fontBuf<sp/>=<sp/>font-&gt;readEmbFontFile(xref,<sp/>&amp;fontLen)))<sp/>{</highlight></codeline>
<codeline lineno="2753"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((ffTT<sp/>=<sp/>FoFiTrueType::make(fontBuf,<sp/>fontLen)))<sp/>{</highlight></codeline>
<codeline lineno="2754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ffTT-&gt;isOpenTypeCFF())<sp/>{</highlight></codeline>
<codeline lineno="2755"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(globalParams-&gt;getPSLevel()<sp/>&gt;=<sp/>psLevel3)<sp/>{</highlight></codeline>
<codeline lineno="2756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Level<sp/>3:<sp/>use<sp/>a<sp/>CID<sp/>font</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ffTT-&gt;convertToCIDType0(psName-&gt;getCString(),</highlight></codeline>
<codeline lineno="2758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((<ref refid="class_gfx_c_i_d_font" kindref="compound">GfxCIDFont</ref><sp/>*)font)-&gt;getCIDToGID(),</highlight></codeline>
<codeline lineno="2759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((<ref refid="class_gfx_c_i_d_font" kindref="compound">GfxCIDFont</ref><sp/>*)font)-&gt;getCIDToGIDLen(),</highlight></codeline>
<codeline lineno="2760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outputFunc,<sp/>outputStream);</highlight></codeline>
<codeline lineno="2761"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>otherwise:<sp/>use<sp/>a<sp/>non-CID<sp/>composite<sp/>font</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ffTT-&gt;convertToType0(psName-&gt;getCString(),</highlight></codeline>
<codeline lineno="2764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((<ref refid="class_gfx_c_i_d_font" kindref="compound">GfxCIDFont</ref><sp/>*)font)-&gt;getCIDToGID(),</highlight></codeline>
<codeline lineno="2765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((<ref refid="class_gfx_c_i_d_font" kindref="compound">GfxCIDFont</ref><sp/>*)font)-&gt;getCIDToGIDLen(),</highlight></codeline>
<codeline lineno="2766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outputFunc,<sp/>outputStream);</highlight></codeline>
<codeline lineno="2767"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>ffTT;</highlight></codeline>
<codeline lineno="2770"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2771"><highlight class="normal"><sp/><sp/><sp/><sp/>gfree(fontBuf);</highlight></codeline>
<codeline lineno="2772"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2773"><highlight class="normal"></highlight></codeline>
<codeline lineno="2774"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>ending<sp/>comment</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2775"><highlight class="normal"><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;%%EndResource\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2776"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2777"><highlight class="normal"></highlight></codeline>
<codeline lineno="2778"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PSOutputDev::setupType3Font(<ref refid="class_gfx_font" kindref="compound">GfxFont</ref><sp/>*font,<sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*psName,</highlight></codeline>
<codeline lineno="2779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_dict" kindref="compound">Dict</ref><sp/>*parentResDict)<sp/>{</highlight></codeline>
<codeline lineno="2780"><highlight class="normal"><sp/><sp/><ref refid="class_dict" kindref="compound">Dict</ref><sp/>*resDict;</highlight></codeline>
<codeline lineno="2781"><highlight class="normal"><sp/><sp/><ref refid="class_dict" kindref="compound">Dict</ref><sp/>*charProcs;</highlight></codeline>
<codeline lineno="2782"><highlight class="normal"><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>charProc;</highlight></codeline>
<codeline lineno="2783"><highlight class="normal"><sp/><sp/><ref refid="class_gfx" kindref="compound">Gfx</ref><sp/>*gfx;</highlight></codeline>
<codeline lineno="2784"><highlight class="normal"><sp/><sp/><ref refid="class_p_d_f_rectangle" kindref="compound">PDFRectangle</ref><sp/>box;</highlight></codeline>
<codeline lineno="2785"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*m;</highlight></codeline>
<codeline lineno="2786"><highlight class="normal"><sp/><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*buf;</highlight></codeline>
<codeline lineno="2787"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="2788"><highlight class="normal"></highlight></codeline>
<codeline lineno="2789"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>up<sp/>resources<sp/>used<sp/>by<sp/>font</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2790"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((resDict<sp/>=<sp/>((<ref refid="class_gfx8_bit_font" kindref="compound">Gfx8BitFont</ref><sp/>*)font)-&gt;getResources()))<sp/>{</highlight></codeline>
<codeline lineno="2791"><highlight class="normal"><sp/><sp/><sp/><sp/>inType3Char<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="2792"><highlight class="normal"><sp/><sp/><sp/><sp/>setupResources(resDict);</highlight></codeline>
<codeline lineno="2793"><highlight class="normal"><sp/><sp/><sp/><sp/>inType3Char<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="2794"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2795"><highlight class="normal"><sp/><sp/><sp/><sp/>resDict<sp/>=<sp/>parentResDict;</highlight></codeline>
<codeline lineno="2796"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2797"><highlight class="normal"></highlight></codeline>
<codeline lineno="2798"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>beginning<sp/>comment</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2799"><highlight class="normal"><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;%%BeginResource:<sp/>font<sp/>{0:t}\n&quot;</highlight><highlight class="normal">,<sp/>psName);</highlight></codeline>
<codeline lineno="2800"><highlight class="normal"><sp/><sp/>embFontList-&gt;append(</highlight><highlight class="stringliteral">&quot;%%+<sp/>font<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2801"><highlight class="normal"><sp/><sp/>embFontList-&gt;append(psName-&gt;getCString());</highlight></codeline>
<codeline lineno="2802"><highlight class="normal"><sp/><sp/>embFontList-&gt;append(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2803"><highlight class="normal"></highlight></codeline>
<codeline lineno="2804"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>font<sp/>dictionary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2805"><highlight class="normal"><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;8<sp/>dict<sp/>begin\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2806"><highlight class="normal"><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;/FontType<sp/>3<sp/>def\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2807"><highlight class="normal"><sp/><sp/>m<sp/>=<sp/>font-&gt;getFontMatrix();</highlight></codeline>
<codeline lineno="2808"><highlight class="normal"><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;/FontMatrix<sp/>[{0:.6g}<sp/>{1:.6g}<sp/>{2:.6g}<sp/>{3:.6g}<sp/>{4:.6g}<sp/>{5:.6g}]<sp/>def\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m[0],<sp/>m[1],<sp/>m[2],<sp/>m[3],<sp/>m[4],<sp/>m[5]);</highlight></codeline>
<codeline lineno="2810"><highlight class="normal"><sp/><sp/>m<sp/>=<sp/>font-&gt;getFontBBox();</highlight></codeline>
<codeline lineno="2811"><highlight class="normal"><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;/FontBBox<sp/>[{0:.6g}<sp/>{1:.6g}<sp/>{2:.6g}<sp/>{3:.6g}]<sp/>def\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m[0],<sp/>m[1],<sp/>m[2],<sp/>m[3]);</highlight></codeline>
<codeline lineno="2813"><highlight class="normal"><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;/Encoding<sp/>256<sp/>array<sp/>def\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2814"><highlight class="normal"><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>0<sp/>1<sp/>255<sp/>{<sp/>Encoding<sp/>exch<sp/>/.notdef<sp/>put<sp/>}<sp/>for\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2815"><highlight class="normal"><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;/BuildGlyph<sp/>{\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2816"><highlight class="normal"><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>exch<sp/>/CharProcs<sp/>get<sp/>exch\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2817"><highlight class="normal"><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>2<sp/>copy<sp/>known<sp/>not<sp/>{<sp/>pop<sp/>/.notdef<sp/>}<sp/>if\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2818"><highlight class="normal"><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>get<sp/>exec\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2819"><highlight class="normal"><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;}<sp/>bind<sp/>def\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2820"><highlight class="normal"><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;/BuildChar<sp/>{\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2821"><highlight class="normal"><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>1<sp/>index<sp/>/Encoding<sp/>get<sp/>exch<sp/>get\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2822"><highlight class="normal"><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>1<sp/>index<sp/>/BuildGlyph<sp/>get<sp/>exec\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2823"><highlight class="normal"><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;}<sp/>bind<sp/>def\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2824"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((charProcs<sp/>=<sp/>((<ref refid="class_gfx8_bit_font" kindref="compound">Gfx8BitFont</ref><sp/>*)font)-&gt;getCharProcs()))<sp/>{</highlight></codeline>
<codeline lineno="2825"><highlight class="normal"><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;/CharProcs<sp/>{0:d}<sp/>dict<sp/>def\n&quot;</highlight><highlight class="normal">,<sp/>charProcs-&gt;getLength());</highlight></codeline>
<codeline lineno="2826"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;CharProcs<sp/>begin\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2827"><highlight class="normal"><sp/><sp/><sp/><sp/>box.x1<sp/>=<sp/>m[0];</highlight></codeline>
<codeline lineno="2828"><highlight class="normal"><sp/><sp/><sp/><sp/>box.y1<sp/>=<sp/>m[1];</highlight></codeline>
<codeline lineno="2829"><highlight class="normal"><sp/><sp/><sp/><sp/>box.x2<sp/>=<sp/>m[2];</highlight></codeline>
<codeline lineno="2830"><highlight class="normal"><sp/><sp/><sp/><sp/>box.y2<sp/>=<sp/>m[3];</highlight></codeline>
<codeline lineno="2831"><highlight class="normal"><sp/><sp/><sp/><sp/>gfx<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_gfx" kindref="compound">Gfx</ref>(doc,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>resDict,<sp/>&amp;box,<sp/>NULL);</highlight></codeline>
<codeline lineno="2832"><highlight class="normal"><sp/><sp/><sp/><sp/>inType3Char<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="2833"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>charProcs-&gt;getLength();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="2834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>t3FillColorOnly<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="2835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>t3Cacheable<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="2836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>t3NeedsRestore<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="2837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePSName(charProcs-&gt;getKey(i));</highlight></codeline>
<codeline lineno="2839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;<sp/>{\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>gfx-&gt;display(charProcs-&gt;getVal(i,<sp/>&amp;charProc));</highlight></codeline>
<codeline lineno="2841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>charProc.free();</highlight></codeline>
<codeline lineno="2842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t3String)<sp/>{</highlight></codeline>
<codeline lineno="2843"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t3Cacheable)<sp/>{</highlight></codeline>
<codeline lineno="2844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>buf<sp/>=<sp/>GooString::format(</highlight><highlight class="stringliteral">&quot;{0:.6g}<sp/>{1:.6g}<sp/>{2:.6g}<sp/>{3:.6g}<sp/>{4:.6g}<sp/>{5:.6g}<sp/>setcachedevice\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t3WX,<sp/>t3WY,<sp/>t3LLX,<sp/>t3LLY,<sp/>t3URX,<sp/>t3URY);</highlight></codeline>
<codeline lineno="2846"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>buf<sp/>=<sp/>GooString::format(</highlight><highlight class="stringliteral">&quot;{0:.6g}<sp/>{1:.6g}<sp/>setcharwidth\n&quot;</highlight><highlight class="normal">,<sp/>t3WX,<sp/>t3WY);</highlight></codeline>
<codeline lineno="2848"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2849"><highlight class="normal"><sp/><sp/><sp/><sp/>(*outputFunc)(outputStream,<sp/>buf-&gt;getCString(),<sp/>buf-&gt;getLength());</highlight></codeline>
<codeline lineno="2850"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>buf;</highlight></codeline>
<codeline lineno="2851"><highlight class="normal"><sp/><sp/><sp/><sp/>(*outputFunc)(outputStream,<sp/>t3String-&gt;getCString(),</highlight></codeline>
<codeline lineno="2852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t3String-&gt;getLength());</highlight></codeline>
<codeline lineno="2853"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>t3String;</highlight></codeline>
<codeline lineno="2854"><highlight class="normal"><sp/><sp/><sp/><sp/>t3String<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t3NeedsRestore)<sp/>{</highlight></codeline>
<codeline lineno="2857"><highlight class="normal"><sp/><sp/><sp/><sp/>(*outputFunc)(outputStream,<sp/></highlight><highlight class="stringliteral">&quot;Q\n&quot;</highlight><highlight class="normal">,<sp/>2);</highlight></codeline>
<codeline lineno="2858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;}<sp/>def\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2860"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2861"><highlight class="normal"><sp/><sp/><sp/><sp/>inType3Char<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="2862"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>gfx;</highlight></codeline>
<codeline lineno="2863"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;end\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2864"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2865"><highlight class="normal"><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;currentdict<sp/>end\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2866"><highlight class="normal"><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;/{0:t}<sp/>exch<sp/>definefont<sp/>pop\n&quot;</highlight><highlight class="normal">,<sp/>psName);</highlight></codeline>
<codeline lineno="2867"><highlight class="normal"></highlight></codeline>
<codeline lineno="2868"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>ending<sp/>comment</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2869"><highlight class="normal"><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;%%EndResource\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2870"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2871"><highlight class="normal"></highlight></codeline>
<codeline lineno="2872"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Make<sp/>a<sp/>unique<sp/>PS<sp/>font<sp/>name,<sp/>based<sp/>on<sp/>the<sp/>names<sp/>given<sp/>in<sp/>the<sp/>PDF</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2873"><highlight class="normal"></highlight><highlight class="comment">//<sp/>font<sp/>object,<sp/>and<sp/>an<sp/>object<sp/>ID<sp/>(font<sp/>file<sp/>object<sp/>for<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2874"><highlight class="normal"><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*PSOutputDev::makePSFontName(<ref refid="class_gfx_font" kindref="compound">GfxFont</ref><sp/>*font,<sp/><ref refid="struct_ref" kindref="compound">Ref</ref><sp/>*</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="2875"><highlight class="normal"><sp/><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*psName,<sp/>*s;</highlight></codeline>
<codeline lineno="2876"><highlight class="normal"></highlight></codeline>
<codeline lineno="2877"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((s<sp/>=<sp/>font-&gt;getEmbeddedFontName()))<sp/>{</highlight></codeline>
<codeline lineno="2878"><highlight class="normal"><sp/><sp/><sp/><sp/>psName<sp/>=<sp/>filterPSName(s);</highlight></codeline>
<codeline lineno="2879"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!fontNames-&gt;lookupInt(psName))<sp/>{</highlight></codeline>
<codeline lineno="2880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fontNames-&gt;add(psName-&gt;copy(),<sp/>1);</highlight></codeline>
<codeline lineno="2881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>psName;</highlight></codeline>
<codeline lineno="2882"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2883"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>psName;</highlight></codeline>
<codeline lineno="2884"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2885"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((s<sp/>=<sp/>font-&gt;getName()))<sp/>{</highlight></codeline>
<codeline lineno="2886"><highlight class="normal"><sp/><sp/><sp/><sp/>psName<sp/>=<sp/>filterPSName(s);</highlight></codeline>
<codeline lineno="2887"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!fontNames-&gt;lookupInt(psName))<sp/>{</highlight></codeline>
<codeline lineno="2888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fontNames-&gt;add(psName-&gt;copy(),<sp/>1);</highlight></codeline>
<codeline lineno="2889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>psName;</highlight></codeline>
<codeline lineno="2890"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2891"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>psName;</highlight></codeline>
<codeline lineno="2892"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2893"><highlight class="normal"><sp/><sp/>psName<sp/>=<sp/>GooString::format(</highlight><highlight class="stringliteral">&quot;FF{0:d}_{1:d}&quot;</highlight><highlight class="normal">,<sp/>id-&gt;num,<sp/>id-&gt;gen);</highlight></codeline>
<codeline lineno="2894"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((s<sp/>=<sp/>font-&gt;getEmbeddedFontName()))<sp/>{</highlight></codeline>
<codeline lineno="2895"><highlight class="normal"><sp/><sp/><sp/><sp/>s<sp/>=<sp/>filterPSName(s);</highlight></codeline>
<codeline lineno="2896"><highlight class="normal"><sp/><sp/><sp/><sp/>psName-&gt;append(</highlight><highlight class="charliteral">&apos;_&apos;</highlight><highlight class="normal">)-&gt;append(s);</highlight></codeline>
<codeline lineno="2897"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>s;</highlight></codeline>
<codeline lineno="2898"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((s<sp/>=<sp/>font-&gt;getName()))<sp/>{</highlight></codeline>
<codeline lineno="2899"><highlight class="normal"><sp/><sp/><sp/><sp/>s<sp/>=<sp/>filterPSName(s);</highlight></codeline>
<codeline lineno="2900"><highlight class="normal"><sp/><sp/><sp/><sp/>psName-&gt;append(</highlight><highlight class="charliteral">&apos;_&apos;</highlight><highlight class="normal">)-&gt;append(s);</highlight></codeline>
<codeline lineno="2901"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>s;</highlight></codeline>
<codeline lineno="2902"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2903"><highlight class="normal"><sp/><sp/>fontNames-&gt;add(psName-&gt;copy(),<sp/>1);</highlight></codeline>
<codeline lineno="2904"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>psName;</highlight></codeline>
<codeline lineno="2905"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2906"><highlight class="normal"></highlight></codeline>
<codeline lineno="2907"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PSOutputDev::setupImages(<ref refid="class_dict" kindref="compound">Dict</ref><sp/>*resDict)<sp/>{</highlight></codeline>
<codeline lineno="2908"><highlight class="normal"><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>xObjDict,<sp/>xObj,<sp/>xObjRef,<sp/>subtypeObj,<sp/>maskObj,<sp/>maskRef;</highlight></codeline>
<codeline lineno="2909"><highlight class="normal"><sp/><sp/><ref refid="struct_ref" kindref="compound">Ref</ref><sp/>imgID;</highlight></codeline>
<codeline lineno="2910"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="2911"><highlight class="normal"></highlight></codeline>
<codeline lineno="2912"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(mode<sp/>==<sp/>psModeForm<sp/>||<sp/>inType3Char<sp/>||<sp/>preloadImagesForms))<sp/>{</highlight></codeline>
<codeline lineno="2913"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2914"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2915"><highlight class="normal"></highlight></codeline>
<codeline lineno="2916"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//-----<sp/>recursively<sp/>scan<sp/>XObjects</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2917"><highlight class="normal"><sp/><sp/>resDict-&gt;lookup(</highlight><highlight class="stringliteral">&quot;XObject&quot;</highlight><highlight class="normal">,<sp/>&amp;xObjDict);</highlight></codeline>
<codeline lineno="2918"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(xObjDict.isDict())<sp/>{</highlight></codeline>
<codeline lineno="2919"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>xObjDict.dictGetLength();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="2920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xObjDict.dictGetValNF(i,<sp/>&amp;xObjRef);</highlight></codeline>
<codeline lineno="2921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xObjDict.dictGetVal(i,<sp/>&amp;xObj);</highlight></codeline>
<codeline lineno="2922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(xObj.isStream())<sp/>{</highlight></codeline>
<codeline lineno="2923"><highlight class="normal"><sp/><sp/><sp/><sp/>xObj.streamGetDict()-&gt;lookup(</highlight><highlight class="stringliteral">&quot;Subtype&quot;</highlight><highlight class="normal">,<sp/>&amp;subtypeObj);</highlight></codeline>
<codeline lineno="2924"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(subtypeObj.isName(</highlight><highlight class="stringliteral">&quot;Image&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="2925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(xObjRef.isRef())<sp/>{</highlight></codeline>
<codeline lineno="2926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>imgID<sp/>=<sp/>xObjRef.getRef();</highlight></codeline>
<codeline lineno="2927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>imgIDLen;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="2928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(imgIDs[j].num<sp/>==<sp/>imgID.num<sp/>&amp;&amp;<sp/>imgIDs[j].gen<sp/>==<sp/>imgID.gen)<sp/>{</highlight></codeline>
<codeline lineno="2929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j<sp/>==<sp/>imgIDLen)<sp/>{</highlight></codeline>
<codeline lineno="2933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(imgIDLen<sp/>&gt;=<sp/>imgIDSize)<sp/>{</highlight></codeline>
<codeline lineno="2934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(imgIDSize<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>imgIDSize<sp/>=<sp/>64;</highlight></codeline>
<codeline lineno="2936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>imgIDSize<sp/>*=<sp/>2;</highlight></codeline>
<codeline lineno="2938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>imgIDs<sp/>=<sp/>(<ref refid="struct_ref" kindref="compound">Ref</ref><sp/>*)greallocn(imgIDs,<sp/>imgIDSize,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_ref" kindref="compound">Ref</ref>));</highlight></codeline>
<codeline lineno="2940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>imgIDs[imgIDLen++]<sp/>=<sp/>imgID;</highlight></codeline>
<codeline lineno="2942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>setupImage(imgID,<sp/>xObj.getStream(),<sp/>gFalse);</highlight></codeline>
<codeline lineno="2943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(level<sp/>&gt;=<sp/>psLevel3<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xObj.streamGetDict()-&gt;lookup(</highlight><highlight class="stringliteral">&quot;Mask&quot;</highlight><highlight class="normal">,<sp/>&amp;maskObj)-&gt;isStream())<sp/>{</highlight></codeline>
<codeline lineno="2945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>setupImage(imgID,<sp/>maskObj.getStream(),<sp/>gTrue);</highlight></codeline>
<codeline lineno="2946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maskObj.free();</highlight></codeline>
<codeline lineno="2948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>-1,</highlight></codeline>
<codeline lineno="2951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Image<sp/>in<sp/>resource<sp/>dict<sp/>is<sp/>not<sp/>an<sp/>indirect<sp/>reference&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2953"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2954"><highlight class="normal"><sp/><sp/><sp/><sp/>subtypeObj.free();</highlight></codeline>
<codeline lineno="2955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xObj.free();</highlight></codeline>
<codeline lineno="2957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xObjRef.free();</highlight></codeline>
<codeline lineno="2958"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2959"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2960"><highlight class="normal"><sp/><sp/>xObjDict.free();</highlight></codeline>
<codeline lineno="2961"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2962"><highlight class="normal"></highlight></codeline>
<codeline lineno="2963"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PSOutputDev::setupImage(<ref refid="struct_ref" kindref="compound">Ref</ref><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/><ref refid="class_stream" kindref="compound">Stream</ref><sp/>*str,<sp/>GBool<sp/>mask)<sp/>{</highlight></codeline>
<codeline lineno="2964"><highlight class="normal"><sp/><sp/>GBool<sp/>useFlate,<sp/>useLZW,<sp/>useRLE,<sp/>useCompressed,<sp/>doUseASCIIHex;</highlight></codeline>
<codeline lineno="2965"><highlight class="normal"><sp/><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*s;</highlight></codeline>
<codeline lineno="2966"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="2967"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size,<sp/>line,<sp/>col,<sp/>i;</highlight></codeline>
<codeline lineno="2968"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>outerSize,<sp/>outer;</highlight></codeline>
<codeline lineno="2969"><highlight class="normal"></highlight></codeline>
<codeline lineno="2970"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>filters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2971"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//~<sp/>this<sp/>does<sp/>not<sp/>correctly<sp/>handle<sp/>the<sp/>DeviceN<sp/>color<sp/>space</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2972"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//~<sp/><sp/><sp/>--<sp/>need<sp/>to<sp/>use<sp/>DeviceNRecoder</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2973"><highlight class="normal"></highlight></codeline>
<codeline lineno="2974"><highlight class="normal"><sp/><sp/>useFlate<sp/>=<sp/>useLZW<sp/>=<sp/>useRLE<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="2975"><highlight class="normal"><sp/><sp/>useCompressed<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="2976"><highlight class="normal"><sp/><sp/>doUseASCIIHex<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="2977"><highlight class="normal"></highlight></codeline>
<codeline lineno="2978"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(level<sp/>&lt;<sp/>psLevel2)<sp/>{</highlight></codeline>
<codeline lineno="2979"><highlight class="normal"><sp/><sp/><sp/><sp/>doUseASCIIHex<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="2980"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2981"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(uncompressPreloadedImages)<sp/>{</highlight></codeline>
<codeline lineno="2982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>nothing<sp/>to<sp/>do<sp/>*/</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2983"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>str-&gt;getPSFilter(level<sp/>&lt;<sp/>psLevel3<sp/>?<sp/>2<sp/>:<sp/>3,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s)<sp/>{</highlight></codeline>
<codeline lineno="2986"><highlight class="normal"><sp/><sp/><sp/><sp/>useCompressed<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="2987"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>s;</highlight></codeline>
<codeline lineno="2988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2989"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(level<sp/>&gt;=<sp/>psLevel3<sp/>&amp;&amp;<sp/>getEnableFlate())<sp/>{</highlight></codeline>
<codeline lineno="2990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>useFlate<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="2991"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(getEnableLZW())<sp/>{</highlight></codeline>
<codeline lineno="2992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>useLZW<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="2993"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>useRLE<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="2995"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2997"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2998"><highlight class="normal"><sp/><sp/><sp/><sp/>doUseASCIIHex<sp/>=<sp/>useASCIIHex;</highlight></codeline>
<codeline lineno="2999"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3000"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(useCompressed)<sp/>{</highlight></codeline>
<codeline lineno="3001"><highlight class="normal"><sp/><sp/><sp/><sp/>str<sp/>=<sp/>str-&gt;getUndecodedStream();</highlight></codeline>
<codeline lineno="3002"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3003"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>ENABLE_ZLIB</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3004"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(useFlate)<sp/>{</highlight></codeline>
<codeline lineno="3005"><highlight class="normal"><sp/><sp/><sp/><sp/>str<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_flate_encoder" kindref="compound">FlateEncoder</ref>(str);</highlight></codeline>
<codeline lineno="3006"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3007"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3008"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(useLZW)<sp/>{</highlight></codeline>
<codeline lineno="3009"><highlight class="normal"><sp/><sp/><sp/><sp/>str<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_l_z_w_encoder" kindref="compound">LZWEncoder</ref>(str);</highlight></codeline>
<codeline lineno="3010"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(useRLE)<sp/>{</highlight></codeline>
<codeline lineno="3011"><highlight class="normal"><sp/><sp/><sp/><sp/>str<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_run_length_encoder" kindref="compound">RunLengthEncoder</ref>(str);</highlight></codeline>
<codeline lineno="3012"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3013"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(doUseASCIIHex)<sp/>{</highlight></codeline>
<codeline lineno="3014"><highlight class="normal"><sp/><sp/><sp/><sp/>str<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_a_s_c_i_i_hex_encoder" kindref="compound">ASCIIHexEncoder</ref>(str);</highlight></codeline>
<codeline lineno="3015"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3016"><highlight class="normal"><sp/><sp/><sp/><sp/>str<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_a_s_c_i_i85_encoder" kindref="compound">ASCII85Encoder</ref>(str);</highlight></codeline>
<codeline lineno="3017"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3018"><highlight class="normal"></highlight></codeline>
<codeline lineno="3019"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>compute<sp/>image<sp/>data<sp/>size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3020"><highlight class="normal"><sp/><sp/>str-&gt;reset();</highlight></codeline>
<codeline lineno="3021"><highlight class="normal"><sp/><sp/>col<sp/>=<sp/>size<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3022"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3023"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>str-&gt;getChar();</highlight></codeline>
<codeline lineno="3025"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal"><sp/>||<sp/>c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\r&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3026"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/>(doUseASCIIHex<sp/>?<sp/></highlight><highlight class="charliteral">&apos;&gt;&apos;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="charliteral">&apos;~&apos;</highlight><highlight class="normal">)<sp/>||<sp/>c<sp/>==<sp/>EOF)<sp/>{</highlight></codeline>
<codeline lineno="3027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3028"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3029"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;z&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="3030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++col;</highlight></codeline>
<codeline lineno="3031"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++col;</highlight></codeline>
<codeline lineno="3033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>1;<sp/>i<sp/>&lt;=<sp/>(doUseASCIIHex<sp/>?<sp/>1<sp/>:<sp/>4);<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="3034"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>str-&gt;getChar();</highlight></codeline>
<codeline lineno="3036"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal"><sp/>||<sp/>c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\r&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3037"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/>(doUseASCIIHex<sp/>?<sp/></highlight><highlight class="charliteral">&apos;&gt;&apos;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="charliteral">&apos;~&apos;</highlight><highlight class="normal">)<sp/>||<sp/>c<sp/>==<sp/>EOF)<sp/>{</highlight></codeline>
<codeline lineno="3038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3039"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3040"><highlight class="normal"><sp/><sp/><sp/><sp/>++col;</highlight></codeline>
<codeline lineno="3041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/>(doUseASCIIHex<sp/>?<sp/></highlight><highlight class="charliteral">&apos;&gt;&apos;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="charliteral">&apos;~&apos;</highlight><highlight class="normal">)<sp/>||<sp/>c<sp/>==<sp/>EOF)<sp/>{</highlight></codeline>
<codeline lineno="3043"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3045"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3046"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(col<sp/>&gt;<sp/>225)<sp/>{</highlight></codeline>
<codeline lineno="3047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++size;</highlight></codeline>
<codeline lineno="3048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>col<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3049"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3050"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(c<sp/>!=<sp/>(doUseASCIIHex<sp/>?<sp/></highlight><highlight class="charliteral">&apos;&gt;&apos;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="charliteral">&apos;~&apos;</highlight><highlight class="normal">)<sp/>&amp;&amp;<sp/>c<sp/>!=<sp/>EOF);</highlight></codeline>
<codeline lineno="3051"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>one<sp/>entry<sp/>for<sp/>the<sp/>final<sp/>line<sp/>of<sp/>data;<sp/>add<sp/>another<sp/>entry</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3052"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>because<sp/>the<sp/>LZWDecode/RunLengthDecode<sp/>filter<sp/>may<sp/>read<sp/>past<sp/>the<sp/>end</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3053"><highlight class="normal"><sp/><sp/>++size;</highlight></codeline>
<codeline lineno="3054"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(useLZW<sp/>||<sp/>useRLE)<sp/>{</highlight></codeline>
<codeline lineno="3055"><highlight class="normal"><sp/><sp/><sp/><sp/>++size;</highlight></codeline>
<codeline lineno="3056"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3057"><highlight class="normal"><sp/><sp/>outerSize<sp/>=<sp/>size/65535<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="3058"><highlight class="normal"></highlight></codeline>
<codeline lineno="3059"><highlight class="normal"><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;{0:d}<sp/>array<sp/>dup<sp/>/{1:s}Data_{2:d}_{3:d}<sp/>exch<sp/>def\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outerSize,<sp/>mask<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;Mask&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;Im&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">.num,<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">.gen);</highlight></codeline>
<codeline lineno="3061"><highlight class="normal"><sp/><sp/>str-&gt;close();</highlight></codeline>
<codeline lineno="3062"><highlight class="normal"></highlight></codeline>
<codeline lineno="3063"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>write<sp/>the<sp/>data<sp/>into<sp/>the<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3064"><highlight class="normal"><sp/><sp/>str-&gt;reset();</highlight></codeline>
<codeline lineno="3065"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(outer<sp/>=<sp/>0;outer<sp/>&lt;<sp/>outerSize;outer++)<sp/>{</highlight></codeline>
<codeline lineno="3066"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>innerSize<sp/>=<sp/>size<sp/>&gt;<sp/>65535<sp/>?<sp/>65535<sp/>:<sp/>size;</highlight></codeline>
<codeline lineno="3067"><highlight class="normal"></highlight></codeline>
<codeline lineno="3068"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>put<sp/>the<sp/>inner<sp/>array<sp/>into<sp/>the<sp/>outer<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3069"><highlight class="normal"><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;{0:d}<sp/>array<sp/>1<sp/>index<sp/>{1:d}<sp/>2<sp/>index<sp/>put\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>innerSize,<sp/>outer);</highlight></codeline>
<codeline lineno="3071"><highlight class="normal"><sp/><sp/><sp/><sp/>line<sp/>=<sp/>col<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3072"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)(doUseASCIIHex<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;dup<sp/>0<sp/>&lt;&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;dup<sp/>0<sp/>&lt;~&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="3073"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;;)<sp/>{</highlight></codeline>
<codeline lineno="3074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3075"><highlight class="normal"><sp/><sp/><sp/><sp/>c<sp/>=<sp/>str-&gt;getChar();</highlight></codeline>
<codeline lineno="3076"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal"><sp/>||<sp/>c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\r&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/>(doUseASCIIHex<sp/>?<sp/></highlight><highlight class="charliteral">&apos;&gt;&apos;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="charliteral">&apos;~&apos;</highlight><highlight class="normal">)<sp/>||<sp/>c<sp/>==<sp/>EOF)<sp/>{</highlight></codeline>
<codeline lineno="3078"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;z&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="3081"><highlight class="normal"><sp/><sp/><sp/><sp/>writePSChar(c);</highlight></codeline>
<codeline lineno="3082"><highlight class="normal"><sp/><sp/><sp/><sp/>++col;</highlight></codeline>
<codeline lineno="3083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3084"><highlight class="normal"><sp/><sp/><sp/><sp/>writePSChar(c);</highlight></codeline>
<codeline lineno="3085"><highlight class="normal"><sp/><sp/><sp/><sp/>++col;</highlight></codeline>
<codeline lineno="3086"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>1;<sp/>i<sp/>&lt;=<sp/>(doUseASCIIHex<sp/>?<sp/>1<sp/>:<sp/>4);<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="3087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>str-&gt;getChar();</highlight></codeline>
<codeline lineno="3089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal"><sp/>||<sp/>c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\r&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/>(doUseASCIIHex<sp/>?<sp/></highlight><highlight class="charliteral">&apos;&gt;&apos;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="charliteral">&apos;~&apos;</highlight><highlight class="normal">)<sp/>||<sp/>c<sp/>==<sp/>EOF)<sp/>{</highlight></codeline>
<codeline lineno="3091"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3092"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3093"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePSChar(c);</highlight></codeline>
<codeline lineno="3094"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++col;</highlight></codeline>
<codeline lineno="3095"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/>(doUseASCIIHex<sp/>?<sp/></highlight><highlight class="charliteral">&apos;&gt;&apos;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="charliteral">&apos;~&apos;</highlight><highlight class="normal">)<sp/>||<sp/>c<sp/>==<sp/>EOF)<sp/>{</highlight></codeline>
<codeline lineno="3098"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>each<sp/>line<sp/>is:<sp/>&quot;dup<sp/>nnnnn<sp/>&lt;~...data...~&gt;<sp/>put&lt;eol&gt;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>so<sp/>max<sp/>data<sp/>length<sp/>=<sp/>255<sp/>-<sp/>20<sp/>=<sp/>235</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>chunks<sp/>are<sp/>1<sp/>or<sp/>4<sp/>bytes<sp/>each,<sp/>so<sp/>we<sp/>have<sp/>to<sp/>stop<sp/>at<sp/>232</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>but<sp/>make<sp/>it<sp/>225<sp/>just<sp/>to<sp/>be<sp/>safe</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(col<sp/>&gt;<sp/>225)<sp/>{</highlight></codeline>
<codeline lineno="3105"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)(doUseASCIIHex<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;&gt;<sp/>put\n&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;~&gt;<sp/>put\n&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="3106"><highlight class="normal"><sp/><sp/><sp/><sp/>++line;</highlight></codeline>
<codeline lineno="3107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(line<sp/>&gt;=<sp/>innerSize)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3108"><highlight class="normal"><sp/><sp/><sp/><sp/>writePSFmt((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)(doUseASCIIHex<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;dup<sp/>{0:d}<sp/>&lt;&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;dup<sp/>{0:d}<sp/>&lt;~&quot;</highlight><highlight class="normal">),<sp/>line);</highlight></codeline>
<codeline lineno="3109"><highlight class="normal"><sp/><sp/><sp/><sp/>col<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3111"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/>(doUseASCIIHex<sp/>?<sp/></highlight><highlight class="charliteral">&apos;&gt;&apos;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="charliteral">&apos;~&apos;</highlight><highlight class="normal">)<sp/>||<sp/>c<sp/>==<sp/>EOF)<sp/>{</highlight></codeline>
<codeline lineno="3113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePS((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)(doUseASCIIHex<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;&gt;<sp/>put\n&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;~&gt;<sp/>put\n&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="3114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(useLZW<sp/>||<sp/>useRLE)<sp/>{</highlight></codeline>
<codeline lineno="3115"><highlight class="normal"><sp/><sp/><sp/><sp/>++line;</highlight></codeline>
<codeline lineno="3116"><highlight class="normal"><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;{0:d}<sp/>&lt;&gt;<sp/>put\n&quot;</highlight><highlight class="normal">,<sp/>line);</highlight></codeline>
<codeline lineno="3117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3118"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;pop\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3121"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3122"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;pop\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3123"><highlight class="normal"><sp/><sp/><sp/><sp/>size<sp/>-=<sp/>innerSize;</highlight></codeline>
<codeline lineno="3124"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3125"><highlight class="normal"><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;pop\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3126"><highlight class="normal"><sp/><sp/>str-&gt;close();</highlight></codeline>
<codeline lineno="3127"><highlight class="normal"></highlight></codeline>
<codeline lineno="3128"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>str;</highlight></codeline>
<codeline lineno="3129"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3130"><highlight class="normal"></highlight></codeline>
<codeline lineno="3131"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PSOutputDev::setupForms(<ref refid="class_dict" kindref="compound">Dict</ref><sp/>*resDict)<sp/>{</highlight></codeline>
<codeline lineno="3132"><highlight class="normal"><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>xObjDict,<sp/>xObj,<sp/>xObjRef,<sp/>subtypeObj;</highlight></codeline>
<codeline lineno="3133"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="3134"><highlight class="normal"></highlight></codeline>
<codeline lineno="3135"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!preloadImagesForms)<sp/>{</highlight></codeline>
<codeline lineno="3136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3137"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3138"><highlight class="normal"></highlight></codeline>
<codeline lineno="3139"><highlight class="normal"><sp/><sp/>resDict-&gt;lookup(</highlight><highlight class="stringliteral">&quot;XObject&quot;</highlight><highlight class="normal">,<sp/>&amp;xObjDict);</highlight></codeline>
<codeline lineno="3140"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(xObjDict.isDict())<sp/>{</highlight></codeline>
<codeline lineno="3141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>xObjDict.dictGetLength();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="3142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xObjDict.dictGetValNF(i,<sp/>&amp;xObjRef);</highlight></codeline>
<codeline lineno="3143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xObjDict.dictGetVal(i,<sp/>&amp;xObj);</highlight></codeline>
<codeline lineno="3144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(xObj.isStream())<sp/>{</highlight></codeline>
<codeline lineno="3145"><highlight class="normal"><sp/><sp/><sp/><sp/>xObj.streamGetDict()-&gt;lookup(</highlight><highlight class="stringliteral">&quot;Subtype&quot;</highlight><highlight class="normal">,<sp/>&amp;subtypeObj);</highlight></codeline>
<codeline lineno="3146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(subtypeObj.isName(</highlight><highlight class="stringliteral">&quot;Form&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="3147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(xObjRef.isRef())<sp/>{</highlight></codeline>
<codeline lineno="3148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>setupForm(xObjRef.getRef(),<sp/>&amp;xObj);</highlight></codeline>
<codeline lineno="3149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>-1,</highlight></codeline>
<codeline lineno="3151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Form<sp/>in<sp/>resource<sp/>dict<sp/>is<sp/>not<sp/>an<sp/>indirect<sp/>reference&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3153"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3154"><highlight class="normal"><sp/><sp/><sp/><sp/>subtypeObj.free();</highlight></codeline>
<codeline lineno="3155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xObj.free();</highlight></codeline>
<codeline lineno="3157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xObjRef.free();</highlight></codeline>
<codeline lineno="3158"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3159"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3160"><highlight class="normal"><sp/><sp/>xObjDict.free();</highlight></codeline>
<codeline lineno="3161"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3162"><highlight class="normal"></highlight></codeline>
<codeline lineno="3163"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PSOutputDev::setupForm(<ref refid="struct_ref" kindref="compound">Ref</ref><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>*strObj)<sp/>{</highlight></codeline>
<codeline lineno="3164"><highlight class="normal"><sp/><sp/><ref refid="class_dict" kindref="compound">Dict</ref><sp/>*dict,<sp/>*resDict;</highlight></codeline>
<codeline lineno="3165"><highlight class="normal"><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>matrixObj,<sp/>bboxObj,<sp/>resObj,<sp/>obj1;</highlight></codeline>
<codeline lineno="3166"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>m[6],<sp/>bbox[4];</highlight></codeline>
<codeline lineno="3167"><highlight class="normal"><sp/><sp/><ref refid="class_p_d_f_rectangle" kindref="compound">PDFRectangle</ref><sp/>box;</highlight></codeline>
<codeline lineno="3168"><highlight class="normal"><sp/><sp/><ref refid="class_gfx" kindref="compound">Gfx</ref><sp/>*gfx;</highlight></codeline>
<codeline lineno="3169"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="3170"><highlight class="normal"></highlight></codeline>
<codeline lineno="3171"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>if<sp/>form<sp/>is<sp/>already<sp/>defined</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3172"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>formIDLen;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="3173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(formIDs[i].num<sp/>==<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">.num<sp/>&amp;&amp;<sp/>formIDs[i].gen<sp/>==<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">.gen)<sp/>{</highlight></codeline>
<codeline lineno="3174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3175"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3176"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3177"><highlight class="normal"></highlight></codeline>
<codeline lineno="3178"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>entry<sp/>to<sp/>formIDs<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3179"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(formIDLen<sp/>&gt;=<sp/>formIDSize)<sp/>{</highlight></codeline>
<codeline lineno="3180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(formIDSize<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="3181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>formIDSize<sp/>=<sp/>64;</highlight></codeline>
<codeline lineno="3182"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>formIDSize<sp/>*=<sp/>2;</highlight></codeline>
<codeline lineno="3184"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3185"><highlight class="normal"><sp/><sp/><sp/><sp/>formIDs<sp/>=<sp/>(<ref refid="struct_ref" kindref="compound">Ref</ref><sp/>*)greallocn(formIDs,<sp/>formIDSize,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_ref" kindref="compound">Ref</ref>));</highlight></codeline>
<codeline lineno="3186"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3187"><highlight class="normal"><sp/><sp/>formIDs[formIDLen++]<sp/>=<sp/>id;</highlight></codeline>
<codeline lineno="3188"><highlight class="normal"></highlight></codeline>
<codeline lineno="3189"><highlight class="normal"><sp/><sp/>dict<sp/>=<sp/>strObj-&gt;streamGetDict();</highlight></codeline>
<codeline lineno="3190"><highlight class="normal"></highlight></codeline>
<codeline lineno="3191"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>bounding<sp/>box</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3192"><highlight class="normal"><sp/><sp/>dict-&gt;lookup(</highlight><highlight class="stringliteral">&quot;BBox&quot;</highlight><highlight class="normal">,<sp/>&amp;bboxObj);</highlight></codeline>
<codeline lineno="3193"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!bboxObj.isArray())<sp/>{</highlight></codeline>
<codeline lineno="3194"><highlight class="normal"><sp/><sp/><sp/><sp/>bboxObj.free();</highlight></codeline>
<codeline lineno="3195"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Bad<sp/>form<sp/>bounding<sp/>box&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3197"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3198"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>4;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="3199"><highlight class="normal"><sp/><sp/><sp/><sp/>bboxObj.arrayGet(i,<sp/>&amp;obj1);</highlight></codeline>
<codeline lineno="3200"><highlight class="normal"><sp/><sp/><sp/><sp/>bbox[i]<sp/>=<sp/>obj1.getNum();</highlight></codeline>
<codeline lineno="3201"><highlight class="normal"><sp/><sp/><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="3202"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3203"><highlight class="normal"><sp/><sp/>bboxObj.free();</highlight></codeline>
<codeline lineno="3204"><highlight class="normal"></highlight></codeline>
<codeline lineno="3205"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>matrix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3206"><highlight class="normal"><sp/><sp/>dict-&gt;lookup(</highlight><highlight class="stringliteral">&quot;Matrix&quot;</highlight><highlight class="normal">,<sp/>&amp;matrixObj);</highlight></codeline>
<codeline lineno="3207"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(matrixObj.isArray())<sp/>{</highlight></codeline>
<codeline lineno="3208"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>6;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="3209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>matrixObj.arrayGet(i,<sp/>&amp;obj1);</highlight></codeline>
<codeline lineno="3210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m[i]<sp/>=<sp/>obj1.getNum();</highlight></codeline>
<codeline lineno="3211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="3212"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3213"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3214"><highlight class="normal"><sp/><sp/><sp/><sp/>m[0]<sp/>=<sp/>1;<sp/>m[1]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3215"><highlight class="normal"><sp/><sp/><sp/><sp/>m[2]<sp/>=<sp/>0;<sp/>m[3]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="3216"><highlight class="normal"><sp/><sp/><sp/><sp/>m[4]<sp/>=<sp/>0;<sp/>m[5]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3217"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3218"><highlight class="normal"><sp/><sp/>matrixObj.free();</highlight></codeline>
<codeline lineno="3219"><highlight class="normal"></highlight></codeline>
<codeline lineno="3220"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>resources</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3221"><highlight class="normal"><sp/><sp/>dict-&gt;lookup(</highlight><highlight class="stringliteral">&quot;Resources&quot;</highlight><highlight class="normal">,<sp/>&amp;resObj);</highlight></codeline>
<codeline lineno="3222"><highlight class="normal"><sp/><sp/>resDict<sp/>=<sp/>resObj.isDict()<sp/>?<sp/>resObj.getDict()<sp/>:<sp/>(<ref refid="class_dict" kindref="compound">Dict</ref><sp/>*)NULL;</highlight></codeline>
<codeline lineno="3223"><highlight class="normal"></highlight></codeline>
<codeline lineno="3224"><highlight class="normal"><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;/f_{0:d}_{1:d}<sp/>{{\n&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">.num,<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">.gen);</highlight></codeline>
<codeline lineno="3225"><highlight class="normal"><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;q\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3226"><highlight class="normal"><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;[{0:.6gs}<sp/>{1:.6gs}<sp/>{2:.6gs}<sp/>{3:.6gs}<sp/>{4:.6gs}<sp/>{5:.6gs}]<sp/>cm\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m[0],<sp/>m[1],<sp/>m[2],<sp/>m[3],<sp/>m[4],<sp/>m[5]);</highlight></codeline>
<codeline lineno="3228"><highlight class="normal"></highlight></codeline>
<codeline lineno="3229"><highlight class="normal"><sp/><sp/>box.x1<sp/>=<sp/>bbox[0];</highlight></codeline>
<codeline lineno="3230"><highlight class="normal"><sp/><sp/>box.y1<sp/>=<sp/>bbox[1];</highlight></codeline>
<codeline lineno="3231"><highlight class="normal"><sp/><sp/>box.x2<sp/>=<sp/>bbox[2];</highlight></codeline>
<codeline lineno="3232"><highlight class="normal"><sp/><sp/>box.y2<sp/>=<sp/>bbox[3];</highlight></codeline>
<codeline lineno="3233"><highlight class="normal"><sp/><sp/>gfx<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_gfx" kindref="compound">Gfx</ref>(doc,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>resDict,<sp/>&amp;box,<sp/>&amp;box);</highlight></codeline>
<codeline lineno="3234"><highlight class="normal"><sp/><sp/>gfx-&gt;display(strObj);</highlight></codeline>
<codeline lineno="3235"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>gfx;</highlight></codeline>
<codeline lineno="3236"><highlight class="normal"></highlight></codeline>
<codeline lineno="3237"><highlight class="normal"><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;Q\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3238"><highlight class="normal"><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;}<sp/>def\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3239"><highlight class="normal"></highlight></codeline>
<codeline lineno="3240"><highlight class="normal"><sp/><sp/>resObj.free();</highlight></codeline>
<codeline lineno="3241"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3242"><highlight class="normal"></highlight></codeline>
<codeline lineno="3243"><highlight class="normal">GBool<sp/>PSOutputDev::checkPageSlice(<ref refid="class_page" kindref="compound">Page</ref><sp/>*page,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*hDPI*/</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*vDPI*/</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rotateA,<sp/>GBool<sp/>useMediaBox,<sp/>GBool<sp/>crop,</highlight></codeline>
<codeline lineno="3245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sliceX,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sliceY,</highlight></codeline>
<codeline lineno="3246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sliceW,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sliceH,</highlight></codeline>
<codeline lineno="3247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GBool<sp/>printing,</highlight></codeline>
<codeline lineno="3248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GBool<sp/>(*abortCheckCbk)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data),</highlight></codeline>
<codeline lineno="3249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*abortCheckCbkData,</highlight></codeline>
<codeline lineno="3250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GBool<sp/>(*annotDisplayDecideCbk)(<ref refid="class_annot" kindref="compound">Annot</ref><sp/>*annot,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*user_data),</highlight></codeline>
<codeline lineno="3251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*annotDisplayDecideCbkData)<sp/>{</highlight></codeline>
<codeline lineno="3252"><highlight class="normal"><sp/><sp/><ref refid="class_pre_scan_output_dev" kindref="compound">PreScanOutputDev</ref><sp/>*scan;</highlight></codeline>
<codeline lineno="3253"><highlight class="normal"><sp/><sp/>GBool<sp/>rasterize;</highlight></codeline>
<codeline lineno="3254"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>HAVE_SPLASH</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3255"><highlight class="normal"><sp/><sp/>GBool<sp/>useFlate,<sp/>useLZW;</highlight></codeline>
<codeline lineno="3256"><highlight class="normal"><sp/><sp/><ref refid="class_splash_output_dev" kindref="compound">SplashOutputDev</ref><sp/>*splashOut;</highlight></codeline>
<codeline lineno="3257"><highlight class="normal"><sp/><sp/>SplashColor<sp/>paperColor;</highlight></codeline>
<codeline lineno="3258"><highlight class="normal"><sp/><sp/><ref refid="class_p_d_f_rectangle" kindref="compound">PDFRectangle</ref><sp/>box;</highlight></codeline>
<codeline lineno="3259"><highlight class="normal"><sp/><sp/><ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state;</highlight></codeline>
<codeline lineno="3260"><highlight class="normal"><sp/><sp/><ref refid="class_splash_bitmap" kindref="compound">SplashBitmap</ref><sp/>*bitmap;</highlight></codeline>
<codeline lineno="3261"><highlight class="normal"><sp/><sp/><ref refid="class_stream" kindref="compound">Stream</ref><sp/>*str0,<sp/>*str;</highlight></codeline>
<codeline lineno="3262"><highlight class="normal"><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>obj;</highlight></codeline>
<codeline lineno="3263"><highlight class="normal"><sp/><sp/>Guchar<sp/>*p;</highlight></codeline>
<codeline lineno="3264"><highlight class="normal"><sp/><sp/>Guchar<sp/>col[4];</highlight></codeline>
<codeline lineno="3265"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>hDPI2,<sp/>vDPI2;</highlight></codeline>
<codeline lineno="3266"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>m0,<sp/>m1,<sp/>m2,<sp/>m3,<sp/>m4,<sp/>m5;</highlight></codeline>
<codeline lineno="3267"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nStripes,<sp/>stripeH,<sp/>stripeY;</highlight></codeline>
<codeline lineno="3268"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c,<sp/>w,<sp/>h,<sp/>x,<sp/>y,<sp/>comp,<sp/>i;</highlight></codeline>
<codeline lineno="3269"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numComps,<sp/>initialNumComps;</highlight></codeline>
<codeline lineno="3270"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3271"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>hexBuf[32*2<sp/>+<sp/>2];<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>32<sp/>values<sp/>X<sp/>2<sp/>chars/value<sp/>+<sp/>line<sp/>ending<sp/>+<sp/>null</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3272"><highlight class="normal"><sp/><sp/>Guchar<sp/>digit;</highlight></codeline>
<codeline lineno="3273"><highlight class="normal"><sp/><sp/>GBool<sp/>isGray;</highlight></codeline>
<codeline lineno="3274"><highlight class="normal"></highlight></codeline>
<codeline lineno="3275"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!postInitDone)<sp/>{</highlight></codeline>
<codeline lineno="3276"><highlight class="normal"><sp/><sp/><sp/><sp/>postInit();</highlight></codeline>
<codeline lineno="3277"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3278"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(forceRasterize)<sp/>{</highlight></codeline>
<codeline lineno="3279"><highlight class="normal"><sp/><sp/><sp/><sp/>rasterize<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="3280"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3281"><highlight class="normal"><sp/><sp/><sp/><sp/>scan<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_pre_scan_output_dev" kindref="compound">PreScanOutputDev</ref>(doc);</highlight></codeline>
<codeline lineno="3282"><highlight class="normal"><sp/><sp/><sp/><sp/>page-&gt;displaySlice(scan,<sp/>72,<sp/>72,<sp/>rotateA,<sp/>useMediaBox,<sp/>crop,</highlight></codeline>
<codeline lineno="3283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sliceX,<sp/>sliceY,<sp/>sliceW,<sp/>sliceH,</highlight></codeline>
<codeline lineno="3284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printing,<sp/>abortCheckCbk,<sp/>abortCheckCbkData,</highlight></codeline>
<codeline lineno="3285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>annotDisplayDecideCbk,<sp/>annotDisplayDecideCbkData);</highlight></codeline>
<codeline lineno="3286"><highlight class="normal"><sp/><sp/><sp/><sp/>rasterize<sp/>=<sp/>scan-&gt;usesTransparency()<sp/>||<sp/>scan-&gt;usesPatternImageMask();</highlight></codeline>
<codeline lineno="3287"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>scan;</highlight></codeline>
<codeline lineno="3288"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3289"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!rasterize)<sp/>{</highlight></codeline>
<codeline lineno="3290"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gTrue;</highlight></codeline>
<codeline lineno="3291"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3292"><highlight class="normal"></highlight></codeline>
<codeline lineno="3293"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>HAVE_SPLASH</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3294"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>the<sp/>rasterization<sp/>parameters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3295"><highlight class="normal"><sp/><sp/>useFlate<sp/>=<sp/>getEnableFlate()<sp/>&amp;&amp;<sp/>level<sp/>&gt;=<sp/>psLevel3;</highlight></codeline>
<codeline lineno="3296"><highlight class="normal"><sp/><sp/>useLZW<sp/>=<sp/>getEnableLZW();</highlight></codeline>
<codeline lineno="3297"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>start<sp/>the<sp/>PS<sp/>page</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3298"><highlight class="normal"><sp/><sp/>page-&gt;makeBox(rasterResolution,<sp/>rasterResolution,<sp/>rotateA,<sp/>useMediaBox,<sp/>gFalse,</highlight></codeline>
<codeline lineno="3299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sliceX,<sp/>sliceY,<sp/>sliceW,<sp/>sliceH,<sp/>&amp;box,<sp/>&amp;crop);</highlight></codeline>
<codeline lineno="3300"><highlight class="normal"><sp/><sp/>rotateA<sp/>+=<sp/>page-&gt;getRotate();</highlight></codeline>
<codeline lineno="3301"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rotateA<sp/>&gt;=<sp/>360)<sp/>{</highlight></codeline>
<codeline lineno="3302"><highlight class="normal"><sp/><sp/><sp/><sp/>rotateA<sp/>-=<sp/>360;</highlight></codeline>
<codeline lineno="3303"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rotateA<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="3304"><highlight class="normal"><sp/><sp/><sp/><sp/>rotateA<sp/>+=<sp/>360;</highlight></codeline>
<codeline lineno="3305"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3306"><highlight class="normal"><sp/><sp/>state<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_gfx_state" kindref="compound">GfxState</ref>(rasterResolution,<sp/>rasterResolution,<sp/>&amp;box,<sp/>rotateA,<sp/>gFalse);</highlight></codeline>
<codeline lineno="3307"><highlight class="normal"><sp/><sp/>startPage(page-&gt;getNum(),<sp/>state,<sp/>xref);</highlight></codeline>
<codeline lineno="3308"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>state;</highlight></codeline>
<codeline lineno="3309"><highlight class="normal"></highlight></codeline>
<codeline lineno="3310"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>up<sp/>the<sp/>SplashOutputDev</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3311"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rasterMono<sp/>||<sp/>level<sp/>==<sp/>psLevel1)<sp/>{</highlight></codeline>
<codeline lineno="3312"><highlight class="normal"><sp/><sp/><sp/><sp/>numComps<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="3313"><highlight class="normal"><sp/><sp/><sp/><sp/>paperColor[0]<sp/>=<sp/>0xff;</highlight></codeline>
<codeline lineno="3314"><highlight class="normal"><sp/><sp/><sp/><sp/>splashOut<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_splash_output_dev" kindref="compound">SplashOutputDev</ref>(splashModeMono8,<sp/>1,<sp/>gFalse,</highlight></codeline>
<codeline lineno="3315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>paperColor,<sp/>gFalse);</highlight></codeline>
<codeline lineno="3316"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>SPLASH_CMYK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3317"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(level<sp/>==<sp/>psLevel1Sep<sp/>||<sp/>level<sp/>==<sp/>psLevel2Sep<sp/>||</highlight></codeline>
<codeline lineno="3318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>level<sp/>==<sp/>psLevel3Sep<sp/>||<sp/>globalParams-&gt;getOverprintPreview())<sp/>{</highlight></codeline>
<codeline lineno="3319"><highlight class="normal"><sp/><sp/><sp/><sp/>numComps<sp/>=<sp/>4;</highlight></codeline>
<codeline lineno="3320"><highlight class="normal"><sp/><sp/><sp/><sp/>paperColor[0]<sp/>=<sp/>paperColor[1]<sp/>=<sp/>paperColor[2]<sp/>=<sp/>paperColor[3]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3321"><highlight class="normal"><sp/><sp/><sp/><sp/>splashOut<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_splash_output_dev" kindref="compound">SplashOutputDev</ref>(splashModeCMYK8,<sp/>1,<sp/>gFalse,</highlight></codeline>
<codeline lineno="3322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>paperColor,<sp/>gFalse);</highlight></codeline>
<codeline lineno="3323"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3324"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3325"><highlight class="normal"><sp/><sp/><sp/><sp/>numComps<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="3326"><highlight class="normal"><sp/><sp/><sp/><sp/>paperColor[0]<sp/>=<sp/>paperColor[1]<sp/>=<sp/>paperColor[2]<sp/>=<sp/>0xff;</highlight></codeline>
<codeline lineno="3327"><highlight class="normal"><sp/><sp/><sp/><sp/>splashOut<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_splash_output_dev" kindref="compound">SplashOutputDev</ref>(splashModeRGB8,<sp/>1,<sp/>gFalse,</highlight></codeline>
<codeline lineno="3328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>paperColor,<sp/>gFalse);</highlight></codeline>
<codeline lineno="3329"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3330"><highlight class="normal"><sp/><sp/>splashOut-&gt;setFontAntialias(rasterAntialias);</highlight></codeline>
<codeline lineno="3331"><highlight class="normal"><sp/><sp/>splashOut-&gt;setVectorAntialias(rasterAntialias);</highlight></codeline>
<codeline lineno="3332"><highlight class="normal"><sp/><sp/>splashOut-&gt;startDoc(doc);</highlight></codeline>
<codeline lineno="3333"><highlight class="normal"></highlight></codeline>
<codeline lineno="3334"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>break<sp/>the<sp/>page<sp/>into<sp/>stripes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3335"><highlight class="normal"><sp/><sp/>hDPI2<sp/>=<sp/>xScale<sp/>*<sp/>rasterResolution;</highlight></codeline>
<codeline lineno="3336"><highlight class="normal"><sp/><sp/>vDPI2<sp/>=<sp/>yScale<sp/>*<sp/>rasterResolution;</highlight></codeline>
<codeline lineno="3337"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sliceW<sp/>&lt;<sp/>0<sp/>||<sp/>sliceH<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="3338"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(useMediaBox)<sp/>{</highlight></codeline>
<codeline lineno="3339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>box<sp/>=<sp/>*page-&gt;getMediaBox();</highlight></codeline>
<codeline lineno="3340"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>box<sp/>=<sp/>*page-&gt;getCropBox();</highlight></codeline>
<codeline lineno="3342"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3343"><highlight class="normal"><sp/><sp/><sp/><sp/>sliceX<sp/>=<sp/>sliceY<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3344"><highlight class="normal"><sp/><sp/><sp/><sp/>sliceW<sp/>=<sp/>(int)((box.x2<sp/>-<sp/>box.x1)<sp/>*<sp/>hDPI2<sp/>/<sp/>72.0);</highlight></codeline>
<codeline lineno="3345"><highlight class="normal"><sp/><sp/><sp/><sp/>sliceH<sp/>=<sp/>(int)((box.y2<sp/>-<sp/>box.y1)<sp/>*<sp/>vDPI2<sp/>/<sp/>72.0);</highlight></codeline>
<codeline lineno="3346"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3347"><highlight class="normal"><sp/><sp/>nStripes<sp/>=<sp/>(int)ceil((</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)(sliceW<sp/>*<sp/>sliceH)<sp/>/</highlight></codeline>
<codeline lineno="3348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)rasterizationSliceSize);</highlight></codeline>
<codeline lineno="3349"><highlight class="normal"><sp/><sp/>stripeH<sp/>=<sp/>(sliceH<sp/>+<sp/>nStripes<sp/>-<sp/>1)<sp/>/<sp/>nStripes;</highlight></codeline>
<codeline lineno="3350"><highlight class="normal"></highlight></codeline>
<codeline lineno="3351"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>render<sp/>the<sp/>stripes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3352"><highlight class="normal"><sp/><sp/>initialNumComps<sp/>=<sp/>numComps;</highlight></codeline>
<codeline lineno="3353"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(stripeY<sp/>=<sp/>sliceY;<sp/>stripeY<sp/>&lt;<sp/>sliceH;<sp/>stripeY<sp/>+=<sp/>stripeH)<sp/>{</highlight></codeline>
<codeline lineno="3354"><highlight class="normal"></highlight></codeline>
<codeline lineno="3355"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>rasterize<sp/>a<sp/>stripe</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3356"><highlight class="normal"><sp/><sp/><sp/><sp/>page-&gt;makeBox(hDPI2,<sp/>vDPI2,<sp/>0,<sp/>useMediaBox,<sp/>gFalse,</highlight></codeline>
<codeline lineno="3357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sliceX,<sp/>stripeY,<sp/>sliceW,<sp/>stripeH,<sp/>&amp;box,<sp/>&amp;crop);</highlight></codeline>
<codeline lineno="3358"><highlight class="normal"><sp/><sp/><sp/><sp/>m0<sp/>=<sp/>box.x2<sp/>-<sp/>box.x1;</highlight></codeline>
<codeline lineno="3359"><highlight class="normal"><sp/><sp/><sp/><sp/>m1<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3360"><highlight class="normal"><sp/><sp/><sp/><sp/>m2<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3361"><highlight class="normal"><sp/><sp/><sp/><sp/>m3<sp/>=<sp/>box.y2<sp/>-<sp/>box.y1;</highlight></codeline>
<codeline lineno="3362"><highlight class="normal"><sp/><sp/><sp/><sp/>m4<sp/>=<sp/>box.x1;</highlight></codeline>
<codeline lineno="3363"><highlight class="normal"><sp/><sp/><sp/><sp/>m5<sp/>=<sp/>box.y1;</highlight></codeline>
<codeline lineno="3364"><highlight class="normal"><sp/><sp/><sp/><sp/>page-&gt;displaySlice(splashOut,<sp/>hDPI2,<sp/>vDPI2,</highlight></codeline>
<codeline lineno="3365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(360<sp/>-<sp/>page-&gt;getRotate())<sp/>%<sp/>360,<sp/>useMediaBox,<sp/>crop,</highlight></codeline>
<codeline lineno="3366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sliceX,<sp/>stripeY,<sp/>sliceW,<sp/>stripeH,</highlight></codeline>
<codeline lineno="3367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printing,<sp/>abortCheckCbk,<sp/>abortCheckCbkData,</highlight></codeline>
<codeline lineno="3368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>annotDisplayDecideCbk,<sp/>annotDisplayDecideCbkData);</highlight></codeline>
<codeline lineno="3369"><highlight class="normal"></highlight></codeline>
<codeline lineno="3370"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>draw<sp/>the<sp/>rasterized<sp/>image</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3371"><highlight class="normal"><sp/><sp/><sp/><sp/>bitmap<sp/>=<sp/>splashOut-&gt;getBitmap();</highlight></codeline>
<codeline lineno="3372"><highlight class="normal"><sp/><sp/><sp/><sp/>numComps<sp/>=<sp/>initialNumComps;</highlight></codeline>
<codeline lineno="3373"><highlight class="normal"><sp/><sp/><sp/><sp/>w<sp/>=<sp/>bitmap-&gt;getWidth();</highlight></codeline>
<codeline lineno="3374"><highlight class="normal"><sp/><sp/><sp/><sp/>h<sp/>=<sp/>bitmap-&gt;getHeight();</highlight></codeline>
<codeline lineno="3375"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;gsave\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3376"><highlight class="normal"><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;[{0:.6g}<sp/>{1:.6g}<sp/>{2:.6g}<sp/>{3:.6g}<sp/>{4:.6g}<sp/>{5:.6g}]<sp/>concat\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m0,<sp/>m1,<sp/>m2,<sp/>m3,<sp/>m4,<sp/>m5);</highlight></codeline>
<codeline lineno="3378"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(level)<sp/>{</highlight></codeline>
<codeline lineno="3379"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>psLevel1:</highlight></codeline>
<codeline lineno="3380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;{0:d}<sp/>{1:d}<sp/>8<sp/>[{2:d}<sp/>0<sp/>0<sp/>{3:d}<sp/>0<sp/>{4:d}]<sp/>pdfIm1{5:s}\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>w,<sp/>h,<sp/>w,<sp/>-h,<sp/>h,</highlight></codeline>
<codeline lineno="3382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>useBinary<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;Bin&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>bitmap-&gt;getDataPtr()<sp/>+<sp/>(h<sp/>-<sp/>1)<sp/>*<sp/>bitmap-&gt;getRowSize();</highlight></codeline>
<codeline lineno="3384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(useBinary)<sp/>{</highlight></codeline>
<codeline lineno="3386"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(y<sp/>=<sp/>0;<sp/>y<sp/>&lt;<sp/>h;<sp/>++y)<sp/>{</highlight></codeline>
<codeline lineno="3387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(x<sp/>=<sp/>0;<sp/>x<sp/>&lt;<sp/>w;<sp/>++x)<sp/>{</highlight></codeline>
<codeline lineno="3388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hexBuf[i++]<sp/>=<sp/>*p++;</highlight></codeline>
<codeline lineno="3389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&gt;=<sp/>64)<sp/>{</highlight></codeline>
<codeline lineno="3390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writePSBuf(hexBuf,<sp/>i);</highlight></codeline>
<codeline lineno="3391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3394"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3396"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(y<sp/>=<sp/>0;<sp/>y<sp/>&lt;<sp/>h;<sp/>++y)<sp/>{</highlight></codeline>
<codeline lineno="3397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(x<sp/>=<sp/>0;<sp/>x<sp/>&lt;<sp/>w;<sp/>++x)<sp/>{</highlight></codeline>
<codeline lineno="3398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>digit<sp/>=<sp/>*p<sp/>/<sp/>16;</highlight></codeline>
<codeline lineno="3399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hexBuf[i++]<sp/>=<sp/>digit<sp/>+<sp/>((digit<sp/>&gt;=<sp/>10)?<sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal"><sp/>-<sp/>10:<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>digit<sp/>=<sp/>*p++<sp/>%<sp/>16;</highlight></codeline>
<codeline lineno="3401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hexBuf[i++]<sp/>=<sp/>digit<sp/>+<sp/>((digit<sp/>&gt;=<sp/>10)?<sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal"><sp/>-<sp/>10:<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&gt;=<sp/>64)<sp/>{</highlight></codeline>
<codeline lineno="3403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hexBuf[i++]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writePSBuf(hexBuf,<sp/>i);</highlight></codeline>
<codeline lineno="3405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3408"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="3411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!useBinary)<sp/>{</highlight></codeline>
<codeline lineno="3412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>hexBuf[i++]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writePSBuf(hexBuf,<sp/>i);</highlight></codeline>
<codeline lineno="3415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3417"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>psLevel1Sep:</highlight></codeline>
<codeline lineno="3418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>bitmap-&gt;getDataPtr();</highlight></codeline>
<codeline lineno="3419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>for<sp/>an<sp/>all<sp/>gray<sp/>image</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(getOptimizeColorSpace())<sp/>{</highlight></codeline>
<codeline lineno="3421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>isGray<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="3422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(y<sp/>=<sp/>0;<sp/>y<sp/>&lt;<sp/>h;<sp/>++y)<sp/>{</highlight></codeline>
<codeline lineno="3423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(x<sp/>=<sp/>0;<sp/>x<sp/>&lt;<sp/>w;<sp/>++x)<sp/>{</highlight></codeline>
<codeline lineno="3424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p[4*x]<sp/>!=<sp/>p[4*x<sp/>+<sp/>1]<sp/>||<sp/>p[4*x]<sp/>!=<sp/>p[4*x<sp/>+<sp/>2])<sp/>{</highlight></codeline>
<codeline lineno="3425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>isGray<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="3426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>=<sp/>h;</highlight></codeline>
<codeline lineno="3427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>+=<sp/>bitmap-&gt;getRowSize();</highlight></codeline>
<codeline lineno="3431"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3433"><highlight class="normal"><sp/><sp/><sp/><sp/>isGray<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="3434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;{0:d}<sp/>{1:d}<sp/>8<sp/>[{2:d}<sp/>0<sp/>0<sp/>{3:d}<sp/>0<sp/>{4:d}]<sp/>pdfIm1{5:s}{6:s}\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>w,<sp/>h,<sp/>w,<sp/>-h,<sp/>h,</highlight></codeline>
<codeline lineno="3437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>isGray<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;Sep&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>useBinary<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;Bin&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>bitmap-&gt;getDataPtr()<sp/>+<sp/>(h<sp/>-<sp/>1)<sp/>*<sp/>bitmap-&gt;getRowSize();</highlight></codeline>
<codeline lineno="3440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>col[0]<sp/>=<sp/>col[1]<sp/>=<sp/>col[2]<sp/>=<sp/>col[3]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isGray)<sp/>{</highlight></codeline>
<codeline lineno="3443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>g;</highlight></codeline>
<codeline lineno="3444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((psProcessBlack<sp/>&amp;<sp/>processColors)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="3445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>the<sp/>image<sp/>uses<sp/>black</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(y<sp/>=<sp/>0;<sp/>y<sp/>&lt;<sp/>h;<sp/>++y)<sp/>{</highlight></codeline>
<codeline lineno="3447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(x<sp/>=<sp/>0;<sp/>x<sp/>&lt;<sp/>w;<sp/>++x)<sp/>{</highlight></codeline>
<codeline lineno="3448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p[4*x]<sp/>&gt;<sp/>0<sp/>||<sp/>p[4*x<sp/>+<sp/>3]<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="3449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>col[3]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="3450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>=<sp/>h;</highlight></codeline>
<codeline lineno="3451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>-=<sp/>bitmap-&gt;getRowSize();</highlight></codeline>
<codeline lineno="3455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>bitmap-&gt;getDataPtr()<sp/>+<sp/>(h<sp/>-<sp/>1)<sp/>*<sp/>bitmap-&gt;getRowSize();</highlight></codeline>
<codeline lineno="3457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(y<sp/>=<sp/>0;<sp/>y<sp/>&lt;<sp/>h;<sp/>++y)<sp/>{</highlight></codeline>
<codeline lineno="3459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(useBinary)<sp/>{</highlight></codeline>
<codeline lineno="3460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Binary<sp/>gray<sp/>image</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(x<sp/>=<sp/>0;<sp/>x<sp/>&lt;<sp/>w;<sp/>++x)<sp/>{</highlight></codeline>
<codeline lineno="3462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g<sp/>=<sp/>p[4*x]<sp/>+<sp/>p[4*x<sp/>+<sp/>3];</highlight></codeline>
<codeline lineno="3463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g<sp/>=<sp/>255<sp/>-<sp/>g;</highlight></codeline>
<codeline lineno="3464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(g<sp/>&lt;<sp/>0)<sp/>g<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hexBuf[i++]<sp/>=<sp/>(Guchar)<sp/>g;</highlight></codeline>
<codeline lineno="3466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&gt;=<sp/>64)<sp/>{</highlight></codeline>
<codeline lineno="3467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writePSBuf(hexBuf,<sp/>i);</highlight></codeline>
<codeline lineno="3468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Hex<sp/>gray<sp/>image</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(x<sp/>=<sp/>0;<sp/>x<sp/>&lt;<sp/>w;<sp/>++x)<sp/>{</highlight></codeline>
<codeline lineno="3474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g<sp/>=<sp/>p[4*x]<sp/>+<sp/>p[4*x<sp/>+<sp/>3];</highlight></codeline>
<codeline lineno="3475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g<sp/>=<sp/>255<sp/>-<sp/>g;</highlight></codeline>
<codeline lineno="3476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(g<sp/>&lt;<sp/>0)<sp/>g<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>digit<sp/>=<sp/>g<sp/>/<sp/>16;</highlight></codeline>
<codeline lineno="3478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hexBuf[i++]<sp/>=<sp/>digit<sp/>+<sp/>((digit<sp/>&gt;=<sp/>10)?<sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal"><sp/>-<sp/>10:<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>digit<sp/>=<sp/>g<sp/>%<sp/>16;</highlight></codeline>
<codeline lineno="3480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hexBuf[i++]<sp/>=<sp/>digit<sp/>+<sp/>((digit<sp/>&gt;=<sp/>10)?<sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal"><sp/>-<sp/>10:<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&gt;=<sp/>64)<sp/>{</highlight></codeline>
<codeline lineno="3482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hexBuf[i++]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writePSBuf(hexBuf,<sp/>i);</highlight></codeline>
<codeline lineno="3484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>-=<sp/>bitmap-&gt;getRowSize();</highlight></codeline>
<codeline lineno="3489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(((psProcessCyan<sp/>|<sp/>psProcessMagenta<sp/>|<sp/>psProcessYellow<sp/>|<sp/>psProcessBlack)<sp/>&amp;<sp/>~processColors)<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="3491"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Color<sp/>image,<sp/>need<sp/>to<sp/>check<sp/>color<sp/>flags<sp/>for<sp/>each<sp/>dot</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(y<sp/>=<sp/>0;<sp/>y<sp/>&lt;<sp/>h;<sp/>++y)<sp/>{</highlight></codeline>
<codeline lineno="3493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(comp<sp/>=<sp/>0;<sp/>comp<sp/>&lt;<sp/>4;<sp/>++comp)<sp/>{</highlight></codeline>
<codeline lineno="3494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(useBinary)<sp/>{</highlight></codeline>
<codeline lineno="3495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Binary<sp/>color<sp/>image</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(x<sp/>=<sp/>0;<sp/>x<sp/>&lt;<sp/>w;<sp/>++x)<sp/>{</highlight></codeline>
<codeline lineno="3497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>col[comp]<sp/>|=<sp/>p[4*x<sp/>+<sp/>comp];</highlight></codeline>
<codeline lineno="3498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hexBuf[i++]<sp/>=<sp/>p[4*x<sp/>+<sp/>comp];</highlight></codeline>
<codeline lineno="3499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&gt;=<sp/>64)<sp/>{</highlight></codeline>
<codeline lineno="3500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writePSBuf(hexBuf,<sp/>i);</highlight></codeline>
<codeline lineno="3501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Gray<sp/>color<sp/>image</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(x<sp/>=<sp/>0;<sp/>x<sp/>&lt;<sp/>w;<sp/>++x)<sp/>{</highlight></codeline>
<codeline lineno="3507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>col[comp]<sp/>|=<sp/>p[4*x<sp/>+<sp/>comp];</highlight></codeline>
<codeline lineno="3508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>digit<sp/>=<sp/>p[4*x<sp/>+<sp/>comp]<sp/>/<sp/>16;</highlight></codeline>
<codeline lineno="3509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hexBuf[i++]<sp/>=<sp/>digit<sp/>+<sp/>((digit<sp/>&gt;=<sp/>10)?<sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal"><sp/>-<sp/>10:<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>digit<sp/>=<sp/>p[4*x<sp/>+<sp/>comp]<sp/>%<sp/>16;</highlight></codeline>
<codeline lineno="3511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hexBuf[i++]<sp/>=<sp/>digit<sp/>+<sp/>((digit<sp/>&gt;=<sp/>10)?<sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal"><sp/>-<sp/>10:<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&gt;=<sp/>64)<sp/>{</highlight></codeline>
<codeline lineno="3513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hexBuf[i++]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writePSBuf(hexBuf,<sp/>i);</highlight></codeline>
<codeline lineno="3515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>-=<sp/>bitmap-&gt;getRowSize();</highlight></codeline>
<codeline lineno="3521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3523"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Color<sp/>image,<sp/>do<sp/>not<sp/>need<sp/>to<sp/>check<sp/>color<sp/>flags</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(y<sp/>=<sp/>0;<sp/>y<sp/>&lt;<sp/>h;<sp/>++y)<sp/>{</highlight></codeline>
<codeline lineno="3525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(comp<sp/>=<sp/>0;<sp/>comp<sp/>&lt;<sp/>4;<sp/>++comp)<sp/>{</highlight></codeline>
<codeline lineno="3526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(useBinary)<sp/>{</highlight></codeline>
<codeline lineno="3527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Binary<sp/>color<sp/>image</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(x<sp/>=<sp/>0;<sp/>x<sp/>&lt;<sp/>w;<sp/>++x)<sp/>{</highlight></codeline>
<codeline lineno="3529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hexBuf[i++]<sp/>=<sp/>p[4*x<sp/>+<sp/>comp];</highlight></codeline>
<codeline lineno="3530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&gt;=<sp/>64)<sp/>{</highlight></codeline>
<codeline lineno="3531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writePSBuf(hexBuf,<sp/>i);</highlight></codeline>
<codeline lineno="3532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Hex<sp/>color<sp/>image</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(x<sp/>=<sp/>0;<sp/>x<sp/>&lt;<sp/>w;<sp/>++x)<sp/>{</highlight></codeline>
<codeline lineno="3538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>digit<sp/>=<sp/>p[4*x<sp/>+<sp/>comp]<sp/>/<sp/>16;</highlight></codeline>
<codeline lineno="3539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hexBuf[i++]<sp/>=<sp/>digit<sp/>+<sp/>((digit<sp/>&gt;=<sp/>10)?<sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal"><sp/>-<sp/>10:<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>digit<sp/>=<sp/>p[4*x<sp/>+<sp/>comp]<sp/>%<sp/>16;</highlight></codeline>
<codeline lineno="3541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hexBuf[i++]<sp/>=<sp/>digit<sp/>+<sp/>((digit<sp/>&gt;=<sp/>10)?<sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal"><sp/>-<sp/>10:<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&gt;=<sp/>64)<sp/>{</highlight></codeline>
<codeline lineno="3543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hexBuf[i++]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writePSBuf(hexBuf,<sp/>i);</highlight></codeline>
<codeline lineno="3545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>-=<sp/>bitmap-&gt;getRowSize();</highlight></codeline>
<codeline lineno="3551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="3554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!useBinary)<sp/>{</highlight></codeline>
<codeline lineno="3555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hexBuf[i++]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writePSBuf(hexBuf,<sp/>i);</highlight></codeline>
<codeline lineno="3558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(col[0])<sp/>{</highlight></codeline>
<codeline lineno="3560"><highlight class="normal"><sp/><sp/><sp/><sp/>processColors<sp/>|=<sp/>psProcessCyan;</highlight></codeline>
<codeline lineno="3561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(col[1])<sp/>{</highlight></codeline>
<codeline lineno="3563"><highlight class="normal"><sp/><sp/><sp/><sp/>processColors<sp/>|=<sp/>psProcessMagenta;</highlight></codeline>
<codeline lineno="3564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(col[2])<sp/>{</highlight></codeline>
<codeline lineno="3566"><highlight class="normal"><sp/><sp/><sp/><sp/>processColors<sp/>|=<sp/>psProcessYellow;</highlight></codeline>
<codeline lineno="3567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(col[3])<sp/>{</highlight></codeline>
<codeline lineno="3569"><highlight class="normal"><sp/><sp/><sp/><sp/>processColors<sp/>|=<sp/>psProcessBlack;</highlight></codeline>
<codeline lineno="3570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3572"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>psLevel2:</highlight></codeline>
<codeline lineno="3573"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>psLevel2Sep:</highlight></codeline>
<codeline lineno="3574"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>psLevel3:</highlight></codeline>
<codeline lineno="3575"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>psLevel3Sep:</highlight></codeline>
<codeline lineno="3576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj.initNull();</highlight></codeline>
<codeline lineno="3577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>bitmap-&gt;getDataPtr()<sp/>+<sp/>(h<sp/>-<sp/>1)<sp/>*<sp/>bitmap-&gt;getRowSize();</highlight></codeline>
<codeline lineno="3578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>str0<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_mem_stream" kindref="compound">MemStream</ref>((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)p,<sp/>0,<sp/>w<sp/>*<sp/>h<sp/>*<sp/>numComps,<sp/>&amp;obj);</highlight></codeline>
<codeline lineno="3579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>for<sp/>a<sp/>color<sp/>image<sp/>that<sp/>uses<sp/>only<sp/>gray</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!getOptimizeColorSpace())<sp/>{</highlight></codeline>
<codeline lineno="3581"><highlight class="normal"><sp/><sp/><sp/><sp/>isGray<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="3582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(numComps<sp/>==<sp/>4)<sp/>{</highlight></codeline>
<codeline lineno="3583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>compCyan;</highlight></codeline>
<codeline lineno="3584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>isGray<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="3585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((compCyan<sp/>=<sp/>str0-&gt;getChar())<sp/>!=<sp/>EOF)<sp/>{</highlight></codeline>
<codeline lineno="3586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(str0-&gt;getChar()<sp/>!=<sp/>compCyan<sp/>||</highlight></codeline>
<codeline lineno="3587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str0-&gt;getChar()<sp/>!=<sp/>compCyan)<sp/>{</highlight></codeline>
<codeline lineno="3588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>isGray<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="3589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>str0-&gt;getChar();</highlight></codeline>
<codeline lineno="3592"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(numComps<sp/>==<sp/>3)<sp/>{</highlight></codeline>
<codeline lineno="3594"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>compRed;</highlight></codeline>
<codeline lineno="3595"><highlight class="normal"><sp/><sp/><sp/><sp/>isGray<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="3596"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((compRed<sp/>=<sp/>str0-&gt;getChar())<sp/>!=<sp/>EOF)<sp/>{</highlight></codeline>
<codeline lineno="3597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(str0-&gt;getChar()<sp/>!=<sp/>compRed<sp/>||</highlight></codeline>
<codeline lineno="3598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str0-&gt;getChar()<sp/>!=<sp/>compRed)<sp/>{</highlight></codeline>
<codeline lineno="3599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>isGray<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="3600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3602"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>isGray<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="3605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>str0-&gt;reset();</highlight></codeline>
<codeline lineno="3607"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>ENABLE_ZLIB</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(useFlate)<sp/>{</highlight></codeline>
<codeline lineno="3609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isGray<sp/>&amp;&amp;<sp/>numComps<sp/>==<sp/>4)<sp/>{</highlight></codeline>
<codeline lineno="3610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>str<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_flate_encoder" kindref="compound">FlateEncoder</ref>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_c_m_y_k_gray_encoder" kindref="compound">CMYKGrayEncoder</ref>(str0));</highlight></codeline>
<codeline lineno="3611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>numComps<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="3612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isGray<sp/>&amp;&amp;<sp/>numComps<sp/>==<sp/>3)<sp/>{</highlight></codeline>
<codeline lineno="3613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>str<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_flate_encoder" kindref="compound">FlateEncoder</ref>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_r_g_b_gray_encoder" kindref="compound">RGBGrayEncoder</ref>(str0));</highlight></codeline>
<codeline lineno="3614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>numComps<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="3615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>str<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_flate_encoder" kindref="compound">FlateEncoder</ref>(str0);</highlight></codeline>
<codeline lineno="3617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3619"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(useLZW)<sp/>{</highlight></codeline>
<codeline lineno="3621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isGray<sp/>&amp;&amp;<sp/>numComps<sp/>==<sp/>4)<sp/>{</highlight></codeline>
<codeline lineno="3622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>str<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_l_z_w_encoder" kindref="compound">LZWEncoder</ref>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_c_m_y_k_gray_encoder" kindref="compound">CMYKGrayEncoder</ref>(str0));</highlight></codeline>
<codeline lineno="3623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>numComps<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="3624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isGray<sp/>&amp;&amp;<sp/>numComps<sp/>==<sp/>3)<sp/>{</highlight></codeline>
<codeline lineno="3625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>str<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_l_z_w_encoder" kindref="compound">LZWEncoder</ref>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_r_g_b_gray_encoder" kindref="compound">RGBGrayEncoder</ref>(str0));</highlight></codeline>
<codeline lineno="3626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>numComps<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="3627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>str<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_l_z_w_encoder" kindref="compound">LZWEncoder</ref>(str0);</highlight></codeline>
<codeline lineno="3629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isGray<sp/>&amp;&amp;<sp/>numComps<sp/>==<sp/>4)<sp/>{</highlight></codeline>
<codeline lineno="3632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>str<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_run_length_encoder" kindref="compound">RunLengthEncoder</ref>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_c_m_y_k_gray_encoder" kindref="compound">CMYKGrayEncoder</ref>(str0));</highlight></codeline>
<codeline lineno="3633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>numComps<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="3634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isGray<sp/>&amp;&amp;<sp/>numComps<sp/>==<sp/>3)<sp/>{</highlight></codeline>
<codeline lineno="3635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>str<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_run_length_encoder" kindref="compound">RunLengthEncoder</ref>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_r_g_b_gray_encoder" kindref="compound">RGBGrayEncoder</ref>(str0));</highlight></codeline>
<codeline lineno="3636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>numComps<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="3637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>str<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_run_length_encoder" kindref="compound">RunLengthEncoder</ref>(str0);</highlight></codeline>
<codeline lineno="3639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(numComps<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="3642"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;/DeviceGray<sp/>setcolorspace\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(numComps<sp/>==<sp/>3)<sp/>{</highlight></codeline>
<codeline lineno="3644"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;/DeviceRGB<sp/>setcolorspace\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3646"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;/DeviceCMYK<sp/>setcolorspace\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;&lt;&lt;\n<sp/><sp/>/ImageType<sp/>1\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>/Width<sp/>{0:d}\n&quot;</highlight><highlight class="normal">,<sp/>bitmap-&gt;getWidth());</highlight></codeline>
<codeline lineno="3650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>/Height<sp/>{0:d}\n&quot;</highlight><highlight class="normal">,<sp/>bitmap-&gt;getHeight());</highlight></codeline>
<codeline lineno="3651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>/ImageMatrix<sp/>[{0:d}<sp/>0<sp/>0<sp/>{1:d}<sp/>0<sp/>{2:d}]\n&quot;</highlight><highlight class="normal">,<sp/>w,<sp/>-h,<sp/>h);</highlight></codeline>
<codeline lineno="3652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>/BitsPerComponent<sp/>8\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(numComps<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="3654"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>/Decode<sp/>[1<sp/>0]\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(numComps<sp/>==<sp/>3)<sp/>{</highlight></codeline>
<codeline lineno="3656"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>/Decode<sp/>[0<sp/>1<sp/>0<sp/>1<sp/>0<sp/>1]\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3658"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>/Decode<sp/>[0<sp/>1<sp/>0<sp/>1<sp/>0<sp/>1<sp/>0<sp/>1]\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>/DataSource<sp/>currentfile\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(useBinary)<sp/>{</highlight></codeline>
<codeline lineno="3662"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>nothing<sp/>to<sp/>do<sp/>*/</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(useASCIIHex)<sp/>{</highlight></codeline>
<codeline lineno="3664"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>/ASCIIHexDecode<sp/>filter\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3666"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>/ASCII85Decode<sp/>filter\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(useFlate)<sp/>{</highlight></codeline>
<codeline lineno="3669"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>/FlateDecode<sp/>filter\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(useLZW)<sp/>{</highlight></codeline>
<codeline lineno="3671"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>/LZWDecode<sp/>filter\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3673"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>/RunLengthDecode<sp/>filter\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;&gt;&gt;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(useBinary)<sp/>{</highlight></codeline>
<codeline lineno="3677"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>nothing<sp/>to<sp/>do<sp/>*/</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(useASCIIHex)<sp/>{</highlight></codeline>
<codeline lineno="3679"><highlight class="normal"><sp/><sp/><sp/><sp/>str<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_a_s_c_i_i_hex_encoder" kindref="compound">ASCIIHexEncoder</ref>(str);</highlight></codeline>
<codeline lineno="3680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3681"><highlight class="normal"><sp/><sp/><sp/><sp/>str<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_a_s_c_i_i85_encoder" kindref="compound">ASCII85Encoder</ref>(str);</highlight></codeline>
<codeline lineno="3682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>str-&gt;reset();</highlight></codeline>
<codeline lineno="3684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(useBinary)<sp/>{</highlight></codeline>
<codeline lineno="3685"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Count<sp/>the<sp/>bytes<sp/>to<sp/>write<sp/>a<sp/>document<sp/>comment</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3686"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3687"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(str-&gt;getChar()<sp/>!=<sp/>EOF)<sp/>{</highlight></codeline>
<codeline lineno="3688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>len++;</highlight></codeline>
<codeline lineno="3689"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3690"><highlight class="normal"><sp/><sp/><sp/><sp/>str-&gt;reset();</highlight></codeline>
<codeline lineno="3691"><highlight class="normal"><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;%%BeginData:<sp/>{0:d}<sp/>Binary<sp/>Bytes\n&quot;</highlight><highlight class="normal">,<sp/>len+6+1);</highlight></codeline>
<codeline lineno="3692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;image\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((c<sp/>=<sp/>str-&gt;getChar())<sp/>!=<sp/>EOF)<sp/>{</highlight></codeline>
<codeline lineno="3695"><highlight class="normal"><sp/><sp/><sp/><sp/>writePSChar(c);</highlight></codeline>
<codeline lineno="3696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>str-&gt;close();</highlight></codeline>
<codeline lineno="3698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>str;</highlight></codeline>
<codeline lineno="3699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>str0;</highlight></codeline>
<codeline lineno="3700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePSChar(</highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(useBinary)<sp/>{</highlight></codeline>
<codeline lineno="3702"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;%%EndData\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>processColors<sp/>|=<sp/>(numComps<sp/>==<sp/>1)<sp/>?<sp/>psProcessBlack<sp/>:<sp/>psProcessCMYK;</highlight></codeline>
<codeline lineno="3705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3706"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3707"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;grestore\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3708"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3709"><highlight class="normal"></highlight></codeline>
<codeline lineno="3710"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>splashOut;</highlight></codeline>
<codeline lineno="3711"><highlight class="normal"></highlight></codeline>
<codeline lineno="3712"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>finish<sp/>the<sp/>PS<sp/>page</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3713"><highlight class="normal"><sp/><sp/>endPage();</highlight></codeline>
<codeline lineno="3714"><highlight class="normal"></highlight></codeline>
<codeline lineno="3715"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="3716"><highlight class="normal"></highlight></codeline>
<codeline lineno="3717"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/>//<sp/>HAVE_SPLASH</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3718"><highlight class="normal"></highlight></codeline>
<codeline lineno="3719"><highlight class="normal"><sp/><sp/>error(errSyntaxWarning,<sp/>-1,</highlight></codeline>
<codeline lineno="3720"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;PDF<sp/>page<sp/>uses<sp/>transparency<sp/>and<sp/>PSOutputDev<sp/>was<sp/>built<sp/>without&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3721"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>the<sp/>Splash<sp/>rasterizer<sp/>-<sp/>output<sp/>may<sp/>not<sp/>be<sp/>correct&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3722"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gTrue;</highlight></codeline>
<codeline lineno="3723"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>HAVE_SPLASH</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3724"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3725"><highlight class="normal"></highlight></codeline>
<codeline lineno="3726"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PSOutputDev::startPage(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pageNum,<sp/><ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state,<sp/><ref refid="class_x_ref" kindref="compound">XRef</ref><sp/>*xrefA)<sp/>{</highlight></codeline>
<codeline lineno="3727"><highlight class="normal"><sp/><sp/><ref refid="class_page" kindref="compound">Page</ref><sp/>*page;</highlight></codeline>
<codeline lineno="3728"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x1,<sp/>y1,<sp/>x2,<sp/>y2,<sp/>width,<sp/>height,<sp/>t;</highlight></codeline>
<codeline lineno="3729"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>imgWidth,<sp/>imgHeight,<sp/>imgWidth2,<sp/>imgHeight2;</highlight></codeline>
<codeline lineno="3730"><highlight class="normal"><sp/><sp/>GBool<sp/>landscape;</highlight></codeline>
<codeline lineno="3731"><highlight class="normal"><sp/><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*s;</highlight></codeline>
<codeline lineno="3732"><highlight class="normal"><sp/><sp/><ref refid="struct_p_s_out_paper_size" kindref="compound">PSOutPaperSize</ref><sp/>*paperSize;</highlight></codeline>
<codeline lineno="3733"><highlight class="normal"></highlight></codeline>
<codeline lineno="3734"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!postInitDone)<sp/>{</highlight></codeline>
<codeline lineno="3735"><highlight class="normal"><sp/><sp/><sp/><sp/>postInit();</highlight></codeline>
<codeline lineno="3736"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3737"><highlight class="normal"><sp/><sp/>xref<sp/>=<sp/>xrefA;</highlight></codeline>
<codeline lineno="3738"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mode<sp/>==<sp/>psModePS)<sp/>{</highlight></codeline>
<codeline lineno="3739"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>pageLabel;</highlight></codeline>
<codeline lineno="3740"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GBool<sp/>gotLabel<sp/>=<sp/>doc-&gt;getCatalog()-&gt;indexToLabel(pageNum<sp/>-1,<sp/>&amp;pageLabel);</highlight></codeline>
<codeline lineno="3741"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(gotLabel)<sp/>{</highlight></codeline>
<codeline lineno="3742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>See<sp/>bug13338<sp/>for<sp/>why<sp/>we<sp/>try<sp/>to<sp/>avoid<sp/>parentheses...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GBool<sp/>needParens;</highlight></codeline>
<codeline lineno="3744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*filteredString<sp/>=<sp/>filterPSLabel(&amp;pageLabel,<sp/>&amp;needParens);</highlight></codeline>
<codeline lineno="3745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(needParens)<sp/>{</highlight></codeline>
<codeline lineno="3746"><highlight class="normal"><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;%%Page:<sp/>({0:t})<sp/>{1:d}\n&quot;</highlight><highlight class="normal">,<sp/>filteredString,<sp/>seqPage);</highlight></codeline>
<codeline lineno="3747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3748"><highlight class="normal"><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;%%Page:<sp/>{0:t}<sp/>{1:d}\n&quot;</highlight><highlight class="normal">,<sp/>filteredString,<sp/>seqPage);</highlight></codeline>
<codeline lineno="3749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>filteredString;</highlight></codeline>
<codeline lineno="3751"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;%%Page:<sp/>{0:d}<sp/>{1:d}\n&quot;</highlight><highlight class="normal">,<sp/>pageNum,<sp/>seqPage);</highlight></codeline>
<codeline lineno="3753"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3754"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(paperMatch)<sp/>{</highlight></codeline>
<codeline lineno="3755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>page<sp/>=<sp/>doc-&gt;getCatalog()-&gt;getPage(pageNum);</highlight></codeline>
<codeline lineno="3756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>imgLLX<sp/>=<sp/>imgLLY<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(noCrop)<sp/>{</highlight></codeline>
<codeline lineno="3758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>imgURX<sp/>=<sp/>(int)ceil(page-&gt;getMediaWidth());</highlight></codeline>
<codeline lineno="3759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>imgURY<sp/>=<sp/>(int)ceil(page-&gt;getMediaHeight());</highlight></codeline>
<codeline lineno="3760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>imgURX<sp/>=<sp/>(int)ceil(page-&gt;getCropWidth());</highlight></codeline>
<codeline lineno="3762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>imgURY<sp/>=<sp/>(int)ceil(page-&gt;getCropHeight());</highlight></codeline>
<codeline lineno="3763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(state-&gt;getRotate()<sp/>==<sp/>90<sp/>||<sp/>state-&gt;getRotate()<sp/>==<sp/>270)<sp/>{</highlight></codeline>
<codeline lineno="3765"><highlight class="normal"><sp/><sp/><sp/><sp/>t<sp/>=<sp/>imgURX;</highlight></codeline>
<codeline lineno="3766"><highlight class="normal"><sp/><sp/><sp/><sp/>imgURX<sp/>=<sp/>imgURY;</highlight></codeline>
<codeline lineno="3767"><highlight class="normal"><sp/><sp/><sp/><sp/>imgURY<sp/>=<sp/>t;</highlight></codeline>
<codeline lineno="3768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3769"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3770"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3771"><highlight class="normal"></highlight></codeline>
<codeline lineno="3772"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>underlays</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3773"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(underlayCbk)<sp/>{</highlight></codeline>
<codeline lineno="3774"><highlight class="normal"><sp/><sp/><sp/><sp/>(*underlayCbk)(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>underlayCbkData);</highlight></codeline>
<codeline lineno="3775"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3776"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(overlayCbk)<sp/>{</highlight></codeline>
<codeline lineno="3777"><highlight class="normal"><sp/><sp/><sp/><sp/>saveState(NULL);</highlight></codeline>
<codeline lineno="3778"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3779"><highlight class="normal"></highlight></codeline>
<codeline lineno="3780"><highlight class="normal"><sp/><sp/>xScale<sp/>=<sp/>yScale<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="3781"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(mode)<sp/>{</highlight></codeline>
<codeline lineno="3782"><highlight class="normal"></highlight></codeline>
<codeline lineno="3783"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>psModePS:</highlight></codeline>
<codeline lineno="3784"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>rotate,<sp/>translate,<sp/>and<sp/>scale<sp/>page</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3785"><highlight class="normal"><sp/><sp/><sp/><sp/>imgWidth<sp/>=<sp/>imgURX<sp/>-<sp/>imgLLX;</highlight></codeline>
<codeline lineno="3786"><highlight class="normal"><sp/><sp/><sp/><sp/>imgHeight<sp/>=<sp/>imgURY<sp/>-<sp/>imgLLY;</highlight></codeline>
<codeline lineno="3787"><highlight class="normal"><sp/><sp/><sp/><sp/>x1<sp/>=<sp/>(int)floor(state-&gt;getX1());</highlight></codeline>
<codeline lineno="3788"><highlight class="normal"><sp/><sp/><sp/><sp/>y1<sp/>=<sp/>(int)floor(state-&gt;getY1());</highlight></codeline>
<codeline lineno="3789"><highlight class="normal"><sp/><sp/><sp/><sp/>x2<sp/>=<sp/>(int)ceil(state-&gt;getX2());</highlight></codeline>
<codeline lineno="3790"><highlight class="normal"><sp/><sp/><sp/><sp/>y2<sp/>=<sp/>(int)ceil(state-&gt;getY2());</highlight></codeline>
<codeline lineno="3791"><highlight class="normal"><sp/><sp/><sp/><sp/>width<sp/>=<sp/>x2<sp/>-<sp/>x1;</highlight></codeline>
<codeline lineno="3792"><highlight class="normal"><sp/><sp/><sp/><sp/>height<sp/>=<sp/>y2<sp/>-<sp/>y1;</highlight></codeline>
<codeline lineno="3793"><highlight class="normal"><sp/><sp/><sp/><sp/>tx<sp/>=<sp/>ty<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3794"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>rotation<sp/>and<sp/>portrait/landscape<sp/>mode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3795"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(paperMatch)<sp/>{</highlight></codeline>
<codeline lineno="3796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rotate<sp/>=<sp/>(360<sp/>-<sp/>state-&gt;getRotate())<sp/>%<sp/>360;</highlight></codeline>
<codeline lineno="3797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>landscape<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="3798"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rotate0<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="3799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rotate<sp/>=<sp/>(360<sp/>-<sp/>rotate0)<sp/>%<sp/>360;</highlight></codeline>
<codeline lineno="3800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>landscape<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="3801"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rotate<sp/>=<sp/>(360<sp/>-<sp/>state-&gt;getRotate())<sp/>%<sp/>360;</highlight></codeline>
<codeline lineno="3803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rotate<sp/>==<sp/>0<sp/>||<sp/>rotate<sp/>==<sp/>180)<sp/>{</highlight></codeline>
<codeline lineno="3804"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((width<sp/>&lt;<sp/>height<sp/>&amp;&amp;<sp/>imgWidth<sp/>&gt;<sp/>imgHeight<sp/>&amp;&amp;<sp/>height<sp/>&gt;<sp/>imgHeight)<sp/>||</highlight></codeline>
<codeline lineno="3805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(width<sp/>&gt;<sp/>height<sp/>&amp;&amp;<sp/>imgWidth<sp/>&lt;<sp/>imgHeight<sp/>&amp;&amp;<sp/>width<sp/>&gt;<sp/>imgWidth))<sp/>{</highlight></codeline>
<codeline lineno="3806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rotate<sp/>+=<sp/>90;</highlight></codeline>
<codeline lineno="3807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>landscape<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="3808"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>landscape<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="3810"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="comment">//<sp/>rotate<sp/>==<sp/>90<sp/>||<sp/>rotate<sp/>==<sp/>270</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3812"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((height<sp/>&lt;<sp/>width<sp/>&amp;&amp;<sp/>imgWidth<sp/>&gt;<sp/>imgHeight<sp/>&amp;&amp;<sp/>width<sp/>&gt;<sp/>imgHeight)<sp/>||</highlight></codeline>
<codeline lineno="3813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(height<sp/>&gt;<sp/>width<sp/>&amp;&amp;<sp/>imgWidth<sp/>&lt;<sp/>imgHeight<sp/>&amp;&amp;<sp/>height<sp/>&gt;<sp/>imgWidth))<sp/>{</highlight></codeline>
<codeline lineno="3814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rotate<sp/>=<sp/>270<sp/>-<sp/>rotate;</highlight></codeline>
<codeline lineno="3815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>landscape<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="3816"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>landscape<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="3818"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3820"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3821"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rotate<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="3822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>imgWidth2<sp/>=<sp/>imgWidth;</highlight></codeline>
<codeline lineno="3823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>imgHeight2<sp/>=<sp/>imgHeight;</highlight></codeline>
<codeline lineno="3824"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rotate<sp/>==<sp/>90)<sp/>{</highlight></codeline>
<codeline lineno="3825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ty<sp/>=<sp/>-imgWidth;</highlight></codeline>
<codeline lineno="3826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>imgWidth2<sp/>=<sp/>imgHeight;</highlight></codeline>
<codeline lineno="3827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>imgHeight2<sp/>=<sp/>imgWidth;</highlight></codeline>
<codeline lineno="3828"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rotate<sp/>==<sp/>180)<sp/>{</highlight></codeline>
<codeline lineno="3829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>imgWidth2<sp/>=<sp/>imgWidth;</highlight></codeline>
<codeline lineno="3830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>imgHeight2<sp/>=<sp/>imgHeight;</highlight></codeline>
<codeline lineno="3831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tx<sp/>=<sp/>-imgWidth;</highlight></codeline>
<codeline lineno="3832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ty<sp/>=<sp/>-imgHeight;</highlight></codeline>
<codeline lineno="3833"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="comment">//<sp/>rotate<sp/>==<sp/>270</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tx<sp/>=<sp/>-imgHeight;</highlight></codeline>
<codeline lineno="3835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>imgWidth2<sp/>=<sp/>imgHeight;</highlight></codeline>
<codeline lineno="3836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>imgHeight2<sp/>=<sp/>imgWidth;</highlight></codeline>
<codeline lineno="3837"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3838"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>shrink<sp/>or<sp/>expand</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3839"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(xScale0<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>yScale0<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="3840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xScale<sp/>=<sp/>xScale0;</highlight></codeline>
<codeline lineno="3841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>yScale<sp/>=<sp/>yScale0;</highlight></codeline>
<codeline lineno="3842"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((globalParams-&gt;getPSShrinkLarger()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>(width<sp/>&gt;<sp/>imgWidth2<sp/>||<sp/>height<sp/>&gt;<sp/>imgHeight2))<sp/>||</highlight></codeline>
<codeline lineno="3844"><highlight class="normal"><sp/><sp/><sp/><sp/>(globalParams-&gt;getPSExpandSmaller()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>(width<sp/>&lt;<sp/>imgWidth2<sp/>&amp;&amp;<sp/>height<sp/>&lt;<sp/>imgHeight2)))<sp/>{</highlight></codeline>
<codeline lineno="3846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xScale<sp/>=<sp/>(double)imgWidth2<sp/>/<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)width;</highlight></codeline>
<codeline lineno="3847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>yScale<sp/>=<sp/>(double)imgHeight2<sp/>/<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)height;</highlight></codeline>
<codeline lineno="3848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(yScale<sp/>&lt;<sp/>xScale)<sp/>{</highlight></codeline>
<codeline lineno="3849"><highlight class="normal"><sp/><sp/><sp/><sp/>xScale<sp/>=<sp/>yScale;</highlight></codeline>
<codeline lineno="3850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3851"><highlight class="normal"><sp/><sp/><sp/><sp/>yScale<sp/>=<sp/>xScale;</highlight></codeline>
<codeline lineno="3852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3853"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3854"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>deal<sp/>with<sp/>odd<sp/>bounding<sp/>boxes<sp/>or<sp/>clipping</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3855"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(clipLLX0<sp/>&lt;<sp/>clipURX0<sp/>&amp;&amp;<sp/>clipLLY0<sp/>&lt;<sp/>clipURY0)<sp/>{</highlight></codeline>
<codeline lineno="3856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tx<sp/>-=<sp/>xScale<sp/>*<sp/>clipLLX0;</highlight></codeline>
<codeline lineno="3857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ty<sp/>-=<sp/>yScale<sp/>*<sp/>clipLLY0;</highlight></codeline>
<codeline lineno="3858"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tx<sp/>-=<sp/>xScale<sp/>*<sp/>x1;</highlight></codeline>
<codeline lineno="3860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ty<sp/>-=<sp/>yScale<sp/>*<sp/>y1;</highlight></codeline>
<codeline lineno="3861"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3862"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>center</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3863"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tx0<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>ty0<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="3864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tx<sp/>+=<sp/>(rotate<sp/>==<sp/>0<sp/>||<sp/>rotate<sp/>==<sp/>180)<sp/>?<sp/>tx0<sp/>:<sp/>ty0;</highlight></codeline>
<codeline lineno="3865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ty<sp/>+=<sp/>(rotate<sp/>==<sp/>0<sp/>||<sp/>rotate<sp/>==<sp/>180)<sp/>?<sp/>ty0<sp/>:<sp/>-tx0;</highlight></codeline>
<codeline lineno="3866"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(globalParams-&gt;getPSCenter())<sp/>{</highlight></codeline>
<codeline lineno="3867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(clipLLX0<sp/>&lt;<sp/>clipURX0<sp/>&amp;&amp;<sp/>clipLLY0<sp/>&lt;<sp/>clipURY0)<sp/>{</highlight></codeline>
<codeline lineno="3868"><highlight class="normal"><sp/><sp/><sp/><sp/>tx<sp/>+=<sp/>(imgWidth2<sp/>-<sp/>xScale<sp/>*<sp/>(clipURX0<sp/>-<sp/>clipLLX0))<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="3869"><highlight class="normal"><sp/><sp/><sp/><sp/>ty<sp/>+=<sp/>(imgHeight2<sp/>-<sp/>yScale<sp/>*<sp/>(clipURY0<sp/>-<sp/>clipLLY0))<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="3870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3871"><highlight class="normal"><sp/><sp/><sp/><sp/>tx<sp/>+=<sp/>(imgWidth2<sp/>-<sp/>xScale<sp/>*<sp/>width)<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="3872"><highlight class="normal"><sp/><sp/><sp/><sp/>ty<sp/>+=<sp/>(imgHeight2<sp/>-<sp/>yScale<sp/>*<sp/>height)<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="3873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3874"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3875"><highlight class="normal"><sp/><sp/><sp/><sp/>tx<sp/>+=<sp/>(rotate<sp/>==<sp/>0<sp/>||<sp/>rotate<sp/>==<sp/>180)<sp/>?<sp/>imgLLX<sp/>:<sp/>imgLLY;</highlight></codeline>
<codeline lineno="3876"><highlight class="normal"><sp/><sp/><sp/><sp/>ty<sp/>+=<sp/>(rotate<sp/>==<sp/>0<sp/>||<sp/>rotate<sp/>==<sp/>180)<sp/>?<sp/>imgLLY<sp/>:<sp/>-imgLLX;</highlight></codeline>
<codeline lineno="3877"><highlight class="normal"></highlight></codeline>
<codeline lineno="3878"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(paperMatch)<sp/>{</highlight></codeline>
<codeline lineno="3879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>paperSize<sp/>=<sp/>(<ref refid="struct_p_s_out_paper_size" kindref="compound">PSOutPaperSize</ref><sp/>*)paperSizes-&gt;get(pagePaperSize[pageNum]);</highlight></codeline>
<codeline lineno="3880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;%%PageMedia:<sp/>{0:t}\n&quot;</highlight><highlight class="normal">,<sp/>paperSize-&gt;name);</highlight></codeline>
<codeline lineno="3881"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3882"><highlight class="normal"></highlight></codeline>
<codeline lineno="3883"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>matrix<sp/>with<sp/>the<sp/>same<sp/>transform<sp/>that<sp/>will<sp/>be<sp/>output<sp/>to<sp/>PS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3884"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_matrix" kindref="compound">Matrix</ref><sp/>m;</highlight></codeline>
<codeline lineno="3885"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(rotate)<sp/>{</highlight></codeline>
<codeline lineno="3886"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3887"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:</highlight></codeline>
<codeline lineno="3888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m.init(1,<sp/>0,</highlight></codeline>
<codeline lineno="3889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/>1,</highlight></codeline>
<codeline lineno="3890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="3891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3892"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>90:</highlight></codeline>
<codeline lineno="3893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m.init(0,<sp/><sp/>1,</highlight></codeline>
<codeline lineno="3894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-1,<sp/>0,</highlight></codeline>
<codeline lineno="3895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/>0);</highlight></codeline>
<codeline lineno="3896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3897"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>180:</highlight></codeline>
<codeline lineno="3898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m.init(-1,<sp/>0,</highlight></codeline>
<codeline lineno="3899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/>-1,</highlight></codeline>
<codeline lineno="3900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/>0);</highlight></codeline>
<codeline lineno="3901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3902"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>270:</highlight></codeline>
<codeline lineno="3903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m.init(0,<sp/>-1,</highlight></codeline>
<codeline lineno="3904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1,<sp/><sp/>0,</highlight></codeline>
<codeline lineno="3905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/>0);</highlight></codeline>
<codeline lineno="3906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3907"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3908"><highlight class="normal"><sp/><sp/><sp/><sp/>m.translate(tx,<sp/>ty);</highlight></codeline>
<codeline lineno="3909"><highlight class="normal"><sp/><sp/><sp/><sp/>m.scale(xScale,<sp/>yScale);</highlight></codeline>
<codeline lineno="3910"><highlight class="normal"></highlight></codeline>
<codeline lineno="3911"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>bboxX1,<sp/>bboxY1,<sp/>bboxX2,<sp/>bboxY2;</highlight></codeline>
<codeline lineno="3912"><highlight class="normal"><sp/><sp/><sp/><sp/>m.transform(0,<sp/>0,<sp/>&amp;bboxX1,<sp/>&amp;bboxY1);</highlight></codeline>
<codeline lineno="3913"><highlight class="normal"><sp/><sp/><sp/><sp/>m.transform(width,<sp/>height,<sp/>&amp;bboxX2,<sp/>&amp;bboxY2);</highlight></codeline>
<codeline lineno="3914"><highlight class="normal"></highlight></codeline>
<codeline lineno="3915"><highlight class="normal"><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;%%PageBoundingBox:<sp/>{0:g}<sp/>{1:g}<sp/>{2:g}<sp/>{3:g}\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>floor(std::min(bboxX1,<sp/>bboxX2)),</highlight></codeline>
<codeline lineno="3917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>floor(std::min(bboxY1,<sp/>bboxY2)),</highlight></codeline>
<codeline lineno="3918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ceil<sp/>(std::max(bboxX1,<sp/>bboxX2)),</highlight></codeline>
<codeline lineno="3919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ceil<sp/>(std::max(bboxY1,<sp/>bboxY2)));</highlight></codeline>
<codeline lineno="3920"><highlight class="normal"></highlight></codeline>
<codeline lineno="3921"><highlight class="normal"><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;%%PageOrientation:<sp/>{0:s}\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>landscape<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;Landscape&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;Portrait&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3923"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;%%BeginPageSetup\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3924"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(paperMatch)<sp/>{</highlight></codeline>
<codeline lineno="3925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;{0:d}<sp/>{1:d}<sp/>pdfSetupPaper\n&quot;</highlight><highlight class="normal">,<sp/>imgURX,<sp/>imgURY);</highlight></codeline>
<codeline lineno="3926"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3927"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;pdfStartPage\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3928"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rotate)</highlight></codeline>
<codeline lineno="3929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;{0:d}<sp/>rotate\n&quot;</highlight><highlight class="normal">,<sp/>rotate);</highlight></codeline>
<codeline lineno="3930"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tx<sp/>!=<sp/>0<sp/>||<sp/>ty<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="3931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;{0:.6g}<sp/>{1:.6g}<sp/>translate\n&quot;</highlight><highlight class="normal">,<sp/>tx,<sp/>ty);</highlight></codeline>
<codeline lineno="3932"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3933"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(xScale<sp/>!=<sp/>1<sp/>||<sp/>yScale<sp/>!=<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="3934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;{0:.6f}<sp/>{1:.6f}<sp/>scale\n&quot;</highlight><highlight class="normal">,<sp/>xScale,<sp/>yScale);</highlight></codeline>
<codeline lineno="3935"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3936"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(clipLLX0<sp/>&lt;<sp/>clipURX0<sp/>&amp;&amp;<sp/>clipLLY0<sp/>&lt;<sp/>clipURY0)<sp/>{</highlight></codeline>
<codeline lineno="3937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;{0:.6g}<sp/>{1:.6g}<sp/>{2:.6g}<sp/>{3:.6g}<sp/>re<sp/>W\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clipLLX0,<sp/>clipLLY0,<sp/>clipURX0<sp/>-<sp/>clipLLX0,<sp/>clipURY0<sp/>-<sp/>clipLLY0);</highlight></codeline>
<codeline lineno="3939"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;{0:d}<sp/>{1:d}<sp/>{2:d}<sp/>{3:d}<sp/>re<sp/>W\n&quot;</highlight><highlight class="normal">,<sp/>x1,<sp/>y1,<sp/>x2<sp/>-<sp/>x1,<sp/>y2<sp/>-<sp/>y1);</highlight></codeline>
<codeline lineno="3941"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3942"><highlight class="normal"></highlight></codeline>
<codeline lineno="3943"><highlight class="normal"><sp/><sp/><sp/><sp/>++seqPage;</highlight></codeline>
<codeline lineno="3944"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3945"><highlight class="normal"></highlight></codeline>
<codeline lineno="3946"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>psModeEPS:</highlight></codeline>
<codeline lineno="3947"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;pdfStartPage\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3948"><highlight class="normal"><sp/><sp/><sp/><sp/>tx<sp/>=<sp/>ty<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3949"><highlight class="normal"><sp/><sp/><sp/><sp/>rotate<sp/>=<sp/>(360<sp/>-<sp/>state-&gt;getRotate())<sp/>%<sp/>360;</highlight></codeline>
<codeline lineno="3950"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rotate<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="3951"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rotate<sp/>==<sp/>90)<sp/>{</highlight></codeline>
<codeline lineno="3952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;90<sp/>rotate\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tx<sp/>=<sp/>-epsX1;</highlight></codeline>
<codeline lineno="3954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ty<sp/>=<sp/>-epsY2;</highlight></codeline>
<codeline lineno="3955"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rotate<sp/>==<sp/>180)<sp/>{</highlight></codeline>
<codeline lineno="3956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;180<sp/>rotate\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tx<sp/>=<sp/>-(epsX1<sp/>+<sp/>epsX2);</highlight></codeline>
<codeline lineno="3958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ty<sp/>=<sp/>-(epsY1<sp/>+<sp/>epsY2);</highlight></codeline>
<codeline lineno="3959"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="comment">//<sp/>rotate<sp/>==<sp/>270</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;270<sp/>rotate\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tx<sp/>=<sp/>-epsX2;</highlight></codeline>
<codeline lineno="3962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ty<sp/>=<sp/>-epsY1;</highlight></codeline>
<codeline lineno="3963"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3964"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tx<sp/>!=<sp/>0<sp/>||<sp/>ty<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="3965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;{0:.6g}<sp/>{1:.6g}<sp/>translate\n&quot;</highlight><highlight class="normal">,<sp/>tx,<sp/>ty);</highlight></codeline>
<codeline lineno="3966"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3967"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3968"><highlight class="normal"></highlight></codeline>
<codeline lineno="3969"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>psModeForm:</highlight></codeline>
<codeline lineno="3970"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;/PaintProc<sp/>{\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3971"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;begin<sp/>xpdf<sp/>begin\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3972"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;pdfStartPage\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3973"><highlight class="normal"><sp/><sp/><sp/><sp/>tx<sp/>=<sp/>ty<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3974"><highlight class="normal"><sp/><sp/><sp/><sp/>rotate<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3975"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3976"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3977"><highlight class="normal"></highlight></codeline>
<codeline lineno="3978"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(customCodeCbk)<sp/>{</highlight></codeline>
<codeline lineno="3979"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((s<sp/>=<sp/>(*customCodeCbk)(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>psOutCustomPageSetup,<sp/>pageNum,</highlight></codeline>
<codeline lineno="3980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>customCodeCbkData)))<sp/>{</highlight></codeline>
<codeline lineno="3981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePS(s-&gt;getCString());</highlight></codeline>
<codeline lineno="3982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>s;</highlight></codeline>
<codeline lineno="3983"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3984"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3985"><highlight class="normal"></highlight></codeline>
<codeline lineno="3986"><highlight class="normal"><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;%%EndPageSetup\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3987"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3988"><highlight class="normal"></highlight></codeline>
<codeline lineno="3989"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PSOutputDev::endPage()<sp/>{</highlight></codeline>
<codeline lineno="3990"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(overlayCbk)<sp/>{</highlight></codeline>
<codeline lineno="3991"><highlight class="normal"><sp/><sp/><sp/><sp/>restoreState(NULL);</highlight></codeline>
<codeline lineno="3992"><highlight class="normal"><sp/><sp/><sp/><sp/>(*overlayCbk)(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>overlayCbkData);</highlight></codeline>
<codeline lineno="3993"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3994"><highlight class="normal"></highlight></codeline>
<codeline lineno="3995"><highlight class="normal"></highlight></codeline>
<codeline lineno="3996"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mode<sp/>==<sp/>psModeForm)<sp/>{</highlight></codeline>
<codeline lineno="3997"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;pdfEndPage\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3998"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;end<sp/>end\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3999"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;}<sp/>def\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4000"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;end<sp/>end\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4001"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4002"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!manualCtrl)<sp/>{</highlight></codeline>
<codeline lineno="4003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;showpage\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4004"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;%%PageTrailer\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePageTrailer();</highlight></codeline>
<codeline lineno="4007"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4008"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4009"><highlight class="normal"></highlight></codeline>
<codeline lineno="4010"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PSOutputDev::saveState(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state)<sp/>{</highlight></codeline>
<codeline lineno="4011"><highlight class="normal"><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;q\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4012"><highlight class="normal"><sp/><sp/>++numSaves;</highlight></codeline>
<codeline lineno="4013"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4014"><highlight class="normal"></highlight></codeline>
<codeline lineno="4015"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PSOutputDev::restoreState(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state)<sp/>{</highlight></codeline>
<codeline lineno="4016"><highlight class="normal"><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;Q\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4017"><highlight class="normal"><sp/><sp/>--numSaves;</highlight></codeline>
<codeline lineno="4018"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4019"><highlight class="normal"></highlight></codeline>
<codeline lineno="4020"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PSOutputDev::updateCTM(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>m11,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>m12,</highlight></codeline>
<codeline lineno="4021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>m21,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>m22,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>m31,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>m32)<sp/>{</highlight></codeline>
<codeline lineno="4022"><highlight class="normal"><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;[{0:.6gs}<sp/>{1:.6gs}<sp/>{2:.6gs}<sp/>{3:.6gs}<sp/>{4:.6gs}<sp/>{5:.6gs}]<sp/>cm\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="4023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m11,<sp/>m12,<sp/>m21,<sp/>m22,<sp/>m31,<sp/>m32);</highlight></codeline>
<codeline lineno="4024"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4025"><highlight class="normal"></highlight></codeline>
<codeline lineno="4026"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PSOutputDev::updateLineDash(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state)<sp/>{</highlight></codeline>
<codeline lineno="4027"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*dash;</highlight></codeline>
<codeline lineno="4028"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>start;</highlight></codeline>
<codeline lineno="4029"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>length,<sp/>i;</highlight></codeline>
<codeline lineno="4030"><highlight class="normal"></highlight></codeline>
<codeline lineno="4031"><highlight class="normal"><sp/><sp/>state-&gt;getLineDash(&amp;dash,<sp/>&amp;length,<sp/>&amp;start);</highlight></codeline>
<codeline lineno="4032"><highlight class="normal"><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;[&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4033"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>length;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="4034"><highlight class="normal"><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;{0:.6g}{1:w}&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="4035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dash[i]<sp/>&lt;<sp/>0<sp/>?<sp/>0<sp/>:<sp/>dash[i],</highlight></codeline>
<codeline lineno="4036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(i<sp/>==<sp/>length-1)<sp/>?<sp/>0<sp/>:<sp/>1);</highlight></codeline>
<codeline lineno="4037"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4038"><highlight class="normal"><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;]<sp/>{0:.6g}<sp/>d\n&quot;</highlight><highlight class="normal">,<sp/>start);</highlight></codeline>
<codeline lineno="4039"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4040"><highlight class="normal"></highlight></codeline>
<codeline lineno="4041"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PSOutputDev::updateFlatness(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state)<sp/>{</highlight></codeline>
<codeline lineno="4042"><highlight class="normal"><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;{0:d}<sp/>i\n&quot;</highlight><highlight class="normal">,<sp/>state-&gt;getFlatness());</highlight></codeline>
<codeline lineno="4043"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4044"><highlight class="normal"></highlight></codeline>
<codeline lineno="4045"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PSOutputDev::updateLineJoin(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state)<sp/>{</highlight></codeline>
<codeline lineno="4046"><highlight class="normal"><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;{0:d}<sp/>j\n&quot;</highlight><highlight class="normal">,<sp/>state-&gt;getLineJoin());</highlight></codeline>
<codeline lineno="4047"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4048"><highlight class="normal"></highlight></codeline>
<codeline lineno="4049"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PSOutputDev::updateLineCap(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state)<sp/>{</highlight></codeline>
<codeline lineno="4050"><highlight class="normal"><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;{0:d}<sp/>J\n&quot;</highlight><highlight class="normal">,<sp/>state-&gt;getLineCap());</highlight></codeline>
<codeline lineno="4051"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4052"><highlight class="normal"></highlight></codeline>
<codeline lineno="4053"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PSOutputDev::updateMiterLimit(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state)<sp/>{</highlight></codeline>
<codeline lineno="4054"><highlight class="normal"><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;{0:.6g}<sp/>M\n&quot;</highlight><highlight class="normal">,<sp/>state-&gt;getMiterLimit());</highlight></codeline>
<codeline lineno="4055"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4056"><highlight class="normal"></highlight></codeline>
<codeline lineno="4057"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PSOutputDev::updateLineWidth(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state)<sp/>{</highlight></codeline>
<codeline lineno="4058"><highlight class="normal"><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;{0:.6g}<sp/>w\n&quot;</highlight><highlight class="normal">,<sp/>state-&gt;getLineWidth());</highlight></codeline>
<codeline lineno="4059"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4060"><highlight class="normal"></highlight></codeline>
<codeline lineno="4061"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PSOutputDev::updateFillColorSpace(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state)<sp/>{</highlight></codeline>
<codeline lineno="4062"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(inUncoloredPattern)<sp/>{</highlight></codeline>
<codeline lineno="4063"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4064"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4065"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(level)<sp/>{</highlight></codeline>
<codeline lineno="4066"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>psLevel1:</highlight></codeline>
<codeline lineno="4067"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>psLevel1Sep:</highlight></codeline>
<codeline lineno="4068"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4069"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>psLevel2:</highlight></codeline>
<codeline lineno="4070"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>psLevel3:</highlight></codeline>
<codeline lineno="4071"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(state-&gt;getFillColorSpace()-&gt;getMode()<sp/>!=<sp/>csPattern)<sp/>{</highlight></codeline>
<codeline lineno="4072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dumpColorSpaceL2(state-&gt;getFillColorSpace(),<sp/>gTrue,<sp/>gFalse,<sp/>gFalse);</highlight></codeline>
<codeline lineno="4073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;<sp/>cs\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4074"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4075"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4076"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>psLevel2Sep:</highlight></codeline>
<codeline lineno="4077"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>psLevel3Sep:</highlight></codeline>
<codeline lineno="4078"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4079"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4080"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4081"><highlight class="normal"></highlight></codeline>
<codeline lineno="4082"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PSOutputDev::updateStrokeColorSpace(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state)<sp/>{</highlight></codeline>
<codeline lineno="4083"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(inUncoloredPattern)<sp/>{</highlight></codeline>
<codeline lineno="4084"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4085"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4086"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(level)<sp/>{</highlight></codeline>
<codeline lineno="4087"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>psLevel1:</highlight></codeline>
<codeline lineno="4088"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>psLevel1Sep:</highlight></codeline>
<codeline lineno="4089"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4090"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>psLevel2:</highlight></codeline>
<codeline lineno="4091"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>psLevel3:</highlight></codeline>
<codeline lineno="4092"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(state-&gt;getStrokeColorSpace()-&gt;getMode()<sp/>!=<sp/>csPattern)<sp/>{</highlight></codeline>
<codeline lineno="4093"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dumpColorSpaceL2(state-&gt;getStrokeColorSpace(),<sp/>gTrue,<sp/>gFalse,<sp/>gFalse);</highlight></codeline>
<codeline lineno="4094"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;<sp/>CS\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4095"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4096"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4097"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>psLevel2Sep:</highlight></codeline>
<codeline lineno="4098"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>psLevel3Sep:</highlight></codeline>
<codeline lineno="4099"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4100"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4101"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4102"><highlight class="normal"></highlight></codeline>
<codeline lineno="4103"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PSOutputDev::updateFillColor(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state)<sp/>{</highlight></codeline>
<codeline lineno="4104"><highlight class="normal"><sp/><sp/><ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/><ref refid="structcolor" kindref="compound">color</ref>;</highlight></codeline>
<codeline lineno="4105"><highlight class="normal"><sp/><sp/><ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>*colorPtr;</highlight></codeline>
<codeline lineno="4106"><highlight class="normal"><sp/><sp/>GfxGray<sp/>gray;</highlight></codeline>
<codeline lineno="4107"><highlight class="normal"><sp/><sp/><ref refid="struct_gfx_c_m_y_k" kindref="compound">GfxCMYK</ref><sp/>cmyk;</highlight></codeline>
<codeline lineno="4108"><highlight class="normal"><sp/><sp/><ref refid="class_gfx_separation_color_space" kindref="compound">GfxSeparationColorSpace</ref><sp/>*sepCS;</highlight></codeline>
<codeline lineno="4109"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>c,<sp/>m,<sp/>y,<sp/>k;</highlight></codeline>
<codeline lineno="4110"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="4111"><highlight class="normal"></highlight></codeline>
<codeline lineno="4112"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(inUncoloredPattern)<sp/>{</highlight></codeline>
<codeline lineno="4113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4114"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4115"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(level)<sp/>{</highlight></codeline>
<codeline lineno="4116"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>psLevel1:</highlight></codeline>
<codeline lineno="4117"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;getFillGray(&amp;gray);</highlight></codeline>
<codeline lineno="4118"><highlight class="normal"><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;{0:.4g}<sp/>g\n&quot;</highlight><highlight class="normal">,<sp/>colToDbl(gray));</highlight></codeline>
<codeline lineno="4119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4120"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>psLevel1Sep:</highlight></codeline>
<codeline lineno="4121"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;getFillCMYK(&amp;cmyk);</highlight></codeline>
<codeline lineno="4122"><highlight class="normal"><sp/><sp/><sp/><sp/>c<sp/>=<sp/>colToDbl(cmyk.c);</highlight></codeline>
<codeline lineno="4123"><highlight class="normal"><sp/><sp/><sp/><sp/>m<sp/>=<sp/>colToDbl(cmyk.m);</highlight></codeline>
<codeline lineno="4124"><highlight class="normal"><sp/><sp/><sp/><sp/>y<sp/>=<sp/>colToDbl(cmyk.y);</highlight></codeline>
<codeline lineno="4125"><highlight class="normal"><sp/><sp/><sp/><sp/>k<sp/>=<sp/>colToDbl(cmyk.k);</highlight></codeline>
<codeline lineno="4126"><highlight class="normal"><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;{0:.4g}<sp/>{1:.4g}<sp/>{2:.4g}<sp/>{3:.4g}<sp/>k\n&quot;</highlight><highlight class="normal">,<sp/>c,<sp/>m,<sp/>y,<sp/>k);</highlight></codeline>
<codeline lineno="4127"><highlight class="normal"><sp/><sp/><sp/><sp/>addProcessColor(c,<sp/>m,<sp/>y,<sp/>k);</highlight></codeline>
<codeline lineno="4128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4129"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>psLevel2:</highlight></codeline>
<codeline lineno="4130"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>psLevel3:</highlight></codeline>
<codeline lineno="4131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(state-&gt;getFillColorSpace()-&gt;getMode()<sp/>!=<sp/>csPattern)<sp/>{</highlight></codeline>
<codeline lineno="4132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>colorPtr<sp/>=<sp/>state-&gt;getFillColor();</highlight></codeline>
<codeline lineno="4133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;[&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>state-&gt;getFillColorSpace()-&gt;getNComps();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="4135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="4136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4138"><highlight class="normal"><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;{0:.4g}&quot;</highlight><highlight class="normal">,<sp/>colToDbl(colorPtr-&gt;c[i]));</highlight></codeline>
<codeline lineno="4139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;]<sp/>sc\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4141"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4143"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>psLevel2Sep:</highlight></codeline>
<codeline lineno="4144"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>psLevel3Sep:</highlight></codeline>
<codeline lineno="4145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(state-&gt;getFillColorSpace()-&gt;getMode()<sp/>==<sp/>csSeparation)<sp/>{</highlight></codeline>
<codeline lineno="4146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sepCS<sp/>=<sp/>(<ref refid="class_gfx_separation_color_space" kindref="compound">GfxSeparationColorSpace</ref><sp/>*)state-&gt;getFillColorSpace();</highlight></codeline>
<codeline lineno="4147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>color.c[0]<sp/>=<sp/>gfxColorComp1;</highlight></codeline>
<codeline lineno="4148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sepCS-&gt;getCMYK(&amp;color,<sp/>&amp;cmyk);</highlight></codeline>
<codeline lineno="4149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;{0:.4g}<sp/>{1:.4g}<sp/>{2:.4g}<sp/>{3:.4g}<sp/>{4:.4g}<sp/>({5:t})<sp/>ck\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="4150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>colToDbl(state-&gt;getFillColor()-&gt;c[0]),</highlight></codeline>
<codeline lineno="4151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>colToDbl(cmyk.c),<sp/>colToDbl(cmyk.m),</highlight></codeline>
<codeline lineno="4152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>colToDbl(cmyk.y),<sp/>colToDbl(cmyk.k),</highlight></codeline>
<codeline lineno="4153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sepCS-&gt;getName());</highlight></codeline>
<codeline lineno="4154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>addCustomColor(sepCS);</highlight></codeline>
<codeline lineno="4155"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;getFillCMYK(&amp;cmyk);</highlight></codeline>
<codeline lineno="4157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>colToDbl(cmyk.c);</highlight></codeline>
<codeline lineno="4158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m<sp/>=<sp/>colToDbl(cmyk.m);</highlight></codeline>
<codeline lineno="4159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>=<sp/>colToDbl(cmyk.y);</highlight></codeline>
<codeline lineno="4160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>k<sp/>=<sp/>colToDbl(cmyk.k);</highlight></codeline>
<codeline lineno="4161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;{0:.4g}<sp/>{1:.4g}<sp/>{2:.4g}<sp/>{3:.4g}<sp/>k\n&quot;</highlight><highlight class="normal">,<sp/>c,<sp/>m,<sp/>y,<sp/>k);</highlight></codeline>
<codeline lineno="4162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>addProcessColor(c,<sp/>m,<sp/>y,<sp/>k);</highlight></codeline>
<codeline lineno="4163"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4165"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4166"><highlight class="normal"><sp/><sp/>t3Cacheable<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="4167"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4168"><highlight class="normal"></highlight></codeline>
<codeline lineno="4169"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PSOutputDev::updateStrokeColor(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state)<sp/>{</highlight></codeline>
<codeline lineno="4170"><highlight class="normal"><sp/><sp/><ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/><ref refid="structcolor" kindref="compound">color</ref>;</highlight></codeline>
<codeline lineno="4171"><highlight class="normal"><sp/><sp/><ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>*colorPtr;</highlight></codeline>
<codeline lineno="4172"><highlight class="normal"><sp/><sp/>GfxGray<sp/>gray;</highlight></codeline>
<codeline lineno="4173"><highlight class="normal"><sp/><sp/><ref refid="struct_gfx_c_m_y_k" kindref="compound">GfxCMYK</ref><sp/>cmyk;</highlight></codeline>
<codeline lineno="4174"><highlight class="normal"><sp/><sp/><ref refid="class_gfx_separation_color_space" kindref="compound">GfxSeparationColorSpace</ref><sp/>*sepCS;</highlight></codeline>
<codeline lineno="4175"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>c,<sp/>m,<sp/>y,<sp/>k;</highlight></codeline>
<codeline lineno="4176"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="4177"><highlight class="normal"></highlight></codeline>
<codeline lineno="4178"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(inUncoloredPattern)<sp/>{</highlight></codeline>
<codeline lineno="4179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4180"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4181"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(level)<sp/>{</highlight></codeline>
<codeline lineno="4182"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>psLevel1:</highlight></codeline>
<codeline lineno="4183"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;getStrokeGray(&amp;gray);</highlight></codeline>
<codeline lineno="4184"><highlight class="normal"><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;{0:.4g}<sp/>G\n&quot;</highlight><highlight class="normal">,<sp/>colToDbl(gray));</highlight></codeline>
<codeline lineno="4185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4186"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>psLevel1Sep:</highlight></codeline>
<codeline lineno="4187"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;getStrokeCMYK(&amp;cmyk);</highlight></codeline>
<codeline lineno="4188"><highlight class="normal"><sp/><sp/><sp/><sp/>c<sp/>=<sp/>colToDbl(cmyk.c);</highlight></codeline>
<codeline lineno="4189"><highlight class="normal"><sp/><sp/><sp/><sp/>m<sp/>=<sp/>colToDbl(cmyk.m);</highlight></codeline>
<codeline lineno="4190"><highlight class="normal"><sp/><sp/><sp/><sp/>y<sp/>=<sp/>colToDbl(cmyk.y);</highlight></codeline>
<codeline lineno="4191"><highlight class="normal"><sp/><sp/><sp/><sp/>k<sp/>=<sp/>colToDbl(cmyk.k);</highlight></codeline>
<codeline lineno="4192"><highlight class="normal"><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;{0:.4g}<sp/>{1:.4g}<sp/>{2:.4g}<sp/>{3:.4g}<sp/>K\n&quot;</highlight><highlight class="normal">,<sp/>c,<sp/>m,<sp/>y,<sp/>k);</highlight></codeline>
<codeline lineno="4193"><highlight class="normal"><sp/><sp/><sp/><sp/>addProcessColor(c,<sp/>m,<sp/>y,<sp/>k);</highlight></codeline>
<codeline lineno="4194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4195"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>psLevel2:</highlight></codeline>
<codeline lineno="4196"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>psLevel3:</highlight></codeline>
<codeline lineno="4197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(state-&gt;getStrokeColorSpace()-&gt;getMode()<sp/>!=<sp/>csPattern)<sp/>{</highlight></codeline>
<codeline lineno="4198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>colorPtr<sp/>=<sp/>state-&gt;getStrokeColor();</highlight></codeline>
<codeline lineno="4199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;[&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>state-&gt;getStrokeColorSpace()-&gt;getNComps();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="4201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="4202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4203"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4204"><highlight class="normal"><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;{0:.4g}&quot;</highlight><highlight class="normal">,<sp/>colToDbl(colorPtr-&gt;c[i]));</highlight></codeline>
<codeline lineno="4205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;]<sp/>SC\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4207"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4208"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4209"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>psLevel2Sep:</highlight></codeline>
<codeline lineno="4210"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>psLevel3Sep:</highlight></codeline>
<codeline lineno="4211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(state-&gt;getStrokeColorSpace()-&gt;getMode()<sp/>==<sp/>csSeparation)<sp/>{</highlight></codeline>
<codeline lineno="4212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sepCS<sp/>=<sp/>(<ref refid="class_gfx_separation_color_space" kindref="compound">GfxSeparationColorSpace</ref><sp/>*)state-&gt;getStrokeColorSpace();</highlight></codeline>
<codeline lineno="4213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>color.c[0]<sp/>=<sp/>gfxColorComp1;</highlight></codeline>
<codeline lineno="4214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sepCS-&gt;getCMYK(&amp;color,<sp/>&amp;cmyk);</highlight></codeline>
<codeline lineno="4215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;{0:.4g}<sp/>{1:.4g}<sp/>{2:.4g}<sp/>{3:.4g}<sp/>{4:.4g}<sp/>({5:t})<sp/>CK\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="4216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>colToDbl(state-&gt;getStrokeColor()-&gt;c[0]),</highlight></codeline>
<codeline lineno="4217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>colToDbl(cmyk.c),<sp/>colToDbl(cmyk.m),</highlight></codeline>
<codeline lineno="4218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>colToDbl(cmyk.y),<sp/>colToDbl(cmyk.k),</highlight></codeline>
<codeline lineno="4219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sepCS-&gt;getName());</highlight></codeline>
<codeline lineno="4220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>addCustomColor(sepCS);</highlight></codeline>
<codeline lineno="4221"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;getStrokeCMYK(&amp;cmyk);</highlight></codeline>
<codeline lineno="4223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>colToDbl(cmyk.c);</highlight></codeline>
<codeline lineno="4224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m<sp/>=<sp/>colToDbl(cmyk.m);</highlight></codeline>
<codeline lineno="4225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>=<sp/>colToDbl(cmyk.y);</highlight></codeline>
<codeline lineno="4226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>k<sp/>=<sp/>colToDbl(cmyk.k);</highlight></codeline>
<codeline lineno="4227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;{0:.4g}<sp/>{1:.4g}<sp/>{2:.4g}<sp/>{3:.4g}<sp/>K\n&quot;</highlight><highlight class="normal">,<sp/>c,<sp/>m,<sp/>y,<sp/>k);</highlight></codeline>
<codeline lineno="4228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>addProcessColor(c,<sp/>m,<sp/>y,<sp/>k);</highlight></codeline>
<codeline lineno="4229"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4231"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4232"><highlight class="normal"><sp/><sp/>t3Cacheable<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="4233"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4234"><highlight class="normal"></highlight></codeline>
<codeline lineno="4235"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PSOutputDev::addProcessColor(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>c,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>m,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>k)<sp/>{</highlight></codeline>
<codeline lineno="4236"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="4237"><highlight class="normal"><sp/><sp/><sp/><sp/>processColors<sp/>|=<sp/>psProcessCyan;</highlight></codeline>
<codeline lineno="4238"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4239"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="4240"><highlight class="normal"><sp/><sp/><sp/><sp/>processColors<sp/>|=<sp/>psProcessMagenta;</highlight></codeline>
<codeline lineno="4241"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4242"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="4243"><highlight class="normal"><sp/><sp/><sp/><sp/>processColors<sp/>|=<sp/>psProcessYellow;</highlight></codeline>
<codeline lineno="4244"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4245"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(k<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="4246"><highlight class="normal"><sp/><sp/><sp/><sp/>processColors<sp/>|=<sp/>psProcessBlack;</highlight></codeline>
<codeline lineno="4247"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4248"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4249"><highlight class="normal"></highlight></codeline>
<codeline lineno="4250"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PSOutputDev::addCustomColor(<ref refid="class_gfx_separation_color_space" kindref="compound">GfxSeparationColorSpace</ref><sp/>*sepCS)<sp/>{</highlight></codeline>
<codeline lineno="4251"><highlight class="normal"><sp/><sp/><ref refid="class_p_s_out_custom_color" kindref="compound">PSOutCustomColor</ref><sp/>*cc;</highlight></codeline>
<codeline lineno="4252"><highlight class="normal"><sp/><sp/><ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/><ref refid="structcolor" kindref="compound">color</ref>;</highlight></codeline>
<codeline lineno="4253"><highlight class="normal"><sp/><sp/><ref refid="struct_gfx_c_m_y_k" kindref="compound">GfxCMYK</ref><sp/>cmyk;</highlight></codeline>
<codeline lineno="4254"><highlight class="normal"></highlight></codeline>
<codeline lineno="4255"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!sepCS-&gt;getName()-&gt;cmp(</highlight><highlight class="stringliteral">&quot;Black&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="4256"><highlight class="normal"><sp/><sp/><sp/><sp/>processColors<sp/>|=<sp/>psProcessBlack;</highlight></codeline>
<codeline lineno="4257"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4258"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4259"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!sepCS-&gt;getName()-&gt;cmp(</highlight><highlight class="stringliteral">&quot;Cyan&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="4260"><highlight class="normal"><sp/><sp/><sp/><sp/>processColors<sp/>|=<sp/>psProcessCyan;</highlight></codeline>
<codeline lineno="4261"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4262"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4263"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!sepCS-&gt;getName()-&gt;cmp(</highlight><highlight class="stringliteral">&quot;Yellow&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="4264"><highlight class="normal"><sp/><sp/><sp/><sp/>processColors<sp/>|=<sp/>psProcessYellow;</highlight></codeline>
<codeline lineno="4265"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4266"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4267"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!sepCS-&gt;getName()-&gt;cmp(</highlight><highlight class="stringliteral">&quot;Magenta&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="4268"><highlight class="normal"><sp/><sp/><sp/><sp/>processColors<sp/>|=<sp/>psProcessMagenta;</highlight></codeline>
<codeline lineno="4269"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4270"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4271"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!sepCS-&gt;getName()-&gt;cmp(</highlight><highlight class="stringliteral">&quot;All&quot;</highlight><highlight class="normal">))<sp/></highlight></codeline>
<codeline lineno="4272"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4273"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!sepCS-&gt;getName()-&gt;cmp(</highlight><highlight class="stringliteral">&quot;None&quot;</highlight><highlight class="normal">))<sp/></highlight></codeline>
<codeline lineno="4274"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4275"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(cc<sp/>=<sp/>customColors;<sp/>cc;<sp/>cc<sp/>=<sp/>cc-&gt;next)<sp/>{</highlight></codeline>
<codeline lineno="4276"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!cc-&gt;name-&gt;cmp(sepCS-&gt;getName()))<sp/>{</highlight></codeline>
<codeline lineno="4277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4278"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4279"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4280"><highlight class="normal"><sp/><sp/>color.c[0]<sp/>=<sp/>gfxColorComp1;</highlight></codeline>
<codeline lineno="4281"><highlight class="normal"><sp/><sp/>sepCS-&gt;getCMYK(&amp;color,<sp/>&amp;cmyk);</highlight></codeline>
<codeline lineno="4282"><highlight class="normal"><sp/><sp/>cc<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_p_s_out_custom_color" kindref="compound">PSOutCustomColor</ref>(colToDbl(cmyk.c),<sp/>colToDbl(cmyk.m),</highlight></codeline>
<codeline lineno="4283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>colToDbl(cmyk.y),<sp/>colToDbl(cmyk.k),</highlight></codeline>
<codeline lineno="4284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sepCS-&gt;getName()-&gt;copy());</highlight></codeline>
<codeline lineno="4285"><highlight class="normal"><sp/><sp/>cc-&gt;next<sp/>=<sp/>customColors;</highlight></codeline>
<codeline lineno="4286"><highlight class="normal"><sp/><sp/>customColors<sp/>=<sp/>cc;</highlight></codeline>
<codeline lineno="4287"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4288"><highlight class="normal"></highlight></codeline>
<codeline lineno="4289"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PSOutputDev::updateFillOverprint(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state)<sp/>{</highlight></codeline>
<codeline lineno="4290"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(level<sp/>&gt;=<sp/>psLevel2)<sp/>{</highlight></codeline>
<codeline lineno="4291"><highlight class="normal"><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;{0:s}<sp/>op\n&quot;</highlight><highlight class="normal">,<sp/>state-&gt;getFillOverprint()<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;true&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;false&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4292"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4293"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4294"><highlight class="normal"></highlight></codeline>
<codeline lineno="4295"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PSOutputDev::updateStrokeOverprint(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state)<sp/>{</highlight></codeline>
<codeline lineno="4296"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(level<sp/>&gt;=<sp/>psLevel2)<sp/>{</highlight></codeline>
<codeline lineno="4297"><highlight class="normal"><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;{0:s}<sp/>OP\n&quot;</highlight><highlight class="normal">,<sp/>state-&gt;getStrokeOverprint()<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;true&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;false&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4298"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4299"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4300"><highlight class="normal"></highlight></codeline>
<codeline lineno="4301"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PSOutputDev::updateOverprintMode(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state)<sp/>{</highlight></codeline>
<codeline lineno="4302"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(level<sp/>&gt;=<sp/>psLevel3)<sp/>{</highlight></codeline>
<codeline lineno="4303"><highlight class="normal"><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;{0:s}<sp/>opm\n&quot;</highlight><highlight class="normal">,<sp/>state-&gt;getOverprintMode()<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;true&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;false&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4304"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4305"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4306"><highlight class="normal"></highlight></codeline>
<codeline lineno="4307"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PSOutputDev::updateTransfer(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state)<sp/>{</highlight></codeline>
<codeline lineno="4308"><highlight class="normal"><sp/><sp/><ref refid="class_function" kindref="compound">Function</ref><sp/>**funcs;</highlight></codeline>
<codeline lineno="4309"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="4310"><highlight class="normal"></highlight></codeline>
<codeline lineno="4311"><highlight class="normal"><sp/><sp/>funcs<sp/>=<sp/>state-&gt;getTransfer();</highlight></codeline>
<codeline lineno="4312"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(funcs[0]<sp/>&amp;&amp;<sp/>funcs[1]<sp/>&amp;&amp;<sp/>funcs[2]<sp/>&amp;&amp;<sp/>funcs[3])<sp/>{</highlight></codeline>
<codeline lineno="4313"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(level<sp/>&gt;=<sp/>psLevel2)<sp/>{</highlight></codeline>
<codeline lineno="4314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>4;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="4315"><highlight class="normal"><sp/><sp/><sp/><sp/>cvtFunction(funcs[i]);</highlight></codeline>
<codeline lineno="4316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;setcolortransfer\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4318"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cvtFunction(funcs[3]);</highlight></codeline>
<codeline lineno="4320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;settransfer\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4321"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4322"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(funcs[0])<sp/>{</highlight></codeline>
<codeline lineno="4323"><highlight class="normal"><sp/><sp/><sp/><sp/>cvtFunction(funcs[0]);</highlight></codeline>
<codeline lineno="4324"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;settransfer\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4325"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4326"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;{}<sp/>settransfer\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4327"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4328"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4329"><highlight class="normal"></highlight></codeline>
<codeline lineno="4330"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PSOutputDev::updateFont(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state)<sp/>{</highlight></codeline>
<codeline lineno="4331"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(state-&gt;getFont())<sp/>{</highlight></codeline>
<codeline lineno="4332"><highlight class="normal"><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;/F{0:d}_{1:d}<sp/>{2:.6g}<sp/>Tf\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="4333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;getFont()-&gt;getID()-&gt;num,<sp/>state-&gt;getFont()-&gt;getID()-&gt;gen,</highlight></codeline>
<codeline lineno="4334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fabs(state-&gt;getFontSize())<sp/>&lt;<sp/>0.0001<sp/>?<sp/>0.0001</highlight></codeline>
<codeline lineno="4335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>state-&gt;getFontSize());</highlight></codeline>
<codeline lineno="4336"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4337"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4338"><highlight class="normal"></highlight></codeline>
<codeline lineno="4339"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PSOutputDev::updateTextMat(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state)<sp/>{</highlight></codeline>
<codeline lineno="4340"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*mat;</highlight></codeline>
<codeline lineno="4341"><highlight class="normal"></highlight></codeline>
<codeline lineno="4342"><highlight class="normal"><sp/><sp/>mat<sp/>=<sp/>state-&gt;getTextMat();</highlight></codeline>
<codeline lineno="4343"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabs(mat[0]<sp/>*<sp/>mat[3]<sp/>-<sp/>mat[1]<sp/>*<sp/>mat[2])<sp/>&lt;<sp/>0.00001)<sp/>{</highlight></codeline>
<codeline lineno="4344"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>avoid<sp/>a<sp/>singular<sp/>(or<sp/>close-to-singular)<sp/>matrix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4345"><highlight class="normal"><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;[0.00001<sp/>0<sp/>0<sp/>0.00001<sp/>{0:.6g}<sp/>{1:.6g}]<sp/>Tm\n&quot;</highlight><highlight class="normal">,<sp/>mat[4],<sp/>mat[5]);</highlight></codeline>
<codeline lineno="4346"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4347"><highlight class="normal"><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;[{0:.6g}<sp/>{1:.6g}<sp/>{2:.6g}<sp/>{3:.6g}<sp/>{4:.6g}<sp/>{5:.6g}]<sp/>Tm\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="4348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mat[0],<sp/>mat[1],<sp/>mat[2],<sp/>mat[3],<sp/>mat[4],<sp/>mat[5]);</highlight></codeline>
<codeline lineno="4349"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4350"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4351"><highlight class="normal"></highlight></codeline>
<codeline lineno="4352"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PSOutputDev::updateCharSpace(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state)<sp/>{</highlight></codeline>
<codeline lineno="4353"><highlight class="normal"><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;{0:.6g}<sp/>Tc\n&quot;</highlight><highlight class="normal">,<sp/>state-&gt;getCharSpace());</highlight></codeline>
<codeline lineno="4354"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4355"><highlight class="normal"></highlight></codeline>
<codeline lineno="4356"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PSOutputDev::updateRender(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state)<sp/>{</highlight></codeline>
<codeline lineno="4357"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rm;</highlight></codeline>
<codeline lineno="4358"><highlight class="normal"></highlight></codeline>
<codeline lineno="4359"><highlight class="normal"><sp/><sp/>rm<sp/>=<sp/>state-&gt;getRender();</highlight></codeline>
<codeline lineno="4360"><highlight class="normal"><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;{0:d}<sp/>Tr\n&quot;</highlight><highlight class="normal">,<sp/>rm);</highlight></codeline>
<codeline lineno="4361"><highlight class="normal"><sp/><sp/>rm<sp/>&amp;=<sp/>3;</highlight></codeline>
<codeline lineno="4362"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rm<sp/>!=<sp/>0<sp/>&amp;&amp;<sp/>rm<sp/>!=<sp/>3)<sp/>{</highlight></codeline>
<codeline lineno="4363"><highlight class="normal"><sp/><sp/><sp/><sp/>t3Cacheable<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="4364"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4365"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4366"><highlight class="normal"></highlight></codeline>
<codeline lineno="4367"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PSOutputDev::updateRise(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state)<sp/>{</highlight></codeline>
<codeline lineno="4368"><highlight class="normal"><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;{0:.6g}<sp/>Ts\n&quot;</highlight><highlight class="normal">,<sp/>state-&gt;getRise());</highlight></codeline>
<codeline lineno="4369"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4370"><highlight class="normal"></highlight></codeline>
<codeline lineno="4371"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PSOutputDev::updateWordSpace(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state)<sp/>{</highlight></codeline>
<codeline lineno="4372"><highlight class="normal"><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;{0:.6g}<sp/>Tw\n&quot;</highlight><highlight class="normal">,<sp/>state-&gt;getWordSpace());</highlight></codeline>
<codeline lineno="4373"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4374"><highlight class="normal"></highlight></codeline>
<codeline lineno="4375"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PSOutputDev::updateHorizScaling(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state)<sp/>{</highlight></codeline>
<codeline lineno="4376"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>h;</highlight></codeline>
<codeline lineno="4377"><highlight class="normal"></highlight></codeline>
<codeline lineno="4378"><highlight class="normal"><sp/><sp/>h<sp/>=<sp/>state-&gt;getHorizScaling();</highlight></codeline>
<codeline lineno="4379"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabs(h)<sp/>&lt;<sp/>0.01)<sp/>{</highlight></codeline>
<codeline lineno="4380"><highlight class="normal"><sp/><sp/><sp/><sp/>h<sp/>=<sp/>0.01;</highlight></codeline>
<codeline lineno="4381"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4382"><highlight class="normal"><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;{0:.6g}<sp/>Tz\n&quot;</highlight><highlight class="normal">,<sp/>h);</highlight></codeline>
<codeline lineno="4383"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4384"><highlight class="normal"></highlight></codeline>
<codeline lineno="4385"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PSOutputDev::updateTextPos(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state)<sp/>{</highlight></codeline>
<codeline lineno="4386"><highlight class="normal"><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;{0:.6g}<sp/>{1:.6g}<sp/>Td\n&quot;</highlight><highlight class="normal">,<sp/>state-&gt;getLineX(),<sp/>state-&gt;getLineY());</highlight></codeline>
<codeline lineno="4387"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4388"><highlight class="normal"></highlight></codeline>
<codeline lineno="4389"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PSOutputDev::updateTextShift(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>shift)<sp/>{</highlight></codeline>
<codeline lineno="4390"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(state-&gt;getFont()-&gt;getWMode())<sp/>{</highlight></codeline>
<codeline lineno="4391"><highlight class="normal"><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;{0:.6g}<sp/>TJmV\n&quot;</highlight><highlight class="normal">,<sp/>shift);</highlight></codeline>
<codeline lineno="4392"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4393"><highlight class="normal"><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;{0:.6g}<sp/>TJm\n&quot;</highlight><highlight class="normal">,<sp/>shift);</highlight></codeline>
<codeline lineno="4394"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4395"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4396"><highlight class="normal"></highlight></codeline>
<codeline lineno="4397"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PSOutputDev::saveTextPos(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state)<sp/>{</highlight></codeline>
<codeline lineno="4398"><highlight class="normal"><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;currentpoint\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4399"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4400"><highlight class="normal"></highlight></codeline>
<codeline lineno="4401"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PSOutputDev::restoreTextPos(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state)<sp/>{</highlight></codeline>
<codeline lineno="4402"><highlight class="normal"><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;m\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4403"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4404"><highlight class="normal"></highlight></codeline>
<codeline lineno="4405"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PSOutputDev::stroke(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state)<sp/>{</highlight></codeline>
<codeline lineno="4406"><highlight class="normal"><sp/><sp/>doPath(state-&gt;getPath());</highlight></codeline>
<codeline lineno="4407"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(inType3Char<sp/>&amp;&amp;<sp/>t3FillColorOnly)<sp/>{</highlight></codeline>
<codeline lineno="4408"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>we&apos;re<sp/>constructing<sp/>a<sp/>cacheable<sp/>Type<sp/>3<sp/>glyph,<sp/>we<sp/>need<sp/>to<sp/>do</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4409"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>everything<sp/>in<sp/>the<sp/>fill<sp/>color</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4410"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;Sf\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4411"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4412"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;S\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4413"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4414"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4415"><highlight class="normal"></highlight></codeline>
<codeline lineno="4416"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PSOutputDev::fill(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state)<sp/>{</highlight></codeline>
<codeline lineno="4417"><highlight class="normal"><sp/><sp/>doPath(state-&gt;getPath());</highlight></codeline>
<codeline lineno="4418"><highlight class="normal"><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;f\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4419"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4420"><highlight class="normal"></highlight></codeline>
<codeline lineno="4421"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PSOutputDev::eoFill(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state)<sp/>{</highlight></codeline>
<codeline lineno="4422"><highlight class="normal"><sp/><sp/>doPath(state-&gt;getPath());</highlight></codeline>
<codeline lineno="4423"><highlight class="normal"><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;f*\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4424"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4425"><highlight class="normal"></highlight></codeline>
<codeline lineno="4426"><highlight class="normal">GBool<sp/>PSOutputDev::tilingPatternFillL1(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state,<sp/><ref refid="class_catalog" kindref="compound">Catalog</ref><sp/>*cat,<sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>*str,</highlight></codeline>
<codeline lineno="4427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*pmat,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>paintType,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tilingType,<sp/><ref refid="class_dict" kindref="compound">Dict</ref><sp/>*resDict,</highlight></codeline>
<codeline lineno="4428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*mat,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*bbox,</highlight></codeline>
<codeline lineno="4429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x0,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y0,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x1,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y1,</highlight></codeline>
<codeline lineno="4430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>xStep,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>yStep)<sp/>{</highlight></codeline>
<codeline lineno="4431"><highlight class="normal"><sp/><sp/><ref refid="class_p_d_f_rectangle" kindref="compound">PDFRectangle</ref><sp/>box;</highlight></codeline>
<codeline lineno="4432"><highlight class="normal"><sp/><sp/><ref refid="class_gfx" kindref="compound">Gfx</ref><sp/>*gfx;</highlight></codeline>
<codeline lineno="4433"><highlight class="normal"></highlight></codeline>
<codeline lineno="4434"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>define<sp/>a<sp/>Type<sp/>3<sp/>font</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4435"><highlight class="normal"><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;8<sp/>dict<sp/>begin\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4436"><highlight class="normal"><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;/FontType<sp/>3<sp/>def\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4437"><highlight class="normal"><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;/FontMatrix<sp/>[1<sp/>0<sp/>0<sp/>1<sp/>0<sp/>0]<sp/>def\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4438"><highlight class="normal"><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;/FontBBox<sp/>[{0:.6g}<sp/>{1:.6g}<sp/>{2:.6g}<sp/>{3:.6g}]<sp/>def\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="4439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bbox[0],<sp/>bbox[1],<sp/>bbox[2],<sp/>bbox[3]);</highlight></codeline>
<codeline lineno="4440"><highlight class="normal"><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;/Encoding<sp/>256<sp/>array<sp/>def\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4441"><highlight class="normal"><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>0<sp/>1<sp/>255<sp/>{<sp/>Encoding<sp/>exch<sp/>/.notdef<sp/>put<sp/>}<sp/>for\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4442"><highlight class="normal"><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>Encoding<sp/>120<sp/>/x<sp/>put\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4443"><highlight class="normal"><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;/BuildGlyph<sp/>{\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4444"><highlight class="normal"><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>exch<sp/>/CharProcs<sp/>get<sp/>exch\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4445"><highlight class="normal"><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>2<sp/>copy<sp/>known<sp/>not<sp/>{<sp/>pop<sp/>/.notdef<sp/>}<sp/>if\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4446"><highlight class="normal"><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>get<sp/>exec\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4447"><highlight class="normal"><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;}<sp/>bind<sp/>def\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4448"><highlight class="normal"><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;/BuildChar<sp/>{\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4449"><highlight class="normal"><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>1<sp/>index<sp/>/Encoding<sp/>get<sp/>exch<sp/>get\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4450"><highlight class="normal"><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>1<sp/>index<sp/>/BuildGlyph<sp/>get<sp/>exec\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4451"><highlight class="normal"><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;}<sp/>bind<sp/>def\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4452"><highlight class="normal"><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;/CharProcs<sp/>1<sp/>dict<sp/>def\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4453"><highlight class="normal"><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;CharProcs<sp/>begin\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4454"><highlight class="normal"><sp/><sp/>box.x1<sp/>=<sp/>bbox[0];</highlight></codeline>
<codeline lineno="4455"><highlight class="normal"><sp/><sp/>box.y1<sp/>=<sp/>bbox[1];</highlight></codeline>
<codeline lineno="4456"><highlight class="normal"><sp/><sp/>box.x2<sp/>=<sp/>bbox[2];</highlight></codeline>
<codeline lineno="4457"><highlight class="normal"><sp/><sp/>box.y2<sp/>=<sp/>bbox[3];</highlight></codeline>
<codeline lineno="4458"><highlight class="normal"><sp/><sp/>gfx<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_gfx" kindref="compound">Gfx</ref>(doc,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>resDict,<sp/>&amp;box,<sp/>NULL);</highlight></codeline>
<codeline lineno="4459"><highlight class="normal"><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;/x<sp/>{\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4460"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(paintType<sp/>==<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="4461"><highlight class="normal"><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;{0:.6g}<sp/>0<sp/>{1:.6g}<sp/>{2:.6g}<sp/>{3:.6g}<sp/>{4:.6g}<sp/>setcachedevice\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="4462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xStep,<sp/>bbox[0],<sp/>bbox[1],<sp/>bbox[2],<sp/>bbox[3]);</highlight></codeline>
<codeline lineno="4463"><highlight class="normal"><sp/><sp/><sp/><sp/>t3FillColorOnly<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="4464"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4465"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="4466"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x1<sp/>-<sp/>1<sp/>&lt;=<sp/>x0)<sp/>{</highlight></codeline>
<codeline lineno="4467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;1<sp/>0<sp/>setcharwidth\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4468"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;{0:.6g}<sp/>0<sp/>setcharwidth\n&quot;</highlight><highlight class="normal">,<sp/>xStep);</highlight></codeline>
<codeline lineno="4470"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4471"><highlight class="normal"><sp/><sp/><sp/><sp/>t3FillColorOnly<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="4472"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4473"><highlight class="normal"><sp/><sp/>inType3Char<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="4474"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(paintType<sp/>==<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="4475"><highlight class="normal"><sp/><sp/><sp/><sp/>inUncoloredPattern<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="4476"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ensure<sp/>any<sp/>PS<sp/>procedures<sp/>that<sp/>contain<sp/>sCol<sp/>or<sp/>fCol<sp/>do<sp/>not<sp/>change<sp/>the<sp/>color</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4477"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;/pdfLastFill<sp/>true<sp/>def\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4478"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;/pdfLastStroke<sp/>true<sp/>def\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4479"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4480"><highlight class="normal"><sp/><sp/>++numTilingPatterns;</highlight></codeline>
<codeline lineno="4481"><highlight class="normal"><sp/><sp/>gfx-&gt;display(str);</highlight></codeline>
<codeline lineno="4482"><highlight class="normal"><sp/><sp/>--numTilingPatterns;</highlight></codeline>
<codeline lineno="4483"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(paintType<sp/>==<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="4484"><highlight class="normal"><sp/><sp/><sp/><sp/>inUncoloredPattern<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="4485"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ensure<sp/>the<sp/>next<sp/>PS<sp/>procedures<sp/>that<sp/>uses<sp/>sCol<sp/>or<sp/>fCol<sp/>will<sp/>update<sp/>the<sp/>color</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4486"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;/pdfLastFill<sp/>false<sp/>def\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4487"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;/pdfLastStroke<sp/>false<sp/>def\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4488"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4489"><highlight class="normal"><sp/><sp/>inType3Char<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="4490"><highlight class="normal"><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;}<sp/>def\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4491"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>gfx;</highlight></codeline>
<codeline lineno="4492"><highlight class="normal"><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;end\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4493"><highlight class="normal"><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;currentdict<sp/>end\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4494"><highlight class="normal"><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;/xpdfTile{0:d}<sp/>exch<sp/>definefont<sp/>pop\n&quot;</highlight><highlight class="normal">,<sp/>numTilingPatterns);</highlight></codeline>
<codeline lineno="4495"><highlight class="normal"></highlight></codeline>
<codeline lineno="4496"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>draw<sp/>the<sp/>tiles</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4497"><highlight class="normal"><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;/xpdfTile{0:d}<sp/>findfont<sp/>setfont\n&quot;</highlight><highlight class="normal">,<sp/>numTilingPatterns);</highlight></codeline>
<codeline lineno="4498"><highlight class="normal"><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;fCol\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4499"><highlight class="normal"><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;gsave<sp/>[{0:.6g}<sp/>{1:.6g}<sp/>{2:.6g}<sp/>{3:.6g}<sp/>{4:.6g}<sp/>{5:.6g}]<sp/>concat\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="4500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mat[0],<sp/>mat[1],<sp/>mat[2],<sp/>mat[3],<sp/>mat[4],<sp/>mat[5]);</highlight></codeline>
<codeline lineno="4501"><highlight class="normal"><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;{0:d}<sp/>1<sp/>{1:d}<sp/>{{<sp/>{2:.6g}<sp/>exch<sp/>{3:.6g}<sp/>mul<sp/>m<sp/>{4:d}<sp/>1<sp/>{5:d}<sp/>{{<sp/>pop<sp/>(x)<sp/>show<sp/>}}<sp/>for<sp/>}}<sp/>for\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="4502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y0,<sp/>y1<sp/>-<sp/>1,<sp/>x0<sp/>*<sp/>xStep,<sp/>yStep,<sp/>x0,<sp/>x1<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="4503"><highlight class="normal"><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;grestore\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4504"><highlight class="normal"></highlight></codeline>
<codeline lineno="4505"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gTrue;</highlight></codeline>
<codeline lineno="4506"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4507"><highlight class="normal"></highlight></codeline>
<codeline lineno="4508"><highlight class="normal">GBool<sp/>PSOutputDev::tilingPatternFillL2(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state,<sp/><ref refid="class_catalog" kindref="compound">Catalog</ref><sp/>*cat,<sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>*str,</highlight></codeline>
<codeline lineno="4509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*pmat,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>paintType,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tilingType,<sp/><ref refid="class_dict" kindref="compound">Dict</ref><sp/>*resDict,</highlight></codeline>
<codeline lineno="4510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*mat,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*bbox,</highlight></codeline>
<codeline lineno="4511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x0,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y0,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x1,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y1,</highlight></codeline>
<codeline lineno="4512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>xStep,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>yStep)<sp/>{</highlight></codeline>
<codeline lineno="4513"><highlight class="normal"><sp/><sp/><ref refid="class_p_d_f_rectangle" kindref="compound">PDFRectangle</ref><sp/>box;</highlight></codeline>
<codeline lineno="4514"><highlight class="normal"><sp/><sp/><ref refid="class_gfx" kindref="compound">Gfx</ref><sp/>*gfx;</highlight></codeline>
<codeline lineno="4515"><highlight class="normal"></highlight></codeline>
<codeline lineno="4516"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(paintType<sp/>==<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="4517"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>setpattern<sp/>with<sp/>PaintType<sp/>2<sp/>needs<sp/>the<sp/>paint<sp/>color</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4518"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;currentcolor\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4519"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4520"><highlight class="normal"><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;&lt;&lt;\n<sp/><sp/>/PatternType<sp/>1\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4521"><highlight class="normal"><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>/PaintType<sp/>{0:d}\n&quot;</highlight><highlight class="normal">,<sp/>paintType);</highlight></codeline>
<codeline lineno="4522"><highlight class="normal"><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>/TilingType<sp/>{0:d}\n&quot;</highlight><highlight class="normal">,<sp/>tilingType);</highlight></codeline>
<codeline lineno="4523"><highlight class="normal"><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>/BBox<sp/>[{0:.6g}<sp/>{1:.6g}<sp/>{2:.6g}<sp/>{3:.6g}]\n&quot;</highlight><highlight class="normal">,<sp/>bbox[0],<sp/>bbox[1],<sp/>bbox[2],<sp/>bbox[3]);</highlight></codeline>
<codeline lineno="4524"><highlight class="normal"><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>/XStep<sp/>{0:.6g}\n&quot;</highlight><highlight class="normal">,<sp/>xStep);</highlight></codeline>
<codeline lineno="4525"><highlight class="normal"><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>/YStep<sp/>{0:.6g}\n&quot;</highlight><highlight class="normal">,<sp/>yStep);</highlight></codeline>
<codeline lineno="4526"><highlight class="normal"><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>/PaintProc<sp/>{<sp/>\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4527"><highlight class="normal"><sp/><sp/>box.x1<sp/>=<sp/>bbox[0];</highlight></codeline>
<codeline lineno="4528"><highlight class="normal"><sp/><sp/>box.y1<sp/>=<sp/>bbox[1];</highlight></codeline>
<codeline lineno="4529"><highlight class="normal"><sp/><sp/>box.x2<sp/>=<sp/>bbox[2];</highlight></codeline>
<codeline lineno="4530"><highlight class="normal"><sp/><sp/>box.y2<sp/>=<sp/>bbox[3];</highlight></codeline>
<codeline lineno="4531"><highlight class="normal"><sp/><sp/>gfx<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_gfx" kindref="compound">Gfx</ref>(doc,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>resDict,<sp/>&amp;box,<sp/>NULL);</highlight></codeline>
<codeline lineno="4532"><highlight class="normal"><sp/><sp/>inType3Char<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="4533"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(paintType<sp/>==<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="4534"><highlight class="normal"><sp/><sp/><sp/><sp/>inUncoloredPattern<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="4535"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ensure<sp/>any<sp/>PS<sp/>procedures<sp/>that<sp/>contain<sp/>sCol<sp/>or<sp/>fCol<sp/>do<sp/>not<sp/>change<sp/>the<sp/>color</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4536"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;/pdfLastFill<sp/>true<sp/>def\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4537"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;/pdfLastStroke<sp/>true<sp/>def\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4538"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4539"><highlight class="normal"><sp/><sp/>gfx-&gt;display(str);</highlight></codeline>
<codeline lineno="4540"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(paintType<sp/>==<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="4541"><highlight class="normal"><sp/><sp/><sp/><sp/>inUncoloredPattern<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="4542"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ensure<sp/>the<sp/>next<sp/>PS<sp/>procedures<sp/>that<sp/>uses<sp/>sCol<sp/>or<sp/>fCol<sp/>will<sp/>update<sp/>the<sp/>color</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4543"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;/pdfLastFill<sp/>false<sp/>def\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4544"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;/pdfLastStroke<sp/>false<sp/>def\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4545"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4546"><highlight class="normal"><sp/><sp/>inType3Char<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="4547"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>gfx;</highlight></codeline>
<codeline lineno="4548"><highlight class="normal"><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>}\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4549"><highlight class="normal"><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;&gt;&gt;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4550"><highlight class="normal"><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;[{0:.6g}<sp/>{1:.6g}<sp/>{2:.6g}<sp/>{3:.6g}<sp/>{4:.6g}<sp/>{5:.6g}]\n&quot;</highlight><highlight class="normal">,<sp/>mat[0],<sp/>mat[1],<sp/>mat[2],<sp/>mat[3],<sp/>mat[4],<sp/>mat[5]);</highlight></codeline>
<codeline lineno="4551"><highlight class="normal"><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;makepattern<sp/>setpattern\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4552"><highlight class="normal"><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;clippath<sp/>fill\n&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="comment">//<sp/>Gfx<sp/>sets<sp/>up<sp/>a<sp/>clip<sp/>before<sp/>calling<sp/>out-&gt;tilingPatternFill()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4553"><highlight class="normal"></highlight></codeline>
<codeline lineno="4554"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gTrue;</highlight></codeline>
<codeline lineno="4555"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4556"><highlight class="normal"></highlight></codeline>
<codeline lineno="4557"><highlight class="normal">GBool<sp/>PSOutputDev::tilingPatternFill(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state,<sp/><ref refid="class_gfx" kindref="compound">Gfx</ref><sp/>*gfxA,<sp/><ref refid="class_catalog" kindref="compound">Catalog</ref><sp/>*cat,<sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>*str,</highlight></codeline>
<codeline lineno="4558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*pmat,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>paintType,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tilingType,<sp/><ref refid="class_dict" kindref="compound">Dict</ref><sp/>*resDict,</highlight></codeline>
<codeline lineno="4559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*mat,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*bbox,</highlight></codeline>
<codeline lineno="4560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x0,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y0,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x1,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y1,</highlight></codeline>
<codeline lineno="4561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>xStep,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>yStep)<sp/>{</highlight></codeline>
<codeline lineno="4562"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x1<sp/>-<sp/>x0<sp/>==<sp/>1<sp/>&amp;&amp;<sp/>y1<sp/>-<sp/>y0<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="4563"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Don&apos;t<sp/>need<sp/>to<sp/>use<sp/>patterns<sp/>if<sp/>only<sp/>one<sp/>instance<sp/>of<sp/>the<sp/>pattern<sp/>is<sp/>used</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4564"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_p_d_f_rectangle" kindref="compound">PDFRectangle</ref><sp/>box;</highlight></codeline>
<codeline lineno="4565"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_gfx" kindref="compound">Gfx</ref><sp/>*gfx;</highlight></codeline>
<codeline lineno="4566"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x,<sp/>y,<sp/>tx,<sp/>ty;</highlight></codeline>
<codeline lineno="4567"><highlight class="normal"></highlight></codeline>
<codeline lineno="4568"><highlight class="normal"><sp/><sp/><sp/><sp/>x<sp/>=<sp/>x0<sp/>*<sp/>xStep;</highlight></codeline>
<codeline lineno="4569"><highlight class="normal"><sp/><sp/><sp/><sp/>y<sp/>=<sp/>y0<sp/>*<sp/>yStep;</highlight></codeline>
<codeline lineno="4570"><highlight class="normal"><sp/><sp/><sp/><sp/>tx<sp/>=<sp/>x<sp/>*<sp/>mat[0]<sp/>+<sp/>y<sp/>*<sp/>mat[2]<sp/>+<sp/>mat[4];</highlight></codeline>
<codeline lineno="4571"><highlight class="normal"><sp/><sp/><sp/><sp/>ty<sp/>=<sp/>x<sp/>*<sp/>mat[1]<sp/>+<sp/>y<sp/>*<sp/>mat[3]<sp/>+<sp/>mat[5];</highlight></codeline>
<codeline lineno="4572"><highlight class="normal"><sp/><sp/><sp/><sp/>box.x1<sp/>=<sp/>bbox[0];</highlight></codeline>
<codeline lineno="4573"><highlight class="normal"><sp/><sp/><sp/><sp/>box.y1<sp/>=<sp/>bbox[1];</highlight></codeline>
<codeline lineno="4574"><highlight class="normal"><sp/><sp/><sp/><sp/>box.x2<sp/>=<sp/>bbox[2];</highlight></codeline>
<codeline lineno="4575"><highlight class="normal"><sp/><sp/><sp/><sp/>box.y2<sp/>=<sp/>bbox[3];</highlight></codeline>
<codeline lineno="4576"><highlight class="normal"><sp/><sp/><sp/><sp/>gfx<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_gfx" kindref="compound">Gfx</ref>(doc,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>resDict,<sp/>&amp;box,<sp/>NULL,<sp/>NULL,<sp/>NULL,<sp/>gfxA-&gt;getXRef());</highlight></codeline>
<codeline lineno="4577"><highlight class="normal"><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;[{0:.6g}<sp/>{1:.6g}<sp/>{2:.6g}<sp/>{3:.6g}<sp/>{4:.6g}<sp/>{5:.6g}]<sp/>cm\n&quot;</highlight><highlight class="normal">,<sp/>mat[0],<sp/>mat[1],<sp/>mat[2],<sp/>mat[3],<sp/>tx,<sp/>ty);</highlight></codeline>
<codeline lineno="4578"><highlight class="normal"><sp/><sp/><sp/><sp/>inType3Char<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="4579"><highlight class="normal"><sp/><sp/><sp/><sp/>gfx-&gt;display(str);</highlight></codeline>
<codeline lineno="4580"><highlight class="normal"><sp/><sp/><sp/><sp/>inType3Char<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="4581"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>gfx;</highlight></codeline>
<codeline lineno="4582"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gTrue;</highlight></codeline>
<codeline lineno="4583"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4584"><highlight class="normal"></highlight></codeline>
<codeline lineno="4585"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(level<sp/>==<sp/>psLevel1<sp/>||<sp/>level<sp/>==<sp/>psLevel1Sep)<sp/>{</highlight></codeline>
<codeline lineno="4586"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tilingPatternFillL1(state,<sp/>cat,<sp/>str,<sp/>pmat,<sp/>paintType,<sp/>tilingType,<sp/>resDict,</highlight></codeline>
<codeline lineno="4587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mat,<sp/>bbox,<sp/>x0,<sp/>y0,<sp/>x1,<sp/>y1,<sp/>xStep,<sp/>yStep);</highlight></codeline>
<codeline lineno="4588"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4589"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tilingPatternFillL2(state,<sp/>cat,<sp/>str,<sp/>pmat,<sp/>paintType,<sp/>tilingType,<sp/>resDict,</highlight></codeline>
<codeline lineno="4590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mat,<sp/>bbox,<sp/>x0,<sp/>y0,<sp/>x1,<sp/>y1,<sp/>xStep,<sp/>yStep);</highlight></codeline>
<codeline lineno="4591"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4592"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4593"><highlight class="normal"></highlight></codeline>
<codeline lineno="4594"><highlight class="normal">GBool<sp/>PSOutputDev::functionShadedFill(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state,</highlight></codeline>
<codeline lineno="4595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_gfx_function_shading" kindref="compound">GfxFunctionShading</ref><sp/>*shading)<sp/>{</highlight></codeline>
<codeline lineno="4596"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x0,<sp/>y0,<sp/>x1,<sp/>y1;</highlight></codeline>
<codeline lineno="4597"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*mat;</highlight></codeline>
<codeline lineno="4598"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="4599"><highlight class="normal"></highlight></codeline>
<codeline lineno="4600"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(level<sp/>==<sp/>psLevel2Sep<sp/>||<sp/>level<sp/>==<sp/>psLevel3Sep)<sp/>{</highlight></codeline>
<codeline lineno="4601"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shading-&gt;getColorSpace()-&gt;getMode()<sp/>!=<sp/>csDeviceCMYK)<sp/>{</highlight></codeline>
<codeline lineno="4602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="4603"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4604"><highlight class="normal"><sp/><sp/><sp/><sp/>processColors<sp/>|=<sp/>psProcessCMYK;</highlight></codeline>
<codeline lineno="4605"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4606"><highlight class="normal"></highlight></codeline>
<codeline lineno="4607"><highlight class="normal"><sp/><sp/>shading-&gt;getDomain(&amp;x0,<sp/>&amp;y0,<sp/>&amp;x1,<sp/>&amp;y1);</highlight></codeline>
<codeline lineno="4608"><highlight class="normal"><sp/><sp/>mat<sp/>=<sp/>shading-&gt;getMatrix();</highlight></codeline>
<codeline lineno="4609"><highlight class="normal"><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;/mat<sp/>[{0:.6g}<sp/>{1:.6g}<sp/>{2:.6g}<sp/>{3:.6g}<sp/>{4:.6g}<sp/>{5:.6g}]<sp/>def\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="4610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mat[0],<sp/>mat[1],<sp/>mat[2],<sp/>mat[3],<sp/>mat[4],<sp/>mat[5]);</highlight></codeline>
<codeline lineno="4611"><highlight class="normal"><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;/n<sp/>{0:d}<sp/>def\n&quot;</highlight><highlight class="normal">,<sp/>shading-&gt;getColorSpace()-&gt;getNComps());</highlight></codeline>
<codeline lineno="4612"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shading-&gt;getNFuncs()<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="4613"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;/func<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4614"><highlight class="normal"><sp/><sp/><sp/><sp/>cvtFunction(shading-&gt;getFunc(0));</highlight></codeline>
<codeline lineno="4615"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;def\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4616"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4617"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;/func<sp/>{\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4618"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>shading-&gt;getNFuncs();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="4619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>shading-&gt;getNFuncs()<sp/>-<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="4620"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;2<sp/>copy\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cvtFunction(shading-&gt;getFunc(i));</highlight></codeline>
<codeline lineno="4623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;exec\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>shading-&gt;getNFuncs()<sp/>-<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="4625"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;3<sp/>1<sp/>roll\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4627"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4628"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;}<sp/>def\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4629"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4630"><highlight class="normal"><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;{0:.6g}<sp/>{1:.6g}<sp/>{2:.6g}<sp/>{3:.6g}<sp/>0<sp/>funcSH\n&quot;</highlight><highlight class="normal">,<sp/>x0,<sp/>y0,<sp/>x1,<sp/>y1);</highlight></codeline>
<codeline lineno="4631"><highlight class="normal"></highlight></codeline>
<codeline lineno="4632"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gTrue;</highlight></codeline>
<codeline lineno="4633"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4634"><highlight class="normal"></highlight></codeline>
<codeline lineno="4635"><highlight class="normal">GBool<sp/>PSOutputDev::axialShadedFill(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state,<sp/><ref refid="class_gfx_axial_shading" kindref="compound">GfxAxialShading</ref><sp/>*shading,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*tMin*/</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*tMax*/</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="4636"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>xMin,<sp/>yMin,<sp/>xMax,<sp/>yMax;</highlight></codeline>
<codeline lineno="4637"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x0,<sp/>y0,<sp/>x1,<sp/>y1,<sp/>dx,<sp/>dy,<sp/>mul;</highlight></codeline>
<codeline lineno="4638"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>tMin,<sp/>tMax,<sp/>t,<sp/>t0,<sp/>t1;</highlight></codeline>
<codeline lineno="4639"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="4640"><highlight class="normal"></highlight></codeline>
<codeline lineno="4641"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(level<sp/>==<sp/>psLevel2Sep<sp/>||<sp/>level<sp/>==<sp/>psLevel3Sep)<sp/>{</highlight></codeline>
<codeline lineno="4642"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shading-&gt;getColorSpace()-&gt;getMode()<sp/>!=<sp/>csDeviceCMYK)<sp/>{</highlight></codeline>
<codeline lineno="4643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="4644"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4645"><highlight class="normal"><sp/><sp/><sp/><sp/>processColors<sp/>|=<sp/>psProcessCMYK;</highlight></codeline>
<codeline lineno="4646"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4647"><highlight class="normal"></highlight></codeline>
<codeline lineno="4648"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>the<sp/>clip<sp/>region<sp/>bbox</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4649"><highlight class="normal"><sp/><sp/>state-&gt;getUserClipBBox(&amp;xMin,<sp/>&amp;yMin,<sp/>&amp;xMax,<sp/>&amp;yMax);</highlight></codeline>
<codeline lineno="4650"><highlight class="normal"></highlight></codeline>
<codeline lineno="4651"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>compute<sp/>min<sp/>and<sp/>max<sp/>t<sp/>values,<sp/>based<sp/>on<sp/>the<sp/>four<sp/>corners<sp/>of<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4652"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>clip<sp/>region<sp/>bbox</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4653"><highlight class="normal"><sp/><sp/>shading-&gt;getCoords(&amp;x0,<sp/>&amp;y0,<sp/>&amp;x1,<sp/>&amp;y1);</highlight></codeline>
<codeline lineno="4654"><highlight class="normal"><sp/><sp/>dx<sp/>=<sp/>x1<sp/>-<sp/>x0;</highlight></codeline>
<codeline lineno="4655"><highlight class="normal"><sp/><sp/>dy<sp/>=<sp/>y1<sp/>-<sp/>y0;</highlight></codeline>
<codeline lineno="4656"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabs(dx)<sp/>&lt;<sp/>0.01<sp/>&amp;&amp;<sp/>fabs(dy)<sp/>&lt;<sp/>0.01)<sp/>{</highlight></codeline>
<codeline lineno="4657"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gTrue;</highlight></codeline>
<codeline lineno="4658"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4659"><highlight class="normal"><sp/><sp/><sp/><sp/>mul<sp/>=<sp/>1<sp/>/<sp/>(dx<sp/>*<sp/>dx<sp/>+<sp/>dy<sp/>*<sp/>dy);</highlight></codeline>
<codeline lineno="4660"><highlight class="normal"><sp/><sp/><sp/><sp/>tMin<sp/>=<sp/>tMax<sp/>=<sp/>((xMin<sp/>-<sp/>x0)<sp/>*<sp/>dx<sp/>+<sp/>(yMin<sp/>-<sp/>y0)<sp/>*<sp/>dy)<sp/>*<sp/>mul;</highlight></codeline>
<codeline lineno="4661"><highlight class="normal"><sp/><sp/><sp/><sp/>t<sp/>=<sp/>((xMin<sp/>-<sp/>x0)<sp/>*<sp/>dx<sp/>+<sp/>(yMax<sp/>-<sp/>y0)<sp/>*<sp/>dy)<sp/>*<sp/>mul;</highlight></codeline>
<codeline lineno="4662"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t<sp/>&lt;<sp/>tMin)<sp/>{</highlight></codeline>
<codeline lineno="4663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tMin<sp/>=<sp/>t;</highlight></codeline>
<codeline lineno="4664"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t<sp/>&gt;<sp/>tMax)<sp/>{</highlight></codeline>
<codeline lineno="4665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tMax<sp/>=<sp/>t;</highlight></codeline>
<codeline lineno="4666"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4667"><highlight class="normal"><sp/><sp/><sp/><sp/>t<sp/>=<sp/>((xMax<sp/>-<sp/>x0)<sp/>*<sp/>dx<sp/>+<sp/>(yMin<sp/>-<sp/>y0)<sp/>*<sp/>dy)<sp/>*<sp/>mul;</highlight></codeline>
<codeline lineno="4668"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t<sp/>&lt;<sp/>tMin)<sp/>{</highlight></codeline>
<codeline lineno="4669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tMin<sp/>=<sp/>t;</highlight></codeline>
<codeline lineno="4670"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t<sp/>&gt;<sp/>tMax)<sp/>{</highlight></codeline>
<codeline lineno="4671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tMax<sp/>=<sp/>t;</highlight></codeline>
<codeline lineno="4672"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4673"><highlight class="normal"><sp/><sp/><sp/><sp/>t<sp/>=<sp/>((xMax<sp/>-<sp/>x0)<sp/>*<sp/>dx<sp/>+<sp/>(yMax<sp/>-<sp/>y0)<sp/>*<sp/>dy)<sp/>*<sp/>mul;</highlight></codeline>
<codeline lineno="4674"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t<sp/>&lt;<sp/>tMin)<sp/>{</highlight></codeline>
<codeline lineno="4675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tMin<sp/>=<sp/>t;</highlight></codeline>
<codeline lineno="4676"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t<sp/>&gt;<sp/>tMax)<sp/>{</highlight></codeline>
<codeline lineno="4677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tMax<sp/>=<sp/>t;</highlight></codeline>
<codeline lineno="4678"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4679"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tMin<sp/>&lt;<sp/>0<sp/>&amp;&amp;<sp/>!shading-&gt;getExtend0())<sp/>{</highlight></codeline>
<codeline lineno="4680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tMin<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4681"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4682"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tMax<sp/>&gt;<sp/>1<sp/>&amp;&amp;<sp/>!shading-&gt;getExtend1())<sp/>{</highlight></codeline>
<codeline lineno="4683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tMax<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="4684"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4685"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4686"><highlight class="normal"></highlight></codeline>
<codeline lineno="4687"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>the<sp/>function<sp/>domain</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4688"><highlight class="normal"><sp/><sp/>t0<sp/>=<sp/>shading-&gt;getDomain0();</highlight></codeline>
<codeline lineno="4689"><highlight class="normal"><sp/><sp/>t1<sp/>=<sp/>shading-&gt;getDomain1();</highlight></codeline>
<codeline lineno="4690"><highlight class="normal"></highlight></codeline>
<codeline lineno="4691"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>generate<sp/>the<sp/>PS<sp/>code</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4692"><highlight class="normal"><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;/t0<sp/>{0:.6g}<sp/>def\n&quot;</highlight><highlight class="normal">,<sp/>t0);</highlight></codeline>
<codeline lineno="4693"><highlight class="normal"><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;/t1<sp/>{0:.6g}<sp/>def\n&quot;</highlight><highlight class="normal">,<sp/>t1);</highlight></codeline>
<codeline lineno="4694"><highlight class="normal"><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;/dt<sp/>{0:.6g}<sp/>def\n&quot;</highlight><highlight class="normal">,<sp/>t1<sp/>-<sp/>t0);</highlight></codeline>
<codeline lineno="4695"><highlight class="normal"><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;/x0<sp/>{0:.6g}<sp/>def\n&quot;</highlight><highlight class="normal">,<sp/>x0);</highlight></codeline>
<codeline lineno="4696"><highlight class="normal"><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;/y0<sp/>{0:.6g}<sp/>def\n&quot;</highlight><highlight class="normal">,<sp/>y0);</highlight></codeline>
<codeline lineno="4697"><highlight class="normal"><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;/dx<sp/>{0:.6g}<sp/>def\n&quot;</highlight><highlight class="normal">,<sp/>x1<sp/>-<sp/>x0);</highlight></codeline>
<codeline lineno="4698"><highlight class="normal"><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;/x1<sp/>{0:.6g}<sp/>def\n&quot;</highlight><highlight class="normal">,<sp/>x1);</highlight></codeline>
<codeline lineno="4699"><highlight class="normal"><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;/y1<sp/>{0:.6g}<sp/>def\n&quot;</highlight><highlight class="normal">,<sp/>y1);</highlight></codeline>
<codeline lineno="4700"><highlight class="normal"><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;/dy<sp/>{0:.6g}<sp/>def\n&quot;</highlight><highlight class="normal">,<sp/>y1<sp/>-<sp/>y0);</highlight></codeline>
<codeline lineno="4701"><highlight class="normal"><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;/xMin<sp/>{0:.6g}<sp/>def\n&quot;</highlight><highlight class="normal">,<sp/>xMin);</highlight></codeline>
<codeline lineno="4702"><highlight class="normal"><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;/yMin<sp/>{0:.6g}<sp/>def\n&quot;</highlight><highlight class="normal">,<sp/>yMin);</highlight></codeline>
<codeline lineno="4703"><highlight class="normal"><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;/xMax<sp/>{0:.6g}<sp/>def\n&quot;</highlight><highlight class="normal">,<sp/>xMax);</highlight></codeline>
<codeline lineno="4704"><highlight class="normal"><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;/yMax<sp/>{0:.6g}<sp/>def\n&quot;</highlight><highlight class="normal">,<sp/>yMax);</highlight></codeline>
<codeline lineno="4705"><highlight class="normal"><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;/n<sp/>{0:d}<sp/>def\n&quot;</highlight><highlight class="normal">,<sp/>shading-&gt;getColorSpace()-&gt;getNComps());</highlight></codeline>
<codeline lineno="4706"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shading-&gt;getNFuncs()<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="4707"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;/func<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4708"><highlight class="normal"><sp/><sp/><sp/><sp/>cvtFunction(shading-&gt;getFunc(0));</highlight></codeline>
<codeline lineno="4709"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;def\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4710"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4711"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;/func<sp/>{\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4712"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>shading-&gt;getNFuncs();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="4713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>shading-&gt;getNFuncs()<sp/>-<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="4714"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;dup\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cvtFunction(shading-&gt;getFunc(i));</highlight></codeline>
<codeline lineno="4717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;exec\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>shading-&gt;getNFuncs()<sp/>-<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="4719"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;exch\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4721"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4722"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;}<sp/>def\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4723"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4724"><highlight class="normal"><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;{0:.6g}<sp/>{1:.6g}<sp/>0<sp/>axialSH\n&quot;</highlight><highlight class="normal">,<sp/>tMin,<sp/>tMax);</highlight></codeline>
<codeline lineno="4725"><highlight class="normal"></highlight></codeline>
<codeline lineno="4726"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gTrue;</highlight></codeline>
<codeline lineno="4727"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4728"><highlight class="normal"></highlight></codeline>
<codeline lineno="4729"><highlight class="normal">GBool<sp/>PSOutputDev::radialShadedFill(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state,<sp/><ref refid="class_gfx_radial_shading" kindref="compound">GfxRadialShading</ref><sp/>*shading,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*sMin*/</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*sMax*/</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="4730"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>xMin,<sp/>yMin,<sp/>xMax,<sp/>yMax;</highlight></codeline>
<codeline lineno="4731"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x0,<sp/>y0,<sp/>r0,<sp/>x1,<sp/>y1,<sp/>r1,<sp/>t0,<sp/>t1;</highlight></codeline>
<codeline lineno="4732"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>xa,<sp/>ya,<sp/>ra;</highlight></codeline>
<codeline lineno="4733"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sMin,<sp/>sMax,<sp/>h,<sp/>ta;</highlight></codeline>
<codeline lineno="4734"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sLeft,<sp/>sRight,<sp/>sTop,<sp/>sBottom,<sp/>sZero,<sp/>sDiag;</highlight></codeline>
<codeline lineno="4735"><highlight class="normal"><sp/><sp/>GBool<sp/>haveSLeft,<sp/>haveSRight,<sp/>haveSTop,<sp/>haveSBottom,<sp/>haveSZero;</highlight></codeline>
<codeline lineno="4736"><highlight class="normal"><sp/><sp/>GBool<sp/>haveSMin,<sp/>haveSMax;</highlight></codeline>
<codeline lineno="4737"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>theta,<sp/>alpha,<sp/>a1,<sp/>a2;</highlight></codeline>
<codeline lineno="4738"><highlight class="normal"><sp/><sp/>GBool<sp/>enclosed;</highlight></codeline>
<codeline lineno="4739"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="4740"><highlight class="normal"></highlight></codeline>
<codeline lineno="4741"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(level<sp/>==<sp/>psLevel2Sep<sp/>||<sp/>level<sp/>==<sp/>psLevel3Sep)<sp/>{</highlight></codeline>
<codeline lineno="4742"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shading-&gt;getColorSpace()-&gt;getMode()<sp/>!=<sp/>csDeviceCMYK)<sp/>{</highlight></codeline>
<codeline lineno="4743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="4744"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4745"><highlight class="normal"><sp/><sp/><sp/><sp/>processColors<sp/>|=<sp/>psProcessCMYK;</highlight></codeline>
<codeline lineno="4746"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4747"><highlight class="normal"></highlight></codeline>
<codeline lineno="4748"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>the<sp/>shading<sp/>info</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4749"><highlight class="normal"><sp/><sp/>shading-&gt;getCoords(&amp;x0,<sp/>&amp;y0,<sp/>&amp;r0,<sp/>&amp;x1,<sp/>&amp;y1,<sp/>&amp;r1);</highlight></codeline>
<codeline lineno="4750"><highlight class="normal"><sp/><sp/>t0<sp/>=<sp/>shading-&gt;getDomain0();</highlight></codeline>
<codeline lineno="4751"><highlight class="normal"><sp/><sp/>t1<sp/>=<sp/>shading-&gt;getDomain1();</highlight></codeline>
<codeline lineno="4752"><highlight class="normal"></highlight></codeline>
<codeline lineno="4753"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>the<sp/>point<sp/>at<sp/>which<sp/>r(s)<sp/>=<sp/>0;<sp/>check<sp/>for<sp/>the<sp/>enclosed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4754"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>circles<sp/>case;<sp/>and<sp/>compute<sp/>the<sp/>angles<sp/>for<sp/>the<sp/>tangent<sp/>lines.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4755"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>the<sp/>point<sp/>at<sp/>which<sp/>r(s)<sp/>=<sp/>0;<sp/>check<sp/>for<sp/>the<sp/>enclosed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4756"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>circles<sp/>case;<sp/>and<sp/>compute<sp/>the<sp/>angles<sp/>for<sp/>the<sp/>tangent<sp/>lines.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4757"><highlight class="normal"><sp/><sp/>h<sp/>=<sp/>sqrt((x1<sp/>-<sp/>x0)<sp/>*<sp/>(x1<sp/>-<sp/>x0)<sp/>+<sp/>(y1<sp/>-<sp/>y0)<sp/>*<sp/>(y1<sp/>-<sp/>y0));</highlight></codeline>
<codeline lineno="4758"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(h<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="4759"><highlight class="normal"><sp/><sp/><sp/><sp/>enclosed<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="4760"><highlight class="normal"><sp/><sp/><sp/><sp/>theta<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>make<sp/>gcc<sp/>happy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4761"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(r1<sp/>-<sp/>r0<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="4762"><highlight class="normal"><sp/><sp/><sp/><sp/>enclosed<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="4763"><highlight class="normal"><sp/><sp/><sp/><sp/>theta<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4764"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabs(r1<sp/>-<sp/>r0)<sp/>&gt;=<sp/>h)<sp/>{</highlight></codeline>
<codeline lineno="4765"><highlight class="normal"><sp/><sp/><sp/><sp/>enclosed<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="4766"><highlight class="normal"><sp/><sp/><sp/><sp/>theta<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>make<sp/>gcc<sp/>happy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4767"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4768"><highlight class="normal"><sp/><sp/><sp/><sp/>enclosed<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="4769"><highlight class="normal"><sp/><sp/><sp/><sp/>theta<sp/>=<sp/>asin((r1<sp/>-<sp/>r0)<sp/>/<sp/>h);</highlight></codeline>
<codeline lineno="4770"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4771"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(enclosed)<sp/>{</highlight></codeline>
<codeline lineno="4772"><highlight class="normal"><sp/><sp/><sp/><sp/>a1<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4773"><highlight class="normal"><sp/><sp/><sp/><sp/>a2<sp/>=<sp/>360;</highlight></codeline>
<codeline lineno="4774"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4775"><highlight class="normal"><sp/><sp/><sp/><sp/>alpha<sp/>=<sp/>atan2(y1<sp/>-<sp/>y0,<sp/>x1<sp/>-<sp/>x0);</highlight></codeline>
<codeline lineno="4776"><highlight class="normal"><sp/><sp/><sp/><sp/>a1<sp/>=<sp/>(180<sp/>/<sp/>M_PI)<sp/>*<sp/>(alpha<sp/>+<sp/>theta)<sp/>+<sp/>90;</highlight></codeline>
<codeline lineno="4777"><highlight class="normal"><sp/><sp/><sp/><sp/>a2<sp/>=<sp/>(180<sp/>/<sp/>M_PI)<sp/>*<sp/>(alpha<sp/>-<sp/>theta)<sp/>-<sp/>90;</highlight></codeline>
<codeline lineno="4778"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(a2<sp/>&lt;<sp/>a1)<sp/>{</highlight></codeline>
<codeline lineno="4779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>a2<sp/>+=<sp/>360;</highlight></codeline>
<codeline lineno="4780"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4781"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4782"><highlight class="normal"></highlight></codeline>
<codeline lineno="4783"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>compute<sp/>the<sp/>(possibly<sp/>extended)<sp/>s<sp/>range</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4784"><highlight class="normal"><sp/><sp/>state-&gt;getUserClipBBox(&amp;xMin,<sp/>&amp;yMin,<sp/>&amp;xMax,<sp/>&amp;yMax);</highlight></codeline>
<codeline lineno="4785"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(enclosed)<sp/>{</highlight></codeline>
<codeline lineno="4786"><highlight class="normal"><sp/><sp/><sp/><sp/>sMin<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4787"><highlight class="normal"><sp/><sp/><sp/><sp/>sMax<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="4788"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4789"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>solve<sp/>x(sLeft)<sp/>+<sp/>r(sLeft)<sp/>=<sp/>xMin</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4790"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((haveSLeft<sp/>=<sp/>fabs((x1<sp/>+<sp/>r1)<sp/>-<sp/>(x0<sp/>+<sp/>r0))<sp/>&gt;<sp/>0.000001))<sp/>{</highlight></codeline>
<codeline lineno="4791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sLeft<sp/>=<sp/>(xMin<sp/>-<sp/>(x0<sp/>+<sp/>r0))<sp/>/<sp/>((x1<sp/>+<sp/>r1)<sp/>-<sp/>(x0<sp/>+<sp/>r0));</highlight></codeline>
<codeline lineno="4792"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sLeft<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>make<sp/>gcc<sp/>happy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4794"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4795"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>solve<sp/>x(sRight)<sp/>-<sp/>r(sRight)<sp/>=<sp/>xMax</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4796"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((haveSRight<sp/>=<sp/>fabs((x1<sp/>-<sp/>r1)<sp/>-<sp/>(x0<sp/>-<sp/>r0))<sp/>&gt;<sp/>0.000001))<sp/>{</highlight></codeline>
<codeline lineno="4797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sRight<sp/>=<sp/>(xMax<sp/>-<sp/>(x0<sp/>-<sp/>r0))<sp/>/<sp/>((x1<sp/>-<sp/>r1)<sp/>-<sp/>(x0<sp/>-<sp/>r0));</highlight></codeline>
<codeline lineno="4798"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sRight<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>make<sp/>gcc<sp/>happy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4800"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4801"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>solve<sp/>y(sBottom)<sp/>+<sp/>r(sBottom)<sp/>=<sp/>yMin</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4802"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((haveSBottom<sp/>=<sp/>fabs((y1<sp/>+<sp/>r1)<sp/>-<sp/>(y0<sp/>+<sp/>r0))<sp/>&gt;<sp/>0.000001))<sp/>{</highlight></codeline>
<codeline lineno="4803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sBottom<sp/>=<sp/>(yMin<sp/>-<sp/>(y0<sp/>+<sp/>r0))<sp/>/<sp/>((y1<sp/>+<sp/>r1)<sp/>-<sp/>(y0<sp/>+<sp/>r0));</highlight></codeline>
<codeline lineno="4804"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sBottom<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>make<sp/>gcc<sp/>happy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4806"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4807"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>solve<sp/>y(sTop)<sp/>-<sp/>r(sTop)<sp/>=<sp/>yMax</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4808"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((haveSTop<sp/>=<sp/>fabs((y1<sp/>-<sp/>r1)<sp/>-<sp/>(y0<sp/>-<sp/>r0))<sp/>&gt;<sp/>0.000001))<sp/>{</highlight></codeline>
<codeline lineno="4809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sTop<sp/>=<sp/>(yMax<sp/>-<sp/>(y0<sp/>-<sp/>r0))<sp/>/<sp/>((y1<sp/>-<sp/>r1)<sp/>-<sp/>(y0<sp/>-<sp/>r0));</highlight></codeline>
<codeline lineno="4810"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sTop<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>make<sp/>gcc<sp/>happy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4812"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4813"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>solve<sp/>r(sZero)<sp/>=<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4814"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((haveSZero<sp/>=<sp/>fabs(r1<sp/>-<sp/>r0)<sp/>&gt;<sp/>0.000001))<sp/>{</highlight></codeline>
<codeline lineno="4815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sZero<sp/>=<sp/>-r0<sp/>/<sp/>(r1<sp/>-<sp/>r0);</highlight></codeline>
<codeline lineno="4816"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sZero<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>make<sp/>gcc<sp/>happy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4818"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4819"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>solve<sp/>r(sDiag)<sp/>=<sp/>sqrt((xMax-xMin)^2<sp/>+<sp/>(yMax-yMin)^2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4820"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(haveSZero)<sp/>{</highlight></codeline>
<codeline lineno="4821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sDiag<sp/>=<sp/>(sqrt((xMax<sp/>-<sp/>xMin)<sp/>*<sp/>(xMax<sp/>-<sp/>xMin)<sp/>+</highlight></codeline>
<codeline lineno="4822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(yMax<sp/>-<sp/>yMin)<sp/>*<sp/>(yMax<sp/>-<sp/>yMin))<sp/>-<sp/>r0)<sp/>/<sp/>(r1<sp/>-<sp/>r0);</highlight></codeline>
<codeline lineno="4823"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sDiag<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>make<sp/>gcc<sp/>happy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4825"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4826"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>compute<sp/>sMin</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4827"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shading-&gt;getExtend0())<sp/>{</highlight></codeline>
<codeline lineno="4828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sMin<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>haveSMin<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="4830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x0<sp/>&lt;<sp/>x1<sp/>&amp;&amp;<sp/>haveSLeft<sp/>&amp;&amp;<sp/>sLeft<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="4831"><highlight class="normal"><sp/><sp/><sp/><sp/>sMin<sp/>=<sp/>sLeft;</highlight></codeline>
<codeline lineno="4832"><highlight class="normal"><sp/><sp/><sp/><sp/>haveSMin<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="4833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x0<sp/>&gt;<sp/>x1<sp/>&amp;&amp;<sp/>haveSRight<sp/>&amp;&amp;<sp/>sRight<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="4834"><highlight class="normal"><sp/><sp/><sp/><sp/>sMin<sp/>=<sp/>sRight;</highlight></codeline>
<codeline lineno="4835"><highlight class="normal"><sp/><sp/><sp/><sp/>haveSMin<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="4836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y0<sp/>&lt;<sp/>y1<sp/>&amp;&amp;<sp/>haveSBottom<sp/>&amp;&amp;<sp/>sBottom<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="4838"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!haveSMin<sp/>||<sp/>sBottom<sp/>&gt;<sp/>sMin)<sp/>{</highlight></codeline>
<codeline lineno="4839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sMin<sp/>=<sp/>sBottom;</highlight></codeline>
<codeline lineno="4840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>haveSMin<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="4841"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y0<sp/>&gt;<sp/>y1<sp/>&amp;&amp;<sp/>haveSTop<sp/>&amp;&amp;<sp/>sTop<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="4843"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!haveSMin<sp/>||<sp/>sTop<sp/>&gt;<sp/>sMin)<sp/>{</highlight></codeline>
<codeline lineno="4844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sMin<sp/>=<sp/>sTop;</highlight></codeline>
<codeline lineno="4845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>haveSMin<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="4846"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(haveSZero<sp/>&amp;&amp;<sp/>sZero<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="4849"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!haveSMin<sp/>||<sp/>sZero<sp/>&gt;<sp/>sMin)<sp/>{</highlight></codeline>
<codeline lineno="4850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sMin<sp/>=<sp/>sZero;</highlight></codeline>
<codeline lineno="4851"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4853"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sMin<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4855"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4856"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>compute<sp/>sMax</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4857"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shading-&gt;getExtend1())<sp/>{</highlight></codeline>
<codeline lineno="4858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sMax<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="4859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>haveSMax<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="4860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x1<sp/>&lt;<sp/>x0<sp/>&amp;&amp;<sp/>haveSLeft<sp/>&amp;&amp;<sp/>sLeft<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="4861"><highlight class="normal"><sp/><sp/><sp/><sp/>sMax<sp/>=<sp/>sLeft;</highlight></codeline>
<codeline lineno="4862"><highlight class="normal"><sp/><sp/><sp/><sp/>haveSMax<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="4863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x1<sp/>&gt;<sp/>x0<sp/>&amp;&amp;<sp/>haveSRight<sp/>&amp;&amp;<sp/>sRight<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="4864"><highlight class="normal"><sp/><sp/><sp/><sp/>sMax<sp/>=<sp/>sRight;</highlight></codeline>
<codeline lineno="4865"><highlight class="normal"><sp/><sp/><sp/><sp/>haveSMax<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="4866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y1<sp/>&lt;<sp/>y0<sp/>&amp;&amp;<sp/>haveSBottom<sp/>&amp;&amp;<sp/>sBottom<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="4868"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!haveSMax<sp/>||<sp/>sBottom<sp/>&lt;<sp/>sMax)<sp/>{</highlight></codeline>
<codeline lineno="4869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sMax<sp/>=<sp/>sBottom;</highlight></codeline>
<codeline lineno="4870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>haveSMax<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="4871"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y1<sp/>&gt;<sp/>y0<sp/>&amp;&amp;<sp/>haveSTop<sp/>&amp;&amp;<sp/>sTop<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="4873"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!haveSMax<sp/>||<sp/>sTop<sp/>&lt;<sp/>sMax)<sp/>{</highlight></codeline>
<codeline lineno="4874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sMax<sp/>=<sp/>sTop;</highlight></codeline>
<codeline lineno="4875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>haveSMax<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="4876"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(haveSZero<sp/>&amp;&amp;<sp/>sDiag<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="4879"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!haveSMax<sp/>||<sp/>sDiag<sp/>&lt;<sp/>sMax)<sp/>{</highlight></codeline>
<codeline lineno="4880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sMax<sp/>=<sp/>sDiag;</highlight></codeline>
<codeline lineno="4881"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4883"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sMax<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="4885"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4886"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4887"><highlight class="normal"></highlight></codeline>
<codeline lineno="4888"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>generate<sp/>the<sp/>PS<sp/>code</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4889"><highlight class="normal"><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;/x0<sp/>{0:.6g}<sp/>def\n&quot;</highlight><highlight class="normal">,<sp/>x0);</highlight></codeline>
<codeline lineno="4890"><highlight class="normal"><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;/x1<sp/>{0:.6g}<sp/>def\n&quot;</highlight><highlight class="normal">,<sp/>x1);</highlight></codeline>
<codeline lineno="4891"><highlight class="normal"><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;/dx<sp/>{0:.6g}<sp/>def\n&quot;</highlight><highlight class="normal">,<sp/>x1<sp/>-<sp/>x0);</highlight></codeline>
<codeline lineno="4892"><highlight class="normal"><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;/y0<sp/>{0:.6g}<sp/>def\n&quot;</highlight><highlight class="normal">,<sp/>y0);</highlight></codeline>
<codeline lineno="4893"><highlight class="normal"><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;/y1<sp/>{0:.6g}<sp/>def\n&quot;</highlight><highlight class="normal">,<sp/>y1);</highlight></codeline>
<codeline lineno="4894"><highlight class="normal"><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;/dy<sp/>{0:.6g}<sp/>def\n&quot;</highlight><highlight class="normal">,<sp/>y1<sp/>-<sp/>y0);</highlight></codeline>
<codeline lineno="4895"><highlight class="normal"><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;/r0<sp/>{0:.6g}<sp/>def\n&quot;</highlight><highlight class="normal">,<sp/>r0);</highlight></codeline>
<codeline lineno="4896"><highlight class="normal"><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;/r1<sp/>{0:.6g}<sp/>def\n&quot;</highlight><highlight class="normal">,<sp/>r1);</highlight></codeline>
<codeline lineno="4897"><highlight class="normal"><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;/dr<sp/>{0:.6g}<sp/>def\n&quot;</highlight><highlight class="normal">,<sp/>r1<sp/>-<sp/>r0);</highlight></codeline>
<codeline lineno="4898"><highlight class="normal"><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;/t0<sp/>{0:.6g}<sp/>def\n&quot;</highlight><highlight class="normal">,<sp/>t0);</highlight></codeline>
<codeline lineno="4899"><highlight class="normal"><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;/t1<sp/>{0:.6g}<sp/>def\n&quot;</highlight><highlight class="normal">,<sp/>t1);</highlight></codeline>
<codeline lineno="4900"><highlight class="normal"><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;/dt<sp/>{0:.6g}<sp/>def\n&quot;</highlight><highlight class="normal">,<sp/>t1<sp/>-<sp/>t0);</highlight></codeline>
<codeline lineno="4901"><highlight class="normal"><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;/n<sp/>{0:d}<sp/>def\n&quot;</highlight><highlight class="normal">,<sp/>shading-&gt;getColorSpace()-&gt;getNComps());</highlight></codeline>
<codeline lineno="4902"><highlight class="normal"><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;/encl<sp/>{0:s}<sp/>def\n&quot;</highlight><highlight class="normal">,<sp/>enclosed<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;true&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;false&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4903"><highlight class="normal"><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;/a1<sp/>{0:.6g}<sp/>def\n&quot;</highlight><highlight class="normal">,<sp/>a1);</highlight></codeline>
<codeline lineno="4904"><highlight class="normal"><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;/a2<sp/>{0:.6g}<sp/>def\n&quot;</highlight><highlight class="normal">,<sp/>a2);</highlight></codeline>
<codeline lineno="4905"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shading-&gt;getNFuncs()<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="4906"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;/func<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4907"><highlight class="normal"><sp/><sp/><sp/><sp/>cvtFunction(shading-&gt;getFunc(0));</highlight></codeline>
<codeline lineno="4908"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;def\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4909"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4910"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;/func<sp/>{\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4911"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>shading-&gt;getNFuncs();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="4912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>shading-&gt;getNFuncs()<sp/>-<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="4913"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;dup\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cvtFunction(shading-&gt;getFunc(i));</highlight></codeline>
<codeline lineno="4916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;exec\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>shading-&gt;getNFuncs()<sp/>-<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="4918"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;exch\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4920"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4921"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;}<sp/>def\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4922"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4923"><highlight class="normal"><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;{0:.6g}<sp/>{1:.6g}<sp/>0<sp/>radialSH\n&quot;</highlight><highlight class="normal">,<sp/>sMin,<sp/>sMax);</highlight></codeline>
<codeline lineno="4924"><highlight class="normal"></highlight></codeline>
<codeline lineno="4925"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>extend<sp/>the<sp/>&apos;enclosed&apos;<sp/>case</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4926"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(enclosed)<sp/>{</highlight></codeline>
<codeline lineno="4927"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>extend<sp/>the<sp/>smaller<sp/>circle</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4928"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((shading-&gt;getExtend0()<sp/>&amp;&amp;<sp/>r0<sp/>&lt;=<sp/>r1)<sp/>||</highlight></codeline>
<codeline lineno="4929"><highlight class="normal"><sp/><sp/><sp/><sp/>(shading-&gt;getExtend1()<sp/>&amp;&amp;<sp/>r1<sp/>&lt;<sp/>r0))<sp/>{</highlight></codeline>
<codeline lineno="4930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(r0<sp/>&lt;=<sp/>r1)<sp/>{</highlight></codeline>
<codeline lineno="4931"><highlight class="normal"><sp/><sp/><sp/><sp/>ta<sp/>=<sp/>t0;</highlight></codeline>
<codeline lineno="4932"><highlight class="normal"><sp/><sp/><sp/><sp/>ra<sp/>=<sp/>r0;</highlight></codeline>
<codeline lineno="4933"><highlight class="normal"><sp/><sp/><sp/><sp/>xa<sp/>=<sp/>x0;</highlight></codeline>
<codeline lineno="4934"><highlight class="normal"><sp/><sp/><sp/><sp/>ya<sp/>=<sp/>y0;</highlight></codeline>
<codeline lineno="4935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4936"><highlight class="normal"><sp/><sp/><sp/><sp/>ta<sp/>=<sp/>t1;</highlight></codeline>
<codeline lineno="4937"><highlight class="normal"><sp/><sp/><sp/><sp/>ra<sp/>=<sp/>r1;</highlight></codeline>
<codeline lineno="4938"><highlight class="normal"><sp/><sp/><sp/><sp/>xa<sp/>=<sp/>x1;</highlight></codeline>
<codeline lineno="4939"><highlight class="normal"><sp/><sp/><sp/><sp/>ya<sp/>=<sp/>y1;</highlight></codeline>
<codeline lineno="4940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(level<sp/>==<sp/>psLevel2Sep<sp/>||<sp/>level<sp/>==<sp/>psLevel3Sep)<sp/>{</highlight></codeline>
<codeline lineno="4942"><highlight class="normal"><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;{0:.6g}<sp/>radialCol<sp/>aload<sp/>pop<sp/>k\n&quot;</highlight><highlight class="normal">,<sp/>ta);</highlight></codeline>
<codeline lineno="4943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4944"><highlight class="normal"><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;{0:.6g}<sp/>radialCol<sp/>sc\n&quot;</highlight><highlight class="normal">,<sp/>ta);</highlight></codeline>
<codeline lineno="4945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;{0:.6g}<sp/>{1:.6g}<sp/>{2:.6g}<sp/>0<sp/>360<sp/>arc<sp/>h<sp/>f*\n&quot;</highlight><highlight class="normal">,<sp/>xa,<sp/>ya,<sp/>ra);</highlight></codeline>
<codeline lineno="4947"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4948"><highlight class="normal"></highlight></codeline>
<codeline lineno="4949"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>extend<sp/>the<sp/>larger<sp/>circle</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4950"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((shading-&gt;getExtend0()<sp/>&amp;&amp;<sp/>r0<sp/>&gt;<sp/>r1)<sp/>||</highlight></codeline>
<codeline lineno="4951"><highlight class="normal"><sp/><sp/><sp/><sp/>(shading-&gt;getExtend1()<sp/>&amp;&amp;<sp/>r1<sp/>&gt;=<sp/>r0))<sp/>{</highlight></codeline>
<codeline lineno="4952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(r0<sp/>&gt;<sp/>r1)<sp/>{</highlight></codeline>
<codeline lineno="4953"><highlight class="normal"><sp/><sp/><sp/><sp/>ta<sp/>=<sp/>t0;</highlight></codeline>
<codeline lineno="4954"><highlight class="normal"><sp/><sp/><sp/><sp/>ra<sp/>=<sp/>r0;</highlight></codeline>
<codeline lineno="4955"><highlight class="normal"><sp/><sp/><sp/><sp/>xa<sp/>=<sp/>x0;</highlight></codeline>
<codeline lineno="4956"><highlight class="normal"><sp/><sp/><sp/><sp/>ya<sp/>=<sp/>y0;</highlight></codeline>
<codeline lineno="4957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4958"><highlight class="normal"><sp/><sp/><sp/><sp/>ta<sp/>=<sp/>t1;</highlight></codeline>
<codeline lineno="4959"><highlight class="normal"><sp/><sp/><sp/><sp/>ra<sp/>=<sp/>r1;</highlight></codeline>
<codeline lineno="4960"><highlight class="normal"><sp/><sp/><sp/><sp/>xa<sp/>=<sp/>x1;</highlight></codeline>
<codeline lineno="4961"><highlight class="normal"><sp/><sp/><sp/><sp/>ya<sp/>=<sp/>y1;</highlight></codeline>
<codeline lineno="4962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(level<sp/>==<sp/>psLevel2Sep<sp/>||<sp/>level<sp/>==<sp/>psLevel3Sep)<sp/>{</highlight></codeline>
<codeline lineno="4964"><highlight class="normal"><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;{0:.6g}<sp/>radialCol<sp/>aload<sp/>pop<sp/>k\n&quot;</highlight><highlight class="normal">,<sp/>ta);</highlight></codeline>
<codeline lineno="4965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4966"><highlight class="normal"><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;{0:.6g}<sp/>radialCol<sp/>sc\n&quot;</highlight><highlight class="normal">,<sp/>ta);</highlight></codeline>
<codeline lineno="4967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;{0:.6g}<sp/>{1:.6g}<sp/>{2:.6g}<sp/>0<sp/>360<sp/>arc<sp/>h\n&quot;</highlight><highlight class="normal">,<sp/>xa,<sp/>ya,<sp/>ra);</highlight></codeline>
<codeline lineno="4969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;{0:.6g}<sp/>{1:.6g}<sp/>m<sp/>{2:.6g}<sp/>{3:.6g}<sp/>l<sp/>{4:.6g}<sp/>{5:.6g}<sp/>l<sp/>{6:.6g}<sp/>{7:.6g}<sp/>l<sp/>h<sp/>f*\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="4970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xMin,<sp/>yMin,<sp/>xMin,<sp/>yMax,<sp/>xMax,<sp/>yMax,<sp/>xMax,<sp/>yMin);</highlight></codeline>
<codeline lineno="4971"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4972"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4973"><highlight class="normal"></highlight></codeline>
<codeline lineno="4974"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gTrue;</highlight></codeline>
<codeline lineno="4975"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4976"><highlight class="normal"></highlight></codeline>
<codeline lineno="4977"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PSOutputDev::clip(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state)<sp/>{</highlight></codeline>
<codeline lineno="4978"><highlight class="normal"><sp/><sp/>doPath(state-&gt;getPath());</highlight></codeline>
<codeline lineno="4979"><highlight class="normal"><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;W\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4980"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4981"><highlight class="normal"></highlight></codeline>
<codeline lineno="4982"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PSOutputDev::eoClip(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state)<sp/>{</highlight></codeline>
<codeline lineno="4983"><highlight class="normal"><sp/><sp/>doPath(state-&gt;getPath());</highlight></codeline>
<codeline lineno="4984"><highlight class="normal"><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;W*\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4985"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4986"><highlight class="normal"></highlight></codeline>
<codeline lineno="4987"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PSOutputDev::clipToStrokePath(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state)<sp/>{</highlight></codeline>
<codeline lineno="4988"><highlight class="normal"><sp/><sp/>doPath(state-&gt;getPath());</highlight></codeline>
<codeline lineno="4989"><highlight class="normal"><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;Ws\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4990"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4991"><highlight class="normal"></highlight></codeline>
<codeline lineno="4992"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PSOutputDev::doPath(<ref refid="class_gfx_path" kindref="compound">GfxPath</ref><sp/>*path)<sp/>{</highlight></codeline>
<codeline lineno="4993"><highlight class="normal"><sp/><sp/><ref refid="class_gfx_subpath" kindref="compound">GfxSubpath</ref><sp/>*subpath;</highlight></codeline>
<codeline lineno="4994"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x0,<sp/>y0,<sp/>x1,<sp/>y1,<sp/>x2,<sp/>y2,<sp/>x3,<sp/>y3,<sp/>x4,<sp/>y4;</highlight></codeline>
<codeline lineno="4995"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,<sp/>m,<sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="4996"><highlight class="normal"></highlight></codeline>
<codeline lineno="4997"><highlight class="normal"><sp/><sp/>n<sp/>=<sp/>path-&gt;getNumSubpaths();</highlight></codeline>
<codeline lineno="4998"><highlight class="normal"></highlight></codeline>
<codeline lineno="4999"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>==<sp/>1<sp/>&amp;&amp;<sp/>path-&gt;getSubpath(0)-&gt;getNumPoints()<sp/>==<sp/>5)<sp/>{</highlight></codeline>
<codeline lineno="5000"><highlight class="normal"><sp/><sp/><sp/><sp/>subpath<sp/>=<sp/>path-&gt;getSubpath(0);</highlight></codeline>
<codeline lineno="5001"><highlight class="normal"><sp/><sp/><sp/><sp/>x0<sp/>=<sp/>subpath-&gt;getX(0);</highlight></codeline>
<codeline lineno="5002"><highlight class="normal"><sp/><sp/><sp/><sp/>y0<sp/>=<sp/>subpath-&gt;getY(0);</highlight></codeline>
<codeline lineno="5003"><highlight class="normal"><sp/><sp/><sp/><sp/>x4<sp/>=<sp/>subpath-&gt;getX(4);</highlight></codeline>
<codeline lineno="5004"><highlight class="normal"><sp/><sp/><sp/><sp/>y4<sp/>=<sp/>subpath-&gt;getY(4);</highlight></codeline>
<codeline lineno="5005"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x4<sp/>==<sp/>x0<sp/>&amp;&amp;<sp/>y4<sp/>==<sp/>y0)<sp/>{</highlight></codeline>
<codeline lineno="5006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>x1<sp/>=<sp/>subpath-&gt;getX(1);</highlight></codeline>
<codeline lineno="5007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>y1<sp/>=<sp/>subpath-&gt;getY(1);</highlight></codeline>
<codeline lineno="5008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>x2<sp/>=<sp/>subpath-&gt;getX(2);</highlight></codeline>
<codeline lineno="5009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>y2<sp/>=<sp/>subpath-&gt;getY(2);</highlight></codeline>
<codeline lineno="5010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>x3<sp/>=<sp/>subpath-&gt;getX(3);</highlight></codeline>
<codeline lineno="5011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>y3<sp/>=<sp/>subpath-&gt;getY(3);</highlight></codeline>
<codeline lineno="5012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x0<sp/>==<sp/>x1<sp/>&amp;&amp;<sp/>x2<sp/>==<sp/>x3<sp/>&amp;&amp;<sp/>y0<sp/>==<sp/>y3<sp/>&amp;&amp;<sp/>y1<sp/>==<sp/>y2)<sp/>{</highlight></codeline>
<codeline lineno="5013"><highlight class="normal"><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;{0:.6g}<sp/>{1:.6g}<sp/>{2:.6g}<sp/>{3:.6g}<sp/>re\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="5014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x0<sp/>&lt;<sp/>x2<sp/>?<sp/>x0<sp/>:<sp/>x2,<sp/>y0<sp/>&lt;<sp/>y1<sp/>?<sp/>y0<sp/>:<sp/>y1,</highlight></codeline>
<codeline lineno="5015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fabs(x2<sp/>-<sp/>x0),<sp/>fabs(y1<sp/>-<sp/>y0));</highlight></codeline>
<codeline lineno="5016"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x0<sp/>==<sp/>x3<sp/>&amp;&amp;<sp/>x1<sp/>==<sp/>x2<sp/>&amp;&amp;<sp/>y0<sp/>==<sp/>y1<sp/>&amp;&amp;<sp/>y2<sp/>==<sp/>y3)<sp/>{</highlight></codeline>
<codeline lineno="5018"><highlight class="normal"><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;{0:.6g}<sp/>{1:.6g}<sp/>{2:.6g}<sp/>{3:.6g}<sp/>re\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="5019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x0<sp/>&lt;<sp/>x1<sp/>?<sp/>x0<sp/>:<sp/>x1,<sp/>y0<sp/>&lt;<sp/>y2<sp/>?<sp/>y0<sp/>:<sp/>y2,</highlight></codeline>
<codeline lineno="5020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fabs(x1<sp/>-<sp/>x0),<sp/>fabs(y2<sp/>-<sp/>y0));</highlight></codeline>
<codeline lineno="5021"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5023"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5024"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5025"><highlight class="normal"></highlight></codeline>
<codeline lineno="5026"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="5027"><highlight class="normal"><sp/><sp/><sp/><sp/>subpath<sp/>=<sp/>path-&gt;getSubpath(i);</highlight></codeline>
<codeline lineno="5028"><highlight class="normal"><sp/><sp/><sp/><sp/>m<sp/>=<sp/>subpath-&gt;getNumPoints();</highlight></codeline>
<codeline lineno="5029"><highlight class="normal"><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;{0:.6g}<sp/>{1:.6g}<sp/>m\n&quot;</highlight><highlight class="normal">,<sp/>subpath-&gt;getX(0),<sp/>subpath-&gt;getY(0));</highlight></codeline>
<codeline lineno="5030"><highlight class="normal"><sp/><sp/><sp/><sp/>j<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="5031"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(j<sp/>&lt;<sp/>m)<sp/>{</highlight></codeline>
<codeline lineno="5032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(subpath-&gt;getCurve(j))<sp/>{</highlight></codeline>
<codeline lineno="5033"><highlight class="normal"><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;{0:.6g}<sp/>{1:.6g}<sp/>{2:.6g}<sp/>{3:.6g}<sp/>{4:.6g}<sp/>{5:.6g}<sp/>c\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="5034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>subpath-&gt;getX(j),<sp/>subpath-&gt;getY(j),</highlight></codeline>
<codeline lineno="5035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>subpath-&gt;getX(j+1),<sp/>subpath-&gt;getY(j+1),</highlight></codeline>
<codeline lineno="5036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>subpath-&gt;getX(j+2),<sp/>subpath-&gt;getY(j+2));</highlight></codeline>
<codeline lineno="5037"><highlight class="normal"><sp/><sp/><sp/><sp/>j<sp/>+=<sp/>3;</highlight></codeline>
<codeline lineno="5038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5039"><highlight class="normal"><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;{0:.6g}<sp/>{1:.6g}<sp/>l\n&quot;</highlight><highlight class="normal">,<sp/>subpath-&gt;getX(j),<sp/>subpath-&gt;getY(j));</highlight></codeline>
<codeline lineno="5040"><highlight class="normal"><sp/><sp/><sp/><sp/>++j;</highlight></codeline>
<codeline lineno="5041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5042"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5043"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(subpath-&gt;isClosed())<sp/>{</highlight></codeline>
<codeline lineno="5044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;h\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5045"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5046"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5047"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5048"><highlight class="normal"></highlight></codeline>
<codeline lineno="5049"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PSOutputDev::drawString(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state,<sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*s)<sp/>{</highlight></codeline>
<codeline lineno="5050"><highlight class="normal"><sp/><sp/><ref refid="class_gfx_font" kindref="compound">GfxFont</ref><sp/>*font;</highlight></codeline>
<codeline lineno="5051"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>wMode;</highlight></codeline>
<codeline lineno="5052"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*codeToGID;</highlight></codeline>
<codeline lineno="5053"><highlight class="normal"><sp/><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*s2;</highlight></codeline>
<codeline lineno="5054"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dx,<sp/>dy,<sp/>originX,<sp/>originY;</highlight></codeline>
<codeline lineno="5055"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*p;</highlight></codeline>
<codeline lineno="5056"><highlight class="normal"><sp/><sp/><ref refid="class_unicode_map" kindref="compound">UnicodeMap</ref><sp/>*uMap;</highlight></codeline>
<codeline lineno="5057"><highlight class="normal"><sp/><sp/>CharCode<sp/>code;</highlight></codeline>
<codeline lineno="5058"><highlight class="normal"><sp/><sp/>Unicode<sp/>*u;</highlight></codeline>
<codeline lineno="5059"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buf[8];</highlight></codeline>
<codeline lineno="5060"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*dxdy;</highlight></codeline>
<codeline lineno="5061"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dxdySize,<sp/>len,<sp/>nChars,<sp/>uLen,<sp/>n,<sp/>m,<sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="5062"><highlight class="normal"></highlight></codeline>
<codeline lineno="5063"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>pdftohtml,<sp/>output<sp/>PS<sp/>without<sp/>text</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5064"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>displayText<sp/>==<sp/>gFalse<sp/>)</highlight></codeline>
<codeline lineno="5065"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5066"><highlight class="normal"></highlight></codeline>
<codeline lineno="5067"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>for<sp/>invisible<sp/>text<sp/>--<sp/>this<sp/>is<sp/>used<sp/>by<sp/>Acrobat<sp/>Capture</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5068"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(state-&gt;getRender()<sp/>==<sp/>3)<sp/>{</highlight></codeline>
<codeline lineno="5069"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5070"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5071"><highlight class="normal"></highlight></codeline>
<codeline lineno="5072"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>ignore<sp/>empty<sp/>strings</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5073"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s-&gt;getLength()<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="5074"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5075"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5076"><highlight class="normal"></highlight></codeline>
<codeline lineno="5077"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>the<sp/>font</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5078"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(font<sp/>=<sp/>state-&gt;getFont()))<sp/>{</highlight></codeline>
<codeline lineno="5079"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5080"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5081"><highlight class="normal"><sp/><sp/>wMode<sp/>=<sp/>font-&gt;getWMode();</highlight></codeline>
<codeline lineno="5082"><highlight class="normal"></highlight></codeline>
<codeline lineno="5083"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>for<sp/>a<sp/>subtitute<sp/>16-bit<sp/>font</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5084"><highlight class="normal"><sp/><sp/>uMap<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="5085"><highlight class="normal"><sp/><sp/>codeToGID<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="5086"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(font-&gt;isCIDFont())<sp/>{</highlight></codeline>
<codeline lineno="5087"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>font16EncLen;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="5088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(font-&gt;getID()-&gt;num<sp/>==<sp/>font16Enc[i].fontID.num<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="5089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>font-&gt;getID()-&gt;gen<sp/>==<sp/>font16Enc[i].fontID.gen)<sp/>{</highlight></codeline>
<codeline lineno="5090"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!font16Enc[i].enc)<sp/>{</highlight></codeline>
<codeline lineno="5091"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>font<sp/>substitution<sp/>failed,<sp/>so<sp/>don&apos;t<sp/>output<sp/>any<sp/>text</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5092"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5093"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5094"><highlight class="normal"><sp/><sp/><sp/><sp/>uMap<sp/>=<sp/>globalParams-&gt;getUnicodeMap(font16Enc[i].enc);</highlight></codeline>
<codeline lineno="5095"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5097"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5098"><highlight class="normal"></highlight></codeline>
<codeline lineno="5099"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>for<sp/>a<sp/>code-to-GID<sp/>map</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5100"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>font8InfoLen;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="5102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(font-&gt;getID()-&gt;num<sp/>==<sp/>font8Info[i].fontID.num<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="5103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>font-&gt;getID()-&gt;gen<sp/>==<sp/>font8Info[i].fontID.gen)<sp/>{</highlight></codeline>
<codeline lineno="5104"><highlight class="normal"><sp/><sp/><sp/><sp/>codeToGID<sp/>=<sp/>font8Info[i].codeToGID;</highlight></codeline>
<codeline lineno="5105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5107"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5108"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5109"><highlight class="normal"></highlight></codeline>
<codeline lineno="5110"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>compute<sp/>the<sp/>positioning<sp/>(dx,<sp/>dy)<sp/>for<sp/>each<sp/>char<sp/>in<sp/>the<sp/>string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5111"><highlight class="normal"><sp/><sp/>nChars<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5112"><highlight class="normal"><sp/><sp/>p<sp/>=<sp/>s-&gt;getCString();</highlight></codeline>
<codeline lineno="5113"><highlight class="normal"><sp/><sp/>len<sp/>=<sp/>s-&gt;getLength();</highlight></codeline>
<codeline lineno="5114"><highlight class="normal"><sp/><sp/>s2<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref>();</highlight></codeline>
<codeline lineno="5115"><highlight class="normal"><sp/><sp/>dxdySize<sp/>=<sp/>font-&gt;isCIDFont()<sp/>?<sp/>8<sp/>:<sp/>s-&gt;getLength();</highlight></codeline>
<codeline lineno="5116"><highlight class="normal"><sp/><sp/>dxdy<sp/>=<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*)gmallocn(2<sp/>*<sp/>dxdySize,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="5117"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(len<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="5118"><highlight class="normal"><sp/><sp/><sp/><sp/>n<sp/>=<sp/>font-&gt;getNextChar(p,<sp/>len,<sp/>&amp;code,</highlight></codeline>
<codeline lineno="5119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;u,<sp/>&amp;uLen,</highlight></codeline>
<codeline lineno="5120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;dx,<sp/>&amp;dy,<sp/>&amp;originX,<sp/>&amp;originY);</highlight></codeline>
<codeline lineno="5121"><highlight class="normal"><sp/><sp/><sp/><sp/>dx<sp/>*=<sp/>state-&gt;getFontSize();</highlight></codeline>
<codeline lineno="5122"><highlight class="normal"><sp/><sp/><sp/><sp/>dy<sp/>*=<sp/>state-&gt;getFontSize();</highlight></codeline>
<codeline lineno="5123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(wMode)<sp/>{</highlight></codeline>
<codeline lineno="5124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dy<sp/>+=<sp/>state-&gt;getCharSpace();</highlight></codeline>
<codeline lineno="5125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>==<sp/>1<sp/>&amp;&amp;<sp/>*p<sp/>==<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="5126"><highlight class="normal"><sp/><sp/><sp/><sp/>dy<sp/>+=<sp/>state-&gt;getWordSpace();</highlight></codeline>
<codeline lineno="5127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5128"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dx<sp/>+=<sp/>state-&gt;getCharSpace();</highlight></codeline>
<codeline lineno="5130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>==<sp/>1<sp/>&amp;&amp;<sp/>*p<sp/>==<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="5131"><highlight class="normal"><sp/><sp/><sp/><sp/>dx<sp/>+=<sp/>state-&gt;getWordSpace();</highlight></codeline>
<codeline lineno="5132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5133"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5134"><highlight class="normal"><sp/><sp/><sp/><sp/>dx<sp/>*=<sp/>state-&gt;getHorizScaling();</highlight></codeline>
<codeline lineno="5135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(font-&gt;isCIDFont())<sp/>{</highlight></codeline>
<codeline lineno="5136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(uMap)<sp/>{</highlight></codeline>
<codeline lineno="5137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nChars<sp/>+<sp/>uLen<sp/>&gt;<sp/>dxdySize)<sp/>{</highlight></codeline>
<codeline lineno="5138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dxdySize<sp/>*=<sp/>2;</highlight></codeline>
<codeline lineno="5140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(nChars<sp/>+<sp/>uLen<sp/>&gt;<sp/>dxdySize);</highlight></codeline>
<codeline lineno="5141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dxdy<sp/>=<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*)greallocn(dxdy,<sp/>2<sp/>*<sp/>dxdySize,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="5142"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>uLen;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="5144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m<sp/>=<sp/>uMap-&gt;mapUnicode(u[i],<sp/>buf,<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(buf));</highlight></codeline>
<codeline lineno="5145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>m;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="5146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s2-&gt;append(buf[j]);</highlight></codeline>
<codeline lineno="5147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//~<sp/>this<sp/>really<sp/>needs<sp/>to<sp/>get<sp/>the<sp/>number<sp/>of<sp/>chars<sp/>in<sp/>the<sp/>target</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//~<sp/>encoding<sp/>-<sp/>which<sp/>may<sp/>be<sp/>more<sp/>than<sp/>the<sp/>number<sp/>of<sp/>Unicode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//~<sp/>chars</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dxdy[2<sp/>*<sp/>nChars]<sp/>=<sp/>dx;</highlight></codeline>
<codeline lineno="5152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dxdy[2<sp/>*<sp/>nChars<sp/>+<sp/>1]<sp/>=<sp/>dy;</highlight></codeline>
<codeline lineno="5153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++nChars;</highlight></codeline>
<codeline lineno="5154"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nChars<sp/>+<sp/>1<sp/>&gt;<sp/>dxdySize)<sp/>{</highlight></codeline>
<codeline lineno="5157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dxdySize<sp/>*=<sp/>2;</highlight></codeline>
<codeline lineno="5158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dxdy<sp/>=<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*)greallocn(dxdy,<sp/>2<sp/>*<sp/>dxdySize,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="5159"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5160"><highlight class="normal"><sp/><sp/><sp/><sp/>s2-&gt;append((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)((code<sp/>&gt;&gt;<sp/>8)<sp/>&amp;<sp/>0xff));</highlight></codeline>
<codeline lineno="5161"><highlight class="normal"><sp/><sp/><sp/><sp/>s2-&gt;append((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)(code<sp/>&amp;<sp/>0xff));</highlight></codeline>
<codeline lineno="5162"><highlight class="normal"><sp/><sp/><sp/><sp/>dxdy[2<sp/>*<sp/>nChars]<sp/>=<sp/>dx;</highlight></codeline>
<codeline lineno="5163"><highlight class="normal"><sp/><sp/><sp/><sp/>dxdy[2<sp/>*<sp/>nChars<sp/>+<sp/>1]<sp/>=<sp/>dy;</highlight></codeline>
<codeline lineno="5164"><highlight class="normal"><sp/><sp/><sp/><sp/>++nChars;</highlight></codeline>
<codeline lineno="5165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5166"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!codeToGID<sp/>||<sp/>codeToGID[code]<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="5168"><highlight class="normal"><sp/><sp/><sp/><sp/>s2-&gt;append((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)code);</highlight></codeline>
<codeline lineno="5169"><highlight class="normal"><sp/><sp/><sp/><sp/>dxdy[2<sp/>*<sp/>nChars]<sp/>=<sp/>dx;</highlight></codeline>
<codeline lineno="5170"><highlight class="normal"><sp/><sp/><sp/><sp/>dxdy[2<sp/>*<sp/>nChars<sp/>+<sp/>1]<sp/>=<sp/>dy;</highlight></codeline>
<codeline lineno="5171"><highlight class="normal"><sp/><sp/><sp/><sp/>++nChars;</highlight></codeline>
<codeline lineno="5172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5173"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5174"><highlight class="normal"><sp/><sp/><sp/><sp/>p<sp/>+=<sp/>n;</highlight></codeline>
<codeline lineno="5175"><highlight class="normal"><sp/><sp/><sp/><sp/>len<sp/>-=<sp/>n;</highlight></codeline>
<codeline lineno="5176"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5177"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(uMap)<sp/>{</highlight></codeline>
<codeline lineno="5178"><highlight class="normal"><sp/><sp/><sp/><sp/>uMap-&gt;decRefCnt();</highlight></codeline>
<codeline lineno="5179"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5180"><highlight class="normal"></highlight></codeline>
<codeline lineno="5181"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nChars<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="5182"><highlight class="normal"><sp/><sp/><sp/><sp/>writePSString(s2);</highlight></codeline>
<codeline lineno="5183"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;\n[&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>2<sp/>*<sp/>nChars;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="5185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="5186"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;{0:.6g}&quot;</highlight><highlight class="normal">,<sp/>dxdy[i]);</highlight></codeline>
<codeline lineno="5189"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5190"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;]<sp/>Tj\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5191"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5192"><highlight class="normal"><sp/><sp/>gfree(dxdy);</highlight></codeline>
<codeline lineno="5193"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>s2;</highlight></codeline>
<codeline lineno="5194"><highlight class="normal"></highlight></codeline>
<codeline lineno="5195"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(state-&gt;getRender()<sp/>&amp;<sp/>4)<sp/>{</highlight></codeline>
<codeline lineno="5196"><highlight class="normal"><sp/><sp/><sp/><sp/>haveTextClip<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="5197"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5198"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5199"><highlight class="normal"></highlight></codeline>
<codeline lineno="5200"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PSOutputDev::beginTextObject(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state)<sp/>{</highlight></codeline>
<codeline lineno="5201"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5202"><highlight class="normal"></highlight></codeline>
<codeline lineno="5203"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PSOutputDev::endTextObject(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state)<sp/>{</highlight></codeline>
<codeline lineno="5204"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(haveTextClip)<sp/>{</highlight></codeline>
<codeline lineno="5205"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;Tclip\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5206"><highlight class="normal"><sp/><sp/><sp/><sp/>haveTextClip<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="5207"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5208"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5209"><highlight class="normal"></highlight></codeline>
<codeline lineno="5210"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PSOutputDev::drawImageMask(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state,<sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>*ref,<sp/><ref refid="class_stream" kindref="compound">Stream</ref><sp/>*str,</highlight></codeline>
<codeline lineno="5211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>width,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>height,<sp/>GBool<sp/>invert,</highlight></codeline>
<codeline lineno="5212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GBool<sp/>interpolate,<sp/>GBool<sp/>inlineImg)<sp/>{</highlight></codeline>
<codeline lineno="5213"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len;</highlight></codeline>
<codeline lineno="5214"><highlight class="normal"></highlight></codeline>
<codeline lineno="5215"><highlight class="normal"><sp/><sp/>len<sp/>=<sp/>height<sp/>*<sp/>((width<sp/>+<sp/>7)<sp/>/<sp/>8);</highlight></codeline>
<codeline lineno="5216"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(level)<sp/>{</highlight></codeline>
<codeline lineno="5217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>psLevel1:</highlight></codeline>
<codeline lineno="5218"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>psLevel1Sep:</highlight></codeline>
<codeline lineno="5219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>doImageL1(ref,<sp/>NULL,<sp/>invert,<sp/>inlineImg,<sp/>str,<sp/>width,<sp/>height,<sp/>len,</highlight></codeline>
<codeline lineno="5220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NULL,<sp/>NULL,<sp/>0,<sp/>0,<sp/>gFalse);</highlight></codeline>
<codeline lineno="5221"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>psLevel2:</highlight></codeline>
<codeline lineno="5223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>psLevel2Sep:</highlight></codeline>
<codeline lineno="5224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>doImageL2(ref,<sp/>NULL,<sp/>invert,<sp/>inlineImg,<sp/>str,<sp/>width,<sp/>height,<sp/>len,</highlight></codeline>
<codeline lineno="5225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NULL,<sp/>NULL,<sp/>0,<sp/>0,<sp/>gFalse);</highlight></codeline>
<codeline lineno="5226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5227"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>psLevel3:</highlight></codeline>
<codeline lineno="5228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>psLevel3Sep:</highlight></codeline>
<codeline lineno="5229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>doImageL3(ref,<sp/>NULL,<sp/>invert,<sp/>inlineImg,<sp/>str,<sp/>width,<sp/>height,<sp/>len,</highlight></codeline>
<codeline lineno="5230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NULL,<sp/>NULL,<sp/>0,<sp/>0,<sp/>gFalse);</highlight></codeline>
<codeline lineno="5231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5232"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5233"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5234"><highlight class="normal"></highlight></codeline>
<codeline lineno="5235"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PSOutputDev::setSoftMaskFromImageMask(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state,<sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>*ref,<sp/><ref refid="class_stream" kindref="compound">Stream</ref><sp/>*str,</highlight></codeline>
<codeline lineno="5236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>width,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>height,<sp/>GBool<sp/>invert,</highlight></codeline>
<codeline lineno="5237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GBool<sp/>inlineImg,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*baseMatrix)<sp/>{</highlight></codeline>
<codeline lineno="5238"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(level<sp/>!=<sp/>psLevel1<sp/>&amp;&amp;<sp/>level<sp/>!=<sp/>psLevel1Sep)<sp/>{</highlight></codeline>
<codeline lineno="5239"><highlight class="normal"><sp/><sp/><sp/><sp/>maskToClippingPath(str,<sp/>width,<sp/>height,<sp/>invert);</highlight></codeline>
<codeline lineno="5240"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5241"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5242"><highlight class="normal"></highlight></codeline>
<codeline lineno="5243"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PSOutputDev::unsetSoftMaskFromImageMask(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*<sp/>state,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*baseMatrix)<sp/>{</highlight></codeline>
<codeline lineno="5244"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(level<sp/>!=<sp/>psLevel1<sp/>&amp;&amp;<sp/>level<sp/>!=<sp/>psLevel1Sep)<sp/>{</highlight></codeline>
<codeline lineno="5245"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;pdfImClipEnd\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5246"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5247"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5248"><highlight class="normal"></highlight></codeline>
<codeline lineno="5249"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PSOutputDev::drawImage(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state,<sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>*ref,<sp/><ref refid="class_stream" kindref="compound">Stream</ref><sp/>*str,</highlight></codeline>
<codeline lineno="5250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>width,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>height,<sp/><ref refid="class_gfx_image_color_map" kindref="compound">GfxImageColorMap</ref><sp/>*colorMap,</highlight></codeline>
<codeline lineno="5251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GBool<sp/>interpolate,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*maskColors,<sp/>GBool<sp/>inlineImg)<sp/>{</highlight></codeline>
<codeline lineno="5252"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len;</highlight></codeline>
<codeline lineno="5253"><highlight class="normal"></highlight></codeline>
<codeline lineno="5254"><highlight class="normal"><sp/><sp/>len<sp/>=<sp/>height<sp/>*<sp/>((width<sp/>*<sp/>colorMap-&gt;getNumPixelComps()<sp/>*</highlight></codeline>
<codeline lineno="5255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>colorMap-&gt;getBits()<sp/>+<sp/>7)<sp/>/<sp/>8);</highlight></codeline>
<codeline lineno="5256"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(level)<sp/>{</highlight></codeline>
<codeline lineno="5257"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>psLevel1:</highlight></codeline>
<codeline lineno="5258"><highlight class="normal"><sp/><sp/><sp/><sp/>doImageL1(ref,<sp/>colorMap,<sp/>gFalse,<sp/>inlineImg,<sp/>str,</highlight></codeline>
<codeline lineno="5259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>width,<sp/>height,<sp/>len,<sp/>maskColors,<sp/>NULL,<sp/>0,<sp/>0,<sp/>gFalse);</highlight></codeline>
<codeline lineno="5260"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5261"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>psLevel1Sep:</highlight></codeline>
<codeline lineno="5262"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//~<sp/>handle<sp/>indexed,<sp/>separation,<sp/>...<sp/>color<sp/>spaces</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5263"><highlight class="normal"><sp/><sp/><sp/><sp/>doImageL1Sep(ref,<sp/>colorMap,<sp/>gFalse,<sp/>inlineImg,<sp/>str,</highlight></codeline>
<codeline lineno="5264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>width,<sp/>height,<sp/>len,<sp/>maskColors,<sp/>NULL,<sp/>0,<sp/>0,<sp/>gFalse);</highlight></codeline>
<codeline lineno="5265"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5266"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>psLevel2:</highlight></codeline>
<codeline lineno="5267"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>psLevel2Sep:</highlight></codeline>
<codeline lineno="5268"><highlight class="normal"><sp/><sp/><sp/><sp/>doImageL2(ref,<sp/>colorMap,<sp/>gFalse,<sp/>inlineImg,<sp/>str,</highlight></codeline>
<codeline lineno="5269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>width,<sp/>height,<sp/>len,<sp/>maskColors,<sp/>NULL,<sp/>0,<sp/>0,<sp/>gFalse);</highlight></codeline>
<codeline lineno="5270"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5271"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>psLevel3:</highlight></codeline>
<codeline lineno="5272"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>psLevel3Sep:</highlight></codeline>
<codeline lineno="5273"><highlight class="normal"><sp/><sp/><sp/><sp/>doImageL3(ref,<sp/>colorMap,<sp/>gFalse,<sp/>inlineImg,<sp/>str,</highlight></codeline>
<codeline lineno="5274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>width,<sp/>height,<sp/>len,<sp/>maskColors,<sp/>NULL,<sp/>0,<sp/>0,<sp/>gFalse);</highlight></codeline>
<codeline lineno="5275"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5276"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5277"><highlight class="normal"><sp/><sp/>t3Cacheable<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="5278"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5279"><highlight class="normal"></highlight></codeline>
<codeline lineno="5280"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PSOutputDev::drawMaskedImage(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state,<sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>*ref,<sp/><ref refid="class_stream" kindref="compound">Stream</ref><sp/>*str,</highlight></codeline>
<codeline lineno="5281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>width,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>height,</highlight></codeline>
<codeline lineno="5282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_gfx_image_color_map" kindref="compound">GfxImageColorMap</ref><sp/>*colorMap,</highlight></codeline>
<codeline lineno="5283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GBool<sp/>interpolate,</highlight></codeline>
<codeline lineno="5284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_stream" kindref="compound">Stream</ref><sp/>*maskStr,</highlight></codeline>
<codeline lineno="5285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maskWidth,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maskHeight,</highlight></codeline>
<codeline lineno="5286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GBool<sp/>maskInvert,<sp/>GBool<sp/>maskInterpolate)<sp/>{</highlight></codeline>
<codeline lineno="5287"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len;</highlight></codeline>
<codeline lineno="5288"><highlight class="normal"></highlight></codeline>
<codeline lineno="5289"><highlight class="normal"><sp/><sp/>len<sp/>=<sp/>height<sp/>*<sp/>((width<sp/>*<sp/>colorMap-&gt;getNumPixelComps()<sp/>*</highlight></codeline>
<codeline lineno="5290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>colorMap-&gt;getBits()<sp/>+<sp/>7)<sp/>/<sp/>8);</highlight></codeline>
<codeline lineno="5291"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(level)<sp/>{</highlight></codeline>
<codeline lineno="5292"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>psLevel1:</highlight></codeline>
<codeline lineno="5293"><highlight class="normal"><sp/><sp/><sp/><sp/>doImageL1(ref,<sp/>colorMap,<sp/>gFalse,<sp/>gFalse,<sp/>str,<sp/>width,<sp/>height,<sp/>len,</highlight></codeline>
<codeline lineno="5294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NULL,<sp/>maskStr,<sp/>maskWidth,<sp/>maskHeight,<sp/>maskInvert);<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="5295"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5296"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>psLevel1Sep:</highlight></codeline>
<codeline lineno="5297"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//~<sp/>handle<sp/>indexed,<sp/>separation,<sp/>...<sp/>color<sp/>spaces</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5298"><highlight class="normal"><sp/><sp/><sp/><sp/>doImageL1Sep(ref,<sp/>colorMap,<sp/>gFalse,<sp/>gFalse,<sp/>str,<sp/>width,<sp/>height,<sp/>len,</highlight></codeline>
<codeline lineno="5299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NULL,<sp/>maskStr,<sp/>maskWidth,<sp/>maskHeight,<sp/>maskInvert);<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="5300"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5301"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>psLevel2:</highlight></codeline>
<codeline lineno="5302"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>psLevel2Sep:</highlight></codeline>
<codeline lineno="5303"><highlight class="normal"><sp/><sp/><sp/><sp/>doImageL2(ref,<sp/>colorMap,<sp/>gFalse,<sp/>gFalse,<sp/>str,<sp/>width,<sp/>height,<sp/>len,</highlight></codeline>
<codeline lineno="5304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NULL,<sp/>maskStr,<sp/>maskWidth,<sp/>maskHeight,<sp/>maskInvert);</highlight></codeline>
<codeline lineno="5305"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5306"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>psLevel3:</highlight></codeline>
<codeline lineno="5307"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>psLevel3Sep:</highlight></codeline>
<codeline lineno="5308"><highlight class="normal"><sp/><sp/><sp/><sp/>doImageL3(ref,<sp/>colorMap,<sp/>gFalse,<sp/>gFalse,<sp/>str,<sp/>width,<sp/>height,<sp/>len,</highlight></codeline>
<codeline lineno="5309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NULL,<sp/>maskStr,<sp/>maskWidth,<sp/>maskHeight,<sp/>maskInvert);</highlight></codeline>
<codeline lineno="5310"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5311"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5312"><highlight class="normal"><sp/><sp/>t3Cacheable<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="5313"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5314"><highlight class="normal"></highlight></codeline>
<codeline lineno="5315"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PSOutputDev::doImageL1(<ref refid="class_object" kindref="compound">Object</ref><sp/>*ref,<sp/><ref refid="class_gfx_image_color_map" kindref="compound">GfxImageColorMap</ref><sp/>*colorMap,</highlight></codeline>
<codeline lineno="5316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GBool<sp/>invert,<sp/>GBool<sp/>inlineImg,</highlight></codeline>
<codeline lineno="5317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_stream" kindref="compound">Stream</ref><sp/>*str,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>width,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>height,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len,</highlight></codeline>
<codeline lineno="5318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*maskColors,<sp/><ref refid="class_stream" kindref="compound">Stream</ref><sp/>*maskStr,</highlight></codeline>
<codeline lineno="5319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maskWidth,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maskHeight,<sp/>GBool<sp/>maskInvert)<sp/>{</highlight></codeline>
<codeline lineno="5320"><highlight class="normal"><sp/><sp/><ref refid="class_image_stream" kindref="compound">ImageStream</ref><sp/>*imgStr;</highlight></codeline>
<codeline lineno="5321"><highlight class="normal"><sp/><sp/>Guchar<sp/>pixBuf[gfxColorMaxComps];</highlight></codeline>
<codeline lineno="5322"><highlight class="normal"><sp/><sp/>GfxGray<sp/>gray;</highlight></codeline>
<codeline lineno="5323"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>col,<sp/>x,<sp/>y,<sp/>c,<sp/>i;</highlight></codeline>
<codeline lineno="5324"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>hexBuf[32*2<sp/>+<sp/>2];<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>32<sp/>values<sp/>X<sp/>2<sp/>chars/value<sp/>+<sp/>line<sp/>ending<sp/>+<sp/>null</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5325"><highlight class="normal"><sp/><sp/>Guchar<sp/>digit,<sp/>grayValue;</highlight></codeline>
<codeline lineno="5326"><highlight class="normal"></highlight></codeline>
<codeline lineno="5327"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>explicit<sp/>masking</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5328"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(maskStr<sp/>&amp;&amp;<sp/>!(maskColors<sp/>&amp;&amp;<sp/>colorMap))<sp/>{</highlight></codeline>
<codeline lineno="5329"><highlight class="normal"><sp/><sp/><sp/><sp/>maskToClippingPath(maskStr,<sp/>maskWidth,<sp/>maskHeight,<sp/>maskInvert);</highlight></codeline>
<codeline lineno="5330"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5331"><highlight class="normal"></highlight></codeline>
<codeline lineno="5332"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((inType3Char<sp/>||<sp/>preloadImagesForms)<sp/>&amp;&amp;<sp/>!colorMap)<sp/>{</highlight></codeline>
<codeline lineno="5333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(inlineImg)<sp/>{</highlight></codeline>
<codeline lineno="5334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>an<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>str<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_fixed_length_encoder" kindref="compound">FixedLengthEncoder</ref>(str,<sp/>len);</highlight></codeline>
<codeline lineno="5336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>str<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_a_s_c_i_i_hex_encoder" kindref="compound">ASCIIHexEncoder</ref>(str);</highlight></codeline>
<codeline lineno="5337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>str-&gt;reset();</highlight></codeline>
<codeline lineno="5338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>col<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;[&lt;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5341"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>str-&gt;getChar();</highlight></codeline>
<codeline lineno="5343"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal"><sp/>||<sp/>c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\r&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5344"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;&gt;&apos;</highlight><highlight class="normal"><sp/>||<sp/>c<sp/>==<sp/>EOF)<sp/>{</highlight></codeline>
<codeline lineno="5345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5346"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5347"><highlight class="normal"><sp/><sp/><sp/><sp/>writePSChar(c);</highlight></codeline>
<codeline lineno="5348"><highlight class="normal"><sp/><sp/><sp/><sp/>++col;</highlight></codeline>
<codeline lineno="5349"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>each<sp/>line<sp/>is:<sp/>&quot;&lt;...data...&gt;&lt;eol&gt;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5350"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>so<sp/>max<sp/>data<sp/>length<sp/>=<sp/>255<sp/>-<sp/>4<sp/>=<sp/>251</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5351"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>but<sp/>make<sp/>it<sp/>240<sp/>just<sp/>to<sp/>be<sp/>safe</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5352"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>chunks<sp/>are<sp/>2<sp/>bytes<sp/>each,<sp/>so<sp/>we<sp/>need<sp/>to<sp/>stop<sp/>on<sp/>an<sp/>even<sp/>col<sp/>number</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5353"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(col<sp/>==<sp/>240)<sp/>{</highlight></codeline>
<codeline lineno="5354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;&gt;\n&lt;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>col<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5356"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(c<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;&gt;&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>c<sp/>!=<sp/>EOF);</highlight></codeline>
<codeline lineno="5358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;&gt;]\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;0\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>str-&gt;close();</highlight></codeline>
<codeline lineno="5361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>str;</highlight></codeline>
<codeline lineno="5362"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>make<sp/>sure<sp/>the<sp/>image<sp/>is<sp/>setup,<sp/>it<sp/>sometimes<sp/>is<sp/>not<sp/>like<sp/>on<sp/>bug<sp/>#17645</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>setupImage(ref-&gt;getRef(),<sp/>str,<sp/>gFalse);</highlight></codeline>
<codeline lineno="5365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>up<sp/>to<sp/>use<sp/>the<sp/>array<sp/>already<sp/>created<sp/>by<sp/>setupImages()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;ImData_{0:d}_{1:d}<sp/>0<sp/>0\n&quot;</highlight><highlight class="normal">,<sp/>ref-&gt;getRefNum(),<sp/>ref-&gt;getRefGen());</highlight></codeline>
<codeline lineno="5367"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5368"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5369"><highlight class="normal"></highlight></codeline>
<codeline lineno="5370"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>image/imagemask<sp/>command</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5371"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((inType3Char<sp/>||<sp/>preloadImagesForms)<sp/>&amp;&amp;<sp/>!colorMap)<sp/>{</highlight></codeline>
<codeline lineno="5372"><highlight class="normal"><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;{0:d}<sp/>{1:d}<sp/>{2:s}<sp/>[{3:d}<sp/>0<sp/>0<sp/>{4:d}<sp/>0<sp/>{5:d}]<sp/>pdfImM1a\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="5373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>width,<sp/>height,<sp/>invert<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;true&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;false&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="5374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>width,<sp/>-height,<sp/>height);</highlight></codeline>
<codeline lineno="5375"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(colorMap)<sp/>{</highlight></codeline>
<codeline lineno="5376"><highlight class="normal"><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;{0:d}<sp/>{1:d}<sp/>8<sp/>[{2:d}<sp/>0<sp/>0<sp/>{3:d}<sp/>0<sp/>{4:d}]<sp/>pdfIm1{5:s}\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="5377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>width,<sp/>height,</highlight></codeline>
<codeline lineno="5378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>width,<sp/>-height,<sp/>height,</highlight></codeline>
<codeline lineno="5379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>useBinary<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;Bin&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5380"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5381"><highlight class="normal"><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;{0:d}<sp/>{1:d}<sp/>{2:s}<sp/>[{3:d}<sp/>0<sp/>0<sp/>{4:d}<sp/>0<sp/>{5:d}]<sp/>pdfImM1{6:s}\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="5382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>width,<sp/>height,<sp/>invert<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;true&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;false&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="5383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>width,<sp/>-height,<sp/>height,</highlight></codeline>
<codeline lineno="5384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>useBinary<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;Bin&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5385"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5386"><highlight class="normal"></highlight></codeline>
<codeline lineno="5387"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>image<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5388"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!((inType3Char<sp/>||<sp/>preloadImagesForms)<sp/>&amp;&amp;<sp/>!colorMap))<sp/>{</highlight></codeline>
<codeline lineno="5389"><highlight class="normal"></highlight></codeline>
<codeline lineno="5390"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(colorMap)<sp/>{</highlight></codeline>
<codeline lineno="5391"><highlight class="normal"></highlight></codeline>
<codeline lineno="5392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>up<sp/>to<sp/>process<sp/>the<sp/>data<sp/>stream</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>imgStr<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_image_stream" kindref="compound">ImageStream</ref>(str,<sp/>width,<sp/>colorMap-&gt;getNumPixelComps(),</highlight></codeline>
<codeline lineno="5394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>colorMap-&gt;getBits());</highlight></codeline>
<codeline lineno="5395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>imgStr-&gt;reset();</highlight></codeline>
<codeline lineno="5396"><highlight class="normal"></highlight></codeline>
<codeline lineno="5397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>process<sp/>the<sp/>data<sp/>stream</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(y<sp/>=<sp/>0;<sp/>y<sp/>&lt;<sp/>height;<sp/>++y)<sp/>{</highlight></codeline>
<codeline lineno="5400"><highlight class="normal"></highlight></codeline>
<codeline lineno="5401"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>write<sp/>the<sp/>line</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5402"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(x<sp/>=<sp/>0;<sp/>x<sp/>&lt;<sp/>width;<sp/>++x)<sp/>{</highlight></codeline>
<codeline lineno="5403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>imgStr-&gt;getPixel(pixBuf);</highlight></codeline>
<codeline lineno="5404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>colorMap-&gt;getGray(pixBuf,<sp/>&amp;gray);</highlight></codeline>
<codeline lineno="5405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>grayValue<sp/>=<sp/>colToByte(gray);</highlight></codeline>
<codeline lineno="5406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(useBinary)<sp/>{</highlight></codeline>
<codeline lineno="5407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hexBuf[i++]<sp/>=<sp/>grayValue;</highlight></codeline>
<codeline lineno="5408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>digit<sp/>=<sp/>grayValue<sp/>/<sp/>16;</highlight></codeline>
<codeline lineno="5410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hexBuf[i++]<sp/>=<sp/>digit<sp/>+<sp/>((digit<sp/>&gt;=<sp/>10)?<sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal"><sp/>-<sp/>10:<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>digit<sp/>=<sp/>grayValue<sp/>%<sp/>16;</highlight></codeline>
<codeline lineno="5412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hexBuf[i++]<sp/>=<sp/>digit<sp/>+<sp/>((digit<sp/>&gt;=<sp/>10)?<sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal"><sp/>-<sp/>10:<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&gt;=<sp/>64)<sp/>{</highlight></codeline>
<codeline lineno="5415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!useBinary)<sp/>{</highlight></codeline>
<codeline lineno="5416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hexBuf[i++]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writePSBuf(hexBuf,<sp/>i);</highlight></codeline>
<codeline lineno="5419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5421"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="5424"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!useBinary)<sp/>{</highlight></codeline>
<codeline lineno="5425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>hexBuf[i++]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5426"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5427"><highlight class="normal"><sp/><sp/><sp/><sp/>writePSBuf(hexBuf,<sp/>i);</highlight></codeline>
<codeline lineno="5428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>str-&gt;close();</highlight></codeline>
<codeline lineno="5430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>imgStr;</highlight></codeline>
<codeline lineno="5431"><highlight class="normal"></highlight></codeline>
<codeline lineno="5432"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>imagemask</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5433"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>str-&gt;reset();</highlight></codeline>
<codeline lineno="5435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(y<sp/>=<sp/>0;<sp/>y<sp/>&lt;<sp/>height;<sp/>++y)<sp/>{</highlight></codeline>
<codeline lineno="5437"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(x<sp/>=<sp/>0;<sp/>x<sp/>&lt;<sp/>width;<sp/>x<sp/>+=<sp/>8)<sp/>{</highlight></codeline>
<codeline lineno="5438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>grayValue<sp/>=<sp/>str-&gt;getChar();</highlight></codeline>
<codeline lineno="5439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(useBinary)<sp/>{</highlight></codeline>
<codeline lineno="5440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hexBuf[i++]<sp/>=<sp/>grayValue;</highlight></codeline>
<codeline lineno="5441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>digit<sp/>=<sp/>grayValue<sp/>/<sp/>16;</highlight></codeline>
<codeline lineno="5443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hexBuf[i++]<sp/>=<sp/>digit<sp/>+<sp/>((digit<sp/>&gt;=<sp/>10)?<sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal"><sp/>-<sp/>10:<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>digit<sp/>=<sp/>grayValue<sp/>%<sp/>16;</highlight></codeline>
<codeline lineno="5445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hexBuf[i++]<sp/>=<sp/>digit<sp/>+<sp/>((digit<sp/>&gt;=<sp/>10)?<sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal"><sp/>-<sp/>10:<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&gt;=<sp/>64)<sp/>{</highlight></codeline>
<codeline lineno="5448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!useBinary)<sp/>{</highlight></codeline>
<codeline lineno="5449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hexBuf[i++]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writePSBuf(hexBuf,<sp/>i);</highlight></codeline>
<codeline lineno="5452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5454"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="5457"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!useBinary)<sp/>{</highlight></codeline>
<codeline lineno="5458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>hexBuf[i++]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5459"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5460"><highlight class="normal"><sp/><sp/><sp/><sp/>writePSBuf(hexBuf,<sp/>i);</highlight></codeline>
<codeline lineno="5461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>str-&gt;close();</highlight></codeline>
<codeline lineno="5463"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5464"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5465"><highlight class="normal"></highlight></codeline>
<codeline lineno="5466"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(maskStr<sp/>&amp;&amp;<sp/>!(maskColors<sp/>&amp;&amp;<sp/>colorMap))<sp/>{</highlight></codeline>
<codeline lineno="5467"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;pdfImClipEnd\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5468"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5469"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5470"><highlight class="normal"></highlight></codeline>
<codeline lineno="5471"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PSOutputDev::doImageL1Sep(<ref refid="class_object" kindref="compound">Object</ref><sp/>*ref,<sp/><ref refid="class_gfx_image_color_map" kindref="compound">GfxImageColorMap</ref><sp/>*colorMap,</highlight></codeline>
<codeline lineno="5472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GBool<sp/>invert,<sp/>GBool<sp/>inlineImg,</highlight></codeline>
<codeline lineno="5473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_stream" kindref="compound">Stream</ref><sp/>*str,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>width,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>height,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len,</highlight></codeline>
<codeline lineno="5474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*maskColors,<sp/><ref refid="class_stream" kindref="compound">Stream</ref><sp/>*maskStr,</highlight></codeline>
<codeline lineno="5475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maskWidth,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maskHeight,<sp/>GBool<sp/>maskInvert)<sp/>{</highlight></codeline>
<codeline lineno="5476"><highlight class="normal"><sp/><sp/><ref refid="class_image_stream" kindref="compound">ImageStream</ref><sp/>*imgStr;</highlight></codeline>
<codeline lineno="5477"><highlight class="normal"><sp/><sp/>Guchar<sp/>*lineBuf;</highlight></codeline>
<codeline lineno="5478"><highlight class="normal"><sp/><sp/>Guchar<sp/>pixBuf[gfxColorMaxComps];</highlight></codeline>
<codeline lineno="5479"><highlight class="normal"><sp/><sp/><ref refid="struct_gfx_c_m_y_k" kindref="compound">GfxCMYK</ref><sp/>cmyk;</highlight></codeline>
<codeline lineno="5480"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x,<sp/>y,<sp/>i,<sp/>comp;</highlight></codeline>
<codeline lineno="5481"><highlight class="normal"><sp/><sp/>GBool<sp/>checkProcessColor;</highlight></codeline>
<codeline lineno="5482"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>hexBuf[32*2<sp/>+<sp/>2];<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>32<sp/>values<sp/>X<sp/>2<sp/>chars/value<sp/>+<sp/>line<sp/>ending<sp/>+<sp/>null</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5483"><highlight class="normal"><sp/><sp/>Guchar<sp/>digit;</highlight></codeline>
<codeline lineno="5484"><highlight class="normal"></highlight></codeline>
<codeline lineno="5485"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>explicit<sp/>masking</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5486"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(maskStr<sp/>&amp;&amp;<sp/>!(maskColors<sp/>&amp;&amp;<sp/>colorMap))<sp/>{</highlight></codeline>
<codeline lineno="5487"><highlight class="normal"><sp/><sp/><sp/><sp/>maskToClippingPath(maskStr,<sp/>maskWidth,<sp/>maskHeight,<sp/>maskInvert);</highlight></codeline>
<codeline lineno="5488"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5489"><highlight class="normal"></highlight></codeline>
<codeline lineno="5490"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>width,<sp/>height,<sp/>matrix,<sp/>bits<sp/>per<sp/>component</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5491"><highlight class="normal"><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;{0:d}<sp/>{1:d}<sp/>8<sp/>[{2:d}<sp/>0<sp/>0<sp/>{3:d}<sp/>0<sp/>{4:d}]<sp/>pdfIm1Sep{5:s}\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="5492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>width,<sp/>height,</highlight></codeline>
<codeline lineno="5493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>width,<sp/>-height,<sp/>height,</highlight></codeline>
<codeline lineno="5494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>useBinary<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;Bin&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5495"><highlight class="normal"></highlight></codeline>
<codeline lineno="5496"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>allocate<sp/>a<sp/>line<sp/>buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5497"><highlight class="normal"><sp/><sp/>lineBuf<sp/>=<sp/>(Guchar<sp/>*)gmallocn(width,<sp/>4);</highlight></codeline>
<codeline lineno="5498"><highlight class="normal"></highlight></codeline>
<codeline lineno="5499"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>up<sp/>to<sp/>process<sp/>the<sp/>data<sp/>stream</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5500"><highlight class="normal"><sp/><sp/>imgStr<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_image_stream" kindref="compound">ImageStream</ref>(str,<sp/>width,<sp/>colorMap-&gt;getNumPixelComps(),</highlight></codeline>
<codeline lineno="5501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>colorMap-&gt;getBits());</highlight></codeline>
<codeline lineno="5502"><highlight class="normal"><sp/><sp/>imgStr-&gt;reset();</highlight></codeline>
<codeline lineno="5503"><highlight class="normal"></highlight></codeline>
<codeline lineno="5504"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>process<sp/>the<sp/>data<sp/>stream</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5505"><highlight class="normal"><sp/><sp/>checkProcessColor<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="5506"><highlight class="normal"><sp/><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5507"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(y<sp/>=<sp/>0;<sp/>y<sp/>&lt;<sp/>height;<sp/>++y)<sp/>{</highlight></codeline>
<codeline lineno="5508"><highlight class="normal"></highlight></codeline>
<codeline lineno="5509"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>read<sp/>the<sp/>line</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5510"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(checkProcessColor)<sp/>{</highlight></codeline>
<codeline lineno="5511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>checkProcessColor<sp/>=<sp/>(((psProcessCyan<sp/>|<sp/>psProcessMagenta<sp/>|<sp/>psProcessYellow<sp/>|<sp/>psProcessBlack)<sp/>&amp;<sp/>~processColors)<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="5512"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5513"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(checkProcessColor)<sp/>{</highlight></codeline>
<codeline lineno="5514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(x<sp/>=<sp/>0;<sp/>x<sp/>&lt;<sp/>width;<sp/>++x)<sp/>{</highlight></codeline>
<codeline lineno="5515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>imgStr-&gt;getPixel(pixBuf);</highlight></codeline>
<codeline lineno="5516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>colorMap-&gt;getCMYK(pixBuf,<sp/>&amp;cmyk);</highlight></codeline>
<codeline lineno="5517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lineBuf[4*x+0]<sp/>=<sp/>colToByte(cmyk.c);</highlight></codeline>
<codeline lineno="5518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lineBuf[4*x+1]<sp/>=<sp/>colToByte(cmyk.m);</highlight></codeline>
<codeline lineno="5519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lineBuf[4*x+2]<sp/>=<sp/>colToByte(cmyk.y);</highlight></codeline>
<codeline lineno="5520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lineBuf[4*x+3]<sp/>=<sp/>colToByte(cmyk.k);</highlight></codeline>
<codeline lineno="5521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addProcessColor(colToDbl(cmyk.c),<sp/>colToDbl(cmyk.m),</highlight></codeline>
<codeline lineno="5522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>colToDbl(cmyk.y),<sp/>colToDbl(cmyk.k));</highlight></codeline>
<codeline lineno="5523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5524"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(x<sp/>=<sp/>0;<sp/>x<sp/>&lt;<sp/>width;<sp/>++x)<sp/>{</highlight></codeline>
<codeline lineno="5526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>imgStr-&gt;getPixel(pixBuf);</highlight></codeline>
<codeline lineno="5527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>colorMap-&gt;getCMYK(pixBuf,<sp/>&amp;cmyk);</highlight></codeline>
<codeline lineno="5528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lineBuf[4*x+0]<sp/>=<sp/>colToByte(cmyk.c);</highlight></codeline>
<codeline lineno="5529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lineBuf[4*x+1]<sp/>=<sp/>colToByte(cmyk.m);</highlight></codeline>
<codeline lineno="5530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lineBuf[4*x+2]<sp/>=<sp/>colToByte(cmyk.y);</highlight></codeline>
<codeline lineno="5531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lineBuf[4*x+3]<sp/>=<sp/>colToByte(cmyk.k);</highlight></codeline>
<codeline lineno="5532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5533"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5534"><highlight class="normal"></highlight></codeline>
<codeline lineno="5535"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>write<sp/>one<sp/>line<sp/>of<sp/>each<sp/>color<sp/>component</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5536"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(useBinary)<sp/>{</highlight></codeline>
<codeline lineno="5537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(comp<sp/>=<sp/>0;<sp/>comp<sp/>&lt;<sp/>4;<sp/>++comp)<sp/>{</highlight></codeline>
<codeline lineno="5538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(x<sp/>=<sp/>0;<sp/>x<sp/>&lt;<sp/>width;<sp/>++x)<sp/>{</highlight></codeline>
<codeline lineno="5539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>hexBuf[i++]<sp/>=<sp/>lineBuf[4*x<sp/>+<sp/>comp];</highlight></codeline>
<codeline lineno="5540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&gt;=<sp/>64)<sp/>{</highlight></codeline>
<codeline lineno="5541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writePSBuf(hexBuf,<sp/>i);</highlight></codeline>
<codeline lineno="5542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5544"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5546"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(comp<sp/>=<sp/>0;<sp/>comp<sp/>&lt;<sp/>4;<sp/>++comp)<sp/>{</highlight></codeline>
<codeline lineno="5548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(x<sp/>=<sp/>0;<sp/>x<sp/>&lt;<sp/>width;<sp/>++x)<sp/>{</highlight></codeline>
<codeline lineno="5549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>digit<sp/>=<sp/>lineBuf[4*x<sp/>+<sp/>comp]<sp/>/<sp/>16;</highlight></codeline>
<codeline lineno="5550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>hexBuf[i++]<sp/>=<sp/>digit<sp/>+<sp/>((digit<sp/>&gt;=<sp/>10)?<sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">-10:<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>digit<sp/>=<sp/>lineBuf[4*x<sp/>+<sp/>comp]<sp/>%<sp/>16;</highlight></codeline>
<codeline lineno="5552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>hexBuf[i++]<sp/>=<sp/>digit<sp/>+<sp/>((digit<sp/>&gt;=<sp/>10)?<sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">-10:<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&gt;=<sp/>64)<sp/>{</highlight></codeline>
<codeline lineno="5554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hexBuf[i++]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writePSBuf(hexBuf,<sp/>i);</highlight></codeline>
<codeline lineno="5556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5558"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5560"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5561"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5562"><highlight class="normal"></highlight></codeline>
<codeline lineno="5563"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="5564"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!useBinary)<sp/>{</highlight></codeline>
<codeline lineno="5565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>hexBuf[i++]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5566"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5567"><highlight class="normal"><sp/><sp/><sp/><sp/>writePSBuf(hexBuf,<sp/>i);</highlight></codeline>
<codeline lineno="5568"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5569"><highlight class="normal"></highlight></codeline>
<codeline lineno="5570"><highlight class="normal"><sp/><sp/>str-&gt;close();</highlight></codeline>
<codeline lineno="5571"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>imgStr;</highlight></codeline>
<codeline lineno="5572"><highlight class="normal"><sp/><sp/>gfree(lineBuf);</highlight></codeline>
<codeline lineno="5573"><highlight class="normal"></highlight></codeline>
<codeline lineno="5574"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(maskStr<sp/>&amp;&amp;<sp/>!(maskColors<sp/>&amp;&amp;<sp/>colorMap))<sp/>{</highlight></codeline>
<codeline lineno="5575"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;pdfImClipEnd\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5576"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5577"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5578"><highlight class="normal"></highlight></codeline>
<codeline lineno="5579"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PSOutputDev::maskToClippingPath(<ref refid="class_stream" kindref="compound">Stream</ref><sp/>*maskStr,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maskWidth,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maskHeight,<sp/>GBool<sp/>maskInvert)<sp/>{</highlight></codeline>
<codeline lineno="5580"><highlight class="normal"><sp/><sp/><ref refid="class_image_stream" kindref="compound">ImageStream</ref><sp/>*imgStr;</highlight></codeline>
<codeline lineno="5581"><highlight class="normal"><sp/><sp/>Guchar<sp/>*line;</highlight></codeline>
<codeline lineno="5582"><highlight class="normal"><sp/><sp/><ref refid="struct_p_s_out_img_clip_rect" kindref="compound">PSOutImgClipRect</ref><sp/>*rects0,<sp/>*rects1,<sp/>*rectsTmp,<sp/>*rectsOut;</highlight></codeline>
<codeline lineno="5583"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rects0Len,<sp/>rects1Len,<sp/>rectsSize,<sp/>rectsOutLen,<sp/>rectsOutSize;</highlight></codeline>
<codeline lineno="5584"><highlight class="normal"><sp/><sp/>GBool<sp/>emitRect,<sp/>addRect,<sp/>extendRect;</highlight></codeline>
<codeline lineno="5585"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>x0,<sp/>x1,<sp/>y,<sp/>maskXor;</highlight></codeline>
<codeline lineno="5586"><highlight class="normal"></highlight></codeline>
<codeline lineno="5587"><highlight class="normal"><sp/><sp/>imgStr<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_image_stream" kindref="compound">ImageStream</ref>(maskStr,<sp/>maskWidth,<sp/>1,<sp/>1);</highlight></codeline>
<codeline lineno="5588"><highlight class="normal"><sp/><sp/>imgStr-&gt;reset();</highlight></codeline>
<codeline lineno="5589"><highlight class="normal"><sp/><sp/>rects0Len<sp/>=<sp/>rects1Len<sp/>=<sp/>rectsOutLen<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5590"><highlight class="normal"><sp/><sp/>rectsSize<sp/>=<sp/>rectsOutSize<sp/>=<sp/>64;</highlight></codeline>
<codeline lineno="5591"><highlight class="normal"><sp/><sp/>rects0<sp/>=<sp/>(<ref refid="struct_p_s_out_img_clip_rect" kindref="compound">PSOutImgClipRect</ref><sp/>*)gmallocn(rectsSize,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_p_s_out_img_clip_rect" kindref="compound">PSOutImgClipRect</ref>));</highlight></codeline>
<codeline lineno="5592"><highlight class="normal"><sp/><sp/>rects1<sp/>=<sp/>(<ref refid="struct_p_s_out_img_clip_rect" kindref="compound">PSOutImgClipRect</ref><sp/>*)gmallocn(rectsSize,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_p_s_out_img_clip_rect" kindref="compound">PSOutImgClipRect</ref>));</highlight></codeline>
<codeline lineno="5593"><highlight class="normal"><sp/><sp/>rectsOut<sp/>=<sp/>(<ref refid="struct_p_s_out_img_clip_rect" kindref="compound">PSOutImgClipRect</ref><sp/>*)gmallocn(rectsOutSize,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_p_s_out_img_clip_rect" kindref="compound">PSOutImgClipRect</ref>));</highlight></codeline>
<codeline lineno="5594"><highlight class="normal"><sp/><sp/>maskXor<sp/>=<sp/>maskInvert<sp/>?<sp/>1<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="5595"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(y<sp/>=<sp/>0;<sp/>y<sp/>&lt;<sp/>maskHeight;<sp/>++y)<sp/>{</highlight></codeline>
<codeline lineno="5596"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(line<sp/>=<sp/>imgStr-&gt;getLine()))<sp/>{</highlight></codeline>
<codeline lineno="5597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5598"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5599"><highlight class="normal"><sp/><sp/><sp/><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5600"><highlight class="normal"><sp/><sp/><sp/><sp/>rects1Len<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5601"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(x0<sp/>=<sp/>0;<sp/>x0<sp/>&lt;<sp/>maskWidth<sp/>&amp;&amp;<sp/>(line[x0]<sp/>^<sp/>maskXor);<sp/>++x0)<sp/>;</highlight></codeline>
<codeline lineno="5602"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(x1<sp/>=<sp/>x0;<sp/>x1<sp/>&lt;<sp/>maskWidth<sp/>&amp;&amp;<sp/>!(line[x1]<sp/>^<sp/>maskXor);<sp/>++x1)<sp/>;</highlight></codeline>
<codeline lineno="5603"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(x0<sp/>&lt;<sp/>maskWidth<sp/>||<sp/>i<sp/>&lt;<sp/>rects0Len)<sp/>{</highlight></codeline>
<codeline lineno="5604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>emitRect<sp/>=<sp/>addRect<sp/>=<sp/>extendRect<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="5605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x0<sp/>&gt;=<sp/>maskWidth)<sp/>{</highlight></codeline>
<codeline lineno="5606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>emitRect<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="5607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&gt;=<sp/>rects0Len)<sp/>{</highlight></codeline>
<codeline lineno="5608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addRect<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="5609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rects0[i].x0<sp/>&lt;<sp/>x0)<sp/>{</highlight></codeline>
<codeline lineno="5610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>emitRect<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="5611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x0<sp/>&lt;<sp/>rects0[i].x0)<sp/>{</highlight></codeline>
<codeline lineno="5612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addRect<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="5613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rects0[i].x1<sp/>==<sp/>x1)<sp/>{</highlight></codeline>
<codeline lineno="5614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>extendRect<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="5615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>emitRect<sp/>=<sp/>addRect<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="5617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(emitRect)<sp/>{</highlight></codeline>
<codeline lineno="5619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rectsOutLen<sp/>==<sp/>rectsOutSize)<sp/>{</highlight></codeline>
<codeline lineno="5620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rectsOutSize<sp/>*=<sp/>2;</highlight></codeline>
<codeline lineno="5621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rectsOut<sp/>=<sp/>(<ref refid="struct_p_s_out_img_clip_rect" kindref="compound">PSOutImgClipRect</ref><sp/>*)greallocn(rectsOut,<sp/>rectsOutSize,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_p_s_out_img_clip_rect" kindref="compound">PSOutImgClipRect</ref>));</highlight></codeline>
<codeline lineno="5622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rectsOut[rectsOutLen].x0<sp/>=<sp/>rects0[i].x0;</highlight></codeline>
<codeline lineno="5624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rectsOut[rectsOutLen].x1<sp/>=<sp/>rects0[i].x1;</highlight></codeline>
<codeline lineno="5625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rectsOut[rectsOutLen].y0<sp/>=<sp/>maskHeight<sp/>-<sp/>y<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="5626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rectsOut[rectsOutLen].y1<sp/>=<sp/>maskHeight<sp/>-<sp/>rects0[i].y0<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="5627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++rectsOutLen;</highlight></codeline>
<codeline lineno="5628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++i;</highlight></codeline>
<codeline lineno="5629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(addRect<sp/>||<sp/>extendRect)<sp/>{</highlight></codeline>
<codeline lineno="5631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rects1Len<sp/>==<sp/>rectsSize)<sp/>{</highlight></codeline>
<codeline lineno="5632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rectsSize<sp/>*=<sp/>2;</highlight></codeline>
<codeline lineno="5633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rects0<sp/>=<sp/>(<ref refid="struct_p_s_out_img_clip_rect" kindref="compound">PSOutImgClipRect</ref><sp/>*)greallocn(rects0,<sp/>rectsSize,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_p_s_out_img_clip_rect" kindref="compound">PSOutImgClipRect</ref>));</highlight></codeline>
<codeline lineno="5634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rects1<sp/>=<sp/>(<ref refid="struct_p_s_out_img_clip_rect" kindref="compound">PSOutImgClipRect</ref><sp/>*)greallocn(rects1,<sp/>rectsSize,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_p_s_out_img_clip_rect" kindref="compound">PSOutImgClipRect</ref>));</highlight></codeline>
<codeline lineno="5635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rects1[rects1Len].x0<sp/>=<sp/>x0;</highlight></codeline>
<codeline lineno="5637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rects1[rects1Len].x1<sp/>=<sp/>x1;</highlight></codeline>
<codeline lineno="5638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(addRect)<sp/>{</highlight></codeline>
<codeline lineno="5639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rects1[rects1Len].y0<sp/>=<sp/>y;</highlight></codeline>
<codeline lineno="5640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(extendRect)<sp/>{</highlight></codeline>
<codeline lineno="5642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rects1[rects1Len].y0<sp/>=<sp/>rects0[i].y0;</highlight></codeline>
<codeline lineno="5643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++i;</highlight></codeline>
<codeline lineno="5644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++rects1Len;</highlight></codeline>
<codeline lineno="5646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(x0<sp/>=<sp/>x1;<sp/>x0<sp/>&lt;<sp/>maskWidth<sp/>&amp;&amp;<sp/>(line[x0]<sp/>^<sp/>maskXor);<sp/>++x0)<sp/>;</highlight></codeline>
<codeline lineno="5647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(x1<sp/>=<sp/>x0;<sp/>x1<sp/>&lt;<sp/>maskWidth<sp/>&amp;&amp;<sp/>!(line[x1]<sp/>^<sp/>maskXor);<sp/>++x1)<sp/>;</highlight></codeline>
<codeline lineno="5648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5649"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5650"><highlight class="normal"><sp/><sp/><sp/><sp/>rectsTmp<sp/>=<sp/>rects0;</highlight></codeline>
<codeline lineno="5651"><highlight class="normal"><sp/><sp/><sp/><sp/>rects0<sp/>=<sp/>rects1;</highlight></codeline>
<codeline lineno="5652"><highlight class="normal"><sp/><sp/><sp/><sp/>rects1<sp/>=<sp/>rectsTmp;</highlight></codeline>
<codeline lineno="5653"><highlight class="normal"><sp/><sp/><sp/><sp/>i<sp/>=<sp/>rects0Len;</highlight></codeline>
<codeline lineno="5654"><highlight class="normal"><sp/><sp/><sp/><sp/>rects0Len<sp/>=<sp/>rects1Len;</highlight></codeline>
<codeline lineno="5655"><highlight class="normal"><sp/><sp/><sp/><sp/>rects1Len<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="5656"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5657"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>rects0Len;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="5658"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rectsOutLen<sp/>==<sp/>rectsOutSize)<sp/>{</highlight></codeline>
<codeline lineno="5659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rectsOutSize<sp/>*=<sp/>2;</highlight></codeline>
<codeline lineno="5660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rectsOut<sp/>=<sp/>(<ref refid="struct_p_s_out_img_clip_rect" kindref="compound">PSOutImgClipRect</ref><sp/>*)greallocn(rectsOut,<sp/>rectsOutSize,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_p_s_out_img_clip_rect" kindref="compound">PSOutImgClipRect</ref>));</highlight></codeline>
<codeline lineno="5661"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5662"><highlight class="normal"><sp/><sp/><sp/><sp/>rectsOut[rectsOutLen].x0<sp/>=<sp/>rects0[i].x0;</highlight></codeline>
<codeline lineno="5663"><highlight class="normal"><sp/><sp/><sp/><sp/>rectsOut[rectsOutLen].x1<sp/>=<sp/>rects0[i].x1;</highlight></codeline>
<codeline lineno="5664"><highlight class="normal"><sp/><sp/><sp/><sp/>rectsOut[rectsOutLen].y0<sp/>=<sp/>maskHeight<sp/>-<sp/>y<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="5665"><highlight class="normal"><sp/><sp/><sp/><sp/>rectsOut[rectsOutLen].y1<sp/>=<sp/>maskHeight<sp/>-<sp/>rects0[i].y0<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="5666"><highlight class="normal"><sp/><sp/><sp/><sp/>++rectsOutLen;</highlight></codeline>
<codeline lineno="5667"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5668"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rectsOutLen<sp/>&lt;<sp/>65536/4)<sp/>{</highlight></codeline>
<codeline lineno="5669"><highlight class="normal"><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;{0:d}<sp/>array<sp/>0\n&quot;</highlight><highlight class="normal">,<sp/>rectsOutLen<sp/>*<sp/>4);</highlight></codeline>
<codeline lineno="5670"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>rectsOutLen;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="5671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;[{0:d}<sp/>{1:d}<sp/>{2:d}<sp/>{3:d}]<sp/>pr\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="5672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rectsOut[i].x0,<sp/>rectsOut[i].y0,</highlight></codeline>
<codeline lineno="5673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rectsOut[i].x1<sp/>-<sp/>rectsOut[i].x0,</highlight></codeline>
<codeline lineno="5674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rectsOut[i].y1<sp/>-<sp/>rectsOut[i].y0);</highlight></codeline>
<codeline lineno="5675"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5676"><highlight class="normal"><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;pop<sp/>{0:d}<sp/>{1:d}<sp/>pdfImClip\n&quot;</highlight><highlight class="normal">,<sp/>maskWidth,<sp/>maskHeight);</highlight></codeline>
<codeline lineno="5677"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5678"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>would<sp/>be<sp/>over<sp/>the<sp/>limit<sp/>of<sp/>array<sp/>size.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5679"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>make<sp/>each<sp/>rectangle<sp/>path<sp/>and<sp/>clip.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5680"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;gsave<sp/>newpath\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5681"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>rectsOutLen;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="5682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;{0:.6g}<sp/>{1:.6g}<sp/>{2:.6g}<sp/>{3:.6g}<sp/>re\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="5683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)rectsOut[i].x0)/maskWidth,</highlight></codeline>
<codeline lineno="5684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)rectsOut[i].y0)/maskHeight,</highlight></codeline>
<codeline lineno="5685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)(rectsOut[i].x1<sp/>-<sp/>rectsOut[i].x0))/maskWidth,</highlight></codeline>
<codeline lineno="5686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)(rectsOut[i].y1<sp/>-<sp/>rectsOut[i].y0))/maskHeight);</highlight></codeline>
<codeline lineno="5687"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5688"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;clip\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5689"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5690"><highlight class="normal"><sp/><sp/>gfree(rectsOut);</highlight></codeline>
<codeline lineno="5691"><highlight class="normal"><sp/><sp/>gfree(rects0);</highlight></codeline>
<codeline lineno="5692"><highlight class="normal"><sp/><sp/>gfree(rects1);</highlight></codeline>
<codeline lineno="5693"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>imgStr;</highlight></codeline>
<codeline lineno="5694"><highlight class="normal"><sp/><sp/>maskStr-&gt;close();</highlight></codeline>
<codeline lineno="5695"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5696"><highlight class="normal"></highlight></codeline>
<codeline lineno="5697"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PSOutputDev::doImageL2(<ref refid="class_object" kindref="compound">Object</ref><sp/>*ref,<sp/><ref refid="class_gfx_image_color_map" kindref="compound">GfxImageColorMap</ref><sp/>*colorMap,</highlight></codeline>
<codeline lineno="5698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GBool<sp/>invert,<sp/>GBool<sp/>inlineImg,</highlight></codeline>
<codeline lineno="5699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_stream" kindref="compound">Stream</ref><sp/>*str,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>width,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>height,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len,</highlight></codeline>
<codeline lineno="5700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*maskColors,<sp/><ref refid="class_stream" kindref="compound">Stream</ref><sp/>*maskStr,</highlight></codeline>
<codeline lineno="5701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maskWidth,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maskHeight,<sp/>GBool<sp/>maskInvert)<sp/>{</highlight></codeline>
<codeline lineno="5702"><highlight class="normal"><sp/><sp/><ref refid="class_stream" kindref="compound">Stream</ref><sp/>*str2;</highlight></codeline>
<codeline lineno="5703"><highlight class="normal"><sp/><sp/><ref refid="class_image_stream" kindref="compound">ImageStream</ref><sp/>*imgStr;</highlight></codeline>
<codeline lineno="5704"><highlight class="normal"><sp/><sp/>Guchar<sp/>*line;</highlight></codeline>
<codeline lineno="5705"><highlight class="normal"><sp/><sp/><ref refid="struct_p_s_out_img_clip_rect" kindref="compound">PSOutImgClipRect</ref><sp/>*rects0,<sp/>*rects1,<sp/>*rectsTmp,<sp/>*rectsOut;</highlight></codeline>
<codeline lineno="5706"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rects0Len,<sp/>rects1Len,<sp/>rectsSize,<sp/>rectsOutLen,<sp/>rectsOutSize;</highlight></codeline>
<codeline lineno="5707"><highlight class="normal"><sp/><sp/>GBool<sp/>emitRect,<sp/>addRect,<sp/>extendRect;</highlight></codeline>
<codeline lineno="5708"><highlight class="normal"><sp/><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*s;</highlight></codeline>
<codeline lineno="5709"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,<sp/>numComps;</highlight></codeline>
<codeline lineno="5710"><highlight class="normal"><sp/><sp/>GBool<sp/>useLZW,<sp/>useRLE,<sp/>useASCII,<sp/>useCompressed;</highlight></codeline>
<codeline lineno="5711"><highlight class="normal"><sp/><sp/><ref refid="class_gfx_separation_color_space" kindref="compound">GfxSeparationColorSpace</ref><sp/>*sepCS;</highlight></codeline>
<codeline lineno="5712"><highlight class="normal"><sp/><sp/><ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/><ref refid="structcolor" kindref="compound">color</ref>;</highlight></codeline>
<codeline lineno="5713"><highlight class="normal"><sp/><sp/><ref refid="struct_gfx_c_m_y_k" kindref="compound">GfxCMYK</ref><sp/>cmyk;</highlight></codeline>
<codeline lineno="5714"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="5715"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>col,<sp/>i,<sp/>j,<sp/>x0,<sp/>x1,<sp/>y;</highlight></codeline>
<codeline lineno="5716"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>dataBuf[4096];</highlight></codeline>
<codeline lineno="5717"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="5718"><highlight class="normal"><sp/><sp/>rectsOutLen<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5719"><highlight class="normal"></highlight></codeline>
<codeline lineno="5720"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>color<sp/>key<sp/>masking</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5721"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(maskColors<sp/>&amp;&amp;<sp/>colorMap<sp/>&amp;&amp;<sp/>!inlineImg)<sp/>{</highlight></codeline>
<codeline lineno="5722"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>can&apos;t<sp/>read<sp/>the<sp/>stream<sp/>twice<sp/>for<sp/>inline<sp/>images<sp/>--<sp/>but<sp/>masking</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5723"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>isn&apos;t<sp/>allowed<sp/>with<sp/>inline<sp/>images<sp/>anyway</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5724"><highlight class="normal"><sp/><sp/><sp/><sp/>numComps<sp/>=<sp/>colorMap-&gt;getNumPixelComps();</highlight></codeline>
<codeline lineno="5725"><highlight class="normal"><sp/><sp/><sp/><sp/>imgStr<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_image_stream" kindref="compound">ImageStream</ref>(str,<sp/>width,<sp/>numComps,<sp/>colorMap-&gt;getBits());</highlight></codeline>
<codeline lineno="5726"><highlight class="normal"><sp/><sp/><sp/><sp/>imgStr-&gt;reset();</highlight></codeline>
<codeline lineno="5727"><highlight class="normal"><sp/><sp/><sp/><sp/>rects0Len<sp/>=<sp/>rects1Len<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5728"><highlight class="normal"><sp/><sp/><sp/><sp/>rectsSize<sp/>=<sp/>rectsOutSize<sp/>=<sp/>64;</highlight></codeline>
<codeline lineno="5729"><highlight class="normal"><sp/><sp/><sp/><sp/>rects0<sp/>=<sp/>(<ref refid="struct_p_s_out_img_clip_rect" kindref="compound">PSOutImgClipRect</ref><sp/>*)gmallocn(rectsSize,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_p_s_out_img_clip_rect" kindref="compound">PSOutImgClipRect</ref>));</highlight></codeline>
<codeline lineno="5730"><highlight class="normal"><sp/><sp/><sp/><sp/>rects1<sp/>=<sp/>(<ref refid="struct_p_s_out_img_clip_rect" kindref="compound">PSOutImgClipRect</ref><sp/>*)gmallocn(rectsSize,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_p_s_out_img_clip_rect" kindref="compound">PSOutImgClipRect</ref>));</highlight></codeline>
<codeline lineno="5731"><highlight class="normal"><sp/><sp/><sp/><sp/>rectsOut<sp/>=<sp/>(<ref refid="struct_p_s_out_img_clip_rect" kindref="compound">PSOutImgClipRect</ref><sp/>*)gmallocn(rectsOutSize,</highlight></codeline>
<codeline lineno="5732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_p_s_out_img_clip_rect" kindref="compound">PSOutImgClipRect</ref>));</highlight></codeline>
<codeline lineno="5733"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(y<sp/>=<sp/>0;<sp/>y<sp/>&lt;<sp/>height;<sp/>++y)<sp/>{</highlight></codeline>
<codeline lineno="5734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(line<sp/>=<sp/>imgStr-&gt;getLine()))<sp/>{</highlight></codeline>
<codeline lineno="5735"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rects1Len<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(x0<sp/>=<sp/>0;<sp/>x0<sp/>&lt;<sp/>width;<sp/>++x0)<sp/>{</highlight></codeline>
<codeline lineno="5740"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>numComps;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="5741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(line[x0*numComps+j]<sp/>&lt;<sp/>maskColors[2*j]<sp/>||</highlight></codeline>
<codeline lineno="5742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>line[x0*numComps+j]<sp/>&gt;<sp/>maskColors[2*j+1])<sp/>{</highlight></codeline>
<codeline lineno="5743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5745"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5746"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j<sp/>&lt;<sp/>numComps)<sp/>{</highlight></codeline>
<codeline lineno="5747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5748"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(x1<sp/>=<sp/>x0;<sp/>x1<sp/>&lt;<sp/>width;<sp/>++x1)<sp/>{</highlight></codeline>
<codeline lineno="5751"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>numComps;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="5752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(line[x1*numComps+j]<sp/>&lt;<sp/>maskColors[2*j]<sp/>||</highlight></codeline>
<codeline lineno="5753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>line[x1*numComps+j]<sp/>&gt;<sp/>maskColors[2*j+1])<sp/>{</highlight></codeline>
<codeline lineno="5754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5756"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5757"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j<sp/>==<sp/>numComps)<sp/>{</highlight></codeline>
<codeline lineno="5758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5759"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(x0<sp/>&lt;<sp/>width<sp/>||<sp/>i<sp/>&lt;<sp/>rects0Len)<sp/>{</highlight></codeline>
<codeline lineno="5762"><highlight class="normal"><sp/><sp/><sp/><sp/>emitRect<sp/>=<sp/>addRect<sp/>=<sp/>extendRect<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="5763"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x0<sp/>&gt;=<sp/>width)<sp/>{</highlight></codeline>
<codeline lineno="5764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>emitRect<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="5765"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&gt;=<sp/>rects0Len)<sp/>{</highlight></codeline>
<codeline lineno="5766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>addRect<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="5767"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rects0[i].x0<sp/>&lt;<sp/>x0)<sp/>{</highlight></codeline>
<codeline lineno="5768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>emitRect<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="5769"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x0<sp/>&lt;<sp/>rects0[i].x0)<sp/>{</highlight></codeline>
<codeline lineno="5770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>addRect<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="5771"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rects0[i].x1<sp/>==<sp/>x1)<sp/>{</highlight></codeline>
<codeline lineno="5772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>extendRect<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="5773"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>emitRect<sp/>=<sp/>addRect<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="5775"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5776"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(emitRect)<sp/>{</highlight></codeline>
<codeline lineno="5777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rectsOutLen<sp/>==<sp/>rectsOutSize)<sp/>{</highlight></codeline>
<codeline lineno="5778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rectsOutSize<sp/>*=<sp/>2;</highlight></codeline>
<codeline lineno="5779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rectsOut<sp/>=<sp/>(<ref refid="struct_p_s_out_img_clip_rect" kindref="compound">PSOutImgClipRect</ref><sp/>*)greallocn(rectsOut,<sp/>rectsOutSize,</highlight></codeline>
<codeline lineno="5780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_p_s_out_img_clip_rect" kindref="compound">PSOutImgClipRect</ref>));</highlight></codeline>
<codeline lineno="5781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rectsOut[rectsOutLen].x0<sp/>=<sp/>rects0[i].x0;</highlight></codeline>
<codeline lineno="5783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rectsOut[rectsOutLen].x1<sp/>=<sp/>rects0[i].x1;</highlight></codeline>
<codeline lineno="5784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rectsOut[rectsOutLen].y0<sp/>=<sp/>height<sp/>-<sp/>y<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="5785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rectsOut[rectsOutLen].y1<sp/>=<sp/>height<sp/>-<sp/>rects0[i].y0<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="5786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++rectsOutLen;</highlight></codeline>
<codeline lineno="5787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++i;</highlight></codeline>
<codeline lineno="5788"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5789"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(addRect<sp/>||<sp/>extendRect)<sp/>{</highlight></codeline>
<codeline lineno="5790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rects1Len<sp/>==<sp/>rectsSize)<sp/>{</highlight></codeline>
<codeline lineno="5791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rectsSize<sp/>*=<sp/>2;</highlight></codeline>
<codeline lineno="5792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rects0<sp/>=<sp/>(<ref refid="struct_p_s_out_img_clip_rect" kindref="compound">PSOutImgClipRect</ref><sp/>*)greallocn(rects0,<sp/>rectsSize,</highlight></codeline>
<codeline lineno="5793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_p_s_out_img_clip_rect" kindref="compound">PSOutImgClipRect</ref>));</highlight></codeline>
<codeline lineno="5794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rects1<sp/>=<sp/>(<ref refid="struct_p_s_out_img_clip_rect" kindref="compound">PSOutImgClipRect</ref><sp/>*)greallocn(rects1,<sp/>rectsSize,</highlight></codeline>
<codeline lineno="5795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_p_s_out_img_clip_rect" kindref="compound">PSOutImgClipRect</ref>));</highlight></codeline>
<codeline lineno="5796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rects1[rects1Len].x0<sp/>=<sp/>x0;</highlight></codeline>
<codeline lineno="5798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rects1[rects1Len].x1<sp/>=<sp/>x1;</highlight></codeline>
<codeline lineno="5799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(addRect)<sp/>{</highlight></codeline>
<codeline lineno="5800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rects1[rects1Len].y0<sp/>=<sp/>y;</highlight></codeline>
<codeline lineno="5801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(extendRect)<sp/>{</highlight></codeline>
<codeline lineno="5803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rects1[rects1Len].y0<sp/>=<sp/>rects0[i].y0;</highlight></codeline>
<codeline lineno="5804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++i;</highlight></codeline>
<codeline lineno="5805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++rects1Len;</highlight></codeline>
<codeline lineno="5807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(x0<sp/>=<sp/>x1;<sp/>x0<sp/>&lt;<sp/>width;<sp/>++x0)<sp/>{</highlight></codeline>
<codeline lineno="5808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>numComps;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="5809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(line[x0*numComps+j]<sp/>&lt;<sp/>maskColors[2*j]<sp/>||</highlight></codeline>
<codeline lineno="5810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>line[x0*numComps+j]<sp/>&gt;<sp/>maskColors[2*j+1])<sp/>{</highlight></codeline>
<codeline lineno="5811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j<sp/>&lt;<sp/>numComps)<sp/>{</highlight></codeline>
<codeline lineno="5815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(x1<sp/>=<sp/>x0;<sp/>x1<sp/>&lt;<sp/>width;<sp/>++x1)<sp/>{</highlight></codeline>
<codeline lineno="5819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>numComps;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="5820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(line[x1*numComps+j]<sp/>&lt;<sp/>maskColors[2*j]<sp/>||</highlight></codeline>
<codeline lineno="5821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>line[x1*numComps+j]<sp/>&gt;<sp/>maskColors[2*j+1])<sp/>{</highlight></codeline>
<codeline lineno="5822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j<sp/>==<sp/>numComps)<sp/>{</highlight></codeline>
<codeline lineno="5826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5829"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rectsTmp<sp/>=<sp/>rects0;</highlight></codeline>
<codeline lineno="5832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rects0<sp/>=<sp/>rects1;</highlight></codeline>
<codeline lineno="5833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rects1<sp/>=<sp/>rectsTmp;</highlight></codeline>
<codeline lineno="5834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>=<sp/>rects0Len;</highlight></codeline>
<codeline lineno="5835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rects0Len<sp/>=<sp/>rects1Len;</highlight></codeline>
<codeline lineno="5836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rects1Len<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="5837"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5838"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>rects0Len;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="5839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rectsOutLen<sp/>==<sp/>rectsOutSize)<sp/>{</highlight></codeline>
<codeline lineno="5840"><highlight class="normal"><sp/><sp/><sp/><sp/>rectsOutSize<sp/>*=<sp/>2;</highlight></codeline>
<codeline lineno="5841"><highlight class="normal"><sp/><sp/><sp/><sp/>rectsOut<sp/>=<sp/>(<ref refid="struct_p_s_out_img_clip_rect" kindref="compound">PSOutImgClipRect</ref><sp/>*)greallocn(rectsOut,<sp/>rectsOutSize,</highlight></codeline>
<codeline lineno="5842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_p_s_out_img_clip_rect" kindref="compound">PSOutImgClipRect</ref>));</highlight></codeline>
<codeline lineno="5843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rectsOut[rectsOutLen].x0<sp/>=<sp/>rects0[i].x0;</highlight></codeline>
<codeline lineno="5845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rectsOut[rectsOutLen].x1<sp/>=<sp/>rects0[i].x1;</highlight></codeline>
<codeline lineno="5846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rectsOut[rectsOutLen].y0<sp/>=<sp/>height<sp/>-<sp/>y<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="5847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rectsOut[rectsOutLen].y1<sp/>=<sp/>height<sp/>-<sp/>rects0[i].y0<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="5848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++rectsOutLen;</highlight></codeline>
<codeline lineno="5849"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5850"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rectsOutLen<sp/>&lt;<sp/>65536/4)<sp/>{</highlight></codeline>
<codeline lineno="5851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;{0:d}<sp/>array<sp/>0\n&quot;</highlight><highlight class="normal">,<sp/>rectsOutLen<sp/>*<sp/>4);</highlight></codeline>
<codeline lineno="5852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>rectsOutLen;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="5853"><highlight class="normal"><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;[{0:d}<sp/>{1:d}<sp/>{2:d}<sp/>{3:d}]<sp/>pr\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="5854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rectsOut[i].x0,<sp/>rectsOut[i].y0,</highlight></codeline>
<codeline lineno="5855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rectsOut[i].x1<sp/>-<sp/>rectsOut[i].x0,</highlight></codeline>
<codeline lineno="5856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rectsOut[i].y1<sp/>-<sp/>rectsOut[i].y0);</highlight></codeline>
<codeline lineno="5857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;pop<sp/>{0:d}<sp/>{1:d}<sp/>pdfImClip\n&quot;</highlight><highlight class="normal">,<sp/>width,<sp/>height);</highlight></codeline>
<codeline lineno="5859"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>would<sp/>be<sp/>over<sp/>the<sp/>limit<sp/>of<sp/>array<sp/>size.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>make<sp/>each<sp/>rectangle<sp/>path<sp/>and<sp/>clip.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;gsave<sp/>newpath\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>rectsOutLen;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="5864"><highlight class="normal"><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;{0:.6g}<sp/>{1:.6g}<sp/>{2:.6g}<sp/>{3:.6g}<sp/>re\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="5865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)rectsOut[i].x0)/width,</highlight></codeline>
<codeline lineno="5866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)rectsOut[i].y0)/height,</highlight></codeline>
<codeline lineno="5867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)(rectsOut[i].x1<sp/>-<sp/>rectsOut[i].x0))/width,</highlight></codeline>
<codeline lineno="5868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)(rectsOut[i].y1<sp/>-<sp/>rectsOut[i].y0))/height);</highlight></codeline>
<codeline lineno="5869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;clip\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5871"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5872"><highlight class="normal"><sp/><sp/><sp/><sp/>gfree(rectsOut);</highlight></codeline>
<codeline lineno="5873"><highlight class="normal"><sp/><sp/><sp/><sp/>gfree(rects0);</highlight></codeline>
<codeline lineno="5874"><highlight class="normal"><sp/><sp/><sp/><sp/>gfree(rects1);</highlight></codeline>
<codeline lineno="5875"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>imgStr;</highlight></codeline>
<codeline lineno="5876"><highlight class="normal"><sp/><sp/><sp/><sp/>str-&gt;close();</highlight></codeline>
<codeline lineno="5877"><highlight class="normal"></highlight></codeline>
<codeline lineno="5878"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>explicit<sp/>masking</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5879"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(maskStr)<sp/>{</highlight></codeline>
<codeline lineno="5880"><highlight class="normal"><sp/><sp/><sp/><sp/>maskToClippingPath(maskStr,<sp/>maskWidth,<sp/>maskHeight,<sp/>maskInvert);</highlight></codeline>
<codeline lineno="5881"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5882"><highlight class="normal"></highlight></codeline>
<codeline lineno="5883"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>color<sp/>space</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5884"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(colorMap)<sp/>{</highlight></codeline>
<codeline lineno="5885"><highlight class="normal"><sp/><sp/><sp/><sp/>dumpColorSpaceL2(colorMap-&gt;getColorSpace(),<sp/>gFalse,<sp/>gTrue,<sp/>gFalse);</highlight></codeline>
<codeline lineno="5886"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;<sp/>setcolorspace\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5887"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5888"><highlight class="normal"></highlight></codeline>
<codeline lineno="5889"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>up<sp/>the<sp/>image<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5890"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mode<sp/>==<sp/>psModeForm<sp/>||<sp/>inType3Char<sp/>||<sp/>preloadImagesForms)<sp/>{</highlight></codeline>
<codeline lineno="5891"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(inlineImg)<sp/>{</highlight></codeline>
<codeline lineno="5892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>an<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>str2<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_fixed_length_encoder" kindref="compound">FixedLengthEncoder</ref>(str,<sp/>len);</highlight></codeline>
<codeline lineno="5894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(getEnableLZW())<sp/>{</highlight></codeline>
<codeline lineno="5895"><highlight class="normal"><sp/><sp/><sp/><sp/>str2<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_l_z_w_encoder" kindref="compound">LZWEncoder</ref>(str2);</highlight></codeline>
<codeline lineno="5896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5897"><highlight class="normal"><sp/><sp/><sp/><sp/>str2<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_run_length_encoder" kindref="compound">RunLengthEncoder</ref>(str2);</highlight></codeline>
<codeline lineno="5898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(useASCIIHex)<sp/>{</highlight></codeline>
<codeline lineno="5900"><highlight class="normal"><sp/><sp/><sp/><sp/>str2<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_a_s_c_i_i_hex_encoder" kindref="compound">ASCIIHexEncoder</ref>(str2);</highlight></codeline>
<codeline lineno="5901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5902"><highlight class="normal"><sp/><sp/><sp/><sp/>str2<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_a_s_c_i_i85_encoder" kindref="compound">ASCII85Encoder</ref>(str2);</highlight></codeline>
<codeline lineno="5903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>str2-&gt;reset();</highlight></codeline>
<codeline lineno="5905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>col<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePS((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)(useASCIIHex<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;[&lt;&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;[&lt;~&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="5907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5908"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>str2-&gt;getChar();</highlight></codeline>
<codeline lineno="5910"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal"><sp/>||<sp/>c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\r&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5911"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/>(useASCIIHex<sp/>?<sp/></highlight><highlight class="charliteral">&apos;&gt;&apos;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="charliteral">&apos;~&apos;</highlight><highlight class="normal">)<sp/>||<sp/>c<sp/>==<sp/>EOF)<sp/>{</highlight></codeline>
<codeline lineno="5912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5913"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5914"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;z&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="5915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePSChar(c);</highlight></codeline>
<codeline lineno="5916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++col;</highlight></codeline>
<codeline lineno="5917"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePSChar(c);</highlight></codeline>
<codeline lineno="5919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++col;</highlight></codeline>
<codeline lineno="5920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>1;<sp/>i<sp/>&lt;=<sp/>(useASCIIHex<sp/>?<sp/>1<sp/>:<sp/>4);<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="5921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>str2-&gt;getChar();</highlight></codeline>
<codeline lineno="5923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal"><sp/>||<sp/>c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\r&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/>(useASCIIHex<sp/>?<sp/></highlight><highlight class="charliteral">&apos;&gt;&apos;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="charliteral">&apos;~&apos;</highlight><highlight class="normal">)<sp/>||<sp/>c<sp/>==<sp/>EOF)<sp/>{</highlight></codeline>
<codeline lineno="5925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writePSChar(c);</highlight></codeline>
<codeline lineno="5928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++col;</highlight></codeline>
<codeline lineno="5929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5930"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5931"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>each<sp/>line<sp/>is:<sp/>&quot;&lt;~...data...~&gt;&lt;eol&gt;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5932"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>so<sp/>max<sp/>data<sp/>length<sp/>=<sp/>255<sp/>-<sp/>6<sp/>=<sp/>249</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5933"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>chunks<sp/>are<sp/>1<sp/>or<sp/>5<sp/>bytes<sp/>each,<sp/>so<sp/>we<sp/>have<sp/>to<sp/>stop<sp/>at<sp/>245</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5934"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>but<sp/>make<sp/>it<sp/>240<sp/>just<sp/>to<sp/>be<sp/>safe</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5935"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(col<sp/>&gt;<sp/>240)<sp/>{</highlight></codeline>
<codeline lineno="5936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePS((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)(useASCIIHex<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;&gt;\n&lt;&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;~&gt;\n&lt;~&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="5937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>col<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5938"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(c<sp/>!=<sp/>(useASCIIHex<sp/>?<sp/></highlight><highlight class="charliteral">&apos;&gt;&apos;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="charliteral">&apos;~&apos;</highlight><highlight class="normal">)<sp/>&amp;&amp;<sp/>c<sp/>!=<sp/>EOF);</highlight></codeline>
<codeline lineno="5940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePS((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)(useASCIIHex<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;&gt;\n&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;~&gt;\n&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="5941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>an<sp/>extra<sp/>entry<sp/>because<sp/>the<sp/>LZWDecode/RunLengthDecode<sp/>filter<sp/>may</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>read<sp/>past<sp/>the<sp/>end</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;&lt;&gt;]\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;0\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>str2-&gt;close();</highlight></codeline>
<codeline lineno="5946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>str2;</highlight></codeline>
<codeline lineno="5947"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>make<sp/>sure<sp/>the<sp/>image<sp/>is<sp/>setup,<sp/>it<sp/>sometimes<sp/>is<sp/>not<sp/>like<sp/>on<sp/>bug<sp/>#17645</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>setupImage(ref-&gt;getRef(),<sp/>str,<sp/>gFalse);</highlight></codeline>
<codeline lineno="5950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>up<sp/>to<sp/>use<sp/>the<sp/>array<sp/>already<sp/>created<sp/>by<sp/>setupImages()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;ImData_{0:d}_{1:d}<sp/>0<sp/>0\n&quot;</highlight><highlight class="normal">,ref-&gt;getRefNum(),<sp/>ref-&gt;getRefGen());</highlight></codeline>
<codeline lineno="5952"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5953"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5954"><highlight class="normal"></highlight></codeline>
<codeline lineno="5955"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>image<sp/>dictionary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5956"><highlight class="normal"><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;&lt;&lt;\n<sp/><sp/>/ImageType<sp/>1\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5957"><highlight class="normal"></highlight></codeline>
<codeline lineno="5958"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>width,<sp/>height,<sp/>matrix,<sp/>bits<sp/>per<sp/>component</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5959"><highlight class="normal"><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>/Width<sp/>{0:d}\n&quot;</highlight><highlight class="normal">,<sp/>width);</highlight></codeline>
<codeline lineno="5960"><highlight class="normal"><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>/Height<sp/>{0:d}\n&quot;</highlight><highlight class="normal">,<sp/>height);</highlight></codeline>
<codeline lineno="5961"><highlight class="normal"><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>/ImageMatrix<sp/>[{0:d}<sp/>0<sp/>0<sp/>{1:d}<sp/>0<sp/>{2:d}]\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="5962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>width,<sp/>-height,<sp/>height);</highlight></codeline>
<codeline lineno="5963"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(colorMap<sp/>&amp;&amp;<sp/>colorMap-&gt;getColorSpace()-&gt;getMode()<sp/>==<sp/>csDeviceN)<sp/>{</highlight></codeline>
<codeline lineno="5964"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>/BitsPerComponent<sp/>8\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5965"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5966"><highlight class="normal"><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>/BitsPerComponent<sp/>{0:d}\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="5967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>colorMap<sp/>?<sp/>colorMap-&gt;getBits()<sp/>:<sp/>1);</highlight></codeline>
<codeline lineno="5968"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5969"><highlight class="normal"></highlight></codeline>
<codeline lineno="5970"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>decode<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5971"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(colorMap)<sp/>{</highlight></codeline>
<codeline lineno="5972"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>/Decode<sp/>[&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5973"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((level<sp/>==<sp/>psLevel2Sep<sp/>||<sp/>level<sp/>==<sp/>psLevel3Sep)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="5974"><highlight class="normal"><sp/><sp/><sp/><sp/>colorMap-&gt;getColorSpace()-&gt;getMode()<sp/>==<sp/>csSeparation)<sp/>{</highlight></codeline>
<codeline lineno="5975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>matches<sp/>up<sp/>with<sp/>the<sp/>code<sp/>in<sp/>the<sp/>pdfImSep<sp/>operator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>(1<sp/>&lt;&lt;<sp/>colorMap-&gt;getBits())<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="5977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;{0:.4g}<sp/>{1:.4g}&quot;</highlight><highlight class="normal">,<sp/>colorMap-&gt;getDecodeLow(0)<sp/>*<sp/>n,</highlight></codeline>
<codeline lineno="5978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>colorMap-&gt;getDecodeHigh(0)<sp/>*<sp/>n);</highlight></codeline>
<codeline lineno="5979"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(colorMap-&gt;getColorSpace()-&gt;getMode()<sp/>==<sp/>csDeviceN)<sp/>{</highlight></codeline>
<codeline lineno="5980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>numComps<sp/>=<sp/>((<ref refid="class_gfx_device_n_color_space" kindref="compound">GfxDeviceNColorSpace</ref><sp/>*)colorMap-&gt;getColorSpace())-&gt;</highlight></codeline>
<codeline lineno="5981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getAlt()-&gt;getNComps();</highlight></codeline>
<codeline lineno="5982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>numComps;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="5983"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="5984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5985"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5986"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;0<sp/>1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5988"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>numComps<sp/>=<sp/>colorMap-&gt;getNumPixelComps();</highlight></codeline>
<codeline lineno="5990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>numComps;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="5991"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="5992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5993"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5994"><highlight class="normal"><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;{0:.4g}<sp/>{1:.4g}&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="5995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>colorMap-&gt;getDecodeLow(i),<sp/>colorMap-&gt;getDecodeHigh(i));</highlight></codeline>
<codeline lineno="5996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5997"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5998"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;]\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5999"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="6000"><highlight class="normal"><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>/Decode<sp/>[{0:d}<sp/>{1:d}]\n&quot;</highlight><highlight class="normal">,<sp/>invert<sp/>?<sp/>1<sp/>:<sp/>0,<sp/>invert<sp/>?<sp/>0<sp/>:<sp/>1);</highlight></codeline>
<codeline lineno="6001"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6002"><highlight class="normal"></highlight></codeline>
<codeline lineno="6003"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>data<sp/>source</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6004"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mode<sp/>==<sp/>psModeForm<sp/>||<sp/>inType3Char<sp/>||<sp/>preloadImagesForms)<sp/>{</highlight></codeline>
<codeline lineno="6005"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(inlineImg)<sp/>{</highlight></codeline>
<codeline lineno="6006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>/DataSource<sp/>{<sp/>pdfImStr<sp/>}\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6007"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="6008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>/DataSource<sp/>{<sp/>dup<sp/>65535<sp/>ge<sp/>{<sp/>pop<sp/>1<sp/>add<sp/>0<sp/>}<sp/>if<sp/>2<sp/>index<sp/>2&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6009"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>index<sp/>get<sp/>1<sp/>index<sp/>get<sp/>exch<sp/>1<sp/>add<sp/>exch<sp/>}\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6010"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6011"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="6012"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>/DataSource<sp/>currentfile\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6013"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6014"><highlight class="normal"></highlight></codeline>
<codeline lineno="6015"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>filters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6016"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((mode<sp/>==<sp/>psModeForm<sp/>||<sp/>inType3Char<sp/>||<sp/>preloadImagesForms)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="6017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uncompressPreloadedImages)<sp/>{</highlight></codeline>
<codeline lineno="6018"><highlight class="normal"><sp/><sp/><sp/><sp/>s<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="6019"><highlight class="normal"><sp/><sp/><sp/><sp/>useLZW<sp/>=<sp/>useRLE<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="6020"><highlight class="normal"><sp/><sp/><sp/><sp/>useCompressed<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="6021"><highlight class="normal"><sp/><sp/><sp/><sp/>useASCII<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="6022"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="6023"><highlight class="normal"><sp/><sp/><sp/><sp/>s<sp/>=<sp/>str-&gt;getPSFilter(level<sp/>&lt;<sp/>psLevel2<sp/>?<sp/>1<sp/>:<sp/>level<sp/>&lt;<sp/>psLevel3<sp/>?<sp/>2<sp/>:<sp/>3,</highlight></codeline>
<codeline lineno="6024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6025"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((colorMap<sp/>&amp;&amp;<sp/>colorMap-&gt;getColorSpace()-&gt;getMode()<sp/>==<sp/>csDeviceN)<sp/>||</highlight></codeline>
<codeline lineno="6026"><highlight class="normal"><sp/><sp/><sp/><sp/>inlineImg<sp/>||<sp/>!s)<sp/>{</highlight></codeline>
<codeline lineno="6027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(getEnableLZW())<sp/>{</highlight></codeline>
<codeline lineno="6028"><highlight class="normal"><sp/><sp/><sp/><sp/>useLZW<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="6029"><highlight class="normal"><sp/><sp/><sp/><sp/>useRLE<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="6030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="6031"><highlight class="normal"><sp/><sp/><sp/><sp/>useRLE<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="6032"><highlight class="normal"><sp/><sp/><sp/><sp/>useLZW<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="6033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>useASCII<sp/>=<sp/>!(mode<sp/>==<sp/>psModeForm<sp/>||<sp/>inType3Char<sp/>||<sp/>preloadImagesForms);</highlight></codeline>
<codeline lineno="6035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>useCompressed<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="6036"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="6037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>useLZW<sp/>=<sp/>useRLE<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="6038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>useASCII<sp/>=<sp/>str-&gt;isBinary()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="6039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!(mode<sp/>==<sp/>psModeForm<sp/>||<sp/>inType3Char<sp/>||<sp/>preloadImagesForms);</highlight></codeline>
<codeline lineno="6040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>useCompressed<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="6041"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6042"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6043"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(useASCII)<sp/>{</highlight></codeline>
<codeline lineno="6044"><highlight class="normal"><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>/ASCII{0:s}Decode<sp/>filter\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="6045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>useASCIIHex<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;Hex&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;85&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6046"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6047"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(useLZW)<sp/>{</highlight></codeline>
<codeline lineno="6048"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>/LZWDecode<sp/>filter\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6049"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(useRLE)<sp/>{</highlight></codeline>
<codeline lineno="6050"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>/RunLengthDecode<sp/>filter\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6051"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6052"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(useCompressed)<sp/>{</highlight></codeline>
<codeline lineno="6053"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(s-&gt;getCString());</highlight></codeline>
<codeline lineno="6054"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6055"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s)<sp/>{</highlight></codeline>
<codeline lineno="6056"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>s;</highlight></codeline>
<codeline lineno="6057"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6058"><highlight class="normal"></highlight></codeline>
<codeline lineno="6059"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mode<sp/>==<sp/>psModeForm<sp/>||<sp/>inType3Char<sp/>||<sp/>preloadImagesForms)<sp/>{</highlight></codeline>
<codeline lineno="6060"><highlight class="normal"></highlight></codeline>
<codeline lineno="6061"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>end<sp/>of<sp/>image<sp/>dictionary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6062"><highlight class="normal"><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;&gt;&gt;\n{0:s}\n&quot;</highlight><highlight class="normal">,<sp/>colorMap<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;image&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;imagemask&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6063"><highlight class="normal"></highlight></codeline>
<codeline lineno="6064"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>rid<sp/>of<sp/>the<sp/>array<sp/>and<sp/>index</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6065"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!inlineImg)<sp/>writePS(</highlight><highlight class="stringliteral">&quot;pop<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6066"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;pop<sp/>pop\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6067"><highlight class="normal"></highlight></codeline>
<codeline lineno="6068"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="6069"><highlight class="normal"></highlight></codeline>
<codeline lineno="6070"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>cut<sp/>off<sp/>inline<sp/>image<sp/>streams<sp/>at<sp/>appropriate<sp/>length</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6071"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(inlineImg)<sp/>{</highlight></codeline>
<codeline lineno="6072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>str<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_fixed_length_encoder" kindref="compound">FixedLengthEncoder</ref>(str,<sp/>len);</highlight></codeline>
<codeline lineno="6073"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(useCompressed)<sp/>{</highlight></codeline>
<codeline lineno="6074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>str<sp/>=<sp/>str-&gt;getUndecodedStream();</highlight></codeline>
<codeline lineno="6075"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6076"><highlight class="normal"></highlight></codeline>
<codeline lineno="6077"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>recode<sp/>DeviceN<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6078"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(colorMap<sp/>&amp;&amp;<sp/>colorMap-&gt;getColorSpace()-&gt;getMode()<sp/>==<sp/>csDeviceN)<sp/>{</highlight></codeline>
<codeline lineno="6079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>str<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_device_n_recoder" kindref="compound">DeviceNRecoder</ref>(str,<sp/>width,<sp/>height,<sp/>colorMap);</highlight></codeline>
<codeline lineno="6080"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6081"><highlight class="normal"></highlight></codeline>
<codeline lineno="6082"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>LZWEncode/RunLengthEncode<sp/>and<sp/>ASCIIHex/85<sp/>encode<sp/>filters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6083"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(useLZW)<sp/>{</highlight></codeline>
<codeline lineno="6084"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>str<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_l_z_w_encoder" kindref="compound">LZWEncoder</ref>(str);</highlight></codeline>
<codeline lineno="6085"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(useRLE)<sp/>{</highlight></codeline>
<codeline lineno="6086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>str<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_run_length_encoder" kindref="compound">RunLengthEncoder</ref>(str);</highlight></codeline>
<codeline lineno="6087"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6088"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(useASCII)<sp/>{</highlight></codeline>
<codeline lineno="6089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(useASCIIHex)<sp/>{</highlight></codeline>
<codeline lineno="6090"><highlight class="normal"><sp/><sp/><sp/><sp/>str<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_a_s_c_i_i_hex_encoder" kindref="compound">ASCIIHexEncoder</ref>(str);</highlight></codeline>
<codeline lineno="6091"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="6092"><highlight class="normal"><sp/><sp/><sp/><sp/>str<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_a_s_c_i_i85_encoder" kindref="compound">ASCII85Encoder</ref>(str);</highlight></codeline>
<codeline lineno="6093"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6094"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6095"><highlight class="normal"></highlight></codeline>
<codeline lineno="6096"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>end<sp/>of<sp/>image<sp/>dictionary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6097"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;&gt;&gt;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6098"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>OPI_SUPPORT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6099"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(opi13Nest)<sp/>{</highlight></codeline>
<codeline lineno="6100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(inlineImg)<sp/>{</highlight></codeline>
<codeline lineno="6101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>can&apos;t<sp/>happen<sp/>--<sp/>OPI<sp/>dictionaries<sp/>are<sp/>in<sp/>XObjects</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6102"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;OPI<sp/>in<sp/>inline<sp/>image&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6103"><highlight class="normal"><sp/><sp/><sp/><sp/>n<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="6104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="6105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>need<sp/>to<sp/>read<sp/>the<sp/>stream<sp/>to<sp/>count<sp/>characters<sp/>--<sp/>the<sp/>length</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>is<sp/>data-dependent<sp/>(because<sp/>of<sp/>ASCII<sp/>and<sp/>LZW/RLE<sp/>filters)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6107"><highlight class="normal"><sp/><sp/><sp/><sp/>str-&gt;reset();</highlight></codeline>
<codeline lineno="6108"><highlight class="normal"><sp/><sp/><sp/><sp/>n<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="6109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((c<sp/>=<sp/>str-&gt;getChar())<sp/>!=<sp/>EOF)<sp/>{</highlight></codeline>
<codeline lineno="6110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++n;</highlight></codeline>
<codeline lineno="6111"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6112"><highlight class="normal"><sp/><sp/><sp/><sp/>str-&gt;close();</highlight></codeline>
<codeline lineno="6113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>+6/7<sp/>for<sp/>&quot;pdfIm\n&quot;<sp/>/<sp/>&quot;pdfImM\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>+8<sp/>for<sp/>newline<sp/>+<sp/>trailer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>+=<sp/>colorMap<sp/>?<sp/>14<sp/>:<sp/>15;</highlight></codeline>
<codeline lineno="6117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;%%BeginData:<sp/>{0:d}<sp/>Hex<sp/>Bytes\n&quot;</highlight><highlight class="normal">,<sp/>n);</highlight></codeline>
<codeline lineno="6118"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6119"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((level<sp/>==<sp/>psLevel2Sep<sp/>||<sp/>level<sp/>==<sp/>psLevel3Sep)<sp/>&amp;&amp;<sp/>colorMap<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="6121"><highlight class="normal"><sp/><sp/><sp/><sp/>colorMap-&gt;getColorSpace()-&gt;getMode()<sp/>==<sp/>csSeparation<sp/>&amp;&amp;<sp/>colorMap-&gt;getBits()<sp/>==<sp/>8)<sp/>{</highlight></codeline>
<codeline lineno="6122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>color.c[0]<sp/>=<sp/>gfxColorComp1;</highlight></codeline>
<codeline lineno="6123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sepCS<sp/>=<sp/>(<ref refid="class_gfx_separation_color_space" kindref="compound">GfxSeparationColorSpace</ref><sp/>*)colorMap-&gt;getColorSpace();</highlight></codeline>
<codeline lineno="6124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sepCS-&gt;getCMYK(&amp;color,<sp/>&amp;cmyk);</highlight></codeline>
<codeline lineno="6125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;{0:.4g}<sp/>{1:.4g}<sp/>{2:.4g}<sp/>{3:.4g}<sp/>({4:t})<sp/>pdfImSep\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="6126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>colToDbl(cmyk.c),<sp/>colToDbl(cmyk.m),</highlight></codeline>
<codeline lineno="6127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>colToDbl(cmyk.y),<sp/>colToDbl(cmyk.k),</highlight></codeline>
<codeline lineno="6128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sepCS-&gt;getName());</highlight></codeline>
<codeline lineno="6129"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="6130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;{0:s}\n&quot;</highlight><highlight class="normal">,<sp/>colorMap<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;pdfIm&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;pdfImM&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6131"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6132"><highlight class="normal"></highlight></codeline>
<codeline lineno="6133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>copy<sp/>the<sp/>stream<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6134"><highlight class="normal"><sp/><sp/><sp/><sp/>str-&gt;reset();</highlight></codeline>
<codeline lineno="6135"><highlight class="normal"><sp/><sp/><sp/><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="6136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((c<sp/>=<sp/>str-&gt;getChar())<sp/>!=<sp/>EOF)<sp/>{</highlight></codeline>
<codeline lineno="6137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dataBuf[i++]<sp/>=<sp/>c;</highlight></codeline>
<codeline lineno="6138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&gt;=<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(dataBuf))<sp/>{</highlight></codeline>
<codeline lineno="6139"><highlight class="normal"><sp/><sp/><sp/><sp/>writePSBuf(dataBuf,<sp/>i);</highlight></codeline>
<codeline lineno="6140"><highlight class="normal"><sp/><sp/><sp/><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="6141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6142"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="6144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePSBuf(dataBuf,<sp/>i);</highlight></codeline>
<codeline lineno="6145"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6146"><highlight class="normal"><sp/><sp/><sp/><sp/>str-&gt;close();</highlight></codeline>
<codeline lineno="6147"><highlight class="normal"></highlight></codeline>
<codeline lineno="6148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>newline<sp/>and<sp/>trailer<sp/>to<sp/>the<sp/>end</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6149"><highlight class="normal"><sp/><sp/><sp/><sp/>writePSChar(</highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6150"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;%-EOD-\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6151"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>OPI_SUPPORT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(opi13Nest)<sp/>{</highlight></codeline>
<codeline lineno="6153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;%%EndData\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6154"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6155"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6156"><highlight class="normal"></highlight></codeline>
<codeline lineno="6157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>delete<sp/>encoders</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(useLZW<sp/>||<sp/>useRLE<sp/>||<sp/>useASCII<sp/>||<sp/>inlineImg)<sp/>{</highlight></codeline>
<codeline lineno="6159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>str;</highlight></codeline>
<codeline lineno="6160"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6161"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6162"><highlight class="normal"></highlight></codeline>
<codeline lineno="6163"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((maskColors<sp/>&amp;&amp;<sp/>colorMap<sp/>&amp;&amp;<sp/>!inlineImg)<sp/>||<sp/>maskStr)<sp/>{</highlight></codeline>
<codeline lineno="6164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rectsOutLen<sp/>&lt;<sp/>65536/4)<sp/>{</highlight></codeline>
<codeline lineno="6165"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;pdfImClipEnd\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6166"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="6167"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;grestore\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6168"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6169"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6170"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6171"><highlight class="normal"></highlight></codeline>
<codeline lineno="6172"><highlight class="normal"></highlight><highlight class="comment">//~<sp/>this<sp/>doesn&apos;t<sp/>currently<sp/>support<sp/>OPI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6173"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PSOutputDev::doImageL3(<ref refid="class_object" kindref="compound">Object</ref><sp/>*ref,<sp/><ref refid="class_gfx_image_color_map" kindref="compound">GfxImageColorMap</ref><sp/>*colorMap,</highlight></codeline>
<codeline lineno="6174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GBool<sp/>invert,<sp/>GBool<sp/>inlineImg,</highlight></codeline>
<codeline lineno="6175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_stream" kindref="compound">Stream</ref><sp/>*str,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>width,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>height,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len,</highlight></codeline>
<codeline lineno="6176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*maskColors,<sp/><ref refid="class_stream" kindref="compound">Stream</ref><sp/>*maskStr,</highlight></codeline>
<codeline lineno="6177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maskWidth,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maskHeight,<sp/>GBool<sp/>maskInvert)<sp/>{</highlight></codeline>
<codeline lineno="6178"><highlight class="normal"><sp/><sp/><ref refid="class_stream" kindref="compound">Stream</ref><sp/>*str2;</highlight></codeline>
<codeline lineno="6179"><highlight class="normal"><sp/><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*s;</highlight></codeline>
<codeline lineno="6180"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,<sp/>numComps;</highlight></codeline>
<codeline lineno="6181"><highlight class="normal"><sp/><sp/>GBool<sp/>useFlate,<sp/>useLZW,<sp/>useRLE,<sp/>useASCII,<sp/>useCompressed;</highlight></codeline>
<codeline lineno="6182"><highlight class="normal"><sp/><sp/>GBool<sp/>maskUseFlate,<sp/>maskUseLZW,<sp/>maskUseRLE,<sp/>maskUseASCII,<sp/>maskUseCompressed;</highlight></codeline>
<codeline lineno="6183"><highlight class="normal"><sp/><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*maskFilters;</highlight></codeline>
<codeline lineno="6184"><highlight class="normal"><sp/><sp/><ref refid="class_gfx_separation_color_space" kindref="compound">GfxSeparationColorSpace</ref><sp/>*sepCS;</highlight></codeline>
<codeline lineno="6185"><highlight class="normal"><sp/><sp/><ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/><ref refid="structcolor" kindref="compound">color</ref>;</highlight></codeline>
<codeline lineno="6186"><highlight class="normal"><sp/><sp/><ref refid="struct_gfx_c_m_y_k" kindref="compound">GfxCMYK</ref><sp/>cmyk;</highlight></codeline>
<codeline lineno="6187"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="6188"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>col,<sp/>i;</highlight></codeline>
<codeline lineno="6189"><highlight class="normal"></highlight></codeline>
<codeline lineno="6190"><highlight class="normal"><sp/><sp/>useFlate<sp/>=<sp/>useLZW<sp/>=<sp/>useRLE<sp/>=<sp/>useASCII<sp/>=<sp/>useCompressed<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="6191"><highlight class="normal"><sp/><sp/>maskUseFlate<sp/>=<sp/>maskUseLZW<sp/>=<sp/>maskUseRLE<sp/>=<sp/>maskUseASCII<sp/>=<sp/>maskUseCompressed<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="6192"><highlight class="normal"><sp/><sp/>maskFilters<sp/>=<sp/>NULL;<sp/></highlight><highlight class="comment">//<sp/>make<sp/>gcc<sp/>happy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6193"><highlight class="normal"></highlight></codeline>
<codeline lineno="6194"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>explicit<sp/>masking</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6195"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(maskStr)<sp/>{</highlight></codeline>
<codeline lineno="6196"><highlight class="normal"></highlight></codeline>
<codeline lineno="6197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>mask<sp/>data<sp/>source</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((mode<sp/>==<sp/>psModeForm<sp/>||<sp/>inType3Char<sp/>||<sp/>preloadImagesForms)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="6199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uncompressPreloadedImages)<sp/>{</highlight></codeline>
<codeline lineno="6200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="6201"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="6202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>maskStr-&gt;getPSFilter(3,<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!s)<sp/>{</highlight></codeline>
<codeline lineno="6204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(getEnableFlate())<sp/>{</highlight></codeline>
<codeline lineno="6205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>maskUseFlate<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="6206"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(getEnableLZW())<sp/>{</highlight></codeline>
<codeline lineno="6207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>maskUseLZW<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="6208"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="6209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>maskUseRLE<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="6210"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6211"><highlight class="normal"><sp/><sp/><sp/><sp/>maskUseASCII<sp/>=<sp/>!(mode<sp/>==<sp/>psModeForm<sp/>||<sp/>inType3Char<sp/>||<sp/>preloadImagesForms);</highlight></codeline>
<codeline lineno="6212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="6213"><highlight class="normal"><sp/><sp/><sp/><sp/>maskUseASCII<sp/>=<sp/>maskStr-&gt;isBinary()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="6214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!(mode<sp/>==<sp/>psModeForm<sp/>||<sp/>inType3Char<sp/>||<sp/>preloadImagesForms);</highlight></codeline>
<codeline lineno="6215"><highlight class="normal"><sp/><sp/><sp/><sp/>maskUseCompressed<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="6216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6217"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6218"><highlight class="normal"><sp/><sp/><sp/><sp/>maskFilters<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref>();</highlight></codeline>
<codeline lineno="6219"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(maskUseASCII)<sp/>{</highlight></codeline>
<codeline lineno="6220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>maskFilters-&gt;appendf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>/ASCII{0:s}Decode<sp/>filter\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="6221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>useASCIIHex<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;Hex&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;85&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6222"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(maskUseFlate)<sp/>{</highlight></codeline>
<codeline lineno="6224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>maskFilters-&gt;append(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>/FlateDecode<sp/>filter\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6225"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(maskUseLZW)<sp/>{</highlight></codeline>
<codeline lineno="6226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>maskFilters-&gt;append(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>/LZWDecode<sp/>filter\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6227"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(maskUseRLE)<sp/>{</highlight></codeline>
<codeline lineno="6228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>maskFilters-&gt;append(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>/RunLengthDecode<sp/>filter\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6229"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(maskUseCompressed)<sp/>{</highlight></codeline>
<codeline lineno="6231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>maskFilters-&gt;append(s);</highlight></codeline>
<codeline lineno="6232"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6233"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s)<sp/>{</highlight></codeline>
<codeline lineno="6234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>s;</highlight></codeline>
<codeline lineno="6235"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6236"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mode<sp/>==<sp/>psModeForm<sp/>||<sp/>inType3Char<sp/>||<sp/>preloadImagesForms)<sp/>{</highlight></codeline>
<codeline lineno="6237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;MaskData_{0:d}_{1:d}<sp/>pdfMaskInit\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="6238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ref-&gt;getRefNum(),<sp/>ref-&gt;getRefGen());</highlight></codeline>
<codeline lineno="6239"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="6240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;currentfile\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePS(maskFilters-&gt;getCString());</highlight></codeline>
<codeline lineno="6242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;pdfMask\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6243"><highlight class="normal"></highlight></codeline>
<codeline lineno="6244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>FlateEncode/LZWEncode/RunLengthEncode<sp/>and<sp/>ASCIIHex/85<sp/>encode<sp/>filters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(maskUseCompressed)<sp/>{</highlight></codeline>
<codeline lineno="6246"><highlight class="normal"><sp/><sp/><sp/><sp/>maskStr<sp/>=<sp/>maskStr-&gt;getUndecodedStream();</highlight></codeline>
<codeline lineno="6247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6248"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>ENABLE_ZLIB</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(maskUseFlate)<sp/>{</highlight></codeline>
<codeline lineno="6250"><highlight class="normal"><sp/><sp/><sp/><sp/>maskStr<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_flate_encoder" kindref="compound">FlateEncoder</ref>(maskStr);</highlight></codeline>
<codeline lineno="6251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6252"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(maskUseLZW)<sp/>{</highlight></codeline>
<codeline lineno="6254"><highlight class="normal"><sp/><sp/><sp/><sp/>maskStr<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_l_z_w_encoder" kindref="compound">LZWEncoder</ref>(maskStr);</highlight></codeline>
<codeline lineno="6255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(maskUseRLE)<sp/>{</highlight></codeline>
<codeline lineno="6256"><highlight class="normal"><sp/><sp/><sp/><sp/>maskStr<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_run_length_encoder" kindref="compound">RunLengthEncoder</ref>(maskStr);</highlight></codeline>
<codeline lineno="6257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(maskUseASCII)<sp/>{</highlight></codeline>
<codeline lineno="6259"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(useASCIIHex)<sp/>{</highlight></codeline>
<codeline lineno="6260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>maskStr<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_a_s_c_i_i_hex_encoder" kindref="compound">ASCIIHexEncoder</ref>(maskStr);</highlight></codeline>
<codeline lineno="6261"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="6262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>maskStr<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_a_s_c_i_i85_encoder" kindref="compound">ASCII85Encoder</ref>(maskStr);</highlight></codeline>
<codeline lineno="6263"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6265"><highlight class="normal"></highlight></codeline>
<codeline lineno="6266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>copy<sp/>the<sp/>stream<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>maskStr-&gt;reset();</highlight></codeline>
<codeline lineno="6268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((c<sp/>=<sp/>maskStr-&gt;getChar())<sp/>!=<sp/>EOF)<sp/>{</highlight></codeline>
<codeline lineno="6269"><highlight class="normal"><sp/><sp/><sp/><sp/>writePSChar(c);</highlight></codeline>
<codeline lineno="6270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>maskStr-&gt;close();</highlight></codeline>
<codeline lineno="6272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePSChar(</highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;%-EOD-\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="6275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>delete<sp/>encoders</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(maskUseFlate<sp/>||<sp/>maskUseLZW<sp/>||<sp/>maskUseRLE<sp/>||<sp/>maskUseASCII)<sp/>{</highlight></codeline>
<codeline lineno="6277"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>maskStr;</highlight></codeline>
<codeline lineno="6278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6279"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6280"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6281"><highlight class="normal"></highlight></codeline>
<codeline lineno="6282"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>color<sp/>space</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6283"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(colorMap)<sp/>{</highlight></codeline>
<codeline lineno="6284"><highlight class="normal"><sp/><sp/><sp/><sp/>dumpColorSpaceL2(colorMap-&gt;getColorSpace(),<sp/>gFalse,<sp/>gTrue,<sp/>gFalse);</highlight></codeline>
<codeline lineno="6285"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;<sp/>setcolorspace\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6286"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6287"><highlight class="normal"></highlight></codeline>
<codeline lineno="6288"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>up<sp/>the<sp/>image<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6289"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mode<sp/>==<sp/>psModeForm<sp/>||<sp/>inType3Char<sp/>||<sp/>preloadImagesForms)<sp/>{</highlight></codeline>
<codeline lineno="6290"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(inlineImg)<sp/>{</highlight></codeline>
<codeline lineno="6291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>an<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>str2<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_fixed_length_encoder" kindref="compound">FixedLengthEncoder</ref>(str,<sp/>len);</highlight></codeline>
<codeline lineno="6293"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>ENABLE_ZLIB</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(getEnableFlate())<sp/>{</highlight></codeline>
<codeline lineno="6295"><highlight class="normal"><sp/><sp/><sp/><sp/>str2<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_flate_encoder" kindref="compound">FlateEncoder</ref>(str2);</highlight></codeline>
<codeline lineno="6296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6297"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(getEnableLZW())<sp/>{</highlight></codeline>
<codeline lineno="6299"><highlight class="normal"><sp/><sp/><sp/><sp/>str2<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_l_z_w_encoder" kindref="compound">LZWEncoder</ref>(str2);</highlight></codeline>
<codeline lineno="6300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="6301"><highlight class="normal"><sp/><sp/><sp/><sp/>str2<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_run_length_encoder" kindref="compound">RunLengthEncoder</ref>(str2);</highlight></codeline>
<codeline lineno="6302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(useASCIIHex)<sp/>{</highlight></codeline>
<codeline lineno="6304"><highlight class="normal"><sp/><sp/><sp/><sp/>str2<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_a_s_c_i_i_hex_encoder" kindref="compound">ASCIIHexEncoder</ref>(str2);</highlight></codeline>
<codeline lineno="6305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="6306"><highlight class="normal"><sp/><sp/><sp/><sp/>str2<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_a_s_c_i_i85_encoder" kindref="compound">ASCII85Encoder</ref>(str2);</highlight></codeline>
<codeline lineno="6307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>str2-&gt;reset();</highlight></codeline>
<codeline lineno="6309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>col<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="6310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePS((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)(useASCIIHex<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;[&lt;&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;[&lt;~&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="6311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="6312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="6313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>str2-&gt;getChar();</highlight></codeline>
<codeline lineno="6314"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal"><sp/>||<sp/>c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\r&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6315"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/>(useASCIIHex<sp/>?<sp/></highlight><highlight class="charliteral">&apos;&gt;&apos;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="charliteral">&apos;~&apos;</highlight><highlight class="normal">)<sp/>||<sp/>c<sp/>==<sp/>EOF)<sp/>{</highlight></codeline>
<codeline lineno="6316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6317"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6318"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;z&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="6319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePSChar(c);</highlight></codeline>
<codeline lineno="6320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++col;</highlight></codeline>
<codeline lineno="6321"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="6322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePSChar(c);</highlight></codeline>
<codeline lineno="6323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++col;</highlight></codeline>
<codeline lineno="6324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>1;<sp/>i<sp/>&lt;=<sp/>(useASCIIHex<sp/>?<sp/>1<sp/>:<sp/>4);<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="6325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="6326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>str2-&gt;getChar();</highlight></codeline>
<codeline lineno="6327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal"><sp/>||<sp/>c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\r&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/>(useASCIIHex<sp/>?<sp/></highlight><highlight class="charliteral">&apos;&gt;&apos;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="charliteral">&apos;~&apos;</highlight><highlight class="normal">)<sp/>||<sp/>c<sp/>==<sp/>EOF)<sp/>{</highlight></codeline>
<codeline lineno="6329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writePSChar(c);</highlight></codeline>
<codeline lineno="6332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++col;</highlight></codeline>
<codeline lineno="6333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6334"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6335"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>each<sp/>line<sp/>is:<sp/>&quot;&lt;~...data...~&gt;&lt;eol&gt;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6336"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>so<sp/>max<sp/>data<sp/>length<sp/>=<sp/>255<sp/>-<sp/>6<sp/>=<sp/>249</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6337"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>chunks<sp/>are<sp/>1<sp/>or<sp/>5<sp/>bytes<sp/>each,<sp/>so<sp/>we<sp/>have<sp/>to<sp/>stop<sp/>at<sp/>245</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6338"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>but<sp/>make<sp/>it<sp/>240<sp/>just<sp/>to<sp/>be<sp/>safe</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6339"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(col<sp/>&gt;<sp/>240)<sp/>{</highlight></codeline>
<codeline lineno="6340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePS((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)(useASCIIHex<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;&gt;\n&lt;&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;~&gt;\n&lt;~&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="6341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>col<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="6342"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(c<sp/>!=<sp/>(useASCIIHex<sp/>?<sp/></highlight><highlight class="charliteral">&apos;&gt;&apos;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="charliteral">&apos;~&apos;</highlight><highlight class="normal">)<sp/>&amp;&amp;<sp/>c<sp/>!=<sp/>EOF);</highlight></codeline>
<codeline lineno="6344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePS((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)(useASCIIHex<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;&gt;\n&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;~&gt;\n&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="6345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>an<sp/>extra<sp/>entry<sp/>because<sp/>the<sp/>FlateEncode/LZWDecode/RunLengthDecode<sp/>filter<sp/>may</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>read<sp/>past<sp/>the<sp/>end</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;&lt;&gt;]\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;0\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>str2-&gt;close();</highlight></codeline>
<codeline lineno="6350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>str2;</highlight></codeline>
<codeline lineno="6351"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="6352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>make<sp/>sure<sp/>the<sp/>image<sp/>is<sp/>setup,<sp/>it<sp/>sometimes<sp/>is<sp/>not<sp/>like<sp/>on<sp/>bug<sp/>#17645</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>setupImage(ref-&gt;getRef(),<sp/>str,<sp/>gFalse);</highlight></codeline>
<codeline lineno="6354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>up<sp/>to<sp/>use<sp/>the<sp/>array<sp/>already<sp/>created<sp/>by<sp/>setupImages()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;ImData_{0:d}_{1:d}<sp/>0<sp/>0\n&quot;</highlight><highlight class="normal">,<sp/>ref-&gt;getRefNum(),<sp/>ref-&gt;getRefGen());</highlight></codeline>
<codeline lineno="6356"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6357"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6358"><highlight class="normal"></highlight></codeline>
<codeline lineno="6359"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>explicit<sp/>masking</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6360"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(maskStr)<sp/>{</highlight></codeline>
<codeline lineno="6361"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;&lt;&lt;\n<sp/><sp/>/ImageType<sp/>3\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6362"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>/InterleaveType<sp/>3\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6363"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>/DataDict\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6364"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6365"><highlight class="normal"></highlight></codeline>
<codeline lineno="6366"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>image<sp/>(data)<sp/>dictionary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6367"><highlight class="normal"><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;&lt;&lt;\n<sp/><sp/>/ImageType<sp/>{0:d}\n&quot;</highlight><highlight class="normal">,<sp/>(maskColors<sp/>&amp;&amp;<sp/>colorMap)<sp/>?<sp/>4<sp/>:<sp/>1);</highlight></codeline>
<codeline lineno="6368"><highlight class="normal"></highlight></codeline>
<codeline lineno="6369"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>color<sp/>key<sp/>masking</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6370"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(maskColors<sp/>&amp;&amp;<sp/>colorMap)<sp/>{</highlight></codeline>
<codeline lineno="6371"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>/MaskColor<sp/>[\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6372"><highlight class="normal"><sp/><sp/><sp/><sp/>numComps<sp/>=<sp/>colorMap-&gt;getNumPixelComps();</highlight></codeline>
<codeline lineno="6373"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>2<sp/>*<sp/>numComps;<sp/>i<sp/>+=<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="6374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>{0:d}<sp/>{1:d}\n&quot;</highlight><highlight class="normal">,<sp/>maskColors[i],<sp/>maskColors[i+1]);</highlight></codeline>
<codeline lineno="6375"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6376"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>]\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6377"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6378"><highlight class="normal"></highlight></codeline>
<codeline lineno="6379"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>width,<sp/>height,<sp/>matrix,<sp/>bits<sp/>per<sp/>component</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6380"><highlight class="normal"><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>/Width<sp/>{0:d}\n&quot;</highlight><highlight class="normal">,<sp/>width);</highlight></codeline>
<codeline lineno="6381"><highlight class="normal"><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>/Height<sp/>{0:d}\n&quot;</highlight><highlight class="normal">,<sp/>height);</highlight></codeline>
<codeline lineno="6382"><highlight class="normal"><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>/ImageMatrix<sp/>[{0:d}<sp/>0<sp/>0<sp/>{1:d}<sp/>0<sp/>{2:d}]\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="6383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>width,<sp/>-height,<sp/>height);</highlight></codeline>
<codeline lineno="6384"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(colorMap<sp/>&amp;&amp;<sp/>colorMap-&gt;getColorSpace()-&gt;getMode()<sp/>==<sp/>csDeviceN)<sp/>{</highlight></codeline>
<codeline lineno="6385"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>/BitsPerComponent<sp/>8\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6386"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="6387"><highlight class="normal"><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>/BitsPerComponent<sp/>{0:d}\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="6388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>colorMap<sp/>?<sp/>colorMap-&gt;getBits()<sp/>:<sp/>1);</highlight></codeline>
<codeline lineno="6389"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6390"><highlight class="normal"></highlight></codeline>
<codeline lineno="6391"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>decode<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6392"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(colorMap)<sp/>{</highlight></codeline>
<codeline lineno="6393"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>/Decode<sp/>[&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6394"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((level<sp/>==<sp/>psLevel2Sep<sp/>||<sp/>level<sp/>==<sp/>psLevel3Sep)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="6395"><highlight class="normal"><sp/><sp/><sp/><sp/>colorMap-&gt;getColorSpace()-&gt;getMode()<sp/>==<sp/>csSeparation)<sp/>{</highlight></codeline>
<codeline lineno="6396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>matches<sp/>up<sp/>with<sp/>the<sp/>code<sp/>in<sp/>the<sp/>pdfImSep<sp/>operator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>(1<sp/>&lt;&lt;<sp/>colorMap-&gt;getBits())<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="6398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;{0:.4g}<sp/>{1:.4g}&quot;</highlight><highlight class="normal">,<sp/>colorMap-&gt;getDecodeLow(0)<sp/>*<sp/>n,</highlight></codeline>
<codeline lineno="6399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>colorMap-&gt;getDecodeHigh(0)<sp/>*<sp/>n);</highlight></codeline>
<codeline lineno="6400"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="6401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>numComps<sp/>=<sp/>colorMap-&gt;getNumPixelComps();</highlight></codeline>
<codeline lineno="6402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>numComps;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="6403"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="6404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6405"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6406"><highlight class="normal"><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;{0:.4g}<sp/>{1:.4g}&quot;</highlight><highlight class="normal">,<sp/>colorMap-&gt;getDecodeLow(i),</highlight></codeline>
<codeline lineno="6407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>colorMap-&gt;getDecodeHigh(i));</highlight></codeline>
<codeline lineno="6408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6409"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6410"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;]\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6411"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="6412"><highlight class="normal"><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>/Decode<sp/>[{0:d}<sp/>{1:d}]\n&quot;</highlight><highlight class="normal">,<sp/>invert<sp/>?<sp/>1<sp/>:<sp/>0,<sp/>invert<sp/>?<sp/>0<sp/>:<sp/>1);</highlight></codeline>
<codeline lineno="6413"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6414"><highlight class="normal"></highlight></codeline>
<codeline lineno="6415"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>data<sp/>source</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6416"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mode<sp/>==<sp/>psModeForm<sp/>||<sp/>inType3Char<sp/>||<sp/>preloadImagesForms)<sp/>{</highlight></codeline>
<codeline lineno="6417"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(inlineImg)<sp/>{</highlight></codeline>
<codeline lineno="6418"><highlight class="normal"><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>/DataSource<sp/>{<sp/>pdfImStr<sp/>}\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6419"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="6420"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>/DataSource<sp/>{<sp/>dup<sp/>65535<sp/>ge<sp/>{<sp/>pop<sp/>1<sp/>add<sp/>0<sp/>}<sp/>if<sp/>2<sp/>index<sp/>2&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>index<sp/>get<sp/>1<sp/>index<sp/>get<sp/>exch<sp/>1<sp/>add<sp/>exch<sp/>}\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6422"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6423"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="6424"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>/DataSource<sp/>currentfile\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6425"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6426"><highlight class="normal"></highlight></codeline>
<codeline lineno="6427"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>filters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6428"><highlight class="normal"></highlight></codeline>
<codeline lineno="6429"><highlight class="normal"><sp/><sp/>useFlate<sp/>=<sp/>useLZW<sp/>=<sp/>useRLE<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="6430"><highlight class="normal"><sp/><sp/>useCompressed<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="6431"><highlight class="normal"><sp/><sp/>useASCII<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="6432"><highlight class="normal"></highlight></codeline>
<codeline lineno="6433"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((mode<sp/>==<sp/>psModeForm<sp/>||<sp/>inType3Char<sp/>||<sp/>preloadImagesForms)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="6434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uncompressPreloadedImages)<sp/>{</highlight></codeline>
<codeline lineno="6435"><highlight class="normal"><sp/><sp/><sp/><sp/>s<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="6436"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="6437"><highlight class="normal"><sp/><sp/><sp/><sp/>s<sp/>=<sp/>str-&gt;getPSFilter(level<sp/>&lt;<sp/>psLevel2<sp/>?<sp/>1<sp/>:<sp/>level<sp/>&lt;<sp/>psLevel3<sp/>?<sp/>2<sp/>:<sp/>3,</highlight></codeline>
<codeline lineno="6438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6439"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((colorMap<sp/>&amp;&amp;<sp/>colorMap-&gt;getColorSpace()-&gt;getMode()<sp/>==<sp/>csDeviceN)<sp/>||</highlight></codeline>
<codeline lineno="6440"><highlight class="normal"><sp/><sp/><sp/><sp/>inlineImg<sp/>||<sp/>!s)<sp/>{</highlight></codeline>
<codeline lineno="6441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(getEnableFlate())<sp/>{</highlight></codeline>
<codeline lineno="6442"><highlight class="normal"><sp/><sp/><sp/><sp/>useFlate<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="6443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(getEnableLZW())<sp/>{</highlight></codeline>
<codeline lineno="6444"><highlight class="normal"><sp/><sp/><sp/><sp/>useLZW<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="6445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="6446"><highlight class="normal"><sp/><sp/><sp/><sp/>useRLE<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="6447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>useASCII<sp/>=<sp/>!(mode<sp/>==<sp/>psModeForm<sp/>||<sp/>inType3Char<sp/>||<sp/>preloadImagesForms);</highlight></codeline>
<codeline lineno="6449"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="6450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>useASCII<sp/>=<sp/>str-&gt;isBinary()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="6451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!(mode<sp/>==<sp/>psModeForm<sp/>||<sp/>inType3Char<sp/>||<sp/>preloadImagesForms);</highlight></codeline>
<codeline lineno="6452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>useCompressed<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="6453"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6454"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6455"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(useASCII)<sp/>{</highlight></codeline>
<codeline lineno="6456"><highlight class="normal"><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>/ASCII{0:s}Decode<sp/>filter\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="6457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>useASCIIHex<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;Hex&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;85&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6458"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6459"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(useFlate)<sp/>{</highlight></codeline>
<codeline lineno="6460"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>/FlateDecode<sp/>filter\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6461"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(useLZW)<sp/>{</highlight></codeline>
<codeline lineno="6462"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>/LZWDecode<sp/>filter\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6463"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(useRLE)<sp/>{</highlight></codeline>
<codeline lineno="6464"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>/RunLengthDecode<sp/>filter\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6465"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6466"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(useCompressed)<sp/>{</highlight></codeline>
<codeline lineno="6467"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(s-&gt;getCString());</highlight></codeline>
<codeline lineno="6468"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6469"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s)<sp/>{</highlight></codeline>
<codeline lineno="6470"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>s;</highlight></codeline>
<codeline lineno="6471"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6472"><highlight class="normal"></highlight></codeline>
<codeline lineno="6473"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>end<sp/>of<sp/>image<sp/>(data)<sp/>dictionary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6474"><highlight class="normal"><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;&gt;&gt;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6475"><highlight class="normal"></highlight></codeline>
<codeline lineno="6476"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>explicit<sp/>masking</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6477"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(maskStr)<sp/>{</highlight></codeline>
<codeline lineno="6478"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>/MaskDict\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6479"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;&lt;&lt;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6480"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>/ImageType<sp/>1\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6481"><highlight class="normal"><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>/Width<sp/>{0:d}\n&quot;</highlight><highlight class="normal">,<sp/>maskWidth);</highlight></codeline>
<codeline lineno="6482"><highlight class="normal"><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>/Height<sp/>{0:d}\n&quot;</highlight><highlight class="normal">,<sp/>maskHeight);</highlight></codeline>
<codeline lineno="6483"><highlight class="normal"><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>/ImageMatrix<sp/>[{0:d}<sp/>0<sp/>0<sp/>{1:d}<sp/>0<sp/>{2:d}]\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="6484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maskWidth,<sp/>-maskHeight,<sp/>maskHeight);</highlight></codeline>
<codeline lineno="6485"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>/BitsPerComponent<sp/>1\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6486"><highlight class="normal"><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>/Decode<sp/>[{0:d}<sp/>{1:d}]\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="6487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maskInvert<sp/>?<sp/>1<sp/>:<sp/>0,<sp/>maskInvert<sp/>?<sp/>0<sp/>:<sp/>1);</highlight></codeline>
<codeline lineno="6488"><highlight class="normal"></highlight></codeline>
<codeline lineno="6489"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>mask<sp/>data<sp/>source</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6490"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mode<sp/>==<sp/>psModeForm<sp/>||<sp/>inType3Char<sp/>||<sp/>preloadImagesForms)<sp/>{</highlight></codeline>
<codeline lineno="6491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>/DataSource<sp/>{pdfMaskSrc}\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePS(maskFilters-&gt;getCString());</highlight></codeline>
<codeline lineno="6493"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="6494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>/DataSource<sp/>maskStream\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6495"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6496"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>maskFilters;</highlight></codeline>
<codeline lineno="6497"><highlight class="normal"></highlight></codeline>
<codeline lineno="6498"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;&gt;&gt;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6499"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;&gt;&gt;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6500"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6501"><highlight class="normal"></highlight></codeline>
<codeline lineno="6502"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mode<sp/>==<sp/>psModeForm<sp/>||<sp/>inType3Char<sp/>||<sp/>preloadImagesForms)<sp/>{</highlight></codeline>
<codeline lineno="6503"><highlight class="normal"></highlight></codeline>
<codeline lineno="6504"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>image<sp/>command</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6505"><highlight class="normal"><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;{0:s}\n&quot;</highlight><highlight class="normal">,<sp/>colorMap<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;image&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;imagemask&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6506"><highlight class="normal"></highlight></codeline>
<codeline lineno="6507"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="6508"><highlight class="normal"></highlight></codeline>
<codeline lineno="6509"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((level<sp/>==<sp/>psLevel2Sep<sp/>||<sp/>level<sp/>==<sp/>psLevel3Sep)<sp/>&amp;&amp;<sp/>colorMap<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="6510"><highlight class="normal"><sp/><sp/><sp/><sp/>colorMap-&gt;getColorSpace()-&gt;getMode()<sp/>==<sp/>csSeparation<sp/>&amp;&amp;<sp/>colorMap-&gt;getBits()<sp/>==<sp/>8)<sp/>{</highlight></codeline>
<codeline lineno="6511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>color.c[0]<sp/>=<sp/>gfxColorComp1;</highlight></codeline>
<codeline lineno="6512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sepCS<sp/>=<sp/>(<ref refid="class_gfx_separation_color_space" kindref="compound">GfxSeparationColorSpace</ref><sp/>*)colorMap-&gt;getColorSpace();</highlight></codeline>
<codeline lineno="6513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sepCS-&gt;getCMYK(&amp;color,<sp/>&amp;cmyk);</highlight></codeline>
<codeline lineno="6514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;{0:.4g}<sp/>{1:.4g}<sp/>{2:.4g}<sp/>{3:.4g}<sp/>({4:t})<sp/>pdfImSep\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="6515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>colToDbl(cmyk.c),<sp/>colToDbl(cmyk.m),</highlight></codeline>
<codeline lineno="6516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>colToDbl(cmyk.y),<sp/>colToDbl(cmyk.k),</highlight></codeline>
<codeline lineno="6517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sepCS-&gt;getName());</highlight></codeline>
<codeline lineno="6518"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="6519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;{0:s}\n&quot;</highlight><highlight class="normal">,<sp/>colorMap<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;pdfIm&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;pdfImM&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6520"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6521"><highlight class="normal"></highlight></codeline>
<codeline lineno="6522"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6523"><highlight class="normal"></highlight></codeline>
<codeline lineno="6524"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>rid<sp/>of<sp/>the<sp/>array<sp/>and<sp/>index</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6525"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mode<sp/>==<sp/>psModeForm<sp/>||<sp/>inType3Char<sp/>||<sp/>preloadImagesForms)<sp/>{</highlight></codeline>
<codeline lineno="6526"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!inlineImg)<sp/>writePS(</highlight><highlight class="stringliteral">&quot;pop<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6527"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;pop<sp/>pop\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6528"><highlight class="normal"></highlight></codeline>
<codeline lineno="6529"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>image<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6530"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="6531"><highlight class="normal"></highlight></codeline>
<codeline lineno="6532"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>cut<sp/>off<sp/>inline<sp/>image<sp/>streams<sp/>at<sp/>appropriate<sp/>length</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6533"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(inlineImg)<sp/>{</highlight></codeline>
<codeline lineno="6534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>str<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_fixed_length_encoder" kindref="compound">FixedLengthEncoder</ref>(str,<sp/>len);</highlight></codeline>
<codeline lineno="6535"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(useCompressed)<sp/>{</highlight></codeline>
<codeline lineno="6536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>str<sp/>=<sp/>str-&gt;getUndecodedStream();</highlight></codeline>
<codeline lineno="6537"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6538"><highlight class="normal"></highlight></codeline>
<codeline lineno="6539"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>FlateEncode/LZWEncode/RunLengthEncode<sp/>and<sp/>ASCIIHex/85<sp/>encode<sp/>filters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6540"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>ENABLE_ZLIB</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6541"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(useFlate)<sp/>{</highlight></codeline>
<codeline lineno="6542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>str<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_flate_encoder" kindref="compound">FlateEncoder</ref>(str);</highlight></codeline>
<codeline lineno="6543"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6544"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6545"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(useLZW)<sp/>{</highlight></codeline>
<codeline lineno="6546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>str<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_l_z_w_encoder" kindref="compound">LZWEncoder</ref>(str);</highlight></codeline>
<codeline lineno="6547"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(useRLE)<sp/>{</highlight></codeline>
<codeline lineno="6548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>str<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_run_length_encoder" kindref="compound">RunLengthEncoder</ref>(str);</highlight></codeline>
<codeline lineno="6549"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6550"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(useASCII)<sp/>{</highlight></codeline>
<codeline lineno="6551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(useASCIIHex)<sp/>{</highlight></codeline>
<codeline lineno="6552"><highlight class="normal"><sp/><sp/><sp/><sp/>str<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_a_s_c_i_i_hex_encoder" kindref="compound">ASCIIHexEncoder</ref>(str);</highlight></codeline>
<codeline lineno="6553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="6554"><highlight class="normal"><sp/><sp/><sp/><sp/>str<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_a_s_c_i_i85_encoder" kindref="compound">ASCII85Encoder</ref>(str);</highlight></codeline>
<codeline lineno="6555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6556"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6557"><highlight class="normal"></highlight></codeline>
<codeline lineno="6558"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>copy<sp/>the<sp/>stream<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6559"><highlight class="normal"><sp/><sp/><sp/><sp/>str-&gt;reset();</highlight></codeline>
<codeline lineno="6560"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((c<sp/>=<sp/>str-&gt;getChar())<sp/>!=<sp/>EOF)<sp/>{</highlight></codeline>
<codeline lineno="6561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePSChar(c);</highlight></codeline>
<codeline lineno="6562"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6563"><highlight class="normal"><sp/><sp/><sp/><sp/>str-&gt;close();</highlight></codeline>
<codeline lineno="6564"><highlight class="normal"></highlight></codeline>
<codeline lineno="6565"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>newline<sp/>and<sp/>trailer<sp/>to<sp/>the<sp/>end</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6566"><highlight class="normal"><sp/><sp/><sp/><sp/>writePSChar(</highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6567"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;%-EOD-\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6568"><highlight class="normal"></highlight></codeline>
<codeline lineno="6569"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>delete<sp/>encoders</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6570"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(useFlate<sp/>||<sp/>useLZW<sp/>||<sp/>useRLE<sp/>||<sp/>useASCII<sp/>||<sp/>inlineImg)<sp/>{</highlight></codeline>
<codeline lineno="6571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>str;</highlight></codeline>
<codeline lineno="6572"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6573"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6574"><highlight class="normal"></highlight></codeline>
<codeline lineno="6575"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>close<sp/>the<sp/>mask<sp/>stream</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6576"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(maskStr)<sp/>{</highlight></codeline>
<codeline lineno="6577"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(mode<sp/>==<sp/>psModeForm<sp/>||<sp/>inType3Char<sp/>||<sp/>preloadImagesForms))<sp/>{</highlight></codeline>
<codeline lineno="6578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;pdfMaskEnd\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6579"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6580"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6581"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6582"><highlight class="normal"></highlight></codeline>
<codeline lineno="6583"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PSOutputDev::dumpColorSpaceL2(<ref refid="class_gfx_color_space" kindref="compound">GfxColorSpace</ref><sp/>*colorSpace,</highlight></codeline>
<codeline lineno="6584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GBool<sp/>genXform,<sp/>GBool<sp/>updateColors,</highlight></codeline>
<codeline lineno="6585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GBool<sp/>map01)<sp/>{</highlight></codeline>
<codeline lineno="6586"><highlight class="normal"><sp/><sp/><ref refid="class_gfx_cal_gray_color_space" kindref="compound">GfxCalGrayColorSpace</ref><sp/>*calGrayCS;</highlight></codeline>
<codeline lineno="6587"><highlight class="normal"><sp/><sp/><ref refid="class_gfx_cal_r_g_b_color_space" kindref="compound">GfxCalRGBColorSpace</ref><sp/>*calRGBCS;</highlight></codeline>
<codeline lineno="6588"><highlight class="normal"><sp/><sp/><ref refid="class_gfx_lab_color_space" kindref="compound">GfxLabColorSpace</ref><sp/>*labCS;</highlight></codeline>
<codeline lineno="6589"><highlight class="normal"><sp/><sp/><ref refid="class_gfx_indexed_color_space" kindref="compound">GfxIndexedColorSpace</ref><sp/>*indexedCS;</highlight></codeline>
<codeline lineno="6590"><highlight class="normal"><sp/><sp/><ref refid="class_gfx_separation_color_space" kindref="compound">GfxSeparationColorSpace</ref><sp/>*separationCS;</highlight></codeline>
<codeline lineno="6591"><highlight class="normal"><sp/><sp/><ref refid="class_gfx_device_n_color_space" kindref="compound">GfxDeviceNColorSpace</ref><sp/>*deviceNCS;</highlight></codeline>
<codeline lineno="6592"><highlight class="normal"><sp/><sp/><ref refid="class_gfx_color_space" kindref="compound">GfxColorSpace</ref><sp/>*baseCS;</highlight></codeline>
<codeline lineno="6593"><highlight class="normal"><sp/><sp/>Guchar<sp/>*lookup,<sp/>*p;</highlight></codeline>
<codeline lineno="6594"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x[gfxColorMaxComps],<sp/>y[gfxColorMaxComps];</highlight></codeline>
<codeline lineno="6595"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>low[gfxColorMaxComps],<sp/>range[gfxColorMaxComps];</highlight></codeline>
<codeline lineno="6596"><highlight class="normal"><sp/><sp/><ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/><ref refid="structcolor" kindref="compound">color</ref>;</highlight></codeline>
<codeline lineno="6597"><highlight class="normal"><sp/><sp/><ref refid="struct_gfx_c_m_y_k" kindref="compound">GfxCMYK</ref><sp/>cmyk;</highlight></codeline>
<codeline lineno="6598"><highlight class="normal"><sp/><sp/><ref refid="class_function" kindref="compound">Function</ref><sp/>*func;</highlight></codeline>
<codeline lineno="6599"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,<sp/>numComps,<sp/>numAltComps;</highlight></codeline>
<codeline lineno="6600"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>byte;</highlight></codeline>
<codeline lineno="6601"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j,<sp/>k;</highlight></codeline>
<codeline lineno="6602"><highlight class="normal"></highlight></codeline>
<codeline lineno="6603"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(colorSpace-&gt;getMode())<sp/>{</highlight></codeline>
<codeline lineno="6604"><highlight class="normal"></highlight></codeline>
<codeline lineno="6605"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>csDeviceGray:</highlight></codeline>
<codeline lineno="6606"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;/DeviceGray&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6607"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(genXform)<sp/>{</highlight></codeline>
<codeline lineno="6608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;<sp/>{}&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6609"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6610"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(updateColors)<sp/>{</highlight></codeline>
<codeline lineno="6611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>processColors<sp/>|=<sp/>psProcessBlack;</highlight></codeline>
<codeline lineno="6612"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6613"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6614"><highlight class="normal"></highlight></codeline>
<codeline lineno="6615"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>csCalGray:</highlight></codeline>
<codeline lineno="6616"><highlight class="normal"><sp/><sp/><sp/><sp/>calGrayCS<sp/>=<sp/>(<ref refid="class_gfx_cal_gray_color_space" kindref="compound">GfxCalGrayColorSpace</ref><sp/>*)colorSpace;</highlight></codeline>
<codeline lineno="6617"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;[/CIEBasedA<sp/>&lt;&lt;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6618"><highlight class="normal"><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;<sp/>/DecodeA<sp/>{{{0:.4g}<sp/>exp}}<sp/>bind\n&quot;</highlight><highlight class="normal">,<sp/>calGrayCS-&gt;getGamma());</highlight></codeline>
<codeline lineno="6619"><highlight class="normal"><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;<sp/>/MatrixA<sp/>[{0:.4g}<sp/>{1:.4g}<sp/>{2:.4g}]\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="6620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>calGrayCS-&gt;getWhiteX(),<sp/>calGrayCS-&gt;getWhiteY(),</highlight></codeline>
<codeline lineno="6621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>calGrayCS-&gt;getWhiteZ());</highlight></codeline>
<codeline lineno="6622"><highlight class="normal"><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;<sp/>/WhitePoint<sp/>[{0:.4g}<sp/>{1:.4g}<sp/>{2:.4g}]\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="6623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>calGrayCS-&gt;getWhiteX(),<sp/>calGrayCS-&gt;getWhiteY(),</highlight></codeline>
<codeline lineno="6624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>calGrayCS-&gt;getWhiteZ());</highlight></codeline>
<codeline lineno="6625"><highlight class="normal"><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;<sp/>/BlackPoint<sp/>[{0:.4g}<sp/>{1:.4g}<sp/>{2:.4g}]\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="6626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>calGrayCS-&gt;getBlackX(),<sp/>calGrayCS-&gt;getBlackY(),</highlight></codeline>
<codeline lineno="6627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>calGrayCS-&gt;getBlackZ());</highlight></codeline>
<codeline lineno="6628"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;&gt;&gt;]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6629"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(genXform)<sp/>{</highlight></codeline>
<codeline lineno="6630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;<sp/>{}&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6631"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6632"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(updateColors)<sp/>{</highlight></codeline>
<codeline lineno="6633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>processColors<sp/>|=<sp/>psProcessBlack;</highlight></codeline>
<codeline lineno="6634"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6635"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6636"><highlight class="normal"></highlight></codeline>
<codeline lineno="6637"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>csDeviceRGB:</highlight></codeline>
<codeline lineno="6638"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;/DeviceRGB&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6639"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(genXform)<sp/>{</highlight></codeline>
<codeline lineno="6640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;<sp/>{}&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6641"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6642"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(updateColors)<sp/>{</highlight></codeline>
<codeline lineno="6643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>processColors<sp/>|=<sp/>psProcessCMYK;</highlight></codeline>
<codeline lineno="6644"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6645"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6646"><highlight class="normal"></highlight></codeline>
<codeline lineno="6647"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>csCalRGB:</highlight></codeline>
<codeline lineno="6648"><highlight class="normal"><sp/><sp/><sp/><sp/>calRGBCS<sp/>=<sp/>(<ref refid="class_gfx_cal_r_g_b_color_space" kindref="compound">GfxCalRGBColorSpace</ref><sp/>*)colorSpace;</highlight></codeline>
<codeline lineno="6649"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;[/CIEBasedABC<sp/>&lt;&lt;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6650"><highlight class="normal"><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;<sp/>/DecodeABC<sp/>[{{{0:.4g}<sp/>exp}}<sp/>bind<sp/>{{{1:.4g}<sp/>exp}}<sp/>bind<sp/>{{{2:.4g}<sp/>exp}}<sp/>bind]\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="6651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>calRGBCS-&gt;getGammaR(),<sp/>calRGBCS-&gt;getGammaG(),</highlight></codeline>
<codeline lineno="6652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>calRGBCS-&gt;getGammaB());</highlight></codeline>
<codeline lineno="6653"><highlight class="normal"><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;<sp/>/MatrixABC<sp/>[{0:.4g}<sp/>{1:.4g}<sp/>{2:.4g}<sp/>{3:.4g}<sp/>{4:.4g}<sp/>{5:.4g}<sp/>{6:.4g}<sp/>{7:.4g}<sp/>{8:.4g}]\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="6654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>calRGBCS-&gt;getMatrix()[0],<sp/>calRGBCS-&gt;getMatrix()[1],</highlight></codeline>
<codeline lineno="6655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>calRGBCS-&gt;getMatrix()[2],<sp/>calRGBCS-&gt;getMatrix()[3],</highlight></codeline>
<codeline lineno="6656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>calRGBCS-&gt;getMatrix()[4],<sp/>calRGBCS-&gt;getMatrix()[5],</highlight></codeline>
<codeline lineno="6657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>calRGBCS-&gt;getMatrix()[6],<sp/>calRGBCS-&gt;getMatrix()[7],</highlight></codeline>
<codeline lineno="6658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>calRGBCS-&gt;getMatrix()[8]);</highlight></codeline>
<codeline lineno="6659"><highlight class="normal"><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;<sp/>/WhitePoint<sp/>[{0:.4g}<sp/>{1:.4g}<sp/>{2:.4g}]\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="6660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>calRGBCS-&gt;getWhiteX(),<sp/>calRGBCS-&gt;getWhiteY(),</highlight></codeline>
<codeline lineno="6661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>calRGBCS-&gt;getWhiteZ());</highlight></codeline>
<codeline lineno="6662"><highlight class="normal"><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;<sp/>/BlackPoint<sp/>[{0:.4g}<sp/>{1:.4g}<sp/>{2:.4g}]\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="6663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>calRGBCS-&gt;getBlackX(),<sp/>calRGBCS-&gt;getBlackY(),</highlight></codeline>
<codeline lineno="6664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>calRGBCS-&gt;getBlackZ());</highlight></codeline>
<codeline lineno="6665"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;&gt;&gt;]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6666"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(genXform)<sp/>{</highlight></codeline>
<codeline lineno="6667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;<sp/>{}&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6668"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6669"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(updateColors)<sp/>{</highlight></codeline>
<codeline lineno="6670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>processColors<sp/>|=<sp/>psProcessCMYK;</highlight></codeline>
<codeline lineno="6671"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6672"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6673"><highlight class="normal"></highlight></codeline>
<codeline lineno="6674"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>csDeviceCMYK:</highlight></codeline>
<codeline lineno="6675"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;/DeviceCMYK&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6676"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(genXform)<sp/>{</highlight></codeline>
<codeline lineno="6677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;<sp/>{}&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6678"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6679"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(updateColors)<sp/>{</highlight></codeline>
<codeline lineno="6680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>processColors<sp/>|=<sp/>psProcessCMYK;</highlight></codeline>
<codeline lineno="6681"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6682"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6683"><highlight class="normal"></highlight></codeline>
<codeline lineno="6684"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>csLab:</highlight></codeline>
<codeline lineno="6685"><highlight class="normal"><sp/><sp/><sp/><sp/>labCS<sp/>=<sp/>(<ref refid="class_gfx_lab_color_space" kindref="compound">GfxLabColorSpace</ref><sp/>*)colorSpace;</highlight></codeline>
<codeline lineno="6686"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;[/CIEBasedABC<sp/>&lt;&lt;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6687"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(map01)<sp/>{</highlight></codeline>
<codeline lineno="6688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;<sp/>/RangeABC<sp/>[0<sp/>1<sp/>0<sp/>1<sp/>0<sp/>1]\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;<sp/>/DecodeABC<sp/>[{{100<sp/>mul<sp/>16<sp/>add<sp/>116<sp/>div}}<sp/>bind<sp/>{{{0:.4g}<sp/>mul<sp/>{1:.4g}<sp/>add}}<sp/>bind<sp/>{{{2:.4g}<sp/>mul<sp/>{3:.4g}<sp/>add}}<sp/>bind]\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="6690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(labCS-&gt;getAMax()<sp/>-<sp/>labCS-&gt;getAMin())<sp/>/<sp/>500.0,</highlight></codeline>
<codeline lineno="6691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>labCS-&gt;getAMin()<sp/>/<sp/>500.0,</highlight></codeline>
<codeline lineno="6692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(labCS-&gt;getBMax()<sp/>-<sp/>labCS-&gt;getBMin())<sp/>/<sp/>200.0,</highlight></codeline>
<codeline lineno="6693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>labCS-&gt;getBMin()<sp/>/<sp/>200.0);</highlight></codeline>
<codeline lineno="6694"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="6695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;<sp/>/RangeABC<sp/>[0<sp/>100<sp/>{0:.4g}<sp/>{1:.4g}<sp/>{2:.4g}<sp/>{3:.4g}]\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="6696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>labCS-&gt;getAMin(),<sp/>labCS-&gt;getAMax(),</highlight></codeline>
<codeline lineno="6697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>labCS-&gt;getBMin(),<sp/>labCS-&gt;getBMax());</highlight></codeline>
<codeline lineno="6698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;<sp/>/DecodeABC<sp/>[{16<sp/>add<sp/>116<sp/>div}<sp/>bind<sp/>{500<sp/>div}<sp/>bind<sp/>{200<sp/>div}<sp/>bind]\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6699"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6700"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;<sp/>/MatrixABC<sp/>[1<sp/>1<sp/>1<sp/>1<sp/>0<sp/>0<sp/>0<sp/>0<sp/>-1]\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6701"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;<sp/>/DecodeLMN\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6702"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>[{dup<sp/>6<sp/>29<sp/>div<sp/>ge<sp/>{dup<sp/>dup<sp/>mul<sp/>mul}\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6703"><highlight class="normal"><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/>{{4<sp/>29<sp/>div<sp/>sub<sp/>108<sp/>841<sp/>div<sp/>mul<sp/>}}<sp/>ifelse<sp/>{0:.4g}<sp/>mul}}<sp/>bind\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="6704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>labCS-&gt;getWhiteX());</highlight></codeline>
<codeline lineno="6705"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>{dup<sp/>6<sp/>29<sp/>div<sp/>ge<sp/>{dup<sp/>dup<sp/>mul<sp/>mul}\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6706"><highlight class="normal"><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/>{{4<sp/>29<sp/>div<sp/>sub<sp/>108<sp/>841<sp/>div<sp/>mul<sp/>}}<sp/>ifelse<sp/>{0:.4g}<sp/>mul}}<sp/>bind\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="6707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>labCS-&gt;getWhiteY());</highlight></codeline>
<codeline lineno="6708"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>{dup<sp/>6<sp/>29<sp/>div<sp/>ge<sp/>{dup<sp/>dup<sp/>mul<sp/>mul}\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6709"><highlight class="normal"><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/>{{4<sp/>29<sp/>div<sp/>sub<sp/>108<sp/>841<sp/>div<sp/>mul<sp/>}}<sp/>ifelse<sp/>{0:.4g}<sp/>mul}}<sp/>bind]\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="6710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>labCS-&gt;getWhiteZ());</highlight></codeline>
<codeline lineno="6711"><highlight class="normal"><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;<sp/>/WhitePoint<sp/>[{0:.4g}<sp/>{1:.4g}<sp/>{2:.4g}]\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="6712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>labCS-&gt;getWhiteX(),<sp/>labCS-&gt;getWhiteY(),<sp/>labCS-&gt;getWhiteZ());</highlight></codeline>
<codeline lineno="6713"><highlight class="normal"><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;<sp/>/BlackPoint<sp/>[{0:.4g}<sp/>{1:.4g}<sp/>{2:.4g}]\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="6714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>labCS-&gt;getBlackX(),<sp/>labCS-&gt;getBlackY(),<sp/>labCS-&gt;getBlackZ());</highlight></codeline>
<codeline lineno="6715"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;&gt;&gt;]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6716"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(genXform)<sp/>{</highlight></codeline>
<codeline lineno="6717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;<sp/>{}&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6718"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6719"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(updateColors)<sp/>{</highlight></codeline>
<codeline lineno="6720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>processColors<sp/>|=<sp/>psProcessCMYK;</highlight></codeline>
<codeline lineno="6721"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6722"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6723"><highlight class="normal"></highlight></codeline>
<codeline lineno="6724"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>csICCBased:</highlight></codeline>
<codeline lineno="6725"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>there<sp/>is<sp/>no<sp/>transform<sp/>function<sp/>to<sp/>the<sp/>alternate<sp/>color<sp/>space,<sp/>so</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6726"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>can<sp/>use<sp/>it<sp/>directly</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6727"><highlight class="normal"><sp/><sp/><sp/><sp/>dumpColorSpaceL2(((<ref refid="class_gfx_i_c_c_based_color_space" kindref="compound">GfxICCBasedColorSpace</ref><sp/>*)colorSpace)-&gt;getAlt(),</highlight></codeline>
<codeline lineno="6728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>genXform,<sp/>updateColors,<sp/>gFalse);</highlight></codeline>
<codeline lineno="6729"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6730"><highlight class="normal"></highlight></codeline>
<codeline lineno="6731"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>csIndexed:</highlight></codeline>
<codeline lineno="6732"><highlight class="normal"><sp/><sp/><sp/><sp/>indexedCS<sp/>=<sp/>(<ref refid="class_gfx_indexed_color_space" kindref="compound">GfxIndexedColorSpace</ref><sp/>*)colorSpace;</highlight></codeline>
<codeline lineno="6733"><highlight class="normal"><sp/><sp/><sp/><sp/>baseCS<sp/>=<sp/>indexedCS-&gt;getBase();</highlight></codeline>
<codeline lineno="6734"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;[/Indexed<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6735"><highlight class="normal"><sp/><sp/><sp/><sp/>dumpColorSpaceL2(baseCS,<sp/>gFalse,<sp/>gFalse,<sp/>gTrue);</highlight></codeline>
<codeline lineno="6736"><highlight class="normal"><sp/><sp/><sp/><sp/>n<sp/>=<sp/>indexedCS-&gt;getIndexHigh();</highlight></codeline>
<codeline lineno="6737"><highlight class="normal"><sp/><sp/><sp/><sp/>numComps<sp/>=<sp/>baseCS-&gt;getNComps();</highlight></codeline>
<codeline lineno="6738"><highlight class="normal"><sp/><sp/><sp/><sp/>lookup<sp/>=<sp/>indexedCS-&gt;getLookup();</highlight></codeline>
<codeline lineno="6739"><highlight class="normal"><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;<sp/>{0:d}<sp/>&lt;\n&quot;</highlight><highlight class="normal">,<sp/>n);</highlight></codeline>
<codeline lineno="6740"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(baseCS-&gt;getMode()<sp/>==<sp/>csDeviceN<sp/>&amp;&amp;<sp/>level<sp/>!=<sp/>psLevel3<sp/>&amp;&amp;<sp/>level<sp/>!=<sp/>psLevel3Sep)<sp/>{</highlight></codeline>
<codeline lineno="6741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>func<sp/>=<sp/>((<ref refid="class_gfx_device_n_color_space" kindref="compound">GfxDeviceNColorSpace</ref><sp/>*)baseCS)-&gt;getTintTransformFunc();</highlight></codeline>
<codeline lineno="6742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>baseCS-&gt;getDefaultRanges(low,<sp/>range,<sp/>indexedCS-&gt;getIndexHigh());</highlight></codeline>
<codeline lineno="6743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(((<ref refid="class_gfx_device_n_color_space" kindref="compound">GfxDeviceNColorSpace</ref><sp/>*)baseCS)-&gt;getAlt()-&gt;getMode()<sp/>==<sp/>csLab)<sp/>{</highlight></codeline>
<codeline lineno="6744"><highlight class="normal"><sp/><sp/><sp/><sp/>labCS<sp/>=<sp/>(<ref refid="class_gfx_lab_color_space" kindref="compound">GfxLabColorSpace</ref><sp/>*)((<ref refid="class_gfx_device_n_color_space" kindref="compound">GfxDeviceNColorSpace</ref><sp/>*)baseCS)-&gt;getAlt();</highlight></codeline>
<codeline lineno="6745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="6746"><highlight class="normal"><sp/><sp/><sp/><sp/>labCS<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="6747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>numAltComps<sp/>=<sp/>((<ref refid="class_gfx_device_n_color_space" kindref="compound">GfxDeviceNColorSpace</ref><sp/>*)baseCS)-&gt;getAlt()-&gt;getNComps();</highlight></codeline>
<codeline lineno="6749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>lookup;</highlight></codeline>
<codeline lineno="6750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;=<sp/>n;<sp/>i<sp/>+=<sp/>8)<sp/>{</highlight></codeline>
<codeline lineno="6751"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6752"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>i;<sp/>j<sp/>&lt;<sp/>i+8<sp/>&amp;&amp;<sp/>j<sp/>&lt;=<sp/>n;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="6753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>numComps;<sp/>++k)<sp/>{</highlight></codeline>
<codeline lineno="6754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x[k]<sp/>=<sp/>low[k]<sp/>+<sp/>(*p++<sp/>/<sp/>255.0)<sp/>*<sp/>range[k];</highlight></codeline>
<codeline lineno="6755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>func-&gt;transform(x,<sp/>y);</highlight></codeline>
<codeline lineno="6757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(labCS)<sp/>{</highlight></codeline>
<codeline lineno="6758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y[0]<sp/>/=<sp/>100.0;</highlight></codeline>
<codeline lineno="6759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y[1]<sp/>=<sp/>(y[1]<sp/>-<sp/>labCS-&gt;getAMin())<sp/>/</highlight></codeline>
<codeline lineno="6760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(labCS-&gt;getAMax()<sp/>-<sp/>labCS-&gt;getAMin());</highlight></codeline>
<codeline lineno="6761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y[2]<sp/>=<sp/>(y[2]<sp/>-<sp/>labCS-&gt;getBMin())<sp/>/</highlight></codeline>
<codeline lineno="6762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(labCS-&gt;getBMax()<sp/>-<sp/>labCS-&gt;getBMin());</highlight></codeline>
<codeline lineno="6763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>numAltComps;<sp/>++k)<sp/>{</highlight></codeline>
<codeline lineno="6765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>byte<sp/>=<sp/>(int)(y[k]<sp/>*<sp/>255<sp/>+<sp/>0.5);</highlight></codeline>
<codeline lineno="6766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(byte<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="6767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>byte<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="6768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(byte<sp/>&gt;<sp/>255)<sp/>{</highlight></codeline>
<codeline lineno="6769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>byte<sp/>=<sp/>255;</highlight></codeline>
<codeline lineno="6770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;{0:02x}&quot;</highlight><highlight class="normal">,<sp/>byte);</highlight></codeline>
<codeline lineno="6772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(updateColors)<sp/>{</highlight></codeline>
<codeline lineno="6774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>color.c[0]<sp/>=<sp/>dblToCol(j);</highlight></codeline>
<codeline lineno="6775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indexedCS-&gt;getCMYK(&amp;color,<sp/>&amp;cmyk);</highlight></codeline>
<codeline lineno="6776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addProcessColor(colToDbl(cmyk.c),<sp/>colToDbl(cmyk.m),</highlight></codeline>
<codeline lineno="6777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>colToDbl(cmyk.y),<sp/>colToDbl(cmyk.k));</highlight></codeline>
<codeline lineno="6778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6779"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6780"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6782"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="6783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;=<sp/>n;<sp/>i<sp/>+=<sp/>8)<sp/>{</highlight></codeline>
<codeline lineno="6784"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6785"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>i;<sp/>j<sp/>&lt;<sp/>i+8<sp/>&amp;&amp;<sp/>j<sp/>&lt;=<sp/>n;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="6786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>numComps;<sp/>++k)<sp/>{</highlight></codeline>
<codeline lineno="6787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;{0:02x}&quot;</highlight><highlight class="normal">,<sp/>lookup[j<sp/>*<sp/>numComps<sp/>+<sp/>k]);</highlight></codeline>
<codeline lineno="6788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(updateColors)<sp/>{</highlight></codeline>
<codeline lineno="6790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>color.c[0]<sp/>=<sp/>dblToCol(j);</highlight></codeline>
<codeline lineno="6791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indexedCS-&gt;getCMYK(&amp;color,<sp/>&amp;cmyk);</highlight></codeline>
<codeline lineno="6792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addProcessColor(colToDbl(cmyk.c),<sp/>colToDbl(cmyk.m),</highlight></codeline>
<codeline lineno="6793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>colToDbl(cmyk.y),<sp/>colToDbl(cmyk.k));</highlight></codeline>
<codeline lineno="6794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6795"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6796"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6798"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6799"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;&gt;]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6800"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(genXform)<sp/>{</highlight></codeline>
<codeline lineno="6801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;<sp/>{}&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6802"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6803"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6804"><highlight class="normal"></highlight></codeline>
<codeline lineno="6805"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>csSeparation:</highlight></codeline>
<codeline lineno="6806"><highlight class="normal"><sp/><sp/><sp/><sp/>separationCS<sp/>=<sp/>(<ref refid="class_gfx_separation_color_space" kindref="compound">GfxSeparationColorSpace</ref><sp/>*)colorSpace;</highlight></codeline>
<codeline lineno="6807"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;[/Separation<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6808"><highlight class="normal"><sp/><sp/><sp/><sp/>writePSString(separationCS-&gt;getName());</highlight></codeline>
<codeline lineno="6809"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6810"><highlight class="normal"><sp/><sp/><sp/><sp/>dumpColorSpaceL2(separationCS-&gt;getAlt(),<sp/>gFalse,<sp/>gFalse,<sp/>gFalse);</highlight></codeline>
<codeline lineno="6811"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6812"><highlight class="normal"><sp/><sp/><sp/><sp/>cvtFunction(separationCS-&gt;getFunc());</highlight></codeline>
<codeline lineno="6813"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6814"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(genXform)<sp/>{</highlight></codeline>
<codeline lineno="6815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;<sp/>{}&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6816"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6817"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(updateColors)<sp/>{</highlight></codeline>
<codeline lineno="6818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>addCustomColor(separationCS);</highlight></codeline>
<codeline lineno="6819"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6820"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6821"><highlight class="normal"></highlight></codeline>
<codeline lineno="6822"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>csDeviceN:</highlight></codeline>
<codeline lineno="6823"><highlight class="normal"><sp/><sp/><sp/><sp/>deviceNCS<sp/>=<sp/>(<ref refid="class_gfx_device_n_color_space" kindref="compound">GfxDeviceNColorSpace</ref><sp/>*)colorSpace;</highlight></codeline>
<codeline lineno="6824"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(level<sp/>==<sp/>psLevel3<sp/>||<sp/>level<sp/>==<sp/>psLevel3Sep)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="6825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;[/DeviceN\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>[<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>deviceNCS-&gt;getNComps();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="6828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writePSString(deviceNCS-&gt;getColorantName(i));</highlight></codeline>
<codeline lineno="6829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;]\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dumpColorSpaceL2(deviceNCS-&gt;getAlt(),<sp/>gFalse,<sp/>updateColors,<sp/>gFalse);</highlight></codeline>
<codeline lineno="6833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cvtFunction(deviceNCS-&gt;getTintTransformFunc(),<sp/>map01<sp/>&amp;&amp;<sp/>deviceNCS-&gt;getAlt()-&gt;getMode()<sp/>==<sp/>csLab);</highlight></codeline>
<codeline lineno="6835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;]\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(genXform)<sp/>{</highlight></codeline>
<codeline lineno="6837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;<sp/>{}&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6839"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="6840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>DeviceN<sp/>color<sp/>spaces<sp/>are<sp/>a<sp/>Level<sp/>3<sp/>PostScript<sp/>feature.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dumpColorSpaceL2(deviceNCS-&gt;getAlt(),<sp/>gFalse,<sp/>updateColors,<sp/>map01);</highlight></codeline>
<codeline lineno="6842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(genXform)<sp/>{</highlight></codeline>
<codeline lineno="6843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cvtFunction(deviceNCS-&gt;getTintTransformFunc());</highlight></codeline>
<codeline lineno="6845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6846"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6847"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6848"><highlight class="normal"></highlight></codeline>
<codeline lineno="6849"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>csPattern:</highlight></codeline>
<codeline lineno="6850"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//~<sp/>unimplemented</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6851"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6852"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6853"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6854"><highlight class="normal"></highlight></codeline>
<codeline lineno="6855"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>OPI_SUPPORT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6856"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PSOutputDev::opiBegin(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state,<sp/><ref refid="class_dict" kindref="compound">Dict</ref><sp/>*opiDict)<sp/>{</highlight></codeline>
<codeline lineno="6857"><highlight class="normal"><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>dict;</highlight></codeline>
<codeline lineno="6858"><highlight class="normal"></highlight></codeline>
<codeline lineno="6859"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(generateOPI)<sp/>{</highlight></codeline>
<codeline lineno="6860"><highlight class="normal"><sp/><sp/><sp/><sp/>opiDict-&gt;lookup(</highlight><highlight class="stringliteral">&quot;2.0&quot;</highlight><highlight class="normal">,<sp/>&amp;dict);</highlight></codeline>
<codeline lineno="6861"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dict.isDict())<sp/>{</highlight></codeline>
<codeline lineno="6862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>opiBegin20(state,<sp/>dict.getDict());</highlight></codeline>
<codeline lineno="6863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dict.free();</highlight></codeline>
<codeline lineno="6864"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="6865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dict.free();</highlight></codeline>
<codeline lineno="6866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>opiDict-&gt;lookup(</highlight><highlight class="stringliteral">&quot;1.3&quot;</highlight><highlight class="normal">,<sp/>&amp;dict);</highlight></codeline>
<codeline lineno="6867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dict.isDict())<sp/>{</highlight></codeline>
<codeline lineno="6868"><highlight class="normal"><sp/><sp/><sp/><sp/>opiBegin13(state,<sp/>dict.getDict());</highlight></codeline>
<codeline lineno="6869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dict.free();</highlight></codeline>
<codeline lineno="6871"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6872"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6873"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6874"><highlight class="normal"></highlight></codeline>
<codeline lineno="6875"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PSOutputDev::opiBegin20(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state,<sp/><ref refid="class_dict" kindref="compound">Dict</ref><sp/>*dict)<sp/>{</highlight></codeline>
<codeline lineno="6876"><highlight class="normal"><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>obj1,<sp/>obj2,<sp/>obj3,<sp/>obj4;</highlight></codeline>
<codeline lineno="6877"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>width,<sp/>height,<sp/>left,<sp/>right,<sp/>top,<sp/>bottom;</highlight></codeline>
<codeline lineno="6878"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>w,<sp/>h;</highlight></codeline>
<codeline lineno="6879"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="6880"><highlight class="normal"></highlight></codeline>
<codeline lineno="6881"><highlight class="normal"><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;%%BeginOPI:<sp/>2.0\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6882"><highlight class="normal"><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;%%Distilled\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6883"><highlight class="normal"></highlight></codeline>
<codeline lineno="6884"><highlight class="normal"><sp/><sp/>dict-&gt;lookup(</highlight><highlight class="stringliteral">&quot;F&quot;</highlight><highlight class="normal">,<sp/>&amp;obj1);</highlight></codeline>
<codeline lineno="6885"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(getFileSpecName(&amp;obj1,<sp/>&amp;obj2))<sp/>{</highlight></codeline>
<codeline lineno="6886"><highlight class="normal"><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;%%ImageFileName:<sp/>{0:t}\n&quot;</highlight><highlight class="normal">,<sp/>obj2.getString());</highlight></codeline>
<codeline lineno="6887"><highlight class="normal"><sp/><sp/><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="6888"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6889"><highlight class="normal"><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="6890"><highlight class="normal"></highlight></codeline>
<codeline lineno="6891"><highlight class="normal"><sp/><sp/>dict-&gt;lookup(</highlight><highlight class="stringliteral">&quot;MainImage&quot;</highlight><highlight class="normal">,<sp/>&amp;obj1);</highlight></codeline>
<codeline lineno="6892"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj1.isString())<sp/>{</highlight></codeline>
<codeline lineno="6893"><highlight class="normal"><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;%%MainImage:<sp/>{0:t}\n&quot;</highlight><highlight class="normal">,<sp/>obj1.getString());</highlight></codeline>
<codeline lineno="6894"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6895"><highlight class="normal"><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="6896"><highlight class="normal"></highlight></codeline>
<codeline lineno="6897"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//~<sp/>ignoring<sp/>&apos;Tags&apos;<sp/>entry</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6898"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//~<sp/>need<sp/>to<sp/>use<sp/>writePSString()<sp/>and<sp/>deal<sp/>with<sp/>&gt;255-char<sp/>lines</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6899"><highlight class="normal"></highlight></codeline>
<codeline lineno="6900"><highlight class="normal"><sp/><sp/>dict-&gt;lookup(</highlight><highlight class="stringliteral">&quot;Size&quot;</highlight><highlight class="normal">,<sp/>&amp;obj1);</highlight></codeline>
<codeline lineno="6901"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj1.isArray()<sp/>&amp;&amp;<sp/>obj1.arrayGetLength()<sp/>==<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="6902"><highlight class="normal"><sp/><sp/><sp/><sp/>obj1.arrayGet(0,<sp/>&amp;obj2);</highlight></codeline>
<codeline lineno="6903"><highlight class="normal"><sp/><sp/><sp/><sp/>width<sp/>=<sp/>obj2.getNum();</highlight></codeline>
<codeline lineno="6904"><highlight class="normal"><sp/><sp/><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="6905"><highlight class="normal"><sp/><sp/><sp/><sp/>obj1.arrayGet(1,<sp/>&amp;obj2);</highlight></codeline>
<codeline lineno="6906"><highlight class="normal"><sp/><sp/><sp/><sp/>height<sp/>=<sp/>obj2.getNum();</highlight></codeline>
<codeline lineno="6907"><highlight class="normal"><sp/><sp/><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="6908"><highlight class="normal"><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;%%ImageDimensions:<sp/>{0:.6g}<sp/>{1:.6g}\n&quot;</highlight><highlight class="normal">,<sp/>width,<sp/>height);</highlight></codeline>
<codeline lineno="6909"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6910"><highlight class="normal"><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="6911"><highlight class="normal"></highlight></codeline>
<codeline lineno="6912"><highlight class="normal"><sp/><sp/>dict-&gt;lookup(</highlight><highlight class="stringliteral">&quot;CropRect&quot;</highlight><highlight class="normal">,<sp/>&amp;obj1);</highlight></codeline>
<codeline lineno="6913"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj1.isArray()<sp/>&amp;&amp;<sp/>obj1.arrayGetLength()<sp/>==<sp/>4)<sp/>{</highlight></codeline>
<codeline lineno="6914"><highlight class="normal"><sp/><sp/><sp/><sp/>obj1.arrayGet(0,<sp/>&amp;obj2);</highlight></codeline>
<codeline lineno="6915"><highlight class="normal"><sp/><sp/><sp/><sp/>left<sp/>=<sp/>obj2.getNum();</highlight></codeline>
<codeline lineno="6916"><highlight class="normal"><sp/><sp/><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="6917"><highlight class="normal"><sp/><sp/><sp/><sp/>obj1.arrayGet(1,<sp/>&amp;obj2);</highlight></codeline>
<codeline lineno="6918"><highlight class="normal"><sp/><sp/><sp/><sp/>top<sp/>=<sp/>obj2.getNum();</highlight></codeline>
<codeline lineno="6919"><highlight class="normal"><sp/><sp/><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="6920"><highlight class="normal"><sp/><sp/><sp/><sp/>obj1.arrayGet(2,<sp/>&amp;obj2);</highlight></codeline>
<codeline lineno="6921"><highlight class="normal"><sp/><sp/><sp/><sp/>right<sp/>=<sp/>obj2.getNum();</highlight></codeline>
<codeline lineno="6922"><highlight class="normal"><sp/><sp/><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="6923"><highlight class="normal"><sp/><sp/><sp/><sp/>obj1.arrayGet(3,<sp/>&amp;obj2);</highlight></codeline>
<codeline lineno="6924"><highlight class="normal"><sp/><sp/><sp/><sp/>bottom<sp/>=<sp/>obj2.getNum();</highlight></codeline>
<codeline lineno="6925"><highlight class="normal"><sp/><sp/><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="6926"><highlight class="normal"><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;%%ImageCropRect:<sp/>{0:.6g}<sp/>{1:.6g}<sp/>{2:.6g}<sp/>{3:.6g}\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="6927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>left,<sp/>top,<sp/>right,<sp/>bottom);</highlight></codeline>
<codeline lineno="6928"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6929"><highlight class="normal"><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="6930"><highlight class="normal"></highlight></codeline>
<codeline lineno="6931"><highlight class="normal"><sp/><sp/>dict-&gt;lookup(</highlight><highlight class="stringliteral">&quot;Overprint&quot;</highlight><highlight class="normal">,<sp/>&amp;obj1);</highlight></codeline>
<codeline lineno="6932"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj1.isBool())<sp/>{</highlight></codeline>
<codeline lineno="6933"><highlight class="normal"><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;%%ImageOverprint:<sp/>{0:s}\n&quot;</highlight><highlight class="normal">,<sp/>obj1.getBool()<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;true&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;false&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6934"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6935"><highlight class="normal"><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="6936"><highlight class="normal"></highlight></codeline>
<codeline lineno="6937"><highlight class="normal"><sp/><sp/>dict-&gt;lookup(</highlight><highlight class="stringliteral">&quot;Inks&quot;</highlight><highlight class="normal">,<sp/>&amp;obj1);</highlight></codeline>
<codeline lineno="6938"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj1.isName())<sp/>{</highlight></codeline>
<codeline lineno="6939"><highlight class="normal"><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;%%ImageInks:<sp/>{0:s}\n&quot;</highlight><highlight class="normal">,<sp/>obj1.getName());</highlight></codeline>
<codeline lineno="6940"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj1.isArray()<sp/>&amp;&amp;<sp/>obj1.arrayGetLength()<sp/>&gt;=<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="6941"><highlight class="normal"><sp/><sp/><sp/><sp/>obj1.arrayGet(0,<sp/>&amp;obj2);</highlight></codeline>
<codeline lineno="6942"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj2.isName())<sp/>{</highlight></codeline>
<codeline lineno="6943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;%%ImageInks:<sp/>{0:s}<sp/>{1:d}&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="6944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>obj2.getName(),<sp/>(obj1.arrayGetLength()<sp/>-<sp/>1)<sp/>/<sp/>2);</highlight></codeline>
<codeline lineno="6945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>1;<sp/>i+1<sp/>&lt;<sp/>obj1.arrayGetLength();<sp/>i<sp/>+=<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="6946"><highlight class="normal"><sp/><sp/><sp/><sp/>obj1.arrayGet(i,<sp/>&amp;obj3);</highlight></codeline>
<codeline lineno="6947"><highlight class="normal"><sp/><sp/><sp/><sp/>obj1.arrayGet(i+1,<sp/>&amp;obj4);</highlight></codeline>
<codeline lineno="6948"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj3.isString()<sp/>&amp;&amp;<sp/>obj4.isNum())<sp/>{</highlight></codeline>
<codeline lineno="6949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePSString(obj3.getString());</highlight></codeline>
<codeline lineno="6951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;<sp/>{0:.6g}&quot;</highlight><highlight class="normal">,<sp/>obj4.getNum());</highlight></codeline>
<codeline lineno="6952"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6953"><highlight class="normal"><sp/><sp/><sp/><sp/>obj3.free();</highlight></codeline>
<codeline lineno="6954"><highlight class="normal"><sp/><sp/><sp/><sp/>obj4.free();</highlight></codeline>
<codeline lineno="6955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6957"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6958"><highlight class="normal"><sp/><sp/><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="6959"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6960"><highlight class="normal"><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="6961"><highlight class="normal"></highlight></codeline>
<codeline lineno="6962"><highlight class="normal"><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;gsave\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6963"><highlight class="normal"></highlight></codeline>
<codeline lineno="6964"><highlight class="normal"><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;%%BeginIncludedImage\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6965"><highlight class="normal"></highlight></codeline>
<codeline lineno="6966"><highlight class="normal"><sp/><sp/>dict-&gt;lookup(</highlight><highlight class="stringliteral">&quot;IncludedImageDimensions&quot;</highlight><highlight class="normal">,<sp/>&amp;obj1);</highlight></codeline>
<codeline lineno="6967"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj1.isArray()<sp/>&amp;&amp;<sp/>obj1.arrayGetLength()<sp/>==<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="6968"><highlight class="normal"><sp/><sp/><sp/><sp/>obj1.arrayGet(0,<sp/>&amp;obj2);</highlight></codeline>
<codeline lineno="6969"><highlight class="normal"><sp/><sp/><sp/><sp/>w<sp/>=<sp/>obj2.getInt();</highlight></codeline>
<codeline lineno="6970"><highlight class="normal"><sp/><sp/><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="6971"><highlight class="normal"><sp/><sp/><sp/><sp/>obj1.arrayGet(1,<sp/>&amp;obj2);</highlight></codeline>
<codeline lineno="6972"><highlight class="normal"><sp/><sp/><sp/><sp/>h<sp/>=<sp/>obj2.getInt();</highlight></codeline>
<codeline lineno="6973"><highlight class="normal"><sp/><sp/><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="6974"><highlight class="normal"><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;%%IncludedImageDimensions:<sp/>{0:d}<sp/>{1:d}\n&quot;</highlight><highlight class="normal">,<sp/>w,<sp/>h);</highlight></codeline>
<codeline lineno="6975"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6976"><highlight class="normal"><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="6977"><highlight class="normal"></highlight></codeline>
<codeline lineno="6978"><highlight class="normal"><sp/><sp/>dict-&gt;lookup(</highlight><highlight class="stringliteral">&quot;IncludedImageQuality&quot;</highlight><highlight class="normal">,<sp/>&amp;obj1);</highlight></codeline>
<codeline lineno="6979"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj1.isNum())<sp/>{</highlight></codeline>
<codeline lineno="6980"><highlight class="normal"><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;%%IncludedImageQuality:<sp/>{0:.6g}\n&quot;</highlight><highlight class="normal">,<sp/>obj1.getNum());</highlight></codeline>
<codeline lineno="6981"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6982"><highlight class="normal"><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="6983"><highlight class="normal"></highlight></codeline>
<codeline lineno="6984"><highlight class="normal"><sp/><sp/>++opi20Nest;</highlight></codeline>
<codeline lineno="6985"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6986"><highlight class="normal"></highlight></codeline>
<codeline lineno="6987"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PSOutputDev::opiBegin13(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state,<sp/><ref refid="class_dict" kindref="compound">Dict</ref><sp/>*dict)<sp/>{</highlight></codeline>
<codeline lineno="6988"><highlight class="normal"><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>obj1,<sp/>obj2;</highlight></codeline>
<codeline lineno="6989"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>left,<sp/>right,<sp/>top,<sp/>bottom,<sp/>samples,<sp/>bits,<sp/>width,<sp/>height;</highlight></codeline>
<codeline lineno="6990"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>c,<sp/>m,<sp/>y,<sp/>k;</highlight></codeline>
<codeline lineno="6991"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>llx,<sp/>lly,<sp/>ulx,<sp/>uly,<sp/>urx,<sp/>ury,<sp/>lrx,<sp/>lry;</highlight></codeline>
<codeline lineno="6992"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>tllx,<sp/>tlly,<sp/>tulx,<sp/>tuly,<sp/>turx,<sp/>tury,<sp/>tlrx,<sp/>tlry;</highlight></codeline>
<codeline lineno="6993"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>horiz,<sp/>vert;</highlight></codeline>
<codeline lineno="6994"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="6995"><highlight class="normal"></highlight></codeline>
<codeline lineno="6996"><highlight class="normal"><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;save\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6997"><highlight class="normal"><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;/opiMatrix2<sp/>matrix<sp/>currentmatrix<sp/>def\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6998"><highlight class="normal"><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;opiMatrix<sp/>setmatrix\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6999"><highlight class="normal"></highlight></codeline>
<codeline lineno="7000"><highlight class="normal"><sp/><sp/>dict-&gt;lookup(</highlight><highlight class="stringliteral">&quot;F&quot;</highlight><highlight class="normal">,<sp/>&amp;obj1);</highlight></codeline>
<codeline lineno="7001"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(getFileSpecName(&amp;obj1,<sp/>&amp;obj2))<sp/>{</highlight></codeline>
<codeline lineno="7002"><highlight class="normal"><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;%ALDImageFileName:<sp/>{0:t}\n&quot;</highlight><highlight class="normal">,<sp/>obj2.getString());</highlight></codeline>
<codeline lineno="7003"><highlight class="normal"><sp/><sp/><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="7004"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7005"><highlight class="normal"><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="7006"><highlight class="normal"></highlight></codeline>
<codeline lineno="7007"><highlight class="normal"><sp/><sp/>dict-&gt;lookup(</highlight><highlight class="stringliteral">&quot;CropRect&quot;</highlight><highlight class="normal">,<sp/>&amp;obj1);</highlight></codeline>
<codeline lineno="7008"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj1.isArray()<sp/>&amp;&amp;<sp/>obj1.arrayGetLength()<sp/>==<sp/>4)<sp/>{</highlight></codeline>
<codeline lineno="7009"><highlight class="normal"><sp/><sp/><sp/><sp/>obj1.arrayGet(0,<sp/>&amp;obj2);</highlight></codeline>
<codeline lineno="7010"><highlight class="normal"><sp/><sp/><sp/><sp/>left<sp/>=<sp/>obj2.getInt();</highlight></codeline>
<codeline lineno="7011"><highlight class="normal"><sp/><sp/><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="7012"><highlight class="normal"><sp/><sp/><sp/><sp/>obj1.arrayGet(1,<sp/>&amp;obj2);</highlight></codeline>
<codeline lineno="7013"><highlight class="normal"><sp/><sp/><sp/><sp/>top<sp/>=<sp/>obj2.getInt();</highlight></codeline>
<codeline lineno="7014"><highlight class="normal"><sp/><sp/><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="7015"><highlight class="normal"><sp/><sp/><sp/><sp/>obj1.arrayGet(2,<sp/>&amp;obj2);</highlight></codeline>
<codeline lineno="7016"><highlight class="normal"><sp/><sp/><sp/><sp/>right<sp/>=<sp/>obj2.getInt();</highlight></codeline>
<codeline lineno="7017"><highlight class="normal"><sp/><sp/><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="7018"><highlight class="normal"><sp/><sp/><sp/><sp/>obj1.arrayGet(3,<sp/>&amp;obj2);</highlight></codeline>
<codeline lineno="7019"><highlight class="normal"><sp/><sp/><sp/><sp/>bottom<sp/>=<sp/>obj2.getInt();</highlight></codeline>
<codeline lineno="7020"><highlight class="normal"><sp/><sp/><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="7021"><highlight class="normal"><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;%ALDImageCropRect:<sp/>{0:d}<sp/>{1:d}<sp/>{2:d}<sp/>{3:d}\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="7022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>left,<sp/>top,<sp/>right,<sp/>bottom);</highlight></codeline>
<codeline lineno="7023"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7024"><highlight class="normal"><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="7025"><highlight class="normal"></highlight></codeline>
<codeline lineno="7026"><highlight class="normal"><sp/><sp/>dict-&gt;lookup(</highlight><highlight class="stringliteral">&quot;Color&quot;</highlight><highlight class="normal">,<sp/>&amp;obj1);</highlight></codeline>
<codeline lineno="7027"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj1.isArray()<sp/>&amp;&amp;<sp/>obj1.arrayGetLength()<sp/>==<sp/>5)<sp/>{</highlight></codeline>
<codeline lineno="7028"><highlight class="normal"><sp/><sp/><sp/><sp/>obj1.arrayGet(0,<sp/>&amp;obj2);</highlight></codeline>
<codeline lineno="7029"><highlight class="normal"><sp/><sp/><sp/><sp/>c<sp/>=<sp/>obj2.getNum();</highlight></codeline>
<codeline lineno="7030"><highlight class="normal"><sp/><sp/><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="7031"><highlight class="normal"><sp/><sp/><sp/><sp/>obj1.arrayGet(1,<sp/>&amp;obj2);</highlight></codeline>
<codeline lineno="7032"><highlight class="normal"><sp/><sp/><sp/><sp/>m<sp/>=<sp/>obj2.getNum();</highlight></codeline>
<codeline lineno="7033"><highlight class="normal"><sp/><sp/><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="7034"><highlight class="normal"><sp/><sp/><sp/><sp/>obj1.arrayGet(2,<sp/>&amp;obj2);</highlight></codeline>
<codeline lineno="7035"><highlight class="normal"><sp/><sp/><sp/><sp/>y<sp/>=<sp/>obj2.getNum();</highlight></codeline>
<codeline lineno="7036"><highlight class="normal"><sp/><sp/><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="7037"><highlight class="normal"><sp/><sp/><sp/><sp/>obj1.arrayGet(3,<sp/>&amp;obj2);</highlight></codeline>
<codeline lineno="7038"><highlight class="normal"><sp/><sp/><sp/><sp/>k<sp/>=<sp/>obj2.getNum();</highlight></codeline>
<codeline lineno="7039"><highlight class="normal"><sp/><sp/><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="7040"><highlight class="normal"><sp/><sp/><sp/><sp/>obj1.arrayGet(4,<sp/>&amp;obj2);</highlight></codeline>
<codeline lineno="7041"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj2.isString())<sp/>{</highlight></codeline>
<codeline lineno="7042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;%ALDImageColor:<sp/>{0:.4g}<sp/>{1:.4g}<sp/>{2:.4g}<sp/>{3:.4g}<sp/>&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="7043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c,<sp/>m,<sp/>y,<sp/>k);</highlight></codeline>
<codeline lineno="7044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePSString(obj2.getString());</highlight></codeline>
<codeline lineno="7045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7046"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7047"><highlight class="normal"><sp/><sp/><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="7048"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7049"><highlight class="normal"><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="7050"><highlight class="normal"></highlight></codeline>
<codeline lineno="7051"><highlight class="normal"><sp/><sp/>dict-&gt;lookup(</highlight><highlight class="stringliteral">&quot;ColorType&quot;</highlight><highlight class="normal">,<sp/>&amp;obj1);</highlight></codeline>
<codeline lineno="7052"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj1.isName())<sp/>{</highlight></codeline>
<codeline lineno="7053"><highlight class="normal"><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;%ALDImageColorType:<sp/>{0:s}\n&quot;</highlight><highlight class="normal">,<sp/>obj1.getName());</highlight></codeline>
<codeline lineno="7054"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7055"><highlight class="normal"><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="7056"><highlight class="normal"></highlight></codeline>
<codeline lineno="7057"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//~<sp/>ignores<sp/>&apos;Comments&apos;<sp/>entry</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7058"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//~<sp/>need<sp/>to<sp/>handle<sp/>multiple<sp/>lines</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7059"><highlight class="normal"></highlight></codeline>
<codeline lineno="7060"><highlight class="normal"><sp/><sp/>dict-&gt;lookup(</highlight><highlight class="stringliteral">&quot;CropFixed&quot;</highlight><highlight class="normal">,<sp/>&amp;obj1);</highlight></codeline>
<codeline lineno="7061"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj1.isArray())<sp/>{</highlight></codeline>
<codeline lineno="7062"><highlight class="normal"><sp/><sp/><sp/><sp/>obj1.arrayGet(0,<sp/>&amp;obj2);</highlight></codeline>
<codeline lineno="7063"><highlight class="normal"><sp/><sp/><sp/><sp/>ulx<sp/>=<sp/>obj2.getNum();</highlight></codeline>
<codeline lineno="7064"><highlight class="normal"><sp/><sp/><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="7065"><highlight class="normal"><sp/><sp/><sp/><sp/>obj1.arrayGet(1,<sp/>&amp;obj2);</highlight></codeline>
<codeline lineno="7066"><highlight class="normal"><sp/><sp/><sp/><sp/>uly<sp/>=<sp/>obj2.getNum();</highlight></codeline>
<codeline lineno="7067"><highlight class="normal"><sp/><sp/><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="7068"><highlight class="normal"><sp/><sp/><sp/><sp/>obj1.arrayGet(2,<sp/>&amp;obj2);</highlight></codeline>
<codeline lineno="7069"><highlight class="normal"><sp/><sp/><sp/><sp/>lrx<sp/>=<sp/>obj2.getNum();</highlight></codeline>
<codeline lineno="7070"><highlight class="normal"><sp/><sp/><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="7071"><highlight class="normal"><sp/><sp/><sp/><sp/>obj1.arrayGet(3,<sp/>&amp;obj2);</highlight></codeline>
<codeline lineno="7072"><highlight class="normal"><sp/><sp/><sp/><sp/>lry<sp/>=<sp/>obj2.getNum();</highlight></codeline>
<codeline lineno="7073"><highlight class="normal"><sp/><sp/><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="7074"><highlight class="normal"><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;%ALDImageCropFixed:<sp/>{0:.6g}<sp/>{1:.6g}<sp/>{2:.6g}<sp/>{3:.6g}\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="7075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ulx,<sp/>uly,<sp/>lrx,<sp/>lry);</highlight></codeline>
<codeline lineno="7076"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7077"><highlight class="normal"><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="7078"><highlight class="normal"></highlight></codeline>
<codeline lineno="7079"><highlight class="normal"><sp/><sp/>dict-&gt;lookup(</highlight><highlight class="stringliteral">&quot;GrayMap&quot;</highlight><highlight class="normal">,<sp/>&amp;obj1);</highlight></codeline>
<codeline lineno="7080"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj1.isArray())<sp/>{</highlight></codeline>
<codeline lineno="7081"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;%ALDImageGrayMap:&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7082"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>obj1.arrayGetLength();<sp/>i<sp/>+=<sp/>16)<sp/>{</highlight></codeline>
<codeline lineno="7083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="7084"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;\n%%+&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>16<sp/>&amp;&amp;<sp/>i+j<sp/>&lt;<sp/>obj1.arrayGetLength();<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="7087"><highlight class="normal"><sp/><sp/><sp/><sp/>obj1.arrayGet(i+j,<sp/>&amp;obj2);</highlight></codeline>
<codeline lineno="7088"><highlight class="normal"><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;<sp/>{0:d}&quot;</highlight><highlight class="normal">,<sp/>obj2.getInt());</highlight></codeline>
<codeline lineno="7089"><highlight class="normal"><sp/><sp/><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="7090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7091"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7092"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7093"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7094"><highlight class="normal"><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="7095"><highlight class="normal"></highlight></codeline>
<codeline lineno="7096"><highlight class="normal"><sp/><sp/>dict-&gt;lookup(</highlight><highlight class="stringliteral">&quot;ID&quot;</highlight><highlight class="normal">,<sp/>&amp;obj1);</highlight></codeline>
<codeline lineno="7097"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj1.isString())<sp/>{</highlight></codeline>
<codeline lineno="7098"><highlight class="normal"><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;%ALDImageID:<sp/>{0:t}\n&quot;</highlight><highlight class="normal">,<sp/>obj1.getString());</highlight></codeline>
<codeline lineno="7099"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7100"><highlight class="normal"><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="7101"><highlight class="normal"></highlight></codeline>
<codeline lineno="7102"><highlight class="normal"><sp/><sp/>dict-&gt;lookup(</highlight><highlight class="stringliteral">&quot;ImageType&quot;</highlight><highlight class="normal">,<sp/>&amp;obj1);</highlight></codeline>
<codeline lineno="7103"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj1.isArray()<sp/>&amp;&amp;<sp/>obj1.arrayGetLength()<sp/>==<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="7104"><highlight class="normal"><sp/><sp/><sp/><sp/>obj1.arrayGet(0,<sp/>&amp;obj2);</highlight></codeline>
<codeline lineno="7105"><highlight class="normal"><sp/><sp/><sp/><sp/>samples<sp/>=<sp/>obj2.getInt();</highlight></codeline>
<codeline lineno="7106"><highlight class="normal"><sp/><sp/><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="7107"><highlight class="normal"><sp/><sp/><sp/><sp/>obj1.arrayGet(1,<sp/>&amp;obj2);</highlight></codeline>
<codeline lineno="7108"><highlight class="normal"><sp/><sp/><sp/><sp/>bits<sp/>=<sp/>obj2.getInt();</highlight></codeline>
<codeline lineno="7109"><highlight class="normal"><sp/><sp/><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="7110"><highlight class="normal"><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;%ALDImageType:<sp/>{0:d}<sp/>{1:d}\n&quot;</highlight><highlight class="normal">,<sp/>samples,<sp/>bits);</highlight></codeline>
<codeline lineno="7111"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7112"><highlight class="normal"><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="7113"><highlight class="normal"></highlight></codeline>
<codeline lineno="7114"><highlight class="normal"><sp/><sp/>dict-&gt;lookup(</highlight><highlight class="stringliteral">&quot;Overprint&quot;</highlight><highlight class="normal">,<sp/>&amp;obj1);</highlight></codeline>
<codeline lineno="7115"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj1.isBool())<sp/>{</highlight></codeline>
<codeline lineno="7116"><highlight class="normal"><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;%ALDImageOverprint:<sp/>{0:s}\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="7117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>obj1.getBool()<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;true&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;false&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7118"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7119"><highlight class="normal"><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="7120"><highlight class="normal"></highlight></codeline>
<codeline lineno="7121"><highlight class="normal"><sp/><sp/>dict-&gt;lookup(</highlight><highlight class="stringliteral">&quot;Position&quot;</highlight><highlight class="normal">,<sp/>&amp;obj1);</highlight></codeline>
<codeline lineno="7122"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj1.isArray()<sp/>&amp;&amp;<sp/>obj1.arrayGetLength()<sp/>==<sp/>8)<sp/>{</highlight></codeline>
<codeline lineno="7123"><highlight class="normal"><sp/><sp/><sp/><sp/>obj1.arrayGet(0,<sp/>&amp;obj2);</highlight></codeline>
<codeline lineno="7124"><highlight class="normal"><sp/><sp/><sp/><sp/>llx<sp/>=<sp/>obj2.getNum();</highlight></codeline>
<codeline lineno="7125"><highlight class="normal"><sp/><sp/><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="7126"><highlight class="normal"><sp/><sp/><sp/><sp/>obj1.arrayGet(1,<sp/>&amp;obj2);</highlight></codeline>
<codeline lineno="7127"><highlight class="normal"><sp/><sp/><sp/><sp/>lly<sp/>=<sp/>obj2.getNum();</highlight></codeline>
<codeline lineno="7128"><highlight class="normal"><sp/><sp/><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="7129"><highlight class="normal"><sp/><sp/><sp/><sp/>obj1.arrayGet(2,<sp/>&amp;obj2);</highlight></codeline>
<codeline lineno="7130"><highlight class="normal"><sp/><sp/><sp/><sp/>ulx<sp/>=<sp/>obj2.getNum();</highlight></codeline>
<codeline lineno="7131"><highlight class="normal"><sp/><sp/><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="7132"><highlight class="normal"><sp/><sp/><sp/><sp/>obj1.arrayGet(3,<sp/>&amp;obj2);</highlight></codeline>
<codeline lineno="7133"><highlight class="normal"><sp/><sp/><sp/><sp/>uly<sp/>=<sp/>obj2.getNum();</highlight></codeline>
<codeline lineno="7134"><highlight class="normal"><sp/><sp/><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="7135"><highlight class="normal"><sp/><sp/><sp/><sp/>obj1.arrayGet(4,<sp/>&amp;obj2);</highlight></codeline>
<codeline lineno="7136"><highlight class="normal"><sp/><sp/><sp/><sp/>urx<sp/>=<sp/>obj2.getNum();</highlight></codeline>
<codeline lineno="7137"><highlight class="normal"><sp/><sp/><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="7138"><highlight class="normal"><sp/><sp/><sp/><sp/>obj1.arrayGet(5,<sp/>&amp;obj2);</highlight></codeline>
<codeline lineno="7139"><highlight class="normal"><sp/><sp/><sp/><sp/>ury<sp/>=<sp/>obj2.getNum();</highlight></codeline>
<codeline lineno="7140"><highlight class="normal"><sp/><sp/><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="7141"><highlight class="normal"><sp/><sp/><sp/><sp/>obj1.arrayGet(6,<sp/>&amp;obj2);</highlight></codeline>
<codeline lineno="7142"><highlight class="normal"><sp/><sp/><sp/><sp/>lrx<sp/>=<sp/>obj2.getNum();</highlight></codeline>
<codeline lineno="7143"><highlight class="normal"><sp/><sp/><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="7144"><highlight class="normal"><sp/><sp/><sp/><sp/>obj1.arrayGet(7,<sp/>&amp;obj2);</highlight></codeline>
<codeline lineno="7145"><highlight class="normal"><sp/><sp/><sp/><sp/>lry<sp/>=<sp/>obj2.getNum();</highlight></codeline>
<codeline lineno="7146"><highlight class="normal"><sp/><sp/><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="7147"><highlight class="normal"><sp/><sp/><sp/><sp/>opiTransform(state,<sp/>llx,<sp/>lly,<sp/>&amp;tllx,<sp/>&amp;tlly);</highlight></codeline>
<codeline lineno="7148"><highlight class="normal"><sp/><sp/><sp/><sp/>opiTransform(state,<sp/>ulx,<sp/>uly,<sp/>&amp;tulx,<sp/>&amp;tuly);</highlight></codeline>
<codeline lineno="7149"><highlight class="normal"><sp/><sp/><sp/><sp/>opiTransform(state,<sp/>urx,<sp/>ury,<sp/>&amp;turx,<sp/>&amp;tury);</highlight></codeline>
<codeline lineno="7150"><highlight class="normal"><sp/><sp/><sp/><sp/>opiTransform(state,<sp/>lrx,<sp/>lry,<sp/>&amp;tlrx,<sp/>&amp;tlry);</highlight></codeline>
<codeline lineno="7151"><highlight class="normal"><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;%ALDImagePosition:<sp/>{0:.6g}<sp/>{1:.6g}<sp/>{2:.6g}<sp/>{3:.6g}<sp/>{4:.6g}<sp/>{5:.6g}<sp/>{6:.6g}<sp/>{7:.6g}\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="7152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tllx,<sp/>tlly,<sp/>tulx,<sp/>tuly,<sp/>turx,<sp/>tury,<sp/>tlrx,<sp/>tlry);</highlight></codeline>
<codeline lineno="7153"><highlight class="normal"><sp/><sp/><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="7154"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7155"><highlight class="normal"><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="7156"><highlight class="normal"></highlight></codeline>
<codeline lineno="7157"><highlight class="normal"><sp/><sp/>dict-&gt;lookup(</highlight><highlight class="stringliteral">&quot;Resolution&quot;</highlight><highlight class="normal">,<sp/>&amp;obj1);</highlight></codeline>
<codeline lineno="7158"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj1.isArray()<sp/>&amp;&amp;<sp/>obj1.arrayGetLength()<sp/>==<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="7159"><highlight class="normal"><sp/><sp/><sp/><sp/>obj1.arrayGet(0,<sp/>&amp;obj2);</highlight></codeline>
<codeline lineno="7160"><highlight class="normal"><sp/><sp/><sp/><sp/>horiz<sp/>=<sp/>obj2.getNum();</highlight></codeline>
<codeline lineno="7161"><highlight class="normal"><sp/><sp/><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="7162"><highlight class="normal"><sp/><sp/><sp/><sp/>obj1.arrayGet(1,<sp/>&amp;obj2);</highlight></codeline>
<codeline lineno="7163"><highlight class="normal"><sp/><sp/><sp/><sp/>vert<sp/>=<sp/>obj2.getNum();</highlight></codeline>
<codeline lineno="7164"><highlight class="normal"><sp/><sp/><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="7165"><highlight class="normal"><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;%ALDImageResoution:<sp/>{0:.6g}<sp/>{1:.6g}\n&quot;</highlight><highlight class="normal">,<sp/>horiz,<sp/>vert);</highlight></codeline>
<codeline lineno="7166"><highlight class="normal"><sp/><sp/><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="7167"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7168"><highlight class="normal"><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="7169"><highlight class="normal"></highlight></codeline>
<codeline lineno="7170"><highlight class="normal"><sp/><sp/>dict-&gt;lookup(</highlight><highlight class="stringliteral">&quot;Size&quot;</highlight><highlight class="normal">,<sp/>&amp;obj1);</highlight></codeline>
<codeline lineno="7171"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj1.isArray()<sp/>&amp;&amp;<sp/>obj1.arrayGetLength()<sp/>==<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="7172"><highlight class="normal"><sp/><sp/><sp/><sp/>obj1.arrayGet(0,<sp/>&amp;obj2);</highlight></codeline>
<codeline lineno="7173"><highlight class="normal"><sp/><sp/><sp/><sp/>width<sp/>=<sp/>obj2.getInt();</highlight></codeline>
<codeline lineno="7174"><highlight class="normal"><sp/><sp/><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="7175"><highlight class="normal"><sp/><sp/><sp/><sp/>obj1.arrayGet(1,<sp/>&amp;obj2);</highlight></codeline>
<codeline lineno="7176"><highlight class="normal"><sp/><sp/><sp/><sp/>height<sp/>=<sp/>obj2.getInt();</highlight></codeline>
<codeline lineno="7177"><highlight class="normal"><sp/><sp/><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="7178"><highlight class="normal"><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;%ALDImageDimensions:<sp/>{0:d}<sp/>{1:d}\n&quot;</highlight><highlight class="normal">,<sp/>width,<sp/>height);</highlight></codeline>
<codeline lineno="7179"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7180"><highlight class="normal"><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="7181"><highlight class="normal"></highlight></codeline>
<codeline lineno="7182"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//~<sp/>ignoring<sp/>&apos;Tags&apos;<sp/>entry</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7183"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//~<sp/>need<sp/>to<sp/>use<sp/>writePSString()<sp/>and<sp/>deal<sp/>with<sp/>&gt;255-char<sp/>lines</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7184"><highlight class="normal"></highlight></codeline>
<codeline lineno="7185"><highlight class="normal"><sp/><sp/>dict-&gt;lookup(</highlight><highlight class="stringliteral">&quot;Tint&quot;</highlight><highlight class="normal">,<sp/>&amp;obj1);</highlight></codeline>
<codeline lineno="7186"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj1.isNum())<sp/>{</highlight></codeline>
<codeline lineno="7187"><highlight class="normal"><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;%ALDImageTint:<sp/>{0:.6g}\n&quot;</highlight><highlight class="normal">,<sp/>obj1.getNum());</highlight></codeline>
<codeline lineno="7188"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7189"><highlight class="normal"><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="7190"><highlight class="normal"></highlight></codeline>
<codeline lineno="7191"><highlight class="normal"><sp/><sp/>dict-&gt;lookup(</highlight><highlight class="stringliteral">&quot;Transparency&quot;</highlight><highlight class="normal">,<sp/>&amp;obj1);</highlight></codeline>
<codeline lineno="7192"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj1.isBool())<sp/>{</highlight></codeline>
<codeline lineno="7193"><highlight class="normal"><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;%ALDImageTransparency:<sp/>{0:s}\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="7194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>obj1.getBool()<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;true&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;false&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7195"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7196"><highlight class="normal"><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="7197"><highlight class="normal"></highlight></codeline>
<codeline lineno="7198"><highlight class="normal"><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;%%BeginObject:<sp/>image\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7199"><highlight class="normal"><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;opiMatrix2<sp/>setmatrix\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7200"><highlight class="normal"><sp/><sp/>++opi13Nest;</highlight></codeline>
<codeline lineno="7201"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7202"><highlight class="normal"></highlight></codeline>
<codeline lineno="7203"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Convert<sp/>PDF<sp/>user<sp/>space<sp/>coordinates<sp/>to<sp/>PostScript<sp/>default<sp/>user<sp/>space</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7204"><highlight class="normal"></highlight><highlight class="comment">//<sp/>coordinates.<sp/><sp/>This<sp/>has<sp/>to<sp/>account<sp/>for<sp/>both<sp/>the<sp/>PDF<sp/>CTM<sp/>and<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7205"><highlight class="normal"></highlight><highlight class="comment">//<sp/>PSOutputDev<sp/>page-fitting<sp/>transform.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7206"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PSOutputDev::opiTransform(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x0,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y0,</highlight></codeline>
<codeline lineno="7207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*x1,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*y1)<sp/>{</highlight></codeline>
<codeline lineno="7208"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t;</highlight></codeline>
<codeline lineno="7209"><highlight class="normal"></highlight></codeline>
<codeline lineno="7210"><highlight class="normal"><sp/><sp/>state-&gt;transform(x0,<sp/>y0,<sp/>x1,<sp/>y1);</highlight></codeline>
<codeline lineno="7211"><highlight class="normal"><sp/><sp/>*x1<sp/>+=<sp/>tx;</highlight></codeline>
<codeline lineno="7212"><highlight class="normal"><sp/><sp/>*y1<sp/>+=<sp/>ty;</highlight></codeline>
<codeline lineno="7213"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rotate<sp/>==<sp/>90)<sp/>{</highlight></codeline>
<codeline lineno="7214"><highlight class="normal"><sp/><sp/><sp/><sp/>t<sp/>=<sp/>*x1;</highlight></codeline>
<codeline lineno="7215"><highlight class="normal"><sp/><sp/><sp/><sp/>*x1<sp/>=<sp/>-*y1;</highlight></codeline>
<codeline lineno="7216"><highlight class="normal"><sp/><sp/><sp/><sp/>*y1<sp/>=<sp/>t;</highlight></codeline>
<codeline lineno="7217"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rotate<sp/>==<sp/>180)<sp/>{</highlight></codeline>
<codeline lineno="7218"><highlight class="normal"><sp/><sp/><sp/><sp/>*x1<sp/>=<sp/>-*x1;</highlight></codeline>
<codeline lineno="7219"><highlight class="normal"><sp/><sp/><sp/><sp/>*y1<sp/>=<sp/>-*y1;</highlight></codeline>
<codeline lineno="7220"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rotate<sp/>==<sp/>270)<sp/>{</highlight></codeline>
<codeline lineno="7221"><highlight class="normal"><sp/><sp/><sp/><sp/>t<sp/>=<sp/>*x1;</highlight></codeline>
<codeline lineno="7222"><highlight class="normal"><sp/><sp/><sp/><sp/>*x1<sp/>=<sp/>*y1;</highlight></codeline>
<codeline lineno="7223"><highlight class="normal"><sp/><sp/><sp/><sp/>*y1<sp/>=<sp/>-t;</highlight></codeline>
<codeline lineno="7224"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7225"><highlight class="normal"><sp/><sp/>*x1<sp/>*=<sp/>xScale;</highlight></codeline>
<codeline lineno="7226"><highlight class="normal"><sp/><sp/>*y1<sp/>*=<sp/>yScale;</highlight></codeline>
<codeline lineno="7227"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7228"><highlight class="normal"></highlight></codeline>
<codeline lineno="7229"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PSOutputDev::opiEnd(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state,<sp/><ref refid="class_dict" kindref="compound">Dict</ref><sp/>*opiDict)<sp/>{</highlight></codeline>
<codeline lineno="7230"><highlight class="normal"><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>dict;</highlight></codeline>
<codeline lineno="7231"><highlight class="normal"></highlight></codeline>
<codeline lineno="7232"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(generateOPI)<sp/>{</highlight></codeline>
<codeline lineno="7233"><highlight class="normal"><sp/><sp/><sp/><sp/>opiDict-&gt;lookup(</highlight><highlight class="stringliteral">&quot;2.0&quot;</highlight><highlight class="normal">,<sp/>&amp;dict);</highlight></codeline>
<codeline lineno="7234"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dict.isDict())<sp/>{</highlight></codeline>
<codeline lineno="7235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;%%EndIncludedImage\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;%%EndOPI\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;grestore\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>--opi20Nest;</highlight></codeline>
<codeline lineno="7239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dict.free();</highlight></codeline>
<codeline lineno="7240"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="7241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dict.free();</highlight></codeline>
<codeline lineno="7242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>opiDict-&gt;lookup(</highlight><highlight class="stringliteral">&quot;1.3&quot;</highlight><highlight class="normal">,<sp/>&amp;dict);</highlight></codeline>
<codeline lineno="7243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dict.isDict())<sp/>{</highlight></codeline>
<codeline lineno="7244"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;%%EndObject\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7245"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;restore\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7246"><highlight class="normal"><sp/><sp/><sp/><sp/>--opi13Nest;</highlight></codeline>
<codeline lineno="7247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dict.free();</highlight></codeline>
<codeline lineno="7249"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7250"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7251"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7252"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>OPI_SUPPORT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7253"><highlight class="normal"></highlight></codeline>
<codeline lineno="7254"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PSOutputDev::type3D0(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>wx,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>wy)<sp/>{</highlight></codeline>
<codeline lineno="7255"><highlight class="normal"><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;{0:.6g}<sp/>{1:.6g}<sp/>setcharwidth\n&quot;</highlight><highlight class="normal">,<sp/>wx,<sp/>wy);</highlight></codeline>
<codeline lineno="7256"><highlight class="normal"><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;q\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7257"><highlight class="normal"><sp/><sp/>t3NeedsRestore<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="7258"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7259"><highlight class="normal"></highlight></codeline>
<codeline lineno="7260"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PSOutputDev::type3D1(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>wx,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>wy,</highlight></codeline>
<codeline lineno="7261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>llx,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>lly,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>urx,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ury)<sp/>{</highlight></codeline>
<codeline lineno="7262"><highlight class="normal"><sp/><sp/>t3WX<sp/>=<sp/>wx;</highlight></codeline>
<codeline lineno="7263"><highlight class="normal"><sp/><sp/>t3WY<sp/>=<sp/>wy;</highlight></codeline>
<codeline lineno="7264"><highlight class="normal"><sp/><sp/>t3LLX<sp/>=<sp/>llx;</highlight></codeline>
<codeline lineno="7265"><highlight class="normal"><sp/><sp/>t3LLY<sp/>=<sp/>lly;</highlight></codeline>
<codeline lineno="7266"><highlight class="normal"><sp/><sp/>t3URX<sp/>=<sp/>urx;</highlight></codeline>
<codeline lineno="7267"><highlight class="normal"><sp/><sp/>t3URY<sp/>=<sp/>ury;</highlight></codeline>
<codeline lineno="7268"><highlight class="normal"><sp/><sp/>t3String<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref>();</highlight></codeline>
<codeline lineno="7269"><highlight class="normal"><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;q\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7270"><highlight class="normal"><sp/><sp/>t3FillColorOnly<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="7271"><highlight class="normal"><sp/><sp/>t3Cacheable<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="7272"><highlight class="normal"><sp/><sp/>t3NeedsRestore<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="7273"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7274"><highlight class="normal"></highlight></codeline>
<codeline lineno="7275"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PSOutputDev::drawForm(<ref refid="struct_ref" kindref="compound">Ref</ref><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="7276"><highlight class="normal"><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;f_{0:d}_{1:d}\n&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">.num,<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">.gen);</highlight></codeline>
<codeline lineno="7277"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7278"><highlight class="normal"></highlight></codeline>
<codeline lineno="7279"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PSOutputDev::psXObject(<ref refid="class_stream" kindref="compound">Stream</ref><sp/>*psStream,<sp/><ref refid="class_stream" kindref="compound">Stream</ref><sp/>*level1Stream)<sp/>{</highlight></codeline>
<codeline lineno="7280"><highlight class="normal"><sp/><sp/><ref refid="class_stream" kindref="compound">Stream</ref><sp/>*str;</highlight></codeline>
<codeline lineno="7281"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="7282"><highlight class="normal"></highlight></codeline>
<codeline lineno="7283"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((level<sp/>==<sp/>psLevel1<sp/>||<sp/>level<sp/>==<sp/>psLevel1Sep)<sp/>&amp;&amp;<sp/>level1Stream)<sp/>{</highlight></codeline>
<codeline lineno="7284"><highlight class="normal"><sp/><sp/><sp/><sp/>str<sp/>=<sp/>level1Stream;</highlight></codeline>
<codeline lineno="7285"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="7286"><highlight class="normal"><sp/><sp/><sp/><sp/>str<sp/>=<sp/>psStream;</highlight></codeline>
<codeline lineno="7287"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7288"><highlight class="normal"><sp/><sp/>str-&gt;reset();</highlight></codeline>
<codeline lineno="7289"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((c<sp/>=<sp/>str-&gt;getChar())<sp/>!=<sp/>EOF)<sp/>{</highlight></codeline>
<codeline lineno="7290"><highlight class="normal"><sp/><sp/><sp/><sp/>writePSChar(c);</highlight></codeline>
<codeline lineno="7291"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7292"><highlight class="normal"><sp/><sp/>str-&gt;close();</highlight></codeline>
<codeline lineno="7293"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7294"><highlight class="normal"></highlight></codeline>
<codeline lineno="7295"><highlight class="normal"></highlight><highlight class="comment">//~<sp/>can<sp/>nextFunc<sp/>be<sp/>reset<sp/>to<sp/>0<sp/>--<sp/>maybe<sp/>at<sp/>the<sp/>start<sp/>of<sp/>each<sp/>page?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7296"><highlight class="normal"></highlight><highlight class="comment">//~<sp/><sp/><sp/>or<sp/>maybe<sp/>at<sp/>the<sp/>start<sp/>of<sp/>each<sp/>color<sp/>space<sp/>/<sp/>pattern?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7297"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PSOutputDev::cvtFunction(<ref refid="class_function" kindref="compound">Function</ref><sp/>*func,<sp/>GBool<sp/>invertPSFunction)<sp/>{</highlight></codeline>
<codeline lineno="7298"><highlight class="normal"><sp/><sp/><ref refid="class_sampled_function" kindref="compound">SampledFunction</ref><sp/>*func0;</highlight></codeline>
<codeline lineno="7299"><highlight class="normal"><sp/><sp/><ref refid="class_exponential_function" kindref="compound">ExponentialFunction</ref><sp/>*func2;</highlight></codeline>
<codeline lineno="7300"><highlight class="normal"><sp/><sp/><ref refid="class_stitching_function" kindref="compound">StitchingFunction</ref><sp/>*func3;</highlight></codeline>
<codeline lineno="7301"><highlight class="normal"><sp/><sp/><ref refid="class_post_script_function" kindref="compound">PostScriptFunction</ref><sp/>*func4;</highlight></codeline>
<codeline lineno="7302"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>thisFunc,<sp/>m,<sp/>n,<sp/>nSamples,<sp/>i,<sp/>j,<sp/>k;</highlight></codeline>
<codeline lineno="7303"><highlight class="normal"></highlight></codeline>
<codeline lineno="7304"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(func-&gt;getType())<sp/>{</highlight></codeline>
<codeline lineno="7305"><highlight class="normal"></highlight></codeline>
<codeline lineno="7306"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>-1:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>identity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7307"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;{}\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7308"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7309"><highlight class="normal"></highlight></codeline>
<codeline lineno="7310"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>sampled</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7311"><highlight class="normal"><sp/><sp/><sp/><sp/>func0<sp/>=<sp/>(<ref refid="class_sampled_function" kindref="compound">SampledFunction</ref><sp/>*)func;</highlight></codeline>
<codeline lineno="7312"><highlight class="normal"><sp/><sp/><sp/><sp/>thisFunc<sp/>=<sp/>nextFunc++;</highlight></codeline>
<codeline lineno="7313"><highlight class="normal"><sp/><sp/><sp/><sp/>m<sp/>=<sp/>func0-&gt;getInputSize();</highlight></codeline>
<codeline lineno="7314"><highlight class="normal"><sp/><sp/><sp/><sp/>n<sp/>=<sp/>func0-&gt;getOutputSize();</highlight></codeline>
<codeline lineno="7315"><highlight class="normal"><sp/><sp/><sp/><sp/>nSamples<sp/>=<sp/>n;</highlight></codeline>
<codeline lineno="7316"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>m;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="7317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nSamples<sp/>*=<sp/>func0-&gt;getSampleSize(i);</highlight></codeline>
<codeline lineno="7318"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7319"><highlight class="normal"><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;/xpdfSamples{0:d}<sp/>[\n&quot;</highlight><highlight class="normal">,<sp/>thisFunc);</highlight></codeline>
<codeline lineno="7320"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nSamples;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="7321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;{0:.6g}\n&quot;</highlight><highlight class="normal">,<sp/>func0-&gt;getSamples()[i]);</highlight></codeline>
<codeline lineno="7322"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7323"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;]<sp/>def\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7324"><highlight class="normal"><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;{{<sp/>{0:d}<sp/>array<sp/>{1:d}<sp/>array<sp/>{2:d}<sp/>2<sp/>roll\n&quot;</highlight><highlight class="normal">,<sp/>2*m,<sp/>m,<sp/>m+2);</highlight></codeline>
<codeline lineno="7325"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>[e01]<sp/>[efrac]<sp/>x0<sp/>x1<sp/>...<sp/>xm-1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7326"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>m-1;<sp/>i<sp/>&gt;=<sp/>0;<sp/>--i)<sp/>{</highlight></codeline>
<codeline lineno="7327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>[e01]<sp/>[efrac]<sp/>x0<sp/>x1<sp/>...<sp/>xi</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;{0:.6g}<sp/>sub<sp/>{1:.6g}<sp/>mul<sp/>{2:.6g}<sp/>add\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="7329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>func0-&gt;getDomainMin(i),</highlight></codeline>
<codeline lineno="7330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(func0-&gt;getEncodeMax(i)<sp/>-<sp/>func0-&gt;getEncodeMin(i))<sp/>/</highlight></codeline>
<codeline lineno="7331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(func0-&gt;getDomainMax(i)<sp/>-<sp/>func0-&gt;getDomainMin(i)),</highlight></codeline>
<codeline lineno="7332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>func0-&gt;getEncodeMin(i));</highlight></codeline>
<codeline lineno="7333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>[e01]<sp/>[efrac]<sp/>x0<sp/>x1<sp/>...<sp/>xi-1<sp/>xi&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;dup<sp/>0<sp/>lt<sp/>{{<sp/>pop<sp/>0<sp/>}}<sp/>{{<sp/>dup<sp/>{0:d}<sp/>gt<sp/>{{<sp/>pop<sp/>{1:d}<sp/>}}<sp/>if<sp/>}}<sp/>ifelse\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="7335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>func0-&gt;getSampleSize(i)<sp/>-<sp/>1,<sp/>func0-&gt;getSampleSize(i)<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="7336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>[e01]<sp/>[efrac]<sp/>x0<sp/>x1<sp/>...<sp/>xi-1<sp/>xi&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;dup<sp/>floor<sp/>cvi<sp/>exch<sp/>dup<sp/>ceiling<sp/>cvi<sp/>exch<sp/>2<sp/>index<sp/>sub\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>[e01]<sp/>[efrac]<sp/>x0<sp/>x1<sp/>...<sp/>xi-1<sp/>floor(xi&apos;)<sp/>ceiling(xi&apos;)<sp/>xi&apos;-floor(xi&apos;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;{0:d}<sp/>index<sp/>{1:d}<sp/>3<sp/>2<sp/>roll<sp/>put\n&quot;</highlight><highlight class="normal">,<sp/>i+3,<sp/>i);</highlight></codeline>
<codeline lineno="7340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>[e01]<sp/>[efrac]<sp/>x0<sp/>x1<sp/>...<sp/>xi-1<sp/>floor(xi&apos;)<sp/>ceiling(xi&apos;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;{0:d}<sp/>index<sp/>{1:d}<sp/>3<sp/>2<sp/>roll<sp/>put\n&quot;</highlight><highlight class="normal">,<sp/>i+3,<sp/>2*i+1);</highlight></codeline>
<codeline lineno="7342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>[e01]<sp/>[efrac]<sp/>x0<sp/>x1<sp/>...<sp/>xi-1<sp/>floor(xi&apos;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;{0:d}<sp/>index<sp/>{1:d}<sp/>3<sp/>2<sp/>roll<sp/>put\n&quot;</highlight><highlight class="normal">,<sp/>i+2,<sp/>2*i);</highlight></codeline>
<codeline lineno="7344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>[e01]<sp/>[efrac]<sp/>x0<sp/>x1<sp/>...<sp/>xi-1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7345"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7346"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>[e01]<sp/>[efrac]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7347"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="7348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>[e01]<sp/>[efrac]<sp/>y(0)<sp/>...<sp/>y(i-1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>(1&lt;&lt;m);<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="7350"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>[e01]<sp/>[efrac]<sp/>y(0)<sp/>...<sp/>y(i-1)<sp/>s(0)<sp/>s(1)<sp/>...<sp/>s(j-1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7351"><highlight class="normal"><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;xpdfSamples{0:d}\n&quot;</highlight><highlight class="normal">,<sp/>thisFunc);</highlight></codeline>
<codeline lineno="7352"><highlight class="normal"><sp/><sp/><sp/><sp/>k<sp/>=<sp/>m<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="7353"><highlight class="normal"><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;{0:d}<sp/>index<sp/>{1:d}<sp/>get\n&quot;</highlight><highlight class="normal">,<sp/>i+j+2,<sp/>2<sp/>*<sp/>k<sp/>+<sp/>((j<sp/>&gt;&gt;<sp/>k)<sp/>&amp;<sp/>1));</highlight></codeline>
<codeline lineno="7354"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k<sp/>=<sp/>m<sp/>-<sp/>2;<sp/>k<sp/>&gt;=<sp/>0;<sp/>--k)<sp/>{</highlight></codeline>
<codeline lineno="7355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;{0:d}<sp/>mul<sp/>{1:d}<sp/>index<sp/>{2:d}<sp/>get<sp/>add\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="7356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>func0-&gt;getSampleSize(k),</highlight></codeline>
<codeline lineno="7357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>+<sp/>j<sp/>+<sp/>3,</highlight></codeline>
<codeline lineno="7358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2<sp/>*<sp/>k<sp/>+<sp/>((j<sp/>&gt;&gt;<sp/>k)<sp/>&amp;<sp/>1));</highlight></codeline>
<codeline lineno="7359"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7360"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="7361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;{0:d}<sp/>mul<sp/>{1:d}<sp/>add<sp/>&quot;</highlight><highlight class="normal">,<sp/>n,<sp/>i);</highlight></codeline>
<codeline lineno="7362"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7363"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;get\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>[e01]<sp/>[efrac]<sp/>y(0)<sp/>...<sp/>y(i-1)<sp/>s(0)<sp/>s(1)<sp/>...<sp/>s(2^m-1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>m;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="7367"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>[e01]<sp/>[efrac]<sp/>y(0)<sp/>...<sp/>y(i-1)<sp/>s(0)<sp/>s(1)<sp/>...<sp/>s(2^(m-j)-1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7368"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>(1<sp/>&lt;&lt;<sp/>(m<sp/>-<sp/>j));<sp/>k<sp/>+=<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="7369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>[e01]<sp/>[efrac]<sp/>y(0)<sp/>...<sp/>y(i-1)<sp/>&lt;k/2<sp/>s&apos;<sp/>values&gt;<sp/>&lt;2^(m-j)-k<sp/>s<sp/>values&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;{0:d}<sp/>index<sp/>{1:d}<sp/>get<sp/>dup\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="7371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>+<sp/>k/2<sp/>+<sp/>(1<sp/>&lt;&lt;<sp/>(m-j))<sp/>-<sp/>k,<sp/>j);</highlight></codeline>
<codeline lineno="7372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;3<sp/>2<sp/>roll<sp/>mul<sp/>exch<sp/>1<sp/>exch<sp/>sub<sp/>3<sp/>2<sp/>roll<sp/>mul<sp/>add\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;{0:d}<sp/>1<sp/>roll\n&quot;</highlight><highlight class="normal">,<sp/>k/2<sp/>+<sp/>(1<sp/>&lt;&lt;<sp/>(m-j))<sp/>-<sp/>k<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="7374"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7375"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>[e01]<sp/>[efrac]<sp/>s&apos;(0)<sp/>s&apos;(1)<sp/>...<sp/>s(2^(m-j-1)-1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>[e01]<sp/>[efrac]<sp/>y(0)<sp/>...<sp/>y(i-1)<sp/>s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;{0:.6g}<sp/>mul<sp/>{1:.6g}<sp/>add\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="7379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>func0-&gt;getDecodeMax(i)<sp/>-<sp/>func0-&gt;getDecodeMin(i),</highlight></codeline>
<codeline lineno="7380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>func0-&gt;getDecodeMin(i));</highlight></codeline>
<codeline lineno="7381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;dup<sp/>{0:.6g}<sp/>lt<sp/>{{<sp/>pop<sp/>{1:.6g}<sp/>}}<sp/>{{<sp/>dup<sp/>{2:.6g}<sp/>gt<sp/>{{<sp/>pop<sp/>{3:.6g}<sp/>}}<sp/>if<sp/>}}<sp/>ifelse\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="7382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>func0-&gt;getRangeMin(i),<sp/>func0-&gt;getRangeMin(i),</highlight></codeline>
<codeline lineno="7383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>func0-&gt;getRangeMax(i),<sp/>func0-&gt;getRangeMax(i));</highlight></codeline>
<codeline lineno="7384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>[e01]<sp/>[efrac]<sp/>y(0)<sp/>...<sp/>y(i-1)<sp/>y(i)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7385"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7386"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>[e01]<sp/>[efrac]<sp/>y(0)<sp/>...<sp/>y(n-1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7387"><highlight class="normal"><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;{0:d}<sp/>{1:d}<sp/>roll<sp/>pop<sp/>pop<sp/>\n&quot;</highlight><highlight class="normal">,<sp/>n+2,<sp/>n);</highlight></codeline>
<codeline lineno="7388"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(invertPSFunction)<sp/>{</highlight></codeline>
<codeline lineno="7389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="7390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;{0:d}<sp/>-1<sp/>roll<sp/>&quot;</highlight><highlight class="normal">,<sp/>n);</highlight></codeline>
<codeline lineno="7391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;{0:.6g}<sp/>sub<sp/>{1:.6g}<sp/>div<sp/>&quot;</highlight><highlight class="normal">,<sp/>func0-&gt;getRangeMin(i),<sp/>func0-&gt;getRangeMax(i)<sp/>-<sp/>func0-&gt;getRangeMin(i));</highlight></codeline>
<codeline lineno="7392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7393"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7394"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;}\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7395"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7396"><highlight class="normal"></highlight></codeline>
<codeline lineno="7397"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>exponential</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7398"><highlight class="normal"><sp/><sp/><sp/><sp/>func2<sp/>=<sp/>(<ref refid="class_exponential_function" kindref="compound">ExponentialFunction</ref><sp/>*)func;</highlight></codeline>
<codeline lineno="7399"><highlight class="normal"><sp/><sp/><sp/><sp/>n<sp/>=<sp/>func2-&gt;getOutputSize();</highlight></codeline>
<codeline lineno="7400"><highlight class="normal"><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;{{<sp/>dup<sp/>{0:.6g}<sp/>lt<sp/>{{<sp/>pop<sp/>{1:.6g}<sp/>}}<sp/>{{<sp/>dup<sp/>{2:.6g}<sp/>gt<sp/>{{<sp/>pop<sp/>{3:.6g}<sp/>}}<sp/>if<sp/>}}<sp/>ifelse\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="7401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>func2-&gt;getDomainMin(0),<sp/>func2-&gt;getDomainMin(0),</highlight></codeline>
<codeline lineno="7402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>func2-&gt;getDomainMax(0),<sp/>func2-&gt;getDomainMax(0));</highlight></codeline>
<codeline lineno="7403"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>x</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7404"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="7405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>x<sp/>y(0)<sp/>..<sp/>y(i-1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;{0:d}<sp/>index<sp/>{1:.6g}<sp/>exp<sp/>{2:.6g}<sp/>mul<sp/>{3:.6g}<sp/>add\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="7407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i,<sp/>func2-&gt;getE(),<sp/>func2-&gt;getC1()[i]<sp/>-<sp/>func2-&gt;getC0()[i],</highlight></codeline>
<codeline lineno="7408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>func2-&gt;getC0()[i]);</highlight></codeline>
<codeline lineno="7409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(func2-&gt;getHasRange())<sp/>{</highlight></codeline>
<codeline lineno="7410"><highlight class="normal"><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;dup<sp/>{0:.6g}<sp/>lt<sp/>{{<sp/>pop<sp/>{1:.6g}<sp/>}}<sp/>{{<sp/>dup<sp/>{2:.6g}<sp/>gt<sp/>{{<sp/>pop<sp/>{3:.6g}<sp/>}}<sp/>if<sp/>}}<sp/>ifelse\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="7411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>func2-&gt;getRangeMin(i),<sp/>func2-&gt;getRangeMin(i),</highlight></codeline>
<codeline lineno="7412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>func2-&gt;getRangeMax(i),<sp/>func2-&gt;getRangeMax(i));</highlight></codeline>
<codeline lineno="7413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7414"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7415"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>x<sp/>y(0)<sp/>..<sp/>y(n-1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7416"><highlight class="normal"><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;{0:d}<sp/>{1:d}<sp/>roll<sp/>pop<sp/>\n&quot;</highlight><highlight class="normal">,<sp/>n+1,<sp/>n);</highlight></codeline>
<codeline lineno="7417"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(invertPSFunction<sp/>&amp;&amp;<sp/>func2-&gt;getHasRange())<sp/>{</highlight></codeline>
<codeline lineno="7418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="7419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;{0:d}<sp/>-1<sp/>roll<sp/>&quot;</highlight><highlight class="normal">,<sp/>n);</highlight></codeline>
<codeline lineno="7420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;{0:.6g}<sp/>sub<sp/>{1:.6g}<sp/>div<sp/>&quot;</highlight><highlight class="normal">,<sp/>func2-&gt;getRangeMin(i),<sp/>func2-&gt;getRangeMax(i)<sp/>-<sp/>func2-&gt;getRangeMin(i));</highlight></codeline>
<codeline lineno="7421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7422"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7423"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;}\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7424"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7425"><highlight class="normal"></highlight></codeline>
<codeline lineno="7426"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>3:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>stitching</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7427"><highlight class="normal"><sp/><sp/><sp/><sp/>func3<sp/>=<sp/>(<ref refid="class_stitching_function" kindref="compound">StitchingFunction</ref><sp/>*)func;</highlight></codeline>
<codeline lineno="7428"><highlight class="normal"><sp/><sp/><sp/><sp/>thisFunc<sp/>=<sp/>nextFunc++;</highlight></codeline>
<codeline lineno="7429"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>func3-&gt;getNumFuncs();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="7430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cvtFunction(func3-&gt;getFunc(i));</highlight></codeline>
<codeline lineno="7431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;/xpdfFunc{0:d}_{1:d}<sp/>exch<sp/>def\n&quot;</highlight><highlight class="normal">,<sp/>thisFunc,<sp/>i);</highlight></codeline>
<codeline lineno="7432"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7433"><highlight class="normal"><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;{{<sp/>dup<sp/>{0:.6g}<sp/>lt<sp/>{{<sp/>pop<sp/>{1:.6g}<sp/>}}<sp/>{{<sp/>dup<sp/>{2:.6g}<sp/>gt<sp/>{{<sp/>pop<sp/>{3:.6g}<sp/>}}<sp/>if<sp/>}}<sp/>ifelse\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="7434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>func3-&gt;getDomainMin(0),<sp/>func3-&gt;getDomainMin(0),</highlight></codeline>
<codeline lineno="7435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>func3-&gt;getDomainMax(0),<sp/>func3-&gt;getDomainMax(0));</highlight></codeline>
<codeline lineno="7436"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>func3-&gt;getNumFuncs()<sp/>-<sp/>1;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="7437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;dup<sp/>{0:.6g}<sp/>lt<sp/>{{<sp/>{1:.6g}<sp/>sub<sp/>{2:.6g}<sp/>mul<sp/>{3:.6g}<sp/>add<sp/>xpdfFunc{4:d}_{5:d}<sp/>}}<sp/>{{\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="7438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>func3-&gt;getBounds()[i+1],</highlight></codeline>
<codeline lineno="7439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>func3-&gt;getBounds()[i],</highlight></codeline>
<codeline lineno="7440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>func3-&gt;getScale()[i],</highlight></codeline>
<codeline lineno="7441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>func3-&gt;getEncode()[2*i],</highlight></codeline>
<codeline lineno="7442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thisFunc,<sp/>i);</highlight></codeline>
<codeline lineno="7443"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7444"><highlight class="normal"><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;{0:.6g}<sp/>sub<sp/>{1:.6g}<sp/>mul<sp/>{2:.6g}<sp/>add<sp/>xpdfFunc{3:d}_{4:d}\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="7445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>func3-&gt;getBounds()[i],</highlight></codeline>
<codeline lineno="7446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>func3-&gt;getScale()[i],</highlight></codeline>
<codeline lineno="7447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>func3-&gt;getEncode()[2*i],</highlight></codeline>
<codeline lineno="7448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thisFunc,<sp/>i);</highlight></codeline>
<codeline lineno="7449"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>func3-&gt;getNumFuncs()<sp/>-<sp/>1;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="7450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;}<sp/>ifelse\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7451"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7452"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(invertPSFunction<sp/>&amp;&amp;<sp/>func3-&gt;getHasRange())<sp/>{</highlight></codeline>
<codeline lineno="7453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>func3-&gt;getOutputSize();</highlight></codeline>
<codeline lineno="7454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="7455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;{0:d}<sp/>-1<sp/>roll<sp/>&quot;</highlight><highlight class="normal">,<sp/>n);</highlight></codeline>
<codeline lineno="7456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;{0:.6g}<sp/>sub<sp/>{1:.6g}<sp/>div<sp/>&quot;</highlight><highlight class="normal">,<sp/>func3-&gt;getRangeMin(i),<sp/>func3-&gt;getRangeMax(i)<sp/>-<sp/>func3-&gt;getRangeMin(i));</highlight></codeline>
<codeline lineno="7457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7458"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7459"><highlight class="normal"><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;}\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7460"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7461"><highlight class="normal"></highlight></codeline>
<codeline lineno="7462"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>4:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>PostScript</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7463"><highlight class="normal"><sp/><sp/><sp/><sp/>func4<sp/>=<sp/>(<ref refid="class_post_script_function" kindref="compound">PostScriptFunction</ref><sp/>*)func;</highlight></codeline>
<codeline lineno="7464"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(invertPSFunction)<sp/>{</highlight></codeline>
<codeline lineno="7465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*codeString<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref>(func4-&gt;getCodeString());</highlight></codeline>
<codeline lineno="7466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>codeString-&gt;getLength()<sp/>-1;<sp/>i<sp/>&gt;<sp/>0;<sp/>i--)<sp/>{</highlight></codeline>
<codeline lineno="7467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(codeString-&gt;getChar(i)<sp/>==<sp/></highlight><highlight class="charliteral">&apos;}&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="7468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>codeString-&gt;del(i);</highlight></codeline>
<codeline lineno="7469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePS(codeString-&gt;getCString());</highlight></codeline>
<codeline lineno="7473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>codeString;</highlight></codeline>
<codeline lineno="7475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>func4-&gt;getOutputSize();</highlight></codeline>
<codeline lineno="7476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="7477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;{0:d}<sp/>-1<sp/>roll<sp/>&quot;</highlight><highlight class="normal">,<sp/>n);</highlight></codeline>
<codeline lineno="7478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;{0:.6g}<sp/>sub<sp/>{1:.6g}<sp/>div<sp/>&quot;</highlight><highlight class="normal">,<sp/>func4-&gt;getRangeMin(i),<sp/>func4-&gt;getRangeMax(i)<sp/>-<sp/>func4-&gt;getRangeMin(i));</highlight></codeline>
<codeline lineno="7479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;}\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7481"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="7482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePS(func4-&gt;getCodeString()-&gt;getCString());</highlight></codeline>
<codeline lineno="7483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7484"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7485"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7486"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7487"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7488"><highlight class="normal"></highlight></codeline>
<codeline lineno="7489"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PSOutputDev::writePSChar(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c)<sp/>{</highlight></codeline>
<codeline lineno="7490"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t3String)<sp/>{</highlight></codeline>
<codeline lineno="7491"><highlight class="normal"><sp/><sp/><sp/><sp/>t3String-&gt;append(c);</highlight></codeline>
<codeline lineno="7492"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="7493"><highlight class="normal"><sp/><sp/><sp/><sp/>(*outputFunc)(outputStream,<sp/>&amp;c,<sp/>1);</highlight></codeline>
<codeline lineno="7494"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7495"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7496"><highlight class="normal"></highlight></codeline>
<codeline lineno="7497"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PSOutputDev::writePS(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s)<sp/>{</highlight></codeline>
<codeline lineno="7498"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t3String)<sp/>{</highlight></codeline>
<codeline lineno="7499"><highlight class="normal"><sp/><sp/><sp/><sp/>t3String-&gt;append(s);</highlight></codeline>
<codeline lineno="7500"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="7501"><highlight class="normal"><sp/><sp/><sp/><sp/>(*outputFunc)(outputStream,<sp/>s,<sp/>strlen(s));</highlight></codeline>
<codeline lineno="7502"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7503"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7504"><highlight class="normal"></highlight></codeline>
<codeline lineno="7505"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PSOutputDev::writePSBuf(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len)<sp/>{</highlight></codeline>
<codeline lineno="7506"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t3String)<sp/>{</highlight></codeline>
<codeline lineno="7507"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>len;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="7508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>t3String-&gt;append(s[i]);</highlight></codeline>
<codeline lineno="7509"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7510"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="7511"><highlight class="normal"><sp/><sp/><sp/><sp/>(*outputFunc)(outputStream,<sp/>s,<sp/>len);</highlight></codeline>
<codeline lineno="7512"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7513"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7514"><highlight class="normal"></highlight></codeline>
<codeline lineno="7515"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PSOutputDev::writePSFmt(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fmt,<sp/>...)<sp/>{</highlight></codeline>
<codeline lineno="7516"><highlight class="normal"><sp/><sp/>va_list<sp/>args;</highlight></codeline>
<codeline lineno="7517"><highlight class="normal"><sp/><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*buf;</highlight></codeline>
<codeline lineno="7518"><highlight class="normal"></highlight></codeline>
<codeline lineno="7519"><highlight class="normal"><sp/><sp/>va_start(args,<sp/>fmt);</highlight></codeline>
<codeline lineno="7520"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t3String)<sp/>{</highlight></codeline>
<codeline lineno="7521"><highlight class="normal"><sp/><sp/><sp/><sp/>t3String-&gt;appendfv((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)fmt,<sp/>args);</highlight></codeline>
<codeline lineno="7522"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="7523"><highlight class="normal"><sp/><sp/><sp/><sp/>buf<sp/>=<sp/>GooString::formatv((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)fmt,<sp/>args);</highlight></codeline>
<codeline lineno="7524"><highlight class="normal"><sp/><sp/><sp/><sp/>(*outputFunc)(outputStream,<sp/>buf-&gt;getCString(),<sp/>buf-&gt;getLength());</highlight></codeline>
<codeline lineno="7525"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>buf;</highlight></codeline>
<codeline lineno="7526"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7527"><highlight class="normal"><sp/><sp/>va_end(args);</highlight></codeline>
<codeline lineno="7528"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7529"><highlight class="normal"></highlight></codeline>
<codeline lineno="7530"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PSOutputDev::writePSString(<ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*s)<sp/>{</highlight></codeline>
<codeline lineno="7531"><highlight class="normal"><sp/><sp/>Guchar<sp/>*p;</highlight></codeline>
<codeline lineno="7532"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,<sp/>line;</highlight></codeline>
<codeline lineno="7533"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buf[8];</highlight></codeline>
<codeline lineno="7534"><highlight class="normal"></highlight></codeline>
<codeline lineno="7535"><highlight class="normal"><sp/><sp/>writePSChar(</highlight><highlight class="charliteral">&apos;(&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7536"><highlight class="normal"><sp/><sp/>line<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="7537"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(p<sp/>=<sp/>(Guchar<sp/>*)s-&gt;getCString(),<sp/>n<sp/>=<sp/>s-&gt;getLength();<sp/>n;<sp/>++p,<sp/>--n)<sp/>{</highlight></codeline>
<codeline lineno="7538"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(line<sp/>&gt;=<sp/>64)<sp/>{</highlight></codeline>
<codeline lineno="7539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePSChar(</highlight><highlight class="charliteral">&apos;\\&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePSChar(</highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>line<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="7542"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7543"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*p<sp/>==<sp/></highlight><highlight class="charliteral">&apos;(&apos;</highlight><highlight class="normal"><sp/>||<sp/>*p<sp/>==<sp/></highlight><highlight class="charliteral">&apos;)&apos;</highlight><highlight class="normal"><sp/>||<sp/>*p<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\\&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="7544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePSChar(</highlight><highlight class="charliteral">&apos;\\&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePSChar((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)*p);</highlight></codeline>
<codeline lineno="7546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>line<sp/>+=<sp/>2;</highlight></codeline>
<codeline lineno="7547"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*p<sp/>&lt;<sp/>0x20<sp/>||<sp/>*p<sp/>&gt;=<sp/>0x80)<sp/>{</highlight></codeline>
<codeline lineno="7548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(buf,<sp/></highlight><highlight class="stringliteral">&quot;\\%03o&quot;</highlight><highlight class="normal">,<sp/>*p);</highlight></codeline>
<codeline lineno="7549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePS(buf);</highlight></codeline>
<codeline lineno="7550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>line<sp/>+=<sp/>4;</highlight></codeline>
<codeline lineno="7551"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="7552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePSChar((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)*p);</highlight></codeline>
<codeline lineno="7553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++line;</highlight></codeline>
<codeline lineno="7554"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7555"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7556"><highlight class="normal"><sp/><sp/>writePSChar(</highlight><highlight class="charliteral">&apos;)&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7557"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7558"><highlight class="normal"></highlight></codeline>
<codeline lineno="7559"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PSOutputDev::writePSName(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s)<sp/>{</highlight></codeline>
<codeline lineno="7560"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*p;</highlight></codeline>
<codeline lineno="7561"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="7562"><highlight class="normal"></highlight></codeline>
<codeline lineno="7563"><highlight class="normal"><sp/><sp/>p<sp/>=<sp/>s;</highlight></codeline>
<codeline lineno="7564"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((c<sp/>=<sp/>*p++))<sp/>{</highlight></codeline>
<codeline lineno="7565"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>&lt;=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)0x20<sp/>||<sp/>c<sp/>&gt;=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)0x7f<sp/>||</highlight></codeline>
<codeline lineno="7566"><highlight class="normal"><sp/><sp/><sp/><sp/>c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;(&apos;</highlight><highlight class="normal"><sp/>||<sp/>c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;)&apos;</highlight><highlight class="normal"><sp/>||<sp/>c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;&lt;&apos;</highlight><highlight class="normal"><sp/>||<sp/>c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;&gt;&apos;</highlight><highlight class="normal"><sp/>||</highlight></codeline>
<codeline lineno="7567"><highlight class="normal"><sp/><sp/><sp/><sp/>c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;[&apos;</highlight><highlight class="normal"><sp/>||<sp/>c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;]&apos;</highlight><highlight class="normal"><sp/>||<sp/>c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;{&apos;</highlight><highlight class="normal"><sp/>||<sp/>c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;}&apos;</highlight><highlight class="normal"><sp/>||</highlight></codeline>
<codeline lineno="7568"><highlight class="normal"><sp/><sp/><sp/><sp/>c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal"><sp/>||<sp/>c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;%&apos;</highlight><highlight class="normal"><sp/>||<sp/>c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\\&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="7569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;#{0:02x}&quot;</highlight><highlight class="normal">,<sp/>c<sp/>&amp;<sp/>0xff);</highlight></codeline>
<codeline lineno="7570"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="7571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePSChar(c);</highlight></codeline>
<codeline lineno="7572"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7573"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7574"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7575"><highlight class="normal"></highlight></codeline>
<codeline lineno="7576"><highlight class="normal"><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*PSOutputDev::filterPSName(<ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*name)<sp/>{</highlight></codeline>
<codeline lineno="7577"><highlight class="normal"><sp/><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*name2;</highlight></codeline>
<codeline lineno="7578"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buf[8];</highlight></codeline>
<codeline lineno="7579"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="7580"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="7581"><highlight class="normal"></highlight></codeline>
<codeline lineno="7582"><highlight class="normal"><sp/><sp/>name2<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref>();</highlight></codeline>
<codeline lineno="7583"><highlight class="normal"></highlight></codeline>
<codeline lineno="7584"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>ghostscript<sp/>chokes<sp/>on<sp/>names<sp/>that<sp/>begin<sp/>with<sp/>out-of-limits</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7585"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>numbers,<sp/>e.g.,<sp/>1e4foo<sp/>is<sp/>handled<sp/>correctly<sp/>(as<sp/>a<sp/>name),<sp/>but</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7586"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>1e999foo<sp/>generates<sp/>a<sp/>limitcheck<sp/>error</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7587"><highlight class="normal"><sp/><sp/>c<sp/>=<sp/>name-&gt;getChar(0);</highlight></codeline>
<codeline lineno="7588"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>&gt;=<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>c<sp/>&lt;=<sp/></highlight><highlight class="charliteral">&apos;9&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="7589"><highlight class="normal"><sp/><sp/><sp/><sp/>name2-&gt;append(</highlight><highlight class="charliteral">&apos;f&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7590"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7591"><highlight class="normal"></highlight></codeline>
<codeline lineno="7592"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>name-&gt;getLength();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="7593"><highlight class="normal"><sp/><sp/><sp/><sp/>c<sp/>=<sp/>name-&gt;getChar(i);</highlight></codeline>
<codeline lineno="7594"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>&lt;=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)0x20<sp/>||<sp/>c<sp/>&gt;=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)0x7f<sp/>||</highlight></codeline>
<codeline lineno="7595"><highlight class="normal"><sp/><sp/><sp/><sp/>c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;(&apos;</highlight><highlight class="normal"><sp/>||<sp/>c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;)&apos;</highlight><highlight class="normal"><sp/>||<sp/>c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;&lt;&apos;</highlight><highlight class="normal"><sp/>||<sp/>c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;&gt;&apos;</highlight><highlight class="normal"><sp/>||</highlight></codeline>
<codeline lineno="7596"><highlight class="normal"><sp/><sp/><sp/><sp/>c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;[&apos;</highlight><highlight class="normal"><sp/>||<sp/>c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;]&apos;</highlight><highlight class="normal"><sp/>||<sp/>c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;{&apos;</highlight><highlight class="normal"><sp/>||<sp/>c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;}&apos;</highlight><highlight class="normal"><sp/>||</highlight></codeline>
<codeline lineno="7597"><highlight class="normal"><sp/><sp/><sp/><sp/>c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal"><sp/>||<sp/>c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;%&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="7598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(buf,<sp/></highlight><highlight class="stringliteral">&quot;#%02x&quot;</highlight><highlight class="normal">,<sp/>c<sp/>&amp;<sp/>0xff);</highlight></codeline>
<codeline lineno="7599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>name2-&gt;append(buf);</highlight></codeline>
<codeline lineno="7600"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="7601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>name2-&gt;append(c);</highlight></codeline>
<codeline lineno="7602"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7603"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7604"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>name2;</highlight></codeline>
<codeline lineno="7605"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7606"><highlight class="normal"></highlight></codeline>
<codeline lineno="7607"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Convert<sp/>GooString<sp/>to<sp/>GooString,<sp/>with<sp/>appropriate<sp/>escaping</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7608"><highlight class="normal"></highlight><highlight class="comment">//<sp/>of<sp/>things<sp/>that<sp/>can&apos;t<sp/>appear<sp/>in<sp/>a<sp/>label</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7609"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>heavily<sp/>based<sp/>on<sp/>the<sp/>writePSTextLine()<sp/>method</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7610"><highlight class="normal"><ref refid="class_goo_string" kindref="compound">GooString</ref>*<sp/>PSOutputDev::filterPSLabel(<ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*label,<sp/>GBool<sp/>*needParens)<sp/>{</highlight></codeline>
<codeline lineno="7611"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>step;</highlight></codeline>
<codeline lineno="7612"><highlight class="normal"><sp/><sp/>GBool<sp/>isNumeric;</highlight></codeline>
<codeline lineno="7613"><highlight class="normal"></highlight></codeline>
<codeline lineno="7614"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>-<sp/>DSC<sp/>comments<sp/>must<sp/>be<sp/>printable<sp/>ASCII;<sp/>control<sp/>chars<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7615"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>backslashes<sp/>have<sp/>to<sp/>be<sp/>escaped<sp/>(we<sp/>do<sp/>cheap<sp/>UCS2-to-ASCII</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7616"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>conversion<sp/>by<sp/>simply<sp/>ignoring<sp/>the<sp/>high<sp/>byte)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7617"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>-<sp/>parentheses<sp/>are<sp/>escaped.<sp/>this<sp/>isn&apos;t<sp/>strictly<sp/>necessary<sp/>for<sp/>matched</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7618"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>parentheses,<sp/>but<sp/>shouldn&apos;t<sp/>be<sp/>a<sp/>problem</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7619"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>-<sp/>lines<sp/>are<sp/>limited<sp/>to<sp/>255<sp/>chars<sp/>(we<sp/>limit<sp/>to<sp/>200<sp/>here<sp/>to<sp/>allow</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7620"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>for<sp/>the<sp/>keyword,<sp/>which<sp/>was<sp/>emitted<sp/>by<sp/>the<sp/>caller)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7621"><highlight class="normal"></highlight></codeline>
<codeline lineno="7622"><highlight class="normal"><sp/><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*label2<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref>();</highlight></codeline>
<codeline lineno="7623"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>labelLength<sp/>=<sp/>label-&gt;getLength();</highlight></codeline>
<codeline lineno="7624"><highlight class="normal"></highlight></codeline>
<codeline lineno="7625"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(labelLength<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="7626"><highlight class="normal"><sp/><sp/><sp/><sp/>isNumeric<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7627"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="7628"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>gets<sp/>changed<sp/>later<sp/>if<sp/>we<sp/>find<sp/>a<sp/>non-numeric<sp/>character</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7629"><highlight class="normal"><sp/><sp/><sp/><sp/>isNumeric<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7630"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7631"><highlight class="normal"></highlight></codeline>
<codeline lineno="7632"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>(labelLength<sp/>&gt;=<sp/>2)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="7633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>(label-&gt;getChar(0)<sp/>&amp;<sp/>0xff)<sp/>==<sp/>0xfe)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="7634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>(label-&gt;getChar(1)<sp/>&amp;<sp/>0xff)<sp/>==<sp/>0xff)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7635"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>UCS2<sp/>mode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7636"><highlight class="normal"><sp/><sp/><sp/><sp/>i<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="7637"><highlight class="normal"><sp/><sp/><sp/><sp/>step<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="7638"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>(label-&gt;getChar(labelLength-1)<sp/>==<sp/>0)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>prune<sp/>the<sp/>trailing<sp/>null<sp/>(0x000<sp/>for<sp/>UCS2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>labelLength<sp/>-=<sp/>2;</highlight></codeline>
<codeline lineno="7641"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7642"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="7643"><highlight class="normal"><sp/><sp/><sp/><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="7644"><highlight class="normal"><sp/><sp/><sp/><sp/>step<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="7645"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7646"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>labelLength<sp/>&amp;&amp;<sp/>j<sp/>&lt;<sp/>200;<sp/>i<sp/>+=<sp/>step)<sp/>{</highlight></codeline>
<codeline lineno="7647"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>label-&gt;getChar(i);</highlight></codeline>
<codeline lineno="7648"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>(c<sp/>&lt;<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">)<sp/>||<sp/>(c<sp/>&gt;<sp/></highlight><highlight class="charliteral">&apos;9&apos;</highlight><highlight class="normal">)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>isNumeric<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7650"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7651"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\\&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="7652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>label2-&gt;append(</highlight><highlight class="stringliteral">&quot;\\\\&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>j<sp/>+=<sp/>2;</highlight></codeline>
<codeline lineno="7654"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;)&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="7655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>label2-&gt;append(</highlight><highlight class="stringliteral">&quot;\\)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7656"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;(&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="7657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>label2-&gt;append(</highlight><highlight class="stringliteral">&quot;\\(&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7658"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>&lt;<sp/>0x20<sp/>||<sp/>c<sp/>&gt;<sp/>0x7e)<sp/>{</highlight></codeline>
<codeline lineno="7659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*aux<sp/>=<sp/>GooString::format(</highlight><highlight class="stringliteral">&quot;\\{0:03o}&quot;</highlight><highlight class="normal">,<sp/>c);</highlight></codeline>
<codeline lineno="7660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>label2-&gt;append(aux);</highlight></codeline>
<codeline lineno="7661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>j<sp/>+=<sp/>4;</highlight></codeline>
<codeline lineno="7662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>aux;</highlight></codeline>
<codeline lineno="7663"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="7664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>label2-&gt;append(c);</highlight></codeline>
<codeline lineno="7665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++j;</highlight></codeline>
<codeline lineno="7666"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7667"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7668"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(needParens)<sp/>{</highlight></codeline>
<codeline lineno="7669"><highlight class="normal"><sp/><sp/><sp/><sp/>*needParens<sp/>=<sp/>!(isNumeric);</highlight></codeline>
<codeline lineno="7670"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7671"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>label2;</highlight></codeline>
<codeline lineno="7672"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7673"><highlight class="normal"></highlight></codeline>
<codeline lineno="7674"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Write<sp/>a<sp/>DSC-compliant<sp/>&lt;textline&gt;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7675"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PSOutputDev::writePSTextLine(<ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*s)<sp/>{</highlight></codeline>
<codeline lineno="7676"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j,<sp/>step;</highlight></codeline>
<codeline lineno="7677"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="7678"><highlight class="normal"></highlight></codeline>
<codeline lineno="7679"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>-<sp/>DSC<sp/>comments<sp/>must<sp/>be<sp/>printable<sp/>ASCII;<sp/>control<sp/>chars<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7680"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>backslashes<sp/>have<sp/>to<sp/>be<sp/>escaped<sp/>(we<sp/>do<sp/>cheap<sp/>Unicode-to-ASCII</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7681"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>conversion<sp/>by<sp/>simply<sp/>ignoring<sp/>the<sp/>high<sp/>byte)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7682"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>-<sp/>lines<sp/>are<sp/>limited<sp/>to<sp/>255<sp/>chars<sp/>(we<sp/>limit<sp/>to<sp/>200<sp/>here<sp/>to<sp/>allow</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7683"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>for<sp/>the<sp/>keyword,<sp/>which<sp/>was<sp/>emitted<sp/>by<sp/>the<sp/>caller)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7684"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>-<sp/>lines<sp/>that<sp/>start<sp/>with<sp/>a<sp/>left<sp/>paren<sp/>are<sp/>treated<sp/>as<sp/>&lt;text&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7685"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>instead<sp/>of<sp/>&lt;textline&gt;,<sp/>so<sp/>we<sp/>escape<sp/>a<sp/>leading<sp/>paren</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7686"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s-&gt;getLength()<sp/>&gt;=<sp/>2<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="7687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(s-&gt;getChar(0)<sp/>&amp;<sp/>0xff)<sp/>==<sp/>0xfe<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="7688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(s-&gt;getChar(1)<sp/>&amp;<sp/>0xff)<sp/>==<sp/>0xff)<sp/>{</highlight></codeline>
<codeline lineno="7689"><highlight class="normal"><sp/><sp/><sp/><sp/>i<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="7690"><highlight class="normal"><sp/><sp/><sp/><sp/>step<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="7691"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="7692"><highlight class="normal"><sp/><sp/><sp/><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="7693"><highlight class="normal"><sp/><sp/><sp/><sp/>step<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="7694"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7695"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>s-&gt;getLength()<sp/>&amp;&amp;<sp/>j<sp/>&lt;<sp/>200;<sp/>i<sp/>+=<sp/>step)<sp/>{</highlight></codeline>
<codeline lineno="7696"><highlight class="normal"><sp/><sp/><sp/><sp/>c<sp/>=<sp/>s-&gt;getChar(i)<sp/>&amp;<sp/>0xff;</highlight></codeline>
<codeline lineno="7697"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\\&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="7698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;\\\\&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>j<sp/>+=<sp/>2;</highlight></codeline>
<codeline lineno="7700"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>&lt;<sp/>0x20<sp/>||<sp/>c<sp/>&gt;<sp/>0x7e<sp/>||<sp/>(j<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;(&apos;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="7701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePSFmt(</highlight><highlight class="stringliteral">&quot;\\{0:03o}&quot;</highlight><highlight class="normal">,<sp/>c);</highlight></codeline>
<codeline lineno="7702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>j<sp/>+=<sp/>4;</highlight></codeline>
<codeline lineno="7703"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="7704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writePSChar(c);</highlight></codeline>
<codeline lineno="7705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++j;</highlight></codeline>
<codeline lineno="7706"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7707"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7708"><highlight class="normal"><sp/><sp/>writePS(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7709"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="thirdparty/poppler/poppler/PSOutputDev.cc"/>
  </compounddef>
</doxygen>
