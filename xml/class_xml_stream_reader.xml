<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="class_xml_stream_reader" kind="class" language="C++" prot="public">
    <compoundname>XmlStreamReader</compoundname>
      <sectiondef kind="public-type">
      <memberdef kind="enum" id="class_xml_stream_reader_1a99e2023f874f0ca648c996ae79c3b5f7" prot="public" static="no">
        <name>TokenType</name>
        <enumvalue id="class_xml_stream_reader_1a99e2023f874f0ca648c996ae79c3b5f7a62aff7b1801b83539e81adaf5bbf4907" prot="public">
          <name>NoToken</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_xml_stream_reader_1a99e2023f874f0ca648c996ae79c3b5f7a8af34b98488476c0fa9e9137d32f36bc" prot="public">
          <name>Invalid</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_xml_stream_reader_1a99e2023f874f0ca648c996ae79c3b5f7a872767247556082d256456dd97784269" prot="public">
          <name>StartDocument</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_xml_stream_reader_1a99e2023f874f0ca648c996ae79c3b5f7acc1a4f29feb9b0020f87f8175380649c" prot="public">
          <name>EndDocument</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_xml_stream_reader_1a99e2023f874f0ca648c996ae79c3b5f7a7d4ca31c10a7d744597964d4da3e9a49" prot="public">
          <name>StartElement</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_xml_stream_reader_1a99e2023f874f0ca648c996ae79c3b5f7a69d929e1641e65f6b1bfe726461545ad" prot="public">
          <name>EndElement</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_xml_stream_reader_1a99e2023f874f0ca648c996ae79c3b5f7a6311e5e921a84b123af99db394bec3bb" prot="public">
          <name>Characters</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_xml_stream_reader_1a99e2023f874f0ca648c996ae79c3b5f7ad48ba424744ba335359e9ca7dd82673a" prot="public">
          <name>Comment</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_xml_stream_reader_1a99e2023f874f0ca648c996ae79c3b5f7abbf89c2cb3001aaf3e0d34de75695588" prot="public">
          <name>DTD</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_xml_stream_reader_1a99e2023f874f0ca648c996ae79c3b5f7a69843936135995582180cdce7ab0f531" prot="public">
          <name>EntityReference</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_xml_stream_reader_1a99e2023f874f0ca648c996ae79c3b5f7a8efb2ae15c16d9c3175142bb7d0c5adf" prot="public">
          <name>ProcessingInstruction</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This enum specifies the type of token the reader just read.</para><para>NoToken The reader has not yet read anything.</para><para>Invalid An error has occurred, reported in <ref refid="class_xml_stream_reader_1ae9a7e8fe9f15b0f5c4ec5fa080c6249f" kindref="member">error()</ref> and <ref refid="class_xml_stream_reader_1a119d913daa2a7b8174f0b26dcd7e9720" kindref="member">errorString()</ref>.</para><para>StartDocument The reader reports the XML version number in <ref refid="class_xml_stream_reader_1a6667b8f4c648c8f192802c8091f617fb" kindref="member">documentVersion()</ref>, and the encoding as specified in the XML document in <ref refid="class_xml_stream_reader_1a8326fe20290e37d1c1549737cc02d25b" kindref="member">documentEncoding()</ref>. If the document is declared standalone, <ref refid="class_xml_stream_reader_1aa5678c8de5e5efd67e85b60dbda6374f" kindref="member">isStandaloneDocument()</ref> returns <computeroutput>true</computeroutput>; otherwise it returns <computeroutput>false</computeroutput>.</para><para>EndDocument The reader reports the end of the document.</para><para>StartElement The reader reports the start of an element with <ref refid="class_xml_stream_reader_1a4ea3344f8632d1cd70edfaddf9a8027c" kindref="member">namespaceUri()</ref> and <ref refid="class_xml_stream_reader_1a09b44691e1e74daa6bdd4ed465d3c0a2" kindref="member">name()</ref>. Empty elements are also reported as StartElement, followed directly by EndElement. The convenience function <ref refid="class_xml_stream_reader_1a45f936b88df1b72f39c43d1c41fb9940" kindref="member">readElementText()</ref> can be called to concatenate all content until the corresponding EndElement. Attributes are reported in <ref refid="class_xml_stream_reader_1aaa89a6baad93837857847a3ec5d7710a" kindref="member">attributes()</ref>, namespace declarations in <ref refid="class_xml_stream_reader_1a3e6033d64f3744d90e96287f3a04d913" kindref="member">namespaceDeclarations()</ref>.</para><para>EndElement The reader reports the end of an element with <ref refid="class_xml_stream_reader_1a4ea3344f8632d1cd70edfaddf9a8027c" kindref="member">namespaceUri()</ref> and <ref refid="class_xml_stream_reader_1a09b44691e1e74daa6bdd4ed465d3c0a2" kindref="member">name()</ref>.</para><para>Characters The reader reports characters in <ref refid="class_xml_stream_reader_1a1d129d0171b231efac34d7ee4480a50f" kindref="member">text()</ref>. If the characters are all white-space, <ref refid="class_xml_stream_reader_1a15550b223a59978b612b0fc32bd543e1" kindref="member">isWhitespace()</ref> returns <computeroutput>true</computeroutput>. If the characters stem from a CDATA section, <ref refid="class_xml_stream_reader_1ad1c5f23d9c60ab41c032940191d71ae4" kindref="member">isCDATA()</ref> returns <computeroutput>true</computeroutput>.</para><para>Comment The reader reports a comment in <ref refid="class_xml_stream_reader_1a1d129d0171b231efac34d7ee4480a50f" kindref="member">text()</ref>.</para><para>DTD The reader reports a DTD in <ref refid="class_xml_stream_reader_1a1d129d0171b231efac34d7ee4480a50f" kindref="member">text()</ref>, notation declarations in <ref refid="class_xml_stream_reader_1af1980e6e4fa0ec4468bb384000bf33db" kindref="member">notationDeclarations()</ref>, and entity declarations in <ref refid="class_xml_stream_reader_1a1746b1c8df6ec7a4172c5dbee907bfb3" kindref="member">entityDeclarations()</ref>. Details of the DTD declaration are reported in in <ref refid="class_xml_stream_reader_1a17977920c069d3e4a71182aa07cb4eaa" kindref="member">dtdName()</ref>, <ref refid="class_xml_stream_reader_1a5b8d61714dde7a6f75aa16555b85db18" kindref="member">dtdPublicId()</ref>, and <ref refid="class_xml_stream_reader_1a8021ea53fd25af7404bfe81a2e4e7bdd" kindref="member">dtdSystemId()</ref>.</para><para>EntityReference The reader reports an entity reference that could not be resolved. The name of the reference is reported in <ref refid="class_xml_stream_reader_1a09b44691e1e74daa6bdd4ed465d3c0a2" kindref="member">name()</ref>, the replacement text in <ref refid="class_xml_stream_reader_1a1d129d0171b231efac34d7ee4480a50f" kindref="member">text()</ref>.</para><para>ProcessingInstruction The reader reports a processing instruction in <ref refid="class_xml_stream_reader_1a66bd483fca16586142dd890cacb9b967" kindref="member">processingInstructionTarget()</ref> and <ref refid="class_xml_stream_reader_1a2c9146676cc92895abaadc89f6fbc738" kindref="member">processingInstructionData()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/xmlstream/xmlstream.h" line="230" column="1" bodyfile="thirdparty/xmlstream/xmlstream.h" bodystart="230" bodyend="242"/>
      </memberdef>
      <memberdef kind="enum" id="class_xml_stream_reader_1aa67823f6737762b7e1a426ac841e29fa" prot="public" static="no">
        <name>ReadElementTextBehaviour</name>
        <enumvalue id="class_xml_stream_reader_1aa67823f6737762b7e1a426ac841e29faa819f8ddf4de52567af9eec7dfda9063a" prot="public">
          <name>ErrorOnUnexpectedElement</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_xml_stream_reader_1aa67823f6737762b7e1a426ac841e29faab50326fadb0ad35b8104639ecaa73eac" prot="public">
          <name>IncludeChildElements</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_xml_stream_reader_1aa67823f6737762b7e1a426ac841e29faa170359fa04ce5cf489a215112169627c" prot="public">
          <name>SkipChildElements</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This enum specifies the different behaviours of <ref refid="class_xml_stream_reader_1a45f936b88df1b72f39c43d1c41fb9940" kindref="member">readElementText()</ref>.</para><para>ErrorOnUnexpectedElement Raise an UnexpectedElementError and return what was read so far when a child element is encountered.</para><para>IncludeChildElements Recursively include the text from child elements.</para><para>SkipChildElements Skip child elements.</para><para><simplesect kind="since"><para>4.6 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/xmlstream/xmlstream.h" line="293" column="1" bodyfile="thirdparty/xmlstream/xmlstream.h" bodystart="293" bodyend="297"/>
      </memberdef>
      <memberdef kind="enum" id="class_xml_stream_reader_1ae7aa6749ae6e9de9bcb6f084a9884286" prot="public" static="no">
        <name>Error</name>
        <enumvalue id="class_xml_stream_reader_1ae7aa6749ae6e9de9bcb6f084a9884286a4e489c537720c12add3a35a774f24909" prot="public">
          <name>NoError</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_xml_stream_reader_1ae7aa6749ae6e9de9bcb6f084a9884286ab7851badf8181d053f38173d1acbc7a2" prot="public">
          <name>UnexpectedElementError</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_xml_stream_reader_1ae7aa6749ae6e9de9bcb6f084a9884286a36e258b015bd4daacf1753217d648812" prot="public">
          <name>CustomError</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_xml_stream_reader_1ae7aa6749ae6e9de9bcb6f084a9884286afef1f43579c81c782022c2e3b4db495e" prot="public">
          <name>NotWellFormedError</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_xml_stream_reader_1ae7aa6749ae6e9de9bcb6f084a9884286aa0e84586726cbf09de057fa63f4aa47b" prot="public">
          <name>PrematureEndOfDocumentError</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This enum specifies different error cases</para><para>NoError No error has occurred.</para><para>CustomError A custom error has been raised with <ref refid="class_xml_stream_reader_1aae008ac9078fb7edb4a77ba3e76b8dfa" kindref="member">raiseError()</ref></para><para>NotWellFormedError The parser internally raised an error due to the read XML not being well-formed.</para><para>PrematureEndOfDocumentError The input stream ended before a well-formed XML document was parsed. Recovery from this error is possible if more XML arrives in the stream, either by calling <ref refid="class_xml_stream_reader_1add6baa0f8790fc528c1fa6e05755f96b" kindref="member">addData()</ref> or by waiting for it to arrive on the <ref refid="class_xml_stream_reader_1aa2a751d1b36fac13138b2f370683dfe7" kindref="member">device()</ref>.</para><para>UnexpectedElementError The parser encountered an element that was different to those it expected. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/xmlstream/xmlstream.h" line="320" column="1" bodyfile="thirdparty/xmlstream/xmlstream.h" bodystart="320" bodyend="326"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_xml_stream_reader_1a85967dc49f24d99596b1f3590f1e6173" prot="private" static="no" mutable="no">
        <type>QScopedPointer&lt; <ref refid="class_xml_stream_reader_private" kindref="compound">XmlStreamReaderPrivate</ref> &gt;</type>
        <definition>QScopedPointer&lt;XmlStreamReaderPrivate&gt; XmlStreamReader::d_ptr</definition>
        <argsstring></argsstring>
        <name>d_ptr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/xmlstream/xmlstream.h" line="342" column="1" bodyfile="thirdparty/xmlstream/xmlstream.h" bodystart="342" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_xml_stream_reader_1ac25232b146a8737e6735544116fb703d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>XmlStreamReader::XmlStreamReader</definition>
        <argsstring>()</argsstring>
        <name>XmlStreamReader</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructs a stream reader.</para><para><simplesect kind="see"><para><ref refid="class_xml_stream_reader_1a0d166c5c7814d44a0015a82f0500cee5" kindref="member">setDevice()</ref>, <ref refid="class_xml_stream_reader_1add6baa0f8790fc528c1fa6e05755f96b" kindref="member">addData()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/xmlstream/xmlstream.h" line="244" column="1" bodyfile="thirdparty/xmlstream/xmlstream.cpp" bodystart="380" bodyend="383"/>
      </memberdef>
      <memberdef kind="function" id="class_xml_stream_reader_1a21d81e0a48fc957b40b7b735ab4c2b10" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>XmlStreamReader::XmlStreamReader</definition>
        <argsstring>(QIODevice *device)</argsstring>
        <name>XmlStreamReader</name>
        <param>
          <type>QIODevice *</type>
          <declname>device</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a new stream reader that reads from <emphasis>device</emphasis>.</para><para><simplesect kind="see"><para><ref refid="class_xml_stream_reader_1a0d166c5c7814d44a0015a82f0500cee5" kindref="member">setDevice()</ref>, <ref refid="class_xml_stream_reader_1a2a67f5a1fff83d33214ccc9ec9494ca0" kindref="member">clear()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/xmlstream/xmlstream.h" line="245" column="1" bodyfile="thirdparty/xmlstream/xmlstream.cpp" bodystart="389" bodyend="393"/>
      </memberdef>
      <memberdef kind="function" id="class_xml_stream_reader_1a5e3dd56e92748dcb914a1d4444ec58dc" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>XmlStreamReader::XmlStreamReader</definition>
        <argsstring>(const QByteArray &amp;data)</argsstring>
        <name>XmlStreamReader</name>
        <param>
          <type>const QByteArray &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a new stream reader that reads from <emphasis>data</emphasis>.</para><para><simplesect kind="see"><para><ref refid="class_xml_stream_reader_1add6baa0f8790fc528c1fa6e05755f96b" kindref="member">addData()</ref>, <ref refid="class_xml_stream_reader_1a2a67f5a1fff83d33214ccc9ec9494ca0" kindref="member">clear()</ref>, <ref refid="class_xml_stream_reader_1a0d166c5c7814d44a0015a82f0500cee5" kindref="member">setDevice()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/xmlstream/xmlstream.h" line="246" column="1" bodyfile="thirdparty/xmlstream/xmlstream.cpp" bodystart="400" bodyend="405"/>
      </memberdef>
      <memberdef kind="function" id="class_xml_stream_reader_1adf9a5f6b6a076f53e62d5c414139f5dd" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>XmlStreamReader::XmlStreamReader</definition>
        <argsstring>(const QString &amp;data)</argsstring>
        <name>XmlStreamReader</name>
        <param>
          <type>const QString &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a new stream reader that reads from <emphasis>data</emphasis>.</para><para><simplesect kind="see"><para><ref refid="class_xml_stream_reader_1add6baa0f8790fc528c1fa6e05755f96b" kindref="member">addData()</ref>, <ref refid="class_xml_stream_reader_1a2a67f5a1fff83d33214ccc9ec9494ca0" kindref="member">clear()</ref>, <ref refid="class_xml_stream_reader_1a0d166c5c7814d44a0015a82f0500cee5" kindref="member">setDevice()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/xmlstream/xmlstream.h" line="247" column="1" bodyfile="thirdparty/xmlstream/xmlstream.cpp" bodystart="412" bodyend="424"/>
      </memberdef>
      <memberdef kind="function" id="class_xml_stream_reader_1ab8374c8328df1023e4274b780caefea3" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>XmlStreamReader::XmlStreamReader</definition>
        <argsstring>(const char *data)</argsstring>
        <name>XmlStreamReader</name>
        <param>
          <type>const char *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a new stream reader that reads from <emphasis>data</emphasis>.</para><para><simplesect kind="see"><para><ref refid="class_xml_stream_reader_1add6baa0f8790fc528c1fa6e05755f96b" kindref="member">addData()</ref>, <ref refid="class_xml_stream_reader_1a2a67f5a1fff83d33214ccc9ec9494ca0" kindref="member">clear()</ref>, <ref refid="class_xml_stream_reader_1a0d166c5c7814d44a0015a82f0500cee5" kindref="member">setDevice()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/xmlstream/xmlstream.h" line="248" column="1" bodyfile="thirdparty/xmlstream/xmlstream.cpp" bodystart="431" bodyend="436"/>
      </memberdef>
      <memberdef kind="function" id="class_xml_stream_reader_1ae1ee1ea88f07303fa7a25d9c800d646a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>XmlStreamReader::~XmlStreamReader</definition>
        <argsstring>()</argsstring>
        <name>~XmlStreamReader</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Destructs the reader. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/xmlstream/xmlstream.h" line="249" column="1" bodyfile="thirdparty/xmlstream/xmlstream.cpp" bodystart="441" bodyend="446"/>
      </memberdef>
      <memberdef kind="function" id="class_xml_stream_reader_1a0d166c5c7814d44a0015a82f0500cee5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XmlStreamReader::setDevice</definition>
        <argsstring>(QIODevice *device)</argsstring>
        <name>setDevice</name>
        <param>
          <type>QIODevice *</type>
          <declname>device</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the current device to <emphasis>device</emphasis>. Setting the device resets the stream to its initial state.</para><para><simplesect kind="see"><para><ref refid="class_xml_stream_reader_1aa2a751d1b36fac13138b2f370683dfe7" kindref="member">device()</ref>, <ref refid="class_xml_stream_reader_1a2a67f5a1fff83d33214ccc9ec9494ca0" kindref="member">clear()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/xmlstream/xmlstream.h" line="251" column="1" bodyfile="thirdparty/xmlstream/xmlstream.cpp" bodystart="460" bodyend="470"/>
      </memberdef>
      <memberdef kind="function" id="class_xml_stream_reader_1aa2a751d1b36fac13138b2f370683dfe7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QIODevice *</type>
        <definition>QIODevice * XmlStreamReader::device</definition>
        <argsstring>() const</argsstring>
        <name>device</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the current device associated with the <ref refid="class_xml_stream_reader" kindref="compound">XmlStreamReader</ref>, or 0 if no device has been assigned.</para><para><simplesect kind="see"><para><ref refid="class_xml_stream_reader_1a0d166c5c7814d44a0015a82f0500cee5" kindref="member">setDevice()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/xmlstream/xmlstream.h" line="252" column="1" bodyfile="thirdparty/xmlstream/xmlstream.cpp" bodystart="478" bodyend="482"/>
      </memberdef>
      <memberdef kind="function" id="class_xml_stream_reader_1add6baa0f8790fc528c1fa6e05755f96b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XmlStreamReader::addData</definition>
        <argsstring>(const QByteArray &amp;data)</argsstring>
        <name>addData</name>
        <param>
          <type>const QByteArray &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Adds more <emphasis>data</emphasis> for the reader to read. This function does nothing if the reader has a <ref refid="class_xml_stream_reader_1aa2a751d1b36fac13138b2f370683dfe7" kindref="member">device()</ref>.</para><para><simplesect kind="see"><para><ref refid="class_xml_stream_reader_1adb18e6f9842e9b470cde16385732ad84" kindref="member">readNext()</ref>, <ref refid="class_xml_stream_reader_1a2a67f5a1fff83d33214ccc9ec9494ca0" kindref="member">clear()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/xmlstream/xmlstream.h" line="253" column="1" bodyfile="thirdparty/xmlstream/xmlstream.cpp" bodystart="491" bodyend="499"/>
      </memberdef>
      <memberdef kind="function" id="class_xml_stream_reader_1ac998bbe2fc600172e2d780a58708f358" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XmlStreamReader::addData</definition>
        <argsstring>(const QString &amp;data)</argsstring>
        <name>addData</name>
        <param>
          <type>const QString &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Adds more <emphasis>data</emphasis> for the reader to read. This function does nothing if the reader has a <ref refid="class_xml_stream_reader_1aa2a751d1b36fac13138b2f370683dfe7" kindref="member">device()</ref>.</para><para><simplesect kind="see"><para><ref refid="class_xml_stream_reader_1adb18e6f9842e9b470cde16385732ad84" kindref="member">readNext()</ref>, <ref refid="class_xml_stream_reader_1a2a67f5a1fff83d33214ccc9ec9494ca0" kindref="member">clear()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/xmlstream/xmlstream.h" line="254" column="1" bodyfile="thirdparty/xmlstream/xmlstream.cpp" bodystart="507" bodyend="516"/>
      </memberdef>
      <memberdef kind="function" id="class_xml_stream_reader_1a4dc8d02a038a0b16e6a47f5d2a36d8a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XmlStreamReader::addData</definition>
        <argsstring>(const char *data)</argsstring>
        <name>addData</name>
        <param>
          <type>const char *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Adds more <emphasis>data</emphasis> for the reader to read. This function does nothing if the reader has a <ref refid="class_xml_stream_reader_1aa2a751d1b36fac13138b2f370683dfe7" kindref="member">device()</ref>.</para><para><simplesect kind="see"><para><ref refid="class_xml_stream_reader_1adb18e6f9842e9b470cde16385732ad84" kindref="member">readNext()</ref>, <ref refid="class_xml_stream_reader_1a2a67f5a1fff83d33214ccc9ec9494ca0" kindref="member">clear()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/xmlstream/xmlstream.h" line="255" column="1" bodyfile="thirdparty/xmlstream/xmlstream.cpp" bodystart="524" bodyend="527"/>
      </memberdef>
      <memberdef kind="function" id="class_xml_stream_reader_1a2a67f5a1fff83d33214ccc9ec9494ca0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XmlStreamReader::clear</definition>
        <argsstring>()</argsstring>
        <name>clear</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Removes any <ref refid="class_xml_stream_reader_1aa2a751d1b36fac13138b2f370683dfe7" kindref="member">device()</ref> or data from the reader and resets its internal state to the initial state.</para><para><simplesect kind="see"><para><ref refid="class_xml_stream_reader_1add6baa0f8790fc528c1fa6e05755f96b" kindref="member">addData()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/xmlstream/xmlstream.h" line="256" column="1" bodyfile="thirdparty/xmlstream/xmlstream.cpp" bodystart="535" bodyend="544"/>
      </memberdef>
      <memberdef kind="function" id="class_xml_stream_reader_1a4acf0ba0ea25300b66c9d85ba3e8dfb3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool XmlStreamReader::atEnd</definition>
        <argsstring>() const</argsstring>
        <name>atEnd</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns <computeroutput>true</computeroutput> if the reader has read until the end of the XML document, or if an <ref refid="class_xml_stream_reader_1ae9a7e8fe9f15b0f5c4ec5fa080c6249f" kindref="member">error()</ref> has occurred and reading has been aborted. Otherwise, it returns <computeroutput>false</computeroutput>.</para><para>When <ref refid="class_xml_stream_reader_1a4acf0ba0ea25300b66c9d85ba3e8dfb3" kindref="member">atEnd()</ref> and <ref refid="class_xml_stream_reader_1a26bc2d6831322e5a1d86182295f912d0" kindref="member">hasError()</ref> return true and <ref refid="class_xml_stream_reader_1ae9a7e8fe9f15b0f5c4ec5fa080c6249f" kindref="member">error()</ref> returns PrematureEndOfDocumentError, it means the XML has been well-formed so far, but a complete XML document has not been parsed. The next chunk of XML can be added with <ref refid="class_xml_stream_reader_1add6baa0f8790fc528c1fa6e05755f96b" kindref="member">addData()</ref>, if the XML is being read from a QByteArray, or by waiting for more data to arrive if the XML is being read from a QIODevice. Either way, <ref refid="class_xml_stream_reader_1a4acf0ba0ea25300b66c9d85ba3e8dfb3" kindref="member">atEnd()</ref> will return false once more data is available.</para><para><simplesect kind="see"><para><ref refid="class_xml_stream_reader_1a26bc2d6831322e5a1d86182295f912d0" kindref="member">hasError()</ref>, <ref refid="class_xml_stream_reader_1ae9a7e8fe9f15b0f5c4ec5fa080c6249f" kindref="member">error()</ref>, <ref refid="class_xml_stream_reader_1aa2a751d1b36fac13138b2f370683dfe7" kindref="member">device()</ref>, QIODevice::atEnd() </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/xmlstream/xmlstream.h" line="259" column="1" bodyfile="thirdparty/xmlstream/xmlstream.cpp" bodystart="561" bodyend="573"/>
      </memberdef>
      <memberdef kind="function" id="class_xml_stream_reader_1adb18e6f9842e9b470cde16385732ad84" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_xml_stream_reader_1a99e2023f874f0ca648c996ae79c3b5f7" kindref="member">TokenType</ref></type>
        <definition>XmlStreamReader::TokenType XmlStreamReader::readNext</definition>
        <argsstring>()</argsstring>
        <name>readNext</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Reads the next token and returns its type.</para><para>With one exception, once an <ref refid="class_xml_stream_reader_1ae9a7e8fe9f15b0f5c4ec5fa080c6249f" kindref="member">error()</ref> is reported by <ref refid="class_xml_stream_reader_1adb18e6f9842e9b470cde16385732ad84" kindref="member">readNext()</ref>, further reading of the XML stream is not possible. Then <ref refid="class_xml_stream_reader_1a4acf0ba0ea25300b66c9d85ba3e8dfb3" kindref="member">atEnd()</ref> returns <computeroutput>true</computeroutput>, <ref refid="class_xml_stream_reader_1a26bc2d6831322e5a1d86182295f912d0" kindref="member">hasError()</ref> returns <computeroutput>true</computeroutput>, and this function returns XmlStreamReader::Invalid.</para><para>The exception is when <ref refid="class_xml_stream_reader_1ae9a7e8fe9f15b0f5c4ec5fa080c6249f" kindref="member">error()</ref> returns PrematureEndOfDocumentError. This error is reported when the end of an otherwise well-formed chunk of XML is reached, but the chunk doesn&apos;t represent a complete XML document. In that case, parsing <emphasis>can</emphasis> be resumed by calling <ref refid="class_xml_stream_reader_1add6baa0f8790fc528c1fa6e05755f96b" kindref="member">addData()</ref> to add the next chunk of XML, when the stream is being read from a QByteArray, or by waiting for more data to arrive when the stream is being read from a <ref refid="class_xml_stream_reader_1aa2a751d1b36fac13138b2f370683dfe7" kindref="member">device()</ref>.</para><para><simplesect kind="see"><para><ref refid="class_xml_stream_reader_1a2c26bfb63c27f2992e24f038d65c8c0a" kindref="member">tokenType()</ref>, <ref refid="class_xml_stream_reader_1a7e60a09f7692db1fccc420573b56c68b" kindref="member">tokenString()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/xmlstream/xmlstream.h" line="260" column="1" bodyfile="thirdparty/xmlstream/xmlstream.cpp" bodystart="594" bodyend="614"/>
      </memberdef>
      <memberdef kind="function" id="class_xml_stream_reader_1acc156ff248a564ada18939f9382e0b05" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool XmlStreamReader::readNextStartElement</definition>
        <argsstring>()</argsstring>
        <name>readNextStartElement</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Reads until the next start element within the current element. Returns <computeroutput>true</computeroutput> when a start element was reached. When the end element was reached, or when an error occurred, false is returned.</para><para>The current element is the element matching the most recently parsed start element of which a matching end element has not yet been reached. When the parser has reached the end element, the current element becomes the parent element.</para><para>This is a convenience function for when you&apos;re only concerned with parsing XML elements. The {<ref refid="class_xml_stream" kindref="compound">XmlStream</ref> Bookmarks Example} makes extensive use of this function.</para><para><simplesect kind="since"><para>4.6 </para></simplesect>
<simplesect kind="see"><para><ref refid="class_xml_stream_reader_1adb18e6f9842e9b470cde16385732ad84" kindref="member">readNext()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/xmlstream/xmlstream.h" line="262" column="1" bodyfile="thirdparty/xmlstream/xmlstream.cpp" bodystart="650" bodyend="659"/>
      </memberdef>
      <memberdef kind="function" id="class_xml_stream_reader_1a3a0bd3dc7aca930af2a53591309f9e8e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XmlStreamReader::skipCurrentElement</definition>
        <argsstring>()</argsstring>
        <name>skipCurrentElement</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Reads until the end of the current element, skipping any child nodes. This function is useful for skipping unknown elements.</para><para>The current element is the element matching the most recently parsed start element of which a matching end element has not yet been reached. When the parser has reached the end element, the current element becomes the parent element.</para><para><simplesect kind="since"><para>4.6 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/xmlstream/xmlstream.h" line="263" column="1" bodyfile="thirdparty/xmlstream/xmlstream.cpp" bodystart="672" bodyend="681"/>
      </memberdef>
      <memberdef kind="function" id="class_xml_stream_reader_1a2c26bfb63c27f2992e24f038d65c8c0a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_xml_stream_reader_1a99e2023f874f0ca648c996ae79c3b5f7" kindref="member">TokenType</ref></type>
        <definition>XmlStreamReader::TokenType XmlStreamReader::tokenType</definition>
        <argsstring>() const</argsstring>
        <name>tokenType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the type of the current token.</para><para>The current token can also be queried with the convenience functions <ref refid="class_xml_stream_reader_1aa5a6f844839b4c7d893e3023f97feb4d" kindref="member">isStartDocument()</ref>, <ref refid="class_xml_stream_reader_1a855b760b7aeec5b7fb177a88d9e7caee" kindref="member">isEndDocument()</ref>, <ref refid="class_xml_stream_reader_1a78cb57350cabab5e7ca7c1a8963a774d" kindref="member">isStartElement()</ref>, <ref refid="class_xml_stream_reader_1a4262447470b01b9544d1e83bf9521b35" kindref="member">isEndElement()</ref>, <ref refid="class_xml_stream_reader_1a6d14d53c064bab08ac876ffaf2448742" kindref="member">isCharacters()</ref>, <ref refid="class_xml_stream_reader_1ac3c807c55b3a957da46fe7c695cd7907" kindref="member">isComment()</ref>, <ref refid="class_xml_stream_reader_1afd7dc97a37491da500428da151ca4913" kindref="member">isDTD()</ref>, <ref refid="class_xml_stream_reader_1ac7d9fbea5bf99934c5d862c8ced0d44f" kindref="member">isEntityReference()</ref>, and <ref refid="class_xml_stream_reader_1a66b16a5ab385fbfa167295f41022c37d" kindref="member">isProcessingInstruction()</ref>.</para><para><simplesect kind="see"><para><ref refid="class_xml_stream_reader_1a7e60a09f7692db1fccc420573b56c68b" kindref="member">tokenString()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/xmlstream/xmlstream.h" line="265" column="1" bodyfile="thirdparty/xmlstream/xmlstream.cpp" bodystart="627" bodyend="631"/>
      </memberdef>
      <memberdef kind="function" id="class_xml_stream_reader_1a7e60a09f7692db1fccc420573b56c68b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QString</type>
        <definition>QString XmlStreamReader::tokenString</definition>
        <argsstring>() const</argsstring>
        <name>tokenString</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the reader&apos;s current token as string.</para><para><simplesect kind="see"><para><ref refid="class_xml_stream_reader_1a2c26bfb63c27f2992e24f038d65c8c0a" kindref="member">tokenType()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/xmlstream/xmlstream.h" line="266" column="1" bodyfile="thirdparty/xmlstream/xmlstream.cpp" bodystart="761" bodyend="766"/>
      </memberdef>
      <memberdef kind="function" id="class_xml_stream_reader_1a0db32e3e8cfaa678a615973cc00967f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XmlStreamReader::setNamespaceProcessing</definition>
        <argsstring>(bool)</argsstring>
        <name>setNamespaceProcessing</name>
        <param>
          <type>bool</type>
          <defname>enable</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/xmlstream/xmlstream.h" line="268" column="1" bodyfile="thirdparty/xmlstream/xmlstream.cpp" bodystart="745" bodyend="749"/>
      </memberdef>
      <memberdef kind="function" id="class_xml_stream_reader_1ab834393cf21f28f8ae088b19033cacfa" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool XmlStreamReader::namespaceProcessing</definition>
        <argsstring>() const</argsstring>
        <name>namespaceProcessing</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>the namespace-processing flag of the stream reader</para><para>This property controls whether or not the stream reader processes namespaces. If enabled, the reader processes namespaces, otherwise it does not.</para><para>By default, namespace-processing is enabled. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/xmlstream/xmlstream.h" line="269" column="1" bodyfile="thirdparty/xmlstream/xmlstream.cpp" bodystart="751" bodyend="755"/>
      </memberdef>
      <memberdef kind="function" id="class_xml_stream_reader_1aa5a6f844839b4c7d893e3023f97feb4d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool XmlStreamReader::isStartDocument</definition>
        <argsstring>() const</argsstring>
        <name>isStartDocument</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns <computeroutput>true</computeroutput> if <ref refid="class_xml_stream_reader_1a2c26bfb63c27f2992e24f038d65c8c0a" kindref="member">tokenType()</ref> equals  StartDocument; otherwise returns <computeroutput>false</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/xmlstream/xmlstream.h" line="271" column="1" bodyfile="thirdparty/xmlstream/xmlstream.h" bodystart="271" bodyend="271"/>
      </memberdef>
      <memberdef kind="function" id="class_xml_stream_reader_1a855b760b7aeec5b7fb177a88d9e7caee" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool XmlStreamReader::isEndDocument</definition>
        <argsstring>() const</argsstring>
        <name>isEndDocument</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns <computeroutput>true</computeroutput> if <ref refid="class_xml_stream_reader_1a2c26bfb63c27f2992e24f038d65c8c0a" kindref="member">tokenType()</ref> equals  EndDocument; otherwise returns <computeroutput>false</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/xmlstream/xmlstream.h" line="272" column="1" bodyfile="thirdparty/xmlstream/xmlstream.h" bodystart="272" bodyend="272"/>
      </memberdef>
      <memberdef kind="function" id="class_xml_stream_reader_1a78cb57350cabab5e7ca7c1a8963a774d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool XmlStreamReader::isStartElement</definition>
        <argsstring>() const</argsstring>
        <name>isStartElement</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns <computeroutput>true</computeroutput> if <ref refid="class_xml_stream_reader_1a2c26bfb63c27f2992e24f038d65c8c0a" kindref="member">tokenType()</ref> equals  StartElement; otherwise returns <computeroutput>false</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/xmlstream/xmlstream.h" line="273" column="1" bodyfile="thirdparty/xmlstream/xmlstream.h" bodystart="273" bodyend="273"/>
      </memberdef>
      <memberdef kind="function" id="class_xml_stream_reader_1a4262447470b01b9544d1e83bf9521b35" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool XmlStreamReader::isEndElement</definition>
        <argsstring>() const</argsstring>
        <name>isEndElement</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns <computeroutput>true</computeroutput> if <ref refid="class_xml_stream_reader_1a2c26bfb63c27f2992e24f038d65c8c0a" kindref="member">tokenType()</ref> equals  EndElement; otherwise returns <computeroutput>false</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/xmlstream/xmlstream.h" line="274" column="1" bodyfile="thirdparty/xmlstream/xmlstream.h" bodystart="274" bodyend="274"/>
      </memberdef>
      <memberdef kind="function" id="class_xml_stream_reader_1a6d14d53c064bab08ac876ffaf2448742" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool XmlStreamReader::isCharacters</definition>
        <argsstring>() const</argsstring>
        <name>isCharacters</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns <computeroutput>true</computeroutput> if <ref refid="class_xml_stream_reader_1a2c26bfb63c27f2992e24f038d65c8c0a" kindref="member">tokenType()</ref> equals  Characters; otherwise returns <computeroutput>false</computeroutput>.</para><para><simplesect kind="see"><para><ref refid="class_xml_stream_reader_1a15550b223a59978b612b0fc32bd543e1" kindref="member">isWhitespace()</ref>, <ref refid="class_xml_stream_reader_1ad1c5f23d9c60ab41c032940191d71ae4" kindref="member">isCDATA()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/xmlstream/xmlstream.h" line="275" column="1" bodyfile="thirdparty/xmlstream/xmlstream.h" bodystart="275" bodyend="275"/>
      </memberdef>
      <memberdef kind="function" id="class_xml_stream_reader_1a15550b223a59978b612b0fc32bd543e1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool XmlStreamReader::isWhitespace</definition>
        <argsstring>() const</argsstring>
        <name>isWhitespace</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns <computeroutput>true</computeroutput> if the reader reports characters that only consist of white-space; otherwise returns <computeroutput>false</computeroutput>.</para><para><simplesect kind="see"><para><ref refid="class_xml_stream_reader_1a6d14d53c064bab08ac876ffaf2448742" kindref="member">isCharacters()</ref>, <ref refid="class_xml_stream_reader_1a1d129d0171b231efac34d7ee4480a50f" kindref="member">text()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/xmlstream/xmlstream.h" line="276" column="1" bodyfile="thirdparty/xmlstream/xmlstream.cpp" bodystart="2806" bodyend="2810"/>
      </memberdef>
      <memberdef kind="function" id="class_xml_stream_reader_1ad1c5f23d9c60ab41c032940191d71ae4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool XmlStreamReader::isCDATA</definition>
        <argsstring>() const</argsstring>
        <name>isCDATA</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns <computeroutput>true</computeroutput> if the reader reports characters that stem from a CDATA section; otherwise returns <computeroutput>false</computeroutput>.</para><para><simplesect kind="see"><para><ref refid="class_xml_stream_reader_1a6d14d53c064bab08ac876ffaf2448742" kindref="member">isCharacters()</ref>, <ref refid="class_xml_stream_reader_1a1d129d0171b231efac34d7ee4480a50f" kindref="member">text()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/xmlstream/xmlstream.h" line="277" column="1" bodyfile="thirdparty/xmlstream/xmlstream.cpp" bodystart="2817" bodyend="2821"/>
      </memberdef>
      <memberdef kind="function" id="class_xml_stream_reader_1ac3c807c55b3a957da46fe7c695cd7907" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool XmlStreamReader::isComment</definition>
        <argsstring>() const</argsstring>
        <name>isComment</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns <computeroutput>true</computeroutput> if <ref refid="class_xml_stream_reader_1a2c26bfb63c27f2992e24f038d65c8c0a" kindref="member">tokenType()</ref> equals  Comment; otherwise returns <computeroutput>false</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/xmlstream/xmlstream.h" line="278" column="1" bodyfile="thirdparty/xmlstream/xmlstream.h" bodystart="278" bodyend="278"/>
      </memberdef>
      <memberdef kind="function" id="class_xml_stream_reader_1afd7dc97a37491da500428da151ca4913" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool XmlStreamReader::isDTD</definition>
        <argsstring>() const</argsstring>
        <name>isDTD</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns <computeroutput>true</computeroutput> if <ref refid="class_xml_stream_reader_1a2c26bfb63c27f2992e24f038d65c8c0a" kindref="member">tokenType()</ref> equals  DTD; otherwise returns <computeroutput>false</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/xmlstream/xmlstream.h" line="279" column="1" bodyfile="thirdparty/xmlstream/xmlstream.h" bodystart="279" bodyend="279"/>
      </memberdef>
      <memberdef kind="function" id="class_xml_stream_reader_1ac7d9fbea5bf99934c5d862c8ced0d44f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool XmlStreamReader::isEntityReference</definition>
        <argsstring>() const</argsstring>
        <name>isEntityReference</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns <computeroutput>true</computeroutput> if <ref refid="class_xml_stream_reader_1a2c26bfb63c27f2992e24f038d65c8c0a" kindref="member">tokenType()</ref> equals  EntityReference; otherwise returns <computeroutput>false</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/xmlstream/xmlstream.h" line="280" column="1" bodyfile="thirdparty/xmlstream/xmlstream.h" bodystart="280" bodyend="280"/>
      </memberdef>
      <memberdef kind="function" id="class_xml_stream_reader_1a66b16a5ab385fbfa167295f41022c37d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool XmlStreamReader::isProcessingInstruction</definition>
        <argsstring>() const</argsstring>
        <name>isProcessingInstruction</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns <computeroutput>true</computeroutput> if <ref refid="class_xml_stream_reader_1a2c26bfb63c27f2992e24f038d65c8c0a" kindref="member">tokenType()</ref> equals  ProcessingInstruction; otherwise returns <computeroutput>false</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/xmlstream/xmlstream.h" line="281" column="1" bodyfile="thirdparty/xmlstream/xmlstream.h" bodystart="281" bodyend="281"/>
      </memberdef>
      <memberdef kind="function" id="class_xml_stream_reader_1aa5678c8de5e5efd67e85b60dbda6374f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool XmlStreamReader::isStandaloneDocument</definition>
        <argsstring>() const</argsstring>
        <name>isStandaloneDocument</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns <computeroutput>true</computeroutput> if this document has been declared standalone in the XML declaration; otherwise returns <computeroutput>false</computeroutput>.</para><para>If no XML declaration has been parsed, this function returns <computeroutput>false</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/xmlstream/xmlstream.h" line="283" column="1" bodyfile="thirdparty/xmlstream/xmlstream.cpp" bodystart="2831" bodyend="2835"/>
      </memberdef>
      <memberdef kind="function" id="class_xml_stream_reader_1a6667b8f4c648c8f192802c8091f617fb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QStringRef</type>
        <definition>QStringRef XmlStreamReader::documentVersion</definition>
        <argsstring>() const</argsstring>
        <name>documentVersion</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>4.4</para></simplesect>
If the <ref refid="class_xml_stream_reader_1a2c26bfb63c27f2992e24f038d65c8c0a" kindref="member">tokenType()</ref> is  StartDocument, this function returns the version string as specified in the XML declaration. Otherwise an empty string is returned. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/xmlstream/xmlstream.h" line="284" column="1" bodyfile="thirdparty/xmlstream/xmlstream.cpp" bodystart="2845" bodyend="2851"/>
      </memberdef>
      <memberdef kind="function" id="class_xml_stream_reader_1a8326fe20290e37d1c1549737cc02d25b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QStringRef</type>
        <definition>QStringRef XmlStreamReader::documentEncoding</definition>
        <argsstring>() const</argsstring>
        <name>documentEncoding</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>4.4</para></simplesect>
If the <ref refid="class_xml_stream_reader_1a2c26bfb63c27f2992e24f038d65c8c0a" kindref="member">tokenType()</ref> is  StartDocument, this function returns the encoding string as specified in the XML declaration. Otherwise an empty string is returned. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/xmlstream/xmlstream.h" line="285" column="1" bodyfile="thirdparty/xmlstream/xmlstream.cpp" bodystart="2860" bodyend="2866"/>
      </memberdef>
      <memberdef kind="function" id="class_xml_stream_reader_1a74a3827867942f9904924f2004c4177e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>qint64</type>
        <definition>qint64 XmlStreamReader::lineNumber</definition>
        <argsstring>() const</argsstring>
        <name>lineNumber</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the current line number, starting with 1.</para><para><simplesect kind="see"><para><ref refid="class_xml_stream_reader_1a88724d9577a835b0e8d84ed945c306df" kindref="member">columnNumber()</ref>, <ref refid="class_xml_stream_reader_1a08a187eb8969ddabf238e1f731bb754a" kindref="member">characterOffset()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/xmlstream/xmlstream.h" line="287" column="1" bodyfile="thirdparty/xmlstream/xmlstream.cpp" bodystart="1917" bodyend="1921"/>
      </memberdef>
      <memberdef kind="function" id="class_xml_stream_reader_1a88724d9577a835b0e8d84ed945c306df" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>qint64</type>
        <definition>qint64 XmlStreamReader::columnNumber</definition>
        <argsstring>() const</argsstring>
        <name>columnNumber</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the current column number, starting with 0.</para><para><simplesect kind="see"><para><ref refid="class_xml_stream_reader_1a74a3827867942f9904924f2004c4177e" kindref="member">lineNumber()</ref>, <ref refid="class_xml_stream_reader_1a08a187eb8969ddabf238e1f731bb754a" kindref="member">characterOffset()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/xmlstream/xmlstream.h" line="288" column="1" bodyfile="thirdparty/xmlstream/xmlstream.cpp" bodystart="1927" bodyend="1931"/>
      </memberdef>
      <memberdef kind="function" id="class_xml_stream_reader_1a08a187eb8969ddabf238e1f731bb754a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>qint64</type>
        <definition>qint64 XmlStreamReader::characterOffset</definition>
        <argsstring>() const</argsstring>
        <name>characterOffset</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the current character offset, starting with 0.</para><para><simplesect kind="see"><para><ref refid="class_xml_stream_reader_1a74a3827867942f9904924f2004c4177e" kindref="member">lineNumber()</ref>, <ref refid="class_xml_stream_reader_1a88724d9577a835b0e8d84ed945c306df" kindref="member">columnNumber()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/xmlstream/xmlstream.h" line="289" column="1" bodyfile="thirdparty/xmlstream/xmlstream.cpp" bodystart="1937" bodyend="1941"/>
      </memberdef>
      <memberdef kind="function" id="class_xml_stream_reader_1aaa89a6baad93837857847a3ec5d7710a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_xml_stream_attributes" kindref="compound">XmlStreamAttributes</ref></type>
        <definition>XmlStreamAttributes XmlStreamReader::attributes</definition>
        <argsstring>() const</argsstring>
        <name>attributes</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the attributes of a StartElement. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/xmlstream/xmlstream.h" line="291" column="1" bodyfile="thirdparty/xmlstream/xmlstream.cpp" bodystart="2245" bodyend="2249"/>
      </memberdef>
      <memberdef kind="function" id="class_xml_stream_reader_1a45f936b88df1b72f39c43d1c41fb9940" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QString</type>
        <definition>QString XmlStreamReader::readElementText</definition>
        <argsstring>(ReadElementTextBehaviour behaviour=ErrorOnUnexpectedElement)</argsstring>
        <name>readElementText</name>
        <param>
          <type><ref refid="class_xml_stream_reader_1aa67823f6737762b7e1a426ac841e29fa" kindref="member">ReadElementTextBehaviour</ref></type>
          <declname>behaviour</declname>
          <defval>ErrorOnUnexpectedElement</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convenience function to be called in case a StartElement was read. Reads until the corresponding EndElement and returns all text in-between. In case of no error, the current token (see <ref refid="class_xml_stream_reader_1a2c26bfb63c27f2992e24f038d65c8c0a" kindref="member">tokenType()</ref>) after having called this function is EndElement.</para><para>The function concatenates <ref refid="class_xml_stream_reader_1a1d129d0171b231efac34d7ee4480a50f" kindref="member">text()</ref> when it reads either  Characters or EntityReference tokens, but skips ProcessingInstruction and  Comment. If the current token is not StartElement, an empty string is returned.</para><para>The <emphasis>behaviour</emphasis> defines what happens in case anything else is read before reaching EndElement. The function can include the text from child elements (useful for example for HTML), ignore child elements, or raise an UnexpectedElementError and return what was read so far (default).</para><para><simplesect kind="since"><para>4.6 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/xmlstream/xmlstream.h" line="298" column="1" bodyfile="thirdparty/xmlstream/xmlstream.cpp" bodystart="2095" bodyend="2130"/>
      </memberdef>
      <memberdef kind="function" id="class_xml_stream_reader_1a09b44691e1e74daa6bdd4ed465d3c0a2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QStringRef</type>
        <definition>QStringRef XmlStreamReader::name</definition>
        <argsstring>() const</argsstring>
        <name>name</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the local name of a StartElement, EndElement, or an EntityReference.</para><para><simplesect kind="see"><para><ref refid="class_xml_stream_reader_1a4ea3344f8632d1cd70edfaddf9a8027c" kindref="member">namespaceUri()</ref>, <ref refid="class_xml_stream_reader_1a1afff37e8245261beb5c31db56912b8c" kindref="member">qualifiedName()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/xmlstream/xmlstream.h" line="300" column="1" bodyfile="thirdparty/xmlstream/xmlstream.cpp" bodystart="2192" bodyend="2196"/>
      </memberdef>
      <memberdef kind="function" id="class_xml_stream_reader_1a4ea3344f8632d1cd70edfaddf9a8027c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QStringRef</type>
        <definition>QStringRef XmlStreamReader::namespaceUri</definition>
        <argsstring>() const</argsstring>
        <name>namespaceUri</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the namespaceUri of a StartElement or EndElement.</para><para><simplesect kind="see"><para><ref refid="class_xml_stream_reader_1a09b44691e1e74daa6bdd4ed465d3c0a2" kindref="member">name()</ref>, <ref refid="class_xml_stream_reader_1a1afff37e8245261beb5c31db56912b8c" kindref="member">qualifiedName()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/xmlstream/xmlstream.h" line="301" column="1" bodyfile="thirdparty/xmlstream/xmlstream.cpp" bodystart="2203" bodyend="2207"/>
      </memberdef>
      <memberdef kind="function" id="class_xml_stream_reader_1a1afff37e8245261beb5c31db56912b8c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QStringRef</type>
        <definition>QStringRef XmlStreamReader::qualifiedName</definition>
        <argsstring>() const</argsstring>
        <name>qualifiedName</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the qualified name of a StartElement or EndElement;</para><para>A qualified name is the raw name of an element in the XML data. It consists of the namespace prefix, followed by colon, followed by the element&apos;s local name. Since the namespace prefix is not unique (the same prefix can point to different namespaces and different prefixes can point to the same namespace), you shouldn&apos;t use <ref refid="class_xml_stream_reader_1a1afff37e8245261beb5c31db56912b8c" kindref="member">qualifiedName()</ref>, but the resolved <ref refid="class_xml_stream_reader_1a4ea3344f8632d1cd70edfaddf9a8027c" kindref="member">namespaceUri()</ref> and the attribute&apos;s local <ref refid="class_xml_stream_reader_1a09b44691e1e74daa6bdd4ed465d3c0a2" kindref="member">name()</ref>.</para><para><simplesect kind="see"><para><ref refid="class_xml_stream_reader_1a09b44691e1e74daa6bdd4ed465d3c0a2" kindref="member">name()</ref>, <ref refid="class_xml_stream_reader_1aed2c2d3189639c9f73dc50432c628204" kindref="member">prefix()</ref>, <ref refid="class_xml_stream_reader_1a4ea3344f8632d1cd70edfaddf9a8027c" kindref="member">namespaceUri()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/xmlstream/xmlstream.h" line="302" column="1" bodyfile="thirdparty/xmlstream/xmlstream.cpp" bodystart="2221" bodyend="2225"/>
      </memberdef>
      <memberdef kind="function" id="class_xml_stream_reader_1aed2c2d3189639c9f73dc50432c628204" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QStringRef</type>
        <definition>QStringRef XmlStreamReader::prefix</definition>
        <argsstring>() const</argsstring>
        <name>prefix</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>4.4</para></simplesect>
Returns the prefix of a StartElement or EndElement.</para><para><simplesect kind="see"><para><ref refid="class_xml_stream_reader_1a09b44691e1e74daa6bdd4ed465d3c0a2" kindref="member">name()</ref>, <ref refid="class_xml_stream_reader_1a1afff37e8245261beb5c31db56912b8c" kindref="member">qualifiedName()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/xmlstream/xmlstream.h" line="303" column="1" bodyfile="thirdparty/xmlstream/xmlstream.cpp" bodystart="2236" bodyend="2240"/>
      </memberdef>
      <memberdef kind="function" id="class_xml_stream_reader_1a66bd483fca16586142dd890cacb9b967" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QStringRef</type>
        <definition>QStringRef XmlStreamReader::processingInstructionTarget</definition>
        <argsstring>() const</argsstring>
        <name>processingInstructionTarget</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the target of a ProcessingInstruction. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/xmlstream/xmlstream.h" line="305" column="1" bodyfile="thirdparty/xmlstream/xmlstream.cpp" bodystart="2170" bodyend="2174"/>
      </memberdef>
      <memberdef kind="function" id="class_xml_stream_reader_1a2c9146676cc92895abaadc89f6fbc738" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QStringRef</type>
        <definition>QStringRef XmlStreamReader::processingInstructionData</definition>
        <argsstring>() const</argsstring>
        <name>processingInstructionData</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the data of a ProcessingInstruction. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/xmlstream/xmlstream.h" line="306" column="1" bodyfile="thirdparty/xmlstream/xmlstream.cpp" bodystart="2179" bodyend="2183"/>
      </memberdef>
      <memberdef kind="function" id="class_xml_stream_reader_1a1d129d0171b231efac34d7ee4480a50f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QStringRef</type>
        <definition>QStringRef XmlStreamReader::text</definition>
        <argsstring>() const</argsstring>
        <name>text</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the text of  Characters,  Comment,  DTD, or EntityReference. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/xmlstream/xmlstream.h" line="308" column="1" bodyfile="thirdparty/xmlstream/xmlstream.cpp" bodystart="1947" bodyend="1951"/>
      </memberdef>
      <memberdef kind="function" id="class_xml_stream_reader_1a3e6033d64f3744d90e96287f3a04d913" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>XmlStreamNamespaceDeclarations</type>
        <definition>XmlStreamNamespaceDeclarations XmlStreamReader::namespaceDeclarations</definition>
        <argsstring>() const</argsstring>
        <name>namespaceDeclarations</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>If the <ref refid="class_xml_stream_reader_1a2c26bfb63c27f2992e24f038d65c8c0a" kindref="member">tokenType()</ref> is  StartElement, this function returns the element&apos;s namespace declarations. Otherwise an empty vector is returned.</para><para>The XmlStreamNamespaceDeclarations class is defined to be a QVector of <ref refid="class_xml_stream_namespace_declaration" kindref="compound">XmlStreamNamespaceDeclaration</ref>.</para><para><simplesect kind="see"><para><ref refid="class_xml_stream_reader_1a6c6b71cc9f62ad5c1b85c207ba1be850" kindref="member">addExtraNamespaceDeclaration()</ref>, <ref refid="class_xml_stream_reader_1a8661643768d54c1c49645a59abed5d29" kindref="member">addExtraNamespaceDeclarations()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/xmlstream/xmlstream.h" line="310" column="1" bodyfile="thirdparty/xmlstream/xmlstream.cpp" bodystart="2037" bodyend="2043"/>
      </memberdef>
      <memberdef kind="function" id="class_xml_stream_reader_1a6c6b71cc9f62ad5c1b85c207ba1be850" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XmlStreamReader::addExtraNamespaceDeclaration</definition>
        <argsstring>(const XmlStreamNamespaceDeclaration &amp;extraNamespaceDeclaraction)</argsstring>
        <name>addExtraNamespaceDeclaration</name>
        <param>
          <type>const <ref refid="class_xml_stream_namespace_declaration" kindref="compound">XmlStreamNamespaceDeclaration</ref> &amp;</type>
          <declname>extraNamespaceDeclaraction</declname>
          <defname>extraNamespaceDeclaration</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>4.4</para></simplesect>
Adds an <emphasis>extraNamespaceDeclaration</emphasis>. The declaration will be valid for children of the current element, or - should the function be called before any elements are read - for the entire XML document.</para><para><simplesect kind="see"><para><ref refid="class_xml_stream_reader_1a3e6033d64f3744d90e96287f3a04d913" kindref="member">namespaceDeclarations()</ref>, <ref refid="class_xml_stream_reader_1a8661643768d54c1c49645a59abed5d29" kindref="member">addExtraNamespaceDeclarations()</ref>, setNamespaceProcessing() </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/xmlstream/xmlstream.h" line="311" column="1" bodyfile="thirdparty/xmlstream/xmlstream.cpp" bodystart="2056" bodyend="2062"/>
      </memberdef>
      <memberdef kind="function" id="class_xml_stream_reader_1a8661643768d54c1c49645a59abed5d29" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XmlStreamReader::addExtraNamespaceDeclarations</definition>
        <argsstring>(const XmlStreamNamespaceDeclarations &amp;extraNamespaceDeclaractions)</argsstring>
        <name>addExtraNamespaceDeclarations</name>
        <param>
          <type>const XmlStreamNamespaceDeclarations &amp;</type>
          <declname>extraNamespaceDeclaractions</declname>
          <defname>extraNamespaceDeclarations</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>4.4</para></simplesect>
Adds a vector of declarations specified by <emphasis>extraNamespaceDeclarations</emphasis>.</para><para><simplesect kind="see"><para><ref refid="class_xml_stream_reader_1a3e6033d64f3744d90e96287f3a04d913" kindref="member">namespaceDeclarations()</ref>, <ref refid="class_xml_stream_reader_1a6c6b71cc9f62ad5c1b85c207ba1be850" kindref="member">addExtraNamespaceDeclaration()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/xmlstream/xmlstream.h" line="312" column="1" bodyfile="thirdparty/xmlstream/xmlstream.cpp" bodystart="2071" bodyend="2075"/>
      </memberdef>
      <memberdef kind="function" id="class_xml_stream_reader_1af1980e6e4fa0ec4468bb384000bf33db" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>XmlStreamNotationDeclarations</type>
        <definition>XmlStreamNotationDeclarations XmlStreamReader::notationDeclarations</definition>
        <argsstring>() const</argsstring>
        <name>notationDeclarations</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>If the <ref refid="class_xml_stream_reader_1a2c26bfb63c27f2992e24f038d65c8c0a" kindref="member">tokenType()</ref> is  DTD, this function returns the DTD&apos;s notation declarations. Otherwise an empty vector is returned.</para><para>The XmlStreamNotationDeclarations class is defined to be a QVector of <ref refid="class_xml_stream_notation_declaration" kindref="compound">XmlStreamNotationDeclaration</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/xmlstream/xmlstream.h" line="313" column="1" bodyfile="thirdparty/xmlstream/xmlstream.cpp" bodystart="1960" bodyend="1966"/>
      </memberdef>
      <memberdef kind="function" id="class_xml_stream_reader_1a1746b1c8df6ec7a4172c5dbee907bfb3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>XmlStreamEntityDeclarations</type>
        <definition>XmlStreamEntityDeclarations XmlStreamReader::entityDeclarations</definition>
        <argsstring>() const</argsstring>
        <name>entityDeclarations</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>If the <ref refid="class_xml_stream_reader_1a2c26bfb63c27f2992e24f038d65c8c0a" kindref="member">tokenType()</ref> is  DTD, this function returns the DTD&apos;s unparsed (external) entity declarations. Otherwise an empty vector is returned.</para><para>The XmlStreamEntityDeclarations class is defined to be a QVector of <ref refid="class_xml_stream_entity_declaration" kindref="compound">XmlStreamEntityDeclaration</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/xmlstream/xmlstream.h" line="314" column="1" bodyfile="thirdparty/xmlstream/xmlstream.cpp" bodystart="1975" bodyend="1981"/>
      </memberdef>
      <memberdef kind="function" id="class_xml_stream_reader_1a17977920c069d3e4a71182aa07cb4eaa" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QStringRef</type>
        <definition>QStringRef XmlStreamReader::dtdName</definition>
        <argsstring>() const</argsstring>
        <name>dtdName</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>4.4</para></simplesect>
If the <ref refid="class_xml_stream_reader_1a2c26bfb63c27f2992e24f038d65c8c0a" kindref="member">tokenType()</ref> is  DTD, this function returns the DTD&apos;s name. Otherwise an empty string is returned. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/xmlstream/xmlstream.h" line="315" column="1" bodyfile="thirdparty/xmlstream/xmlstream.cpp" bodystart="1990" bodyend="1996"/>
      </memberdef>
      <memberdef kind="function" id="class_xml_stream_reader_1a5b8d61714dde7a6f75aa16555b85db18" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QStringRef</type>
        <definition>QStringRef XmlStreamReader::dtdPublicId</definition>
        <argsstring>() const</argsstring>
        <name>dtdPublicId</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>4.4</para></simplesect>
If the <ref refid="class_xml_stream_reader_1a2c26bfb63c27f2992e24f038d65c8c0a" kindref="member">tokenType()</ref> is  DTD, this function returns the DTD&apos;s public identifier. Otherwise an empty string is returned. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/xmlstream/xmlstream.h" line="316" column="1" bodyfile="thirdparty/xmlstream/xmlstream.cpp" bodystart="2005" bodyend="2011"/>
      </memberdef>
      <memberdef kind="function" id="class_xml_stream_reader_1a8021ea53fd25af7404bfe81a2e4e7bdd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QStringRef</type>
        <definition>QStringRef XmlStreamReader::dtdSystemId</definition>
        <argsstring>() const</argsstring>
        <name>dtdSystemId</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>4.4</para></simplesect>
If the <ref refid="class_xml_stream_reader_1a2c26bfb63c27f2992e24f038d65c8c0a" kindref="member">tokenType()</ref> is  DTD, this function returns the DTD&apos;s system identifier. Otherwise an empty string is returned. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/xmlstream/xmlstream.h" line="317" column="1" bodyfile="thirdparty/xmlstream/xmlstream.cpp" bodystart="2020" bodyend="2026"/>
      </memberdef>
      <memberdef kind="function" id="class_xml_stream_reader_1aae008ac9078fb7edb4a77ba3e76b8dfa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XmlStreamReader::raiseError</definition>
        <argsstring>(const QString &amp;message=QString())</argsstring>
        <name>raiseError</name>
        <param>
          <type>const QString &amp;</type>
          <declname>message</declname>
          <defval>QString()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Raises a custom error with an optional error <emphasis>message</emphasis>.</para><para><simplesect kind="see"><para><ref refid="class_xml_stream_reader_1ae9a7e8fe9f15b0f5c4ec5fa080c6249f" kindref="member">error()</ref>, <ref refid="class_xml_stream_reader_1a119d913daa2a7b8174f0b26dcd7e9720" kindref="member">errorString()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/xmlstream/xmlstream.h" line="327" column="1" bodyfile="thirdparty/xmlstream/xmlstream.cpp" bodystart="2136" bodyend="2140"/>
      </memberdef>
      <memberdef kind="function" id="class_xml_stream_reader_1a119d913daa2a7b8174f0b26dcd7e9720" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QString</type>
        <definition>QString XmlStreamReader::errorString</definition>
        <argsstring>() const</argsstring>
        <name>errorString</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the error message that was set with <ref refid="class_xml_stream_reader_1aae008ac9078fb7edb4a77ba3e76b8dfa" kindref="member">raiseError()</ref>.</para><para><simplesect kind="see"><para><ref refid="class_xml_stream_reader_1ae9a7e8fe9f15b0f5c4ec5fa080c6249f" kindref="member">error()</ref>, <ref refid="class_xml_stream_reader_1a74a3827867942f9904924f2004c4177e" kindref="member">lineNumber()</ref>, <ref refid="class_xml_stream_reader_1a88724d9577a835b0e8d84ed945c306df" kindref="member">columnNumber()</ref>, <ref refid="class_xml_stream_reader_1a08a187eb8969ddabf238e1f731bb754a" kindref="member">characterOffset()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/xmlstream/xmlstream.h" line="328" column="1" bodyfile="thirdparty/xmlstream/xmlstream.cpp" bodystart="2147" bodyend="2153"/>
      </memberdef>
      <memberdef kind="function" id="class_xml_stream_reader_1ae9a7e8fe9f15b0f5c4ec5fa080c6249f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_xml_stream_reader_1ae7aa6749ae6e9de9bcb6f084a9884286" kindref="member">Error</ref></type>
        <definition>XmlStreamReader::Error XmlStreamReader::error</definition>
        <argsstring>() const</argsstring>
        <name>error</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the type of the current error, or NoError if no error occurred.</para><para><simplesect kind="see"><para><ref refid="class_xml_stream_reader_1a119d913daa2a7b8174f0b26dcd7e9720" kindref="member">errorString()</ref>, <ref refid="class_xml_stream_reader_1aae008ac9078fb7edb4a77ba3e76b8dfa" kindref="member">raiseError()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/xmlstream/xmlstream.h" line="329" column="1" bodyfile="thirdparty/xmlstream/xmlstream.cpp" bodystart="2159" bodyend="2165"/>
      </memberdef>
      <memberdef kind="function" id="class_xml_stream_reader_1a26bc2d6831322e5a1d86182295f912d0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool XmlStreamReader::hasError</definition>
        <argsstring>() const</argsstring>
        <name>hasError</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns <computeroutput>true</computeroutput> if an error has occurred, otherwise <computeroutput>false</computeroutput>.</para><para><simplesect kind="see"><para><ref refid="class_xml_stream_reader_1a119d913daa2a7b8174f0b26dcd7e9720" kindref="member">errorString()</ref>, <ref refid="class_xml_stream_reader_1ae9a7e8fe9f15b0f5c4ec5fa080c6249f" kindref="member">error()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/xmlstream/xmlstream.h" line="331" column="1" bodyfile="thirdparty/xmlstream/xmlstream.h" bodystart="331" bodyend="334"/>
      </memberdef>
      <memberdef kind="function" id="class_xml_stream_reader_1af77e0f8b78b6cedfaec4a34634670893" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XmlStreamReader::setEntityResolver</definition>
        <argsstring>(XmlStreamEntityResolver *resolver)</argsstring>
        <name>setEntityResolver</name>
        <param>
          <type><ref refid="class_xml_stream_entity_resolver" kindref="compound">XmlStreamEntityResolver</ref> *</type>
          <declname>resolver</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>4.4</para></simplesect>
Makes <emphasis>resolver</emphasis> the new <ref refid="class_xml_stream_reader_1aac2531acc527bccec511df4c29ed2ff8" kindref="member">entityResolver()</ref>.</para><para>The stream reader does <emphasis>not</emphasis> take ownership of the resolver. It&apos;s the callers responsibility to ensure that the resolver is valid during the entire life-time of the stream reader object, or until another resolver or 0 is set.</para><para><simplesect kind="see"><para><ref refid="class_xml_stream_reader_1aac2531acc527bccec511df4c29ed2ff8" kindref="member">entityResolver()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/xmlstream/xmlstream.h" line="336" column="1" bodyfile="thirdparty/xmlstream/xmlstream.cpp" bodystart="226" bodyend="230"/>
      </memberdef>
      <memberdef kind="function" id="class_xml_stream_reader_1aac2531acc527bccec511df4c29ed2ff8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_xml_stream_entity_resolver" kindref="compound">XmlStreamEntityResolver</ref> *</type>
        <definition>XmlStreamEntityResolver * XmlStreamReader::entityResolver</definition>
        <argsstring>() const</argsstring>
        <name>entityResolver</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>4.4</para></simplesect>
Returns the entity resolver, or 0 if there is no entity resolver.</para><para><simplesect kind="see"><para><ref refid="class_xml_stream_reader_1af77e0f8b78b6cedfaec4a34634670893" kindref="member">setEntityResolver()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/xmlstream/xmlstream.h" line="337" column="1" bodyfile="thirdparty/xmlstream/xmlstream.cpp" bodystart="239" bodyend="243"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The <ref refid="class_xml_stream_reader" kindref="compound">XmlStreamReader</ref> class provides a fast parser for reading well-formed XML via a simple streaming API. </para>    </briefdescription>
    <detaileddescription>
<para>QtCore  <simplesect kind="since"><para>4.3</para></simplesect>
<ref refid="class_xml_stream_reader" kindref="compound">XmlStreamReader</ref> is a faster and more convenient replacement for Qt&apos;s own SAX parser (see QXmlSimpleReader). In some cases it might also be a faster and more convenient alternative for use in applications that would otherwise use a DOM tree (see QDomDocument). <ref refid="class_xml_stream_reader" kindref="compound">XmlStreamReader</ref> reads data either from a QIODevice (see <ref refid="class_xml_stream_reader_1a0d166c5c7814d44a0015a82f0500cee5" kindref="member">setDevice()</ref>), or from a raw QByteArray (see <ref refid="class_xml_stream_reader_1add6baa0f8790fc528c1fa6e05755f96b" kindref="member">addData()</ref>).</para><para>Qt provides <ref refid="class_xml_stream_writer" kindref="compound">XmlStreamWriter</ref> for writing XML.</para><para>The basic concept of a stream reader is to report an XML document as a stream of tokens, similar to SAX. The main difference between <ref refid="class_xml_stream_reader" kindref="compound">XmlStreamReader</ref> and SAX is <emphasis>how</emphasis> these XML tokens are reported. With SAX, the application must provide handlers (callback functions) that receive so-called XML <emphasis>events</emphasis> from the parser at the parser&apos;s convenience. With <ref refid="class_xml_stream_reader" kindref="compound">XmlStreamReader</ref>, the application code itself drives the loop and pulls <emphasis>tokens</emphasis> from the reader, one after another, as it needs them. This is done by calling <ref refid="class_xml_stream_reader_1adb18e6f9842e9b470cde16385732ad84" kindref="member">readNext()</ref>, where the reader reads from the input stream until it completes the next token, at which point it returns the <ref refid="class_xml_stream_reader_1a2c26bfb63c27f2992e24f038d65c8c0a" kindref="member">tokenType()</ref>. A set of convenient functions including <ref refid="class_xml_stream_reader_1a78cb57350cabab5e7ca7c1a8963a774d" kindref="member">isStartElement()</ref> and <ref refid="class_xml_stream_reader_1a1d129d0171b231efac34d7ee4480a50f" kindref="member">text()</ref> can then be used to examine the token to obtain information about what has been read. The big advantage of this <emphasis>pulling</emphasis> approach is the possibility to build recursive descent parsers with it, meaning you can split your XML parsing code easily into different methods or classes. This makes it easy to keep track of the application&apos;s own state when parsing XML.</para><para>A typical loop with <ref refid="class_xml_stream_reader" kindref="compound">XmlStreamReader</ref> looks like this:</para><para><programlisting></programlisting></para><para><ref refid="class_xml_stream_reader" kindref="compound">XmlStreamReader</ref> is a well-formed XML 1.0 parser that does <emphasis>not</emphasis> include external parsed entities. As long as no error occurs, the application code can thus be assured that the data provided by the stream reader satisfies the W3C&apos;s criteria for well-formed XML. For example, you can be certain that all tags are indeed nested and closed properly, that references to internal entities have been replaced with the correct replacement text, and that attributes have been normalized or added according to the internal subset of the DTD.</para><para>If an error occurs while parsing, <ref refid="class_xml_stream_reader_1a4acf0ba0ea25300b66c9d85ba3e8dfb3" kindref="member">atEnd()</ref> and <ref refid="class_xml_stream_reader_1a26bc2d6831322e5a1d86182295f912d0" kindref="member">hasError()</ref> return true, and <ref refid="class_xml_stream_reader_1ae9a7e8fe9f15b0f5c4ec5fa080c6249f" kindref="member">error()</ref> returns the error that occurred. The functions <ref refid="class_xml_stream_reader_1a119d913daa2a7b8174f0b26dcd7e9720" kindref="member">errorString()</ref>, <ref refid="class_xml_stream_reader_1a74a3827867942f9904924f2004c4177e" kindref="member">lineNumber()</ref>, <ref refid="class_xml_stream_reader_1a88724d9577a835b0e8d84ed945c306df" kindref="member">columnNumber()</ref>, and <ref refid="class_xml_stream_reader_1a08a187eb8969ddabf238e1f731bb754a" kindref="member">characterOffset()</ref> are for constructing an appropriate error or warning message. To simplify application code, <ref refid="class_xml_stream_reader" kindref="compound">XmlStreamReader</ref> contains a <ref refid="class_xml_stream_reader_1aae008ac9078fb7edb4a77ba3e76b8dfa" kindref="member">raiseError()</ref> mechanism that lets you raise custom errors that trigger the same error handling described.</para><para>The {<ref refid="class_xml_stream" kindref="compound">XmlStream</ref> Bookmarks Example} illustrates how to use the recursive descent technique to read an XML bookmark file (XBEL) with a stream reader.</para>    </detaileddescription>
    <location file="thirdparty/xmlstream/xmlstream.h" line="227" column="1" bodyfile="thirdparty/xmlstream/xmlstream.h" bodystart="227" bodyend="344"/>
    <listofallmembers>
      <member refid="class_xml_stream_reader_1add6baa0f8790fc528c1fa6e05755f96b" prot="public" virt="non-virtual"><scope>XmlStreamReader</scope><name>addData</name></member>
      <member refid="class_xml_stream_reader_1ac998bbe2fc600172e2d780a58708f358" prot="public" virt="non-virtual"><scope>XmlStreamReader</scope><name>addData</name></member>
      <member refid="class_xml_stream_reader_1a4dc8d02a038a0b16e6a47f5d2a36d8a3" prot="public" virt="non-virtual"><scope>XmlStreamReader</scope><name>addData</name></member>
      <member refid="class_xml_stream_reader_1a6c6b71cc9f62ad5c1b85c207ba1be850" prot="public" virt="non-virtual"><scope>XmlStreamReader</scope><name>addExtraNamespaceDeclaration</name></member>
      <member refid="class_xml_stream_reader_1a8661643768d54c1c49645a59abed5d29" prot="public" virt="non-virtual"><scope>XmlStreamReader</scope><name>addExtraNamespaceDeclarations</name></member>
      <member refid="class_xml_stream_reader_1a4acf0ba0ea25300b66c9d85ba3e8dfb3" prot="public" virt="non-virtual"><scope>XmlStreamReader</scope><name>atEnd</name></member>
      <member refid="class_xml_stream_reader_1aaa89a6baad93837857847a3ec5d7710a" prot="public" virt="non-virtual"><scope>XmlStreamReader</scope><name>attributes</name></member>
      <member refid="class_xml_stream_reader_1a08a187eb8969ddabf238e1f731bb754a" prot="public" virt="non-virtual"><scope>XmlStreamReader</scope><name>characterOffset</name></member>
      <member refid="class_xml_stream_reader_1a99e2023f874f0ca648c996ae79c3b5f7a6311e5e921a84b123af99db394bec3bb" prot="public" virt="non-virtual"><scope>XmlStreamReader</scope><name>Characters</name></member>
      <member refid="class_xml_stream_reader_1a2a67f5a1fff83d33214ccc9ec9494ca0" prot="public" virt="non-virtual"><scope>XmlStreamReader</scope><name>clear</name></member>
      <member refid="class_xml_stream_reader_1a88724d9577a835b0e8d84ed945c306df" prot="public" virt="non-virtual"><scope>XmlStreamReader</scope><name>columnNumber</name></member>
      <member refid="class_xml_stream_reader_1a99e2023f874f0ca648c996ae79c3b5f7ad48ba424744ba335359e9ca7dd82673a" prot="public" virt="non-virtual"><scope>XmlStreamReader</scope><name>Comment</name></member>
      <member refid="class_xml_stream_reader_1ae7aa6749ae6e9de9bcb6f084a9884286a36e258b015bd4daacf1753217d648812" prot="public" virt="non-virtual"><scope>XmlStreamReader</scope><name>CustomError</name></member>
      <member refid="class_xml_stream_reader_1a85967dc49f24d99596b1f3590f1e6173" prot="private" virt="non-virtual"><scope>XmlStreamReader</scope><name>d_ptr</name></member>
      <member refid="class_xml_stream_reader_1aa2a751d1b36fac13138b2f370683dfe7" prot="public" virt="non-virtual"><scope>XmlStreamReader</scope><name>device</name></member>
      <member refid="class_xml_stream_reader_1a8326fe20290e37d1c1549737cc02d25b" prot="public" virt="non-virtual"><scope>XmlStreamReader</scope><name>documentEncoding</name></member>
      <member refid="class_xml_stream_reader_1a6667b8f4c648c8f192802c8091f617fb" prot="public" virt="non-virtual"><scope>XmlStreamReader</scope><name>documentVersion</name></member>
      <member refid="class_xml_stream_reader_1a99e2023f874f0ca648c996ae79c3b5f7abbf89c2cb3001aaf3e0d34de75695588" prot="public" virt="non-virtual"><scope>XmlStreamReader</scope><name>DTD</name></member>
      <member refid="class_xml_stream_reader_1a17977920c069d3e4a71182aa07cb4eaa" prot="public" virt="non-virtual"><scope>XmlStreamReader</scope><name>dtdName</name></member>
      <member refid="class_xml_stream_reader_1a5b8d61714dde7a6f75aa16555b85db18" prot="public" virt="non-virtual"><scope>XmlStreamReader</scope><name>dtdPublicId</name></member>
      <member refid="class_xml_stream_reader_1a8021ea53fd25af7404bfe81a2e4e7bdd" prot="public" virt="non-virtual"><scope>XmlStreamReader</scope><name>dtdSystemId</name></member>
      <member refid="class_xml_stream_reader_1a99e2023f874f0ca648c996ae79c3b5f7acc1a4f29feb9b0020f87f8175380649c" prot="public" virt="non-virtual"><scope>XmlStreamReader</scope><name>EndDocument</name></member>
      <member refid="class_xml_stream_reader_1a99e2023f874f0ca648c996ae79c3b5f7a69d929e1641e65f6b1bfe726461545ad" prot="public" virt="non-virtual"><scope>XmlStreamReader</scope><name>EndElement</name></member>
      <member refid="class_xml_stream_reader_1a1746b1c8df6ec7a4172c5dbee907bfb3" prot="public" virt="non-virtual"><scope>XmlStreamReader</scope><name>entityDeclarations</name></member>
      <member refid="class_xml_stream_reader_1a99e2023f874f0ca648c996ae79c3b5f7a69843936135995582180cdce7ab0f531" prot="public" virt="non-virtual"><scope>XmlStreamReader</scope><name>EntityReference</name></member>
      <member refid="class_xml_stream_reader_1aac2531acc527bccec511df4c29ed2ff8" prot="public" virt="non-virtual"><scope>XmlStreamReader</scope><name>entityResolver</name></member>
      <member refid="class_xml_stream_reader_1ae7aa6749ae6e9de9bcb6f084a9884286" prot="public" virt="non-virtual"><scope>XmlStreamReader</scope><name>Error</name></member>
      <member refid="class_xml_stream_reader_1ae9a7e8fe9f15b0f5c4ec5fa080c6249f" prot="public" virt="non-virtual"><scope>XmlStreamReader</scope><name>error</name></member>
      <member refid="class_xml_stream_reader_1aa67823f6737762b7e1a426ac841e29faa819f8ddf4de52567af9eec7dfda9063a" prot="public" virt="non-virtual"><scope>XmlStreamReader</scope><name>ErrorOnUnexpectedElement</name></member>
      <member refid="class_xml_stream_reader_1a119d913daa2a7b8174f0b26dcd7e9720" prot="public" virt="non-virtual"><scope>XmlStreamReader</scope><name>errorString</name></member>
      <member refid="class_xml_stream_reader_1a26bc2d6831322e5a1d86182295f912d0" prot="public" virt="non-virtual"><scope>XmlStreamReader</scope><name>hasError</name></member>
      <member refid="class_xml_stream_reader_1aa67823f6737762b7e1a426ac841e29faab50326fadb0ad35b8104639ecaa73eac" prot="public" virt="non-virtual"><scope>XmlStreamReader</scope><name>IncludeChildElements</name></member>
      <member refid="class_xml_stream_reader_1a99e2023f874f0ca648c996ae79c3b5f7a8af34b98488476c0fa9e9137d32f36bc" prot="public" virt="non-virtual"><scope>XmlStreamReader</scope><name>Invalid</name></member>
      <member refid="class_xml_stream_reader_1ad1c5f23d9c60ab41c032940191d71ae4" prot="public" virt="non-virtual"><scope>XmlStreamReader</scope><name>isCDATA</name></member>
      <member refid="class_xml_stream_reader_1a6d14d53c064bab08ac876ffaf2448742" prot="public" virt="non-virtual"><scope>XmlStreamReader</scope><name>isCharacters</name></member>
      <member refid="class_xml_stream_reader_1ac3c807c55b3a957da46fe7c695cd7907" prot="public" virt="non-virtual"><scope>XmlStreamReader</scope><name>isComment</name></member>
      <member refid="class_xml_stream_reader_1afd7dc97a37491da500428da151ca4913" prot="public" virt="non-virtual"><scope>XmlStreamReader</scope><name>isDTD</name></member>
      <member refid="class_xml_stream_reader_1a855b760b7aeec5b7fb177a88d9e7caee" prot="public" virt="non-virtual"><scope>XmlStreamReader</scope><name>isEndDocument</name></member>
      <member refid="class_xml_stream_reader_1a4262447470b01b9544d1e83bf9521b35" prot="public" virt="non-virtual"><scope>XmlStreamReader</scope><name>isEndElement</name></member>
      <member refid="class_xml_stream_reader_1ac7d9fbea5bf99934c5d862c8ced0d44f" prot="public" virt="non-virtual"><scope>XmlStreamReader</scope><name>isEntityReference</name></member>
      <member refid="class_xml_stream_reader_1a66b16a5ab385fbfa167295f41022c37d" prot="public" virt="non-virtual"><scope>XmlStreamReader</scope><name>isProcessingInstruction</name></member>
      <member refid="class_xml_stream_reader_1aa5678c8de5e5efd67e85b60dbda6374f" prot="public" virt="non-virtual"><scope>XmlStreamReader</scope><name>isStandaloneDocument</name></member>
      <member refid="class_xml_stream_reader_1aa5a6f844839b4c7d893e3023f97feb4d" prot="public" virt="non-virtual"><scope>XmlStreamReader</scope><name>isStartDocument</name></member>
      <member refid="class_xml_stream_reader_1a78cb57350cabab5e7ca7c1a8963a774d" prot="public" virt="non-virtual"><scope>XmlStreamReader</scope><name>isStartElement</name></member>
      <member refid="class_xml_stream_reader_1a15550b223a59978b612b0fc32bd543e1" prot="public" virt="non-virtual"><scope>XmlStreamReader</scope><name>isWhitespace</name></member>
      <member refid="class_xml_stream_reader_1a74a3827867942f9904924f2004c4177e" prot="public" virt="non-virtual"><scope>XmlStreamReader</scope><name>lineNumber</name></member>
      <member refid="class_xml_stream_reader_1a09b44691e1e74daa6bdd4ed465d3c0a2" prot="public" virt="non-virtual"><scope>XmlStreamReader</scope><name>name</name></member>
      <member refid="class_xml_stream_reader_1a3e6033d64f3744d90e96287f3a04d913" prot="public" virt="non-virtual"><scope>XmlStreamReader</scope><name>namespaceDeclarations</name></member>
      <member refid="class_xml_stream_reader_1ab834393cf21f28f8ae088b19033cacfa" prot="public" virt="non-virtual"><scope>XmlStreamReader</scope><name>namespaceProcessing</name></member>
      <member refid="class_xml_stream_reader_1a4ea3344f8632d1cd70edfaddf9a8027c" prot="public" virt="non-virtual"><scope>XmlStreamReader</scope><name>namespaceUri</name></member>
      <member refid="class_xml_stream_reader_1ae7aa6749ae6e9de9bcb6f084a9884286a4e489c537720c12add3a35a774f24909" prot="public" virt="non-virtual"><scope>XmlStreamReader</scope><name>NoError</name></member>
      <member refid="class_xml_stream_reader_1af1980e6e4fa0ec4468bb384000bf33db" prot="public" virt="non-virtual"><scope>XmlStreamReader</scope><name>notationDeclarations</name></member>
      <member refid="class_xml_stream_reader_1a99e2023f874f0ca648c996ae79c3b5f7a62aff7b1801b83539e81adaf5bbf4907" prot="public" virt="non-virtual"><scope>XmlStreamReader</scope><name>NoToken</name></member>
      <member refid="class_xml_stream_reader_1ae7aa6749ae6e9de9bcb6f084a9884286afef1f43579c81c782022c2e3b4db495e" prot="public" virt="non-virtual"><scope>XmlStreamReader</scope><name>NotWellFormedError</name></member>
      <member refid="class_xml_stream_reader_1aed2c2d3189639c9f73dc50432c628204" prot="public" virt="non-virtual"><scope>XmlStreamReader</scope><name>prefix</name></member>
      <member refid="class_xml_stream_reader_1ae7aa6749ae6e9de9bcb6f084a9884286aa0e84586726cbf09de057fa63f4aa47b" prot="public" virt="non-virtual"><scope>XmlStreamReader</scope><name>PrematureEndOfDocumentError</name></member>
      <member refid="class_xml_stream_reader_1a99e2023f874f0ca648c996ae79c3b5f7a8efb2ae15c16d9c3175142bb7d0c5adf" prot="public" virt="non-virtual"><scope>XmlStreamReader</scope><name>ProcessingInstruction</name></member>
      <member refid="class_xml_stream_reader_1a2c9146676cc92895abaadc89f6fbc738" prot="public" virt="non-virtual"><scope>XmlStreamReader</scope><name>processingInstructionData</name></member>
      <member refid="class_xml_stream_reader_1a66bd483fca16586142dd890cacb9b967" prot="public" virt="non-virtual"><scope>XmlStreamReader</scope><name>processingInstructionTarget</name></member>
      <member refid="class_xml_stream_reader_1a1afff37e8245261beb5c31db56912b8c" prot="public" virt="non-virtual"><scope>XmlStreamReader</scope><name>qualifiedName</name></member>
      <member refid="class_xml_stream_reader_1aae008ac9078fb7edb4a77ba3e76b8dfa" prot="public" virt="non-virtual"><scope>XmlStreamReader</scope><name>raiseError</name></member>
      <member refid="class_xml_stream_reader_1a45f936b88df1b72f39c43d1c41fb9940" prot="public" virt="non-virtual"><scope>XmlStreamReader</scope><name>readElementText</name></member>
      <member refid="class_xml_stream_reader_1aa67823f6737762b7e1a426ac841e29fa" prot="public" virt="non-virtual"><scope>XmlStreamReader</scope><name>ReadElementTextBehaviour</name></member>
      <member refid="class_xml_stream_reader_1adb18e6f9842e9b470cde16385732ad84" prot="public" virt="non-virtual"><scope>XmlStreamReader</scope><name>readNext</name></member>
      <member refid="class_xml_stream_reader_1acc156ff248a564ada18939f9382e0b05" prot="public" virt="non-virtual"><scope>XmlStreamReader</scope><name>readNextStartElement</name></member>
      <member refid="class_xml_stream_reader_1a0d166c5c7814d44a0015a82f0500cee5" prot="public" virt="non-virtual"><scope>XmlStreamReader</scope><name>setDevice</name></member>
      <member refid="class_xml_stream_reader_1af77e0f8b78b6cedfaec4a34634670893" prot="public" virt="non-virtual"><scope>XmlStreamReader</scope><name>setEntityResolver</name></member>
      <member refid="class_xml_stream_reader_1a0db32e3e8cfaa678a615973cc00967f2" prot="public" virt="non-virtual"><scope>XmlStreamReader</scope><name>setNamespaceProcessing</name></member>
      <member refid="class_xml_stream_reader_1aa67823f6737762b7e1a426ac841e29faa170359fa04ce5cf489a215112169627c" prot="public" virt="non-virtual"><scope>XmlStreamReader</scope><name>SkipChildElements</name></member>
      <member refid="class_xml_stream_reader_1a3a0bd3dc7aca930af2a53591309f9e8e" prot="public" virt="non-virtual"><scope>XmlStreamReader</scope><name>skipCurrentElement</name></member>
      <member refid="class_xml_stream_reader_1a99e2023f874f0ca648c996ae79c3b5f7a872767247556082d256456dd97784269" prot="public" virt="non-virtual"><scope>XmlStreamReader</scope><name>StartDocument</name></member>
      <member refid="class_xml_stream_reader_1a99e2023f874f0ca648c996ae79c3b5f7a7d4ca31c10a7d744597964d4da3e9a49" prot="public" virt="non-virtual"><scope>XmlStreamReader</scope><name>StartElement</name></member>
      <member refid="class_xml_stream_reader_1a1d129d0171b231efac34d7ee4480a50f" prot="public" virt="non-virtual"><scope>XmlStreamReader</scope><name>text</name></member>
      <member refid="class_xml_stream_reader_1a7e60a09f7692db1fccc420573b56c68b" prot="public" virt="non-virtual"><scope>XmlStreamReader</scope><name>tokenString</name></member>
      <member refid="class_xml_stream_reader_1a99e2023f874f0ca648c996ae79c3b5f7" prot="public" virt="non-virtual"><scope>XmlStreamReader</scope><name>TokenType</name></member>
      <member refid="class_xml_stream_reader_1a2c26bfb63c27f2992e24f038d65c8c0a" prot="public" virt="non-virtual"><scope>XmlStreamReader</scope><name>tokenType</name></member>
      <member refid="class_xml_stream_reader_1ae7aa6749ae6e9de9bcb6f084a9884286ab7851badf8181d053f38173d1acbc7a2" prot="public" virt="non-virtual"><scope>XmlStreamReader</scope><name>UnexpectedElementError</name></member>
      <member refid="class_xml_stream_reader_1ac25232b146a8737e6735544116fb703d" prot="public" virt="non-virtual"><scope>XmlStreamReader</scope><name>XmlStreamReader</name></member>
      <member refid="class_xml_stream_reader_1a21d81e0a48fc957b40b7b735ab4c2b10" prot="public" virt="non-virtual"><scope>XmlStreamReader</scope><name>XmlStreamReader</name></member>
      <member refid="class_xml_stream_reader_1a5e3dd56e92748dcb914a1d4444ec58dc" prot="public" virt="non-virtual"><scope>XmlStreamReader</scope><name>XmlStreamReader</name></member>
      <member refid="class_xml_stream_reader_1adf9a5f6b6a076f53e62d5c414139f5dd" prot="public" virt="non-virtual"><scope>XmlStreamReader</scope><name>XmlStreamReader</name></member>
      <member refid="class_xml_stream_reader_1ab8374c8328df1023e4274b780caefea3" prot="public" virt="non-virtual"><scope>XmlStreamReader</scope><name>XmlStreamReader</name></member>
      <member refid="class_xml_stream_reader_1ae1ee1ea88f07303fa7a25d9c800d646a" prot="public" virt="non-virtual"><scope>XmlStreamReader</scope><name>~XmlStreamReader</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
