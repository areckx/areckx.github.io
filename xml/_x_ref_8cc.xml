<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="_x_ref_8cc" kind="file" language="C++">
    <compoundname>XRef.cc</compoundname>
    <includes local="no">config.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">stddef.h</includes>
    <includes local="no">string.h</includes>
    <includes local="no">math.h</includes>
    <includes local="no">ctype.h</includes>
    <includes local="no">limits.h</includes>
    <includes local="no">float.h</includes>
    <includes refid="gfile_8h" local="yes">goo/gfile.h</includes>
    <includes refid="gmem_8h" local="yes">goo/gmem.h</includes>
    <includes refid="_object_8h" local="yes">Object.h</includes>
    <includes refid="_stream_8h" local="yes">Stream.h</includes>
    <includes refid="thirdparty_2poppler_2poppler_2lexer_8h" local="yes">Lexer.h</includes>
    <includes refid="thirdparty_2poppler_2poppler_2parser_8h" local="yes">Parser.h</includes>
    <includes refid="_dict_8h" local="yes">Dict.h</includes>
    <includes refid="_error_8h" local="yes">Error.h</includes>
    <includes refid="_error_codes_8h" local="yes">ErrorCodes.h</includes>
    <includes refid="_x_ref_8h" local="yes">XRef.h</includes>
    <includes refid="_poppler_cache_8h" local="yes">PopplerCache.h</includes>
    <incdepgraph>
      <node id="90590">
        <label>stdarg.h</label>
      </node>
      <node id="90579">
        <label>float.h</label>
      </node>
      <node id="90601">
        <label>XRef.h</label>
        <link refid="_x_ref_8h_source"/>
        <childnode refid="90581" relation="include">
        </childnode>
        <childnode refid="90585" relation="include">
        </childnode>
        <childnode refid="90594" relation="include">
        </childnode>
        <childnode refid="90587" relation="include">
        </childnode>
        <childnode refid="90597" relation="include">
        </childnode>
        <childnode refid="90602" relation="include">
        </childnode>
      </node>
      <node id="90580">
        <label>goo/gfile.h</label>
        <link refid="gfile_8h_source"/>
        <childnode refid="90581" relation="include">
        </childnode>
        <childnode refid="90582" relation="include">
        </childnode>
        <childnode refid="90573" relation="include">
        </childnode>
        <childnode refid="90574" relation="include">
        </childnode>
        <childnode refid="90583" relation="include">
        </childnode>
        <childnode refid="90584" relation="include">
        </childnode>
        <childnode refid="90585" relation="include">
        </childnode>
      </node>
      <node id="90573">
        <label>stdlib.h</label>
      </node>
      <node id="90586">
        <label>goo/gmem.h</label>
        <link refid="gmem_8h_source"/>
        <childnode refid="90582" relation="include">
        </childnode>
        <childnode refid="90581" relation="include">
        </childnode>
      </node>
      <node id="90593">
        <label>Array.h</label>
        <link refid="_array_8h_source"/>
        <childnode refid="90581" relation="include">
        </childnode>
        <childnode refid="90587" relation="include">
        </childnode>
        <childnode refid="90594" relation="include">
        </childnode>
      </node>
      <node id="90598">
        <label>Lexer.h</label>
        <link refid="thirdparty_2poppler_2poppler_2lexer_8h_source"/>
        <childnode refid="90587" relation="include">
        </childnode>
        <childnode refid="90597" relation="include">
        </childnode>
      </node>
      <node id="90592">
        <label>Error.h</label>
        <link refid="_error_8h_source"/>
        <childnode refid="90590" relation="include">
        </childnode>
        <childnode refid="90581" relation="include">
        </childnode>
        <childnode refid="90585" relation="include">
        </childnode>
        <childnode refid="90589" relation="include">
        </childnode>
      </node>
      <node id="90596">
        <label>Dict.h</label>
        <link refid="_dict_8h_source"/>
        <childnode refid="90581" relation="include">
        </childnode>
        <childnode refid="90587" relation="include">
        </childnode>
        <childnode refid="90594" relation="include">
        </childnode>
      </node>
      <node id="90574">
        <label>stddef.h</label>
      </node>
      <node id="90599">
        <label>Parser.h</label>
        <link refid="thirdparty_2poppler_2poppler_2parser_8h_source"/>
        <childnode refid="90598" relation="include">
        </childnode>
      </node>
      <node id="90578">
        <label>limits.h</label>
      </node>
      <node id="90581">
        <label>poppler-config.h</label>
        <link refid="poppler-config_8h_source"/>
        <childnode refid="90582" relation="include">
        </childnode>
      </node>
      <node id="90591">
        <label>goo/GooLikely.h</label>
        <link refid="_goo_likely_8h_source"/>
      </node>
      <node id="90597">
        <label>Stream.h</label>
        <link refid="_stream_8h_source"/>
        <childnode refid="90581" relation="include">
        </childnode>
        <childnode refid="90582" relation="include">
        </childnode>
        <childnode refid="90585" relation="include">
        </childnode>
        <childnode refid="90587" relation="include">
        </childnode>
        <childnode refid="90594" relation="include">
        </childnode>
      </node>
      <node id="90595">
        <label>pthread.h</label>
      </node>
      <node id="90584">
        <label>sys/types.h</label>
      </node>
      <node id="90603">
        <label>PopplerCache.h</label>
        <link refid="_poppler_cache_8h_source"/>
        <childnode refid="90587" relation="include">
        </childnode>
      </node>
      <node id="90575">
        <label>string.h</label>
      </node>
      <node id="90571">
        <label>thirdparty/poppler/poppler/XRef.cc</label>
        <link refid="_x_ref_8cc"/>
        <childnode refid="90572" relation="include">
        </childnode>
        <childnode refid="90573" relation="include">
        </childnode>
        <childnode refid="90574" relation="include">
        </childnode>
        <childnode refid="90575" relation="include">
        </childnode>
        <childnode refid="90576" relation="include">
        </childnode>
        <childnode refid="90577" relation="include">
        </childnode>
        <childnode refid="90578" relation="include">
        </childnode>
        <childnode refid="90579" relation="include">
        </childnode>
        <childnode refid="90580" relation="include">
        </childnode>
        <childnode refid="90586" relation="include">
        </childnode>
        <childnode refid="90587" relation="include">
        </childnode>
        <childnode refid="90597" relation="include">
        </childnode>
        <childnode refid="90598" relation="include">
        </childnode>
        <childnode refid="90599" relation="include">
        </childnode>
        <childnode refid="90596" relation="include">
        </childnode>
        <childnode refid="90592" relation="include">
        </childnode>
        <childnode refid="90600" relation="include">
        </childnode>
        <childnode refid="90601" relation="include">
        </childnode>
        <childnode refid="90603" relation="include">
        </childnode>
      </node>
      <node id="90589">
        <label>goo/GooString.h</label>
        <link refid="_goo_string_8h_source"/>
        <childnode refid="90578" relation="include">
        </childnode>
        <childnode refid="90590" relation="include">
        </childnode>
        <childnode refid="90573" relation="include">
        </childnode>
        <childnode refid="90585" relation="include">
        </childnode>
      </node>
      <node id="90600">
        <label>ErrorCodes.h</label>
        <link refid="_error_codes_8h_source"/>
      </node>
      <node id="90587">
        <label>Object.h</label>
        <link refid="_object_8h_source"/>
        <childnode refid="90588" relation="include">
        </childnode>
        <childnode refid="90582" relation="include">
        </childnode>
        <childnode refid="90575" relation="include">
        </childnode>
        <childnode refid="90585" relation="include">
        </childnode>
        <childnode refid="90586" relation="include">
        </childnode>
        <childnode refid="90589" relation="include">
        </childnode>
        <childnode refid="90591" relation="include">
        </childnode>
        <childnode refid="90592" relation="include">
        </childnode>
        <childnode refid="90593" relation="include">
        </childnode>
        <childnode refid="90596" relation="include">
        </childnode>
        <childnode refid="90597" relation="include">
        </childnode>
      </node>
      <node id="90583">
        <label>unistd.h</label>
      </node>
      <node id="90602">
        <label>vector</label>
      </node>
      <node id="90576">
        <label>math.h</label>
      </node>
      <node id="90594">
        <label>goo/GooMutex.h</label>
        <link refid="_goo_mutex_8h_source"/>
        <childnode refid="90595" relation="include">
        </childnode>
      </node>
      <node id="90577">
        <label>ctype.h</label>
      </node>
      <node id="90585">
        <label>gtypes.h</label>
        <link refid="gtypes_8h_source"/>
        <childnode refid="90581" relation="include">
        </childnode>
      </node>
      <node id="90588">
        <label>set</label>
      </node>
      <node id="90572">
        <label>config.h</label>
      </node>
      <node id="90582">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="class_object_stream" prot="public">ObjectStream</innerclass>
    <innerclass refid="class_object_stream_key" prot="public">ObjectStreamKey</innerclass>
    <innerclass refid="class_object_stream_item" prot="public">ObjectStreamItem</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="_x_ref_8cc_1a55c2ef8abc5e455c1444c9d882206ef4" prot="public" static="no">
        <name>permPrint</name>
        <initializer>(1&lt;&lt;2)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/XRef.cc" line="63" column="9" bodyfile="thirdparty/poppler/poppler/XRef.cc" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_x_ref_8cc_1a2aded17ca503abe8f0d375a93706afbb" prot="public" static="no">
        <name>permChange</name>
        <initializer>(1&lt;&lt;3)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/XRef.cc" line="64" column="9" bodyfile="thirdparty/poppler/poppler/XRef.cc" bodystart="64" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_x_ref_8cc_1af65d1de411975a693595b008ed93edfc" prot="public" static="no">
        <name>permCopy</name>
        <initializer>(1&lt;&lt;4)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/XRef.cc" line="65" column="9" bodyfile="thirdparty/poppler/poppler/XRef.cc" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_x_ref_8cc_1a929b6fd54a8e8def3df2a6b3a5affbbc" prot="public" static="no">
        <name>permNotes</name>
        <initializer>(1&lt;&lt;5)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/XRef.cc" line="66" column="9" bodyfile="thirdparty/poppler/poppler/XRef.cc" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_x_ref_8cc_1a870b99a7eb66d41561f0184f3b9b62d2" prot="public" static="no">
        <name>permFillForm</name>
        <initializer>(1&lt;&lt;8)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/XRef.cc" line="67" column="9" bodyfile="thirdparty/poppler/poppler/XRef.cc" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_x_ref_8cc_1a6dac36a7f2f4844b1b1eba26ca7f360b" prot="public" static="no">
        <name>permAccessibility</name>
        <initializer>(1&lt;&lt;9)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/XRef.cc" line="68" column="9" bodyfile="thirdparty/poppler/poppler/XRef.cc" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_x_ref_8cc_1a684b544c789d1b4f50cbac21eb55e53e" prot="public" static="no">
        <name>permAssemble</name>
        <initializer>(1&lt;&lt;10)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/XRef.cc" line="69" column="9" bodyfile="thirdparty/poppler/poppler/XRef.cc" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_x_ref_8cc_1a2c170bf522be6ac13abaa7aeb3fed9fd" prot="public" static="no">
        <name>permHighResPrint</name>
        <initializer>(1&lt;&lt;11)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/XRef.cc" line="70" column="9" bodyfile="thirdparty/poppler/poppler/XRef.cc" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_x_ref_8cc_1a41adf6f44a5ac960b59408f772e4a19c" prot="public" static="no">
        <name>defPermFlags</name>
        <initializer>0xfffc</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/XRef.cc" line="71" column="9" bodyfile="thirdparty/poppler/poppler/XRef.cc" bodystart="71" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_x_ref_8cc_1aba211856cc7f726b2aa5a0b08a0be501" prot="public" static="no">
        <name>xrefLocker</name>
        <param></param>
        <initializer><ref refid="class_mutex_locker" kindref="compound">MutexLocker</ref> locker(&amp;mutex)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/XRef.cc" line="74" column="11" bodyfile="thirdparty/poppler/poppler/XRef.cc" bodystart="74" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_x_ref_8cc_1ad5cc8f65620431848c06c73e2dfb7ea5" prot="public" static="no">
        <name>xrefCondLocker</name>
        <param><defname>X</defname></param>
        <initializer><ref refid="class_mutex_locker" kindref="compound">MutexLocker</ref> locker(&amp;mutex, (X))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/XRef.cc" line="75" column="11" bodyfile="thirdparty/poppler/poppler/XRef.cc" bodystart="75" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//========================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>XRef.cc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>1996-2003<sp/>Glyph<sp/>&amp;<sp/>Cog,<sp/>LLC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//========================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//========================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Modified<sp/>under<sp/>the<sp/>Poppler<sp/>project<sp/>-<sp/>http://poppler.freedesktop.org</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>All<sp/>changes<sp/>made<sp/>under<sp/>the<sp/>Poppler<sp/>project<sp/>to<sp/>this<sp/>file<sp/>are<sp/>licensed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>under<sp/>GPL<sp/>version<sp/>2<sp/>or<sp/>later</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2005<sp/>Dan<sp/>Sheridan<sp/>&lt;dan.sheridan@postman.org.uk&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2005<sp/>Brad<sp/>Hards<sp/>&lt;bradh@frogmouth.net&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2006,<sp/>2008,<sp/>2010,<sp/>2012-2014<sp/>Albert<sp/>Astals<sp/>Cid<sp/>&lt;aacid@kde.org&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2007-2008<sp/>Julien<sp/>Rebetez<sp/>&lt;julienr@svn.gnome.org&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2007<sp/>Carlos<sp/>Garcia<sp/>Campos<sp/>&lt;carlosgc@gnome.org&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2009,<sp/>2010<sp/>Ilya<sp/>Gorenbein<sp/>&lt;igorenbein@finjan.com&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2010<sp/>Hib<sp/>Eris<sp/>&lt;hib@hiberis.nl&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2012,<sp/>2013,<sp/>2016<sp/>Thomas<sp/>Freitag<sp/>&lt;Thomas.Freitag@kabelmail.de&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2012,<sp/>2013<sp/>Fabio<sp/>D&apos;Urso<sp/>&lt;fabiodurso@hotmail.it&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2013,<sp/>2014<sp/>Adrian<sp/>Johnson<sp/>&lt;ajohnson@redneon.com&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2013<sp/>Pino<sp/>Toscano<sp/>&lt;pino@kde.org&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">//<sp/>To<sp/>see<sp/>a<sp/>description<sp/>of<sp/>the<sp/>changes<sp/>please<sp/>see<sp/>the<sp/>Changelog<sp/>file<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment">//<sp/>came<sp/>with<sp/>your<sp/>tarball<sp/>or<sp/>type<sp/>make<sp/>ChangeLog<sp/>if<sp/>you<sp/>are<sp/>building<sp/>from<sp/>git</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="comment">//========================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;config.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>USE_GCC_PRAGMAS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>implementation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stddef.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;math.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ctype.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;limits.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;float.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;goo/gfile.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;goo/gmem.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Object.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Stream.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Lexer.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Parser.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Dict.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Error.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ErrorCodes.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;XRef.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;PopplerCache.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Permission<sp/>bits</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Note<sp/>that<sp/>the<sp/>PDF<sp/>spec<sp/>uses<sp/>1<sp/>base<sp/>(eg<sp/>bit<sp/>3<sp/>is<sp/>1&lt;&lt;2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>permPrint<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(1&lt;&lt;2)<sp/><sp/>//<sp/>bit<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>permChange<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(1&lt;&lt;3)<sp/><sp/>//<sp/>bit<sp/>4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>permCopy<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(1&lt;&lt;4)<sp/><sp/>//<sp/>bit<sp/>5</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>permNotes<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(1&lt;&lt;5)<sp/><sp/>//<sp/>bit<sp/>6</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>permFillForm<sp/><sp/><sp/><sp/><sp/><sp/>(1&lt;&lt;8)<sp/><sp/>//<sp/>bit<sp/>9</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>permAccessibility<sp/>(1&lt;&lt;9)<sp/><sp/>//<sp/>bit<sp/>10</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>permAssemble<sp/><sp/><sp/><sp/><sp/><sp/>(1&lt;&lt;10)<sp/>//<sp/>bit<sp/>11</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>permHighResPrint<sp/><sp/>(1&lt;&lt;11)<sp/>//<sp/>bit<sp/>12</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>defPermFlags<sp/>0xfffc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>MULTITHREADED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>xrefLocker()<sp/><sp/><sp/>MutexLocker<sp/>locker(&amp;mutex)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>xrefCondLocker(X)<sp/><sp/>MutexLocker<sp/>locker(&amp;mutex,<sp/>(X))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>xrefLocker()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>xrefCondLocker(X)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ObjectStream</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85" refid="class_object_stream" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_object_stream" kindref="compound">ObjectStream</ref><sp/>{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>an<sp/>object<sp/>stream,<sp/>using<sp/>object<sp/>number<sp/>&lt;objStrNum&gt;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>generation<sp/>0.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><ref refid="class_object_stream" kindref="compound">ObjectStream</ref>(<ref refid="class_x_ref" kindref="compound">XRef</ref><sp/>*xref,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>objStrNumA,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>recursion<sp/>=<sp/>0);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/>GBool<sp/>isOk()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ok;<sp/>}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/>~<ref refid="class_object_stream" kindref="compound">ObjectStream</ref>();</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Return<sp/>the<sp/>object<sp/>number<sp/>of<sp/>this<sp/>object<sp/>stream.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>getObjStrNum()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>objStrNum;<sp/>}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>the<sp/>&lt;objIdx&gt;th<sp/>object<sp/>from<sp/>this<sp/>stream,<sp/>which<sp/>should<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>object<sp/>number<sp/>&lt;objNum&gt;,<sp/>generation<sp/>0.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>*getObject(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>objIdx,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>objNum,<sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>*obj);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>objStrNum;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>object<sp/>number<sp/>of<sp/>the<sp/>object<sp/>stream</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nObjects;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>number<sp/>of<sp/>objects<sp/>in<sp/>the<sp/>stream</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>*objs;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>objects<sp/>(length<sp/>=<sp/>nObjects)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*objNums;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>object<sp/>numbers<sp/>(length<sp/>=<sp/>nObjects)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/>GBool<sp/>ok;</highlight></codeline>
<codeline lineno="110"><highlight class="normal">};</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112" refid="class_object_stream_key" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_object_stream_key" kindref="compound">ObjectStreamKey</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="class_poppler_cache_key" kindref="compound">PopplerCacheKey</ref></highlight></codeline>
<codeline lineno="113"><highlight class="normal">{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_object_stream_key" kindref="compound">ObjectStreamKey</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num)<sp/>:<sp/>objStrNum(num)</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator==(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_poppler_cache_key" kindref="compound">PopplerCacheKey</ref><sp/>&amp;key)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="120"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_object_stream_key" kindref="compound">ObjectStreamKey</ref><sp/>*k<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal"><ref refid="class_object_stream_key" kindref="compound">ObjectStreamKey</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;key);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>objStrNum<sp/>==<sp/>k-&gt;objStrNum;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>objStrNum;</highlight></codeline>
<codeline lineno="126"><highlight class="normal">};</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128" refid="class_object_stream_item" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_object_stream_item" kindref="compound">ObjectStreamItem</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="class_poppler_cache_item" kindref="compound">PopplerCacheItem</ref></highlight></codeline>
<codeline lineno="129"><highlight class="normal">{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_object_stream_item" kindref="compound">ObjectStreamItem</ref>(<ref refid="class_object_stream" kindref="compound">ObjectStream</ref><sp/>*objStr)<sp/>:<sp/>objStream(objStr)</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>~<ref refid="class_object_stream_item" kindref="compound">ObjectStreamItem</ref>()</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>objStream;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_object_stream" kindref="compound">ObjectStream</ref><sp/>*objStream;</highlight></codeline>
<codeline lineno="141"><highlight class="normal">};</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal">ObjectStream::ObjectStream(<ref refid="class_x_ref" kindref="compound">XRef</ref><sp/>*xref,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>objStrNumA,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>recursion)<sp/>{</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><ref refid="class_stream" kindref="compound">Stream</ref><sp/>*str;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><ref refid="class_parser" kindref="compound">Parser</ref><sp/>*parser;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/>Goffset<sp/>*offsets;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>objStr,<sp/>obj1,<sp/>obj2;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/>Goffset<sp/>first;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/>objStrNum<sp/>=<sp/>objStrNumA;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/>nObjects<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/>objs<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/>objNums<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/>ok<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!xref-&gt;fetch(objStrNum,<sp/>0,<sp/>&amp;objStr,<sp/>recursion)-&gt;isStream())<sp/>{</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err1;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!objStr.streamGetDict()-&gt;lookup(</highlight><highlight class="stringliteral">&quot;N&quot;</highlight><highlight class="normal">,<sp/>&amp;obj1,<sp/>recursion)-&gt;isInt())<sp/>{</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err1;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/>nObjects<sp/>=<sp/>obj1.getInt();</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nObjects<sp/>&lt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err1;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/>objStr.streamGetDict()-&gt;lookup(</highlight><highlight class="stringliteral">&quot;First&quot;</highlight><highlight class="normal">,<sp/>&amp;obj1,<sp/>recursion);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!obj1.isInt()<sp/>&amp;&amp;<sp/>!obj1.isInt64())<sp/>{</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err1;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj1.isInt())</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>first<sp/>=<sp/>obj1.getInt();</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>first<sp/>=<sp/>obj1.getInt64();</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(first<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err1;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>is<sp/>an<sp/>arbitrary<sp/>limit<sp/>to<sp/>avoid<sp/>integer<sp/>overflow<sp/>problems</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>in<sp/>the<sp/>&apos;new<sp/>Object[nObjects]&apos;<sp/>call<sp/>(Acrobat<sp/>apparently<sp/>limits</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>object<sp/>streams<sp/>to<sp/>100-200<sp/>objects)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nObjects<sp/>&gt;<sp/>1000000)<sp/>{</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Too<sp/>many<sp/>objects<sp/>in<sp/>an<sp/>object<sp/>stream&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err1;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/>objs<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_object" kindref="compound">Object</ref>[nObjects];</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/>objNums<sp/>=<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)gmallocn(nObjects,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/>offsets<sp/>=<sp/>(Goffset<sp/>*)gmallocn(nObjects,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Goffset));</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>parse<sp/>the<sp/>header:<sp/>object<sp/>numbers<sp/>and<sp/>offsets</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/>objStr.streamReset();</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/>obj1.initNull();</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/>str<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_embed_stream" kindref="compound">EmbedStream</ref>(objStr.getStream(),<sp/>&amp;obj1,<sp/>gTrue,<sp/>first);</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/>parser<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_parser" kindref="compound">Parser</ref>(xref,<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_lexer" kindref="compound">Lexer</ref>(xref,<sp/>str),<sp/>gFalse);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nObjects;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/>parser-&gt;getObj(&amp;obj1);</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/>parser-&gt;getObj(&amp;obj2);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!obj1.isInt()<sp/>||<sp/>!(obj2.isInt()<sp/>||<sp/>obj2.isInt64()))<sp/>{</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>parser;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>gfree(offsets);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err1;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/>objNums[i]<sp/>=<sp/>obj1.getInt();</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj2.isInt())</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>offsets[i]<sp/>=<sp/>obj2.getInt();</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>offsets[i]<sp/>=<sp/>obj2.getInt64();</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(objNums[i]<sp/>&lt;<sp/>0<sp/>||<sp/>offsets[i]<sp/>&lt;<sp/>0<sp/>||</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/>(i<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>offsets[i]<sp/>&lt;<sp/>offsets[i-1]))<sp/>{</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>parser;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>gfree(offsets);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err1;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(str-&gt;getChar()<sp/>!=<sp/>EOF)<sp/>;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>parser;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>skip<sp/>to<sp/>the<sp/>first<sp/>object<sp/>-<sp/>this<sp/>shouldn&apos;t<sp/>be<sp/>necessary<sp/>because</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>First<sp/>key<sp/>is<sp/>supposed<sp/>to<sp/>be<sp/>equal<sp/>to<sp/>offsets[0],<sp/>but<sp/>just<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>case...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(Goffset<sp/>pos<sp/>=<sp/>first;<sp/>pos<sp/>&lt;<sp/>offsets[0];<sp/>++pos)<sp/>{</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/>objStr.getStream()-&gt;getChar();</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>parse<sp/>the<sp/>objects</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nObjects;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/>obj1.initNull();</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>==<sp/>nObjects<sp/>-<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>str<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_embed_stream" kindref="compound">EmbedStream</ref>(objStr.getStream(),<sp/>&amp;obj1,<sp/>gFalse,<sp/>0);</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>str<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_embed_stream" kindref="compound">EmbedStream</ref>(objStr.getStream(),<sp/>&amp;obj1,<sp/>gTrue,</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>offsets[i+1]<sp/>-<sp/>offsets[i]);</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/>parser<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_parser" kindref="compound">Parser</ref>(xref,<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_lexer" kindref="compound">Lexer</ref>(xref,<sp/>str),<sp/>gFalse);</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/>parser-&gt;getObj(&amp;objs[i]);</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(str-&gt;getChar()<sp/>!=<sp/>EOF)<sp/>;</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>parser;</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/>gfree(offsets);</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/>ok<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/>err1:</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/>objStr.free();</highlight></codeline>
<codeline lineno="255"><highlight class="normal">}</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal">ObjectStream::~ObjectStream()<sp/>{</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(objs)<sp/>{</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nObjects;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>objs[i].free();</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>objs;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/>gfree(objNums);</highlight></codeline>
<codeline lineno="267"><highlight class="normal">}</highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><ref refid="class_object" kindref="compound">Object</ref><sp/>*ObjectStream::getObject(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>objIdx,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>objNum,<sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>*obj)<sp/>{</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(objIdx<sp/>&lt;<sp/>0<sp/>||<sp/>objIdx<sp/>&gt;=<sp/>nObjects<sp/>||<sp/>objNum<sp/>!=<sp/>objNums[objIdx])<sp/>{</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>obj-&gt;initNull();</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>objs[objIdx].copy(obj);</highlight></codeline>
<codeline lineno="274"><highlight class="normal">}</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight><highlight class="comment">//<sp/>XRef</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>XRef::init()<sp/>{</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>MULTITHREADED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/>gInitMutex(&amp;mutex);</highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/>ok<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/>errCode<sp/>=<sp/>errNone;</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/>entries<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/>capacity<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/>size<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/>streamEnds<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/>streamEndsLen<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/>objStrs<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_poppler_cache" kindref="compound">PopplerCache</ref>(5);</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/>mainXRefEntriesOffset<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/>xRefStream<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/>scannedSpecialFlags<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/>encrypted<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/>permFlags<sp/>=<sp/>defPermFlags;</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/>ownerPasswordOk<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/>rootNum<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/>strOwner<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/>xrefReconstructed<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="301"><highlight class="normal">}</highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal">XRef::XRef()<sp/>{</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/>init();</highlight></codeline>
<codeline lineno="305"><highlight class="normal">}</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal">XRef::XRef(<ref refid="class_object" kindref="compound">Object</ref><sp/>*trailerDictA)<sp/>{</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/>init();</highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(trailerDictA-&gt;isDict())</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/>trailerDict.initDict(trailerDictA-&gt;getDict());</highlight></codeline>
<codeline lineno="312"><highlight class="normal">}</highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal">XRef::XRef(<ref refid="class_base_stream" kindref="compound">BaseStream</ref><sp/>*strA,<sp/>Goffset<sp/>pos,<sp/>Goffset<sp/>mainXRefEntriesOffsetA,<sp/>GBool<sp/>*wasReconstructed,<sp/>GBool<sp/>reconstruct)<sp/>{</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>obj;</highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/>init();</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/>mainXRefEntriesOffset<sp/>=<sp/>mainXRefEntriesOffsetA;</highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>read<sp/>the<sp/>trailer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/>str<sp/>=<sp/>strA;</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/>start<sp/>=<sp/>str-&gt;getStart();</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/>prevXRefOffset<sp/>=<sp/>mainXRefOffset<sp/>=<sp/>pos;</highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(reconstruct<sp/>&amp;&amp;<sp/>!(ok<sp/>=<sp/>constructXRef(wasReconstructed)))</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/>errCode<sp/>=<sp/>errDamaged;</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>there<sp/>was<sp/>a<sp/>problem<sp/>with<sp/>the<sp/>&apos;startxref&apos;<sp/>position,<sp/>try<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>reconstruct<sp/>the<sp/>xref<sp/>table</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(prevXRefOffset<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(ok<sp/>=<sp/>constructXRef(wasReconstructed)))<sp/>{</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>errCode<sp/>=<sp/>errDamaged;</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>read<sp/>the<sp/>xref<sp/>table</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;Goffset&gt;<sp/>followedXRefStm;</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>readXRef(&amp;prevXRefOffset,<sp/>&amp;followedXRefStm,<sp/>NULL);</highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>there<sp/>was<sp/>a<sp/>problem<sp/>with<sp/>the<sp/>xref<sp/>table,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>try<sp/>to<sp/>reconstruct<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ok)<sp/>{</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(ok<sp/>=<sp/>constructXRef(wasReconstructed)))<sp/>{</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>errCode<sp/>=<sp/>errDamaged;</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>size<sp/>to<sp/>(at<sp/>least)<sp/>the<sp/>size<sp/>specified<sp/>in<sp/>trailer<sp/>dict</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/>trailerDict.dictLookupNF(</highlight><highlight class="stringliteral">&quot;Size&quot;</highlight><highlight class="normal">,<sp/>&amp;obj);</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!obj.isInt())<sp/>{</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxWarning,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;No<sp/>valid<sp/>XRef<sp/>size<sp/>in<sp/>trailer&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj.getInt()<sp/>&gt;<sp/>size)<sp/>{</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(resize(obj.getInt())<sp/>!=<sp/>obj.getInt())<sp/>{</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(ok<sp/>=<sp/>constructXRef(wasReconstructed)))<sp/>{</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>obj.free();</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>errCode<sp/>=<sp/>errDamaged;</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/>obj.free();</highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>the<sp/>root<sp/>dictionary<sp/>(catalog)<sp/>object</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/>trailerDict.dictLookupNF(</highlight><highlight class="stringliteral">&quot;Root&quot;</highlight><highlight class="normal">,<sp/>&amp;obj);</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj.isRef())<sp/>{</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rootNum<sp/>=<sp/>obj.getRefNum();</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rootGen<sp/>=<sp/>obj.getRefGen();</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj.free();</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj.free();</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(ok<sp/>=<sp/>constructXRef(wasReconstructed)))<sp/>{</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>errCode<sp/>=<sp/>errDamaged;</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>now<sp/>set<sp/>the<sp/>trailer<sp/>dictionary&apos;s<sp/>xref<sp/>pointer<sp/>so<sp/>we<sp/>can<sp/>fetch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>indirect<sp/>objects<sp/>from<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/>trailerDict.getDict()-&gt;setXRef(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="389"><highlight class="normal">}</highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal">XRef::~XRef()<sp/>{</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;size;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>entries[i].obj.free<sp/>();</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/>gfree(entries);</highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/>trailerDict.free();</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(streamEnds)<sp/>{</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/>gfree(streamEnds);</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(objStrs)<sp/>{</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>objStrs;</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strOwner)<sp/>{</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>str;</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>MULTITHREADED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/>gDestroyMutex(&amp;mutex);</highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal">}</highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"><ref refid="class_x_ref" kindref="compound">XRef</ref><sp/>*XRef::copy()<sp/>{</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><ref refid="class_x_ref" kindref="compound">XRef</ref><sp/>*xref<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_x_ref" kindref="compound">XRef</ref>();</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/>xref-&gt;str<sp/>=<sp/>str-&gt;copy();</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/>xref-&gt;strOwner<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/>xref-&gt;encrypted<sp/>=<sp/>encrypted;</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/>xref-&gt;permFlags<sp/>=<sp/>permFlags;</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/>xref-&gt;ownerPasswordOk<sp/>=<sp/>ownerPasswordOk;</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/>xref-&gt;rootGen<sp/>=<sp/>rootGen;</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/>xref-&gt;rootNum<sp/>=<sp/>rootNum;</highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/>xref-&gt;start<sp/>=<sp/>start;</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/>xref-&gt;prevXRefOffset<sp/>=<sp/>prevXRefOffset;</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/>xref-&gt;mainXRefEntriesOffset<sp/>=<sp/>mainXRefEntriesOffset;</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/>xref-&gt;xRefStream<sp/>=<sp/>xRefStream;</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/>trailerDict.copy(&amp;xref-&gt;trailerDict);</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/>xref-&gt;encAlgorithm<sp/>=<sp/>encAlgorithm;</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/>xref-&gt;encRevision<sp/>=<sp/>encRevision;</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/>xref-&gt;encVersion<sp/>=<sp/>encVersion;</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/>xref-&gt;permFlags<sp/>=<sp/>permFlags;</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/>xref-&gt;keyLength<sp/>=<sp/>keyLength;</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/>xref-&gt;permFlags<sp/>=<sp/>permFlags;</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>32;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/>xref-&gt;fileKey[i]<sp/>=<sp/>fileKey[i];</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(xref-&gt;reserve(size)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;unable<sp/>to<sp/>allocate<sp/>{0:d}<sp/>entries&quot;</highlight><highlight class="normal">,<sp/>size);</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>xref;</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/>xref-&gt;size<sp/>=<sp/>size;</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>size;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/>xref-&gt;entries[i].offset<sp/>=<sp/>entries[i].offset;</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/>xref-&gt;entries[i].type<sp/>=<sp/>entries[i].type;</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/>xref-&gt;entries[i].obj.initNull<sp/>();</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/>xref-&gt;entries[i].flags<sp/>=<sp/>entries[i].flags;</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/>xref-&gt;entries[i].gen<sp/>=<sp/>entries[i].gen;</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/>xref-&gt;streamEndsLen<sp/>=<sp/>streamEndsLen;</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(streamEndsLen<sp/><sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/>xref-&gt;streamEnds<sp/>=<sp/>(Goffset<sp/>*)gmalloc(streamEndsLen<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Goffset));</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>streamEndsLen;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xref-&gt;streamEnds[i]<sp/>=<sp/>streamEnds[i];</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>xref;</highlight></codeline>
<codeline lineno="458"><highlight class="normal">}</highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>XRef::reserve(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>newSize)</highlight></codeline>
<codeline lineno="461"><highlight class="normal">{</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(newSize<sp/>&gt;<sp/>capacity)<sp/>{</highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>realNewSize;</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(realNewSize<sp/>=<sp/>capacity<sp/>?<sp/>2<sp/>*<sp/>capacity<sp/>:<sp/>1024;</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newSize<sp/>&gt;<sp/>realNewSize<sp/>&amp;&amp;<sp/>realNewSize<sp/>&gt;<sp/>0;</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>realNewSize<sp/>&lt;&lt;=<sp/>1)<sp/>;</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((realNewSize<sp/>&lt;<sp/>0)<sp/>||</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(realNewSize<sp/>&gt;=<sp/>INT_MAX<sp/>/<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_x_ref_entry" kindref="compound">XRefEntry</ref>)))<sp/>{</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p<sp/>=<sp/>greallocn_checkoverflow(entries,<sp/>realNewSize,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_x_ref_entry" kindref="compound">XRefEntry</ref>));</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/>entries<sp/>=<sp/>(<ref refid="struct_x_ref_entry" kindref="compound">XRefEntry</ref><sp/>*)<sp/>p;</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/>capacity<sp/>=<sp/>realNewSize;</highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>capacity;</highlight></codeline>
<codeline lineno="484"><highlight class="normal">}</highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>XRef::resize(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>newSize)</highlight></codeline>
<codeline lineno="487"><highlight class="normal">{</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(newSize<sp/>&gt;<sp/>size)<sp/>{</highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(reserve(newSize)<sp/>&lt;<sp/>newSize)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>size;</highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>size;<sp/>i<sp/>&lt;<sp/>newSize;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>entries[i].offset<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>entries[i].type<sp/>=<sp/>xrefEntryNone;</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>entries[i].obj.initNull<sp/>();</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>entries[i].flags<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>entries[i].gen<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>newSize;<sp/>i<sp/>&lt;<sp/>size;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>entries[i].obj.free<sp/>();</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/>size<sp/>=<sp/>newSize;</highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>size;</highlight></codeline>
<codeline lineno="508"><highlight class="normal">}</highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Read<sp/>one<sp/>xref<sp/>table<sp/>section.<sp/><sp/>Also<sp/>reads<sp/>the<sp/>associated<sp/>trailer</highlight></codeline>
<codeline lineno="511"><highlight class="comment"><sp/>*<sp/>dictionary,<sp/>and<sp/>returns<sp/>the<sp/>prev<sp/>pointer<sp/>(if<sp/>any).</highlight></codeline>
<codeline lineno="512"><highlight class="comment"><sp/>*<sp/>Arguments:</highlight></codeline>
<codeline lineno="513"><highlight class="comment"><sp/>*<sp/><sp/><sp/>pos<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Points<sp/>to<sp/>a<sp/>Goffset<sp/>containing<sp/>the<sp/>offset<sp/>of<sp/>the<sp/>XRef</highlight></codeline>
<codeline lineno="514"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>section<sp/>to<sp/>be<sp/>read.<sp/>If<sp/>a<sp/>prev<sp/>pointer<sp/>is<sp/>found,<sp/>*pos<sp/>is</highlight></codeline>
<codeline lineno="515"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>updated<sp/>with<sp/>its<sp/>value</highlight></codeline>
<codeline lineno="516"><highlight class="comment"><sp/>*<sp/><sp/><sp/>followedXRefStm<sp/><sp/><sp/><sp/>Used<sp/>in<sp/>case<sp/>of<sp/>nested<sp/>readXRef<sp/>calls<sp/>to<sp/>spot<sp/>circular</highlight></codeline>
<codeline lineno="517"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>references<sp/>in<sp/>XRefStm<sp/>pointers</highlight></codeline>
<codeline lineno="518"><highlight class="comment"><sp/>*<sp/><sp/><sp/>xrefStreamObjsNum<sp/><sp/>If<sp/>not<sp/>NULL,<sp/>every<sp/>time<sp/>a<sp/>XRef<sp/>stream<sp/>is<sp/>encountered,</highlight></codeline>
<codeline lineno="519"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>its<sp/>object<sp/>number<sp/>is<sp/>appended</highlight></codeline>
<codeline lineno="520"><highlight class="comment"><sp/>*<sp/>Return<sp/>value:</highlight></codeline>
<codeline lineno="521"><highlight class="comment"><sp/>*<sp/><sp/><sp/>gTrue<sp/>if<sp/>a<sp/>prev<sp/>pointer<sp/>is<sp/>found,<sp/>otherwise<sp/>gFalse</highlight></codeline>
<codeline lineno="522"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="523"><highlight class="normal">GBool<sp/>XRef::readXRef(Goffset<sp/>*pos,<sp/>std::vector&lt;Goffset&gt;<sp/>*followedXRefStm,<sp/>std::vector&lt;int&gt;<sp/>*xrefStreamObjsNum)<sp/>{</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><ref refid="class_parser" kindref="compound">Parser</ref><sp/>*parser;</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>obj;</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/>GBool<sp/>more;</highlight></codeline>
<codeline lineno="527"><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>start<sp/>up<sp/>a<sp/>parser,<sp/>parse<sp/>one<sp/>token</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/>obj.initNull();</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/>parser<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_parser" kindref="compound">Parser</ref>(NULL,</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_lexer" kindref="compound">Lexer</ref>(NULL,</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str-&gt;makeSubStream(start<sp/>+<sp/>*pos,<sp/>gFalse,<sp/>0,<sp/>&amp;obj)),</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gTrue);</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/>parser-&gt;getObj(&amp;obj,<sp/>gTrue);</highlight></codeline>
<codeline lineno="535"><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>parse<sp/>an<sp/>old-style<sp/>xref<sp/>table</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj.isCmd(</highlight><highlight class="stringliteral">&quot;xref&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/>obj.free();</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/>more<sp/>=<sp/>readXRefTable(parser,<sp/>pos,<sp/>followedXRefStm,<sp/>xrefStreamObjsNum);</highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>parse<sp/>an<sp/>xref<sp/>stream</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj.isInt())<sp/>{</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>objNum<sp/>=<sp/>obj.getInt();</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/>obj.free();</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!parser-&gt;getObj(&amp;obj,<sp/>gTrue)-&gt;isInt())<sp/>{</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err1;</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/>obj.free();</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!parser-&gt;getObj(&amp;obj,<sp/>gTrue)-&gt;isCmd(</highlight><highlight class="stringliteral">&quot;obj&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err1;</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/>obj.free();</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!parser-&gt;getObj(&amp;obj)-&gt;isStream())<sp/>{</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err1;</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(trailerDict.isNone())<sp/>{</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xRefStream<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(xrefStreamObjsNum)<sp/>{</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xrefStreamObjsNum-&gt;push_back(objNum);</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/>more<sp/>=<sp/>readXRefStream(obj.getStream(),<sp/>pos);</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/>obj.free();</highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err1;</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>parser;</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>more;</highlight></codeline>
<codeline lineno="571"><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/>err1:</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/>obj.free();</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>parser;</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/>ok<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="577"><highlight class="normal">}</highlight></codeline>
<codeline lineno="578"><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="normal">GBool<sp/>XRef::readXRefTable(<ref refid="class_parser" kindref="compound">Parser</ref><sp/>*parser,<sp/>Goffset<sp/>*pos,<sp/>std::vector&lt;Goffset&gt;<sp/>*followedXRefStm,<sp/>std::vector&lt;int&gt;<sp/>*xrefStreamObjsNum)<sp/>{</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><ref refid="struct_x_ref_entry" kindref="compound">XRefEntry</ref><sp/>entry;</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/>GBool<sp/>more;</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>obj,<sp/>obj2;</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/>Goffset<sp/>pos2;</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>first,<sp/>n,<sp/>i;</highlight></codeline>
<codeline lineno="585"><highlight class="normal"></highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(1)<sp/>{</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/>parser-&gt;getObj(&amp;obj,<sp/>gTrue);</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj.isCmd(</highlight><highlight class="stringliteral">&quot;trailer&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj.free();</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!obj.isInt())<sp/>{</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err1;</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/>first<sp/>=<sp/>obj.getInt();</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/>obj.free();</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!parser-&gt;getObj(&amp;obj,<sp/>gTrue)-&gt;isInt())<sp/>{</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err1;</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/>n<sp/>=<sp/>obj.getInt();</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/>obj.free();</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(first<sp/>&lt;<sp/>0<sp/>||<sp/>n<sp/>&lt;<sp/>0<sp/>||<sp/>first<sp/>+<sp/>n<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err0;</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(first<sp/>+<sp/>n<sp/>&gt;<sp/>size)<sp/>{</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(resize(first<sp/>+<sp/>n)<sp/>!=<sp/>first<sp/>+<sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>&apos;obj&apos;<sp/>parameters&apos;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err0;</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>first;<sp/>i<sp/>&lt;<sp/>first<sp/>+<sp/>n;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>parser-&gt;getObj(&amp;obj,<sp/>gTrue);</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj.isInt())<sp/>{</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/>entry.offset<sp/>=<sp/>obj.getInt();</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj.isInt64())<sp/>{</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/>entry.offset<sp/>=<sp/>obj.getInt64();</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err1;</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj.free();</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!parser-&gt;getObj(&amp;obj,<sp/>gTrue)-&gt;isInt())<sp/>{</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err1;</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>entry.gen<sp/>=<sp/>obj.getInt();</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>entry.obj.initNull<sp/>();</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>entry.flags<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj.free();</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>parser-&gt;getObj(&amp;obj,<sp/>gTrue);</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj.isCmd(</highlight><highlight class="stringliteral">&quot;n&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/>entry.type<sp/>=<sp/>xrefEntryUncompressed;</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj.isCmd(</highlight><highlight class="stringliteral">&quot;f&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/>entry.type<sp/>=<sp/>xrefEntryFree;</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err1;</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj.free();</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(entries[i].offset<sp/>==<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/>entries[i]<sp/>=<sp/>entry;</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>PDF<sp/>files<sp/>of<sp/>patents<sp/>from<sp/>the<sp/>IBM<sp/>Intellectual<sp/>Property</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Network<sp/>have<sp/>a<sp/>bug:<sp/>the<sp/>xref<sp/>table<sp/>claims<sp/>to<sp/>start<sp/>at<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>instead<sp/>of<sp/>0.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>==<sp/>1<sp/>&amp;&amp;<sp/>first<sp/>==<sp/>1<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>entries[1].offset<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>entries[1].gen<sp/>==<sp/>65535<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>entries[1].type<sp/>==<sp/>xrefEntryFree)<sp/>{</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>=<sp/>first<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>entries[0]<sp/>=<sp/>entries[1];</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>entries[1].offset<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="652"><highlight class="normal"></highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>read<sp/>the<sp/>trailer<sp/>dictionary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!parser-&gt;getObj(&amp;obj)-&gt;isDict())<sp/>{</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err1;</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="657"><highlight class="normal"></highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>the<sp/>&apos;Prev&apos;<sp/>pointer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/>obj.getDict()-&gt;lookupNF(</highlight><highlight class="stringliteral">&quot;Prev&quot;</highlight><highlight class="normal">,<sp/>&amp;obj2);</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj2.isInt()<sp/>||<sp/>obj2.isInt64())<sp/>{</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj2.isInt())</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pos2<sp/>=<sp/>obj2.getInt();</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pos2<sp/>=<sp/>obj2.getInt64();</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pos2<sp/>!=<sp/>*pos)<sp/>{</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*pos<sp/>=<sp/>pos2;</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>more<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxWarning,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Infinite<sp/>loop<sp/>in<sp/>xref<sp/>table&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>more<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj2.isRef())<sp/>{</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>certain<sp/>buggy<sp/>PDF<sp/>generators<sp/>generate<sp/>&quot;/Prev<sp/>NNN<sp/>0<sp/>R&quot;<sp/>instead</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>of<sp/>&quot;/Prev<sp/>NNN&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/>pos2<sp/>=<sp/>(Guint)obj2.getRefNum();</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pos2<sp/>!=<sp/>*pos)<sp/>{</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*pos<sp/>=<sp/>pos2;</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>more<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxWarning,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Infinite<sp/>loop<sp/>in<sp/>xref<sp/>table&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>more<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/>more<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="687"><highlight class="normal"></highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>save<sp/>the<sp/>first<sp/>trailer<sp/>dictionary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(trailerDict.isNone())<sp/>{</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/>obj.copy(&amp;trailerDict);</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="692"><highlight class="normal"></highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>for<sp/>an<sp/>&apos;XRefStm&apos;<sp/>key</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/>obj.getDict()-&gt;lookup(</highlight><highlight class="stringliteral">&quot;XRefStm&quot;</highlight><highlight class="normal">,<sp/>&amp;obj2);</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj2.isInt()<sp/>||<sp/>obj2.isInt64())<sp/>{</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj2.isInt())</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pos2<sp/>=<sp/>obj2.getInt();</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pos2<sp/>=<sp/>obj2.getInt64();</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>ok<sp/>==<sp/>gTrue<sp/>&amp;&amp;<sp/>i<sp/>&lt;<sp/>followedXRefStm-&gt;size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(followedXRefStm-&gt;at(i)<sp/>==<sp/>pos2)<sp/>{</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ok<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ok)<sp/>{</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>followedXRefStm-&gt;push_back(pos2);</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>readXRef(&amp;pos2,<sp/>followedXRefStm,<sp/>xrefStreamObjsNum);</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ok)<sp/>{</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err1;</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="715"><highlight class="normal"></highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/>obj.free();</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>more;</highlight></codeline>
<codeline lineno="718"><highlight class="normal"></highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/>err1:</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/>obj.free();</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/>err0:</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/>ok<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="724"><highlight class="normal">}</highlight></codeline>
<codeline lineno="725"><highlight class="normal"></highlight></codeline>
<codeline lineno="726"><highlight class="normal">GBool<sp/>XRef::readXRefStream(<ref refid="class_stream" kindref="compound">Stream</ref><sp/>*xrefStr,<sp/>Goffset<sp/>*pos)<sp/>{</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><ref refid="class_dict" kindref="compound">Dict</ref><sp/>*dict;</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>w[3];</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/>GBool<sp/>more;</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>obj,<sp/>obj2,<sp/>idx;</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>newSize,<sp/>first,<sp/>n,<sp/>i;</highlight></codeline>
<codeline lineno="732"><highlight class="normal"></highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/>dict<sp/>=<sp/>xrefStr-&gt;getDict();</highlight></codeline>
<codeline lineno="734"><highlight class="normal"></highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!dict-&gt;lookupNF(</highlight><highlight class="stringliteral">&quot;Size&quot;</highlight><highlight class="normal">,<sp/>&amp;obj)-&gt;isInt())<sp/>{</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err1;</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/>newSize<sp/>=<sp/>obj.getInt();</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/>obj.free();</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(newSize<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err1;</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(newSize<sp/>&gt;<sp/>size)<sp/>{</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(resize(newSize)<sp/>!=<sp/>newSize)<sp/>{</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>&apos;size&apos;<sp/>parameter&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err0;</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="749"><highlight class="normal"></highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!dict-&gt;lookupNF(</highlight><highlight class="stringliteral">&quot;W&quot;</highlight><highlight class="normal">,<sp/>&amp;obj)-&gt;isArray()<sp/>||</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj.arrayGetLength()<sp/>&lt;<sp/>3)<sp/>{</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err1;</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>3;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!obj.arrayGet(i,<sp/>&amp;obj2)-&gt;isInt())<sp/>{</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err1;</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/>w[i]<sp/>=<sp/>obj2.getInt();</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(w[i]<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err1;</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/>obj.free();</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(w[0]<sp/>&gt;<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>||<sp/>w[1]<sp/>&gt;<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>||<sp/>w[2]<sp/>&gt;<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err1;</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="769"><highlight class="normal"></highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/>xrefStr-&gt;reset();</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/>dict-&gt;lookupNF(</highlight><highlight class="stringliteral">&quot;Index&quot;</highlight><highlight class="normal">,<sp/>&amp;idx);</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(idx.isArray())<sp/>{</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i+1<sp/>&lt;<sp/>idx.arrayGetLength();<sp/>i<sp/>+=<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!idx.arrayGet(i,<sp/>&amp;obj)-&gt;isInt())<sp/>{</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/>idx.free();</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err1;</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>first<sp/>=<sp/>obj.getInt();</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj.free();</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!idx.arrayGet(i+1,<sp/>&amp;obj)-&gt;isInt())<sp/>{</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/>idx.free();</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err1;</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>obj.getInt();</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj.free();</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(first<sp/>&lt;<sp/>0<sp/>||<sp/>n<sp/>&lt;<sp/>0<sp/>||</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>!readXRefStreamSection(xrefStr,<sp/>w,<sp/>first,<sp/>n))<sp/>{</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/>idx.free();</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err0;</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!readXRefStreamSection(xrefStr,<sp/>w,<sp/>0,<sp/>newSize))<sp/>{</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>idx.free();</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err0;</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/>idx.free();</highlight></codeline>
<codeline lineno="799"><highlight class="normal"></highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/>dict-&gt;lookupNF(</highlight><highlight class="stringliteral">&quot;Prev&quot;</highlight><highlight class="normal">,<sp/>&amp;obj);</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj.isInt())<sp/>{</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/>*pos<sp/>=<sp/>obj.getInt();</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/>more<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj.isInt64())<sp/>{</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/>*pos<sp/>=<sp/>obj.getInt64();</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/>more<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/>more<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/>obj.free();</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(trailerDict.isNone())<sp/>{</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/>trailerDict.initDict(dict);</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="814"><highlight class="normal"></highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>more;</highlight></codeline>
<codeline lineno="816"><highlight class="normal"></highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/>err1:</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/>obj.free();</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/>err0:</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/>ok<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="822"><highlight class="normal">}</highlight></codeline>
<codeline lineno="823"><highlight class="normal"></highlight></codeline>
<codeline lineno="824"><highlight class="normal">GBool<sp/>XRef::readXRefStreamSection(<ref refid="class_stream" kindref="compound">Stream</ref><sp/>*xrefStr,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*w,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>first,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>offset;</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>type,<sp/>gen,<sp/>c,<sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="827"><highlight class="normal"></highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(first<sp/>+<sp/>n<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(first<sp/>+<sp/>n<sp/>&gt;<sp/>size)<sp/>{</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(resize(first<sp/>+<sp/>n)<sp/>!=<sp/>size)<sp/>{</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>&apos;size&apos;<sp/>inside<sp/>xref<sp/>table&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(first<sp/>+<sp/>n<sp/>&gt;<sp/>size)<sp/>{</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>&apos;first&apos;<sp/>or<sp/>&apos;n&apos;<sp/>inside<sp/>xref<sp/>table&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>first;<sp/>i<sp/>&lt;<sp/>first<sp/>+<sp/>n;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(w[0]<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>type<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(type<sp/>=<sp/>0,<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>w[0];<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((c<sp/>=<sp/>xrefStr-&gt;getChar())<sp/>==<sp/>EOF)<sp/>{</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/>type<sp/>=<sp/>(type<sp/>&lt;&lt;<sp/>8)<sp/>+<sp/>c;</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(offset<sp/>=<sp/>0,<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>w[1];<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((c<sp/>=<sp/>xrefStr-&gt;getChar())<sp/>==<sp/>EOF)<sp/>{</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>offset<sp/>=<sp/>(offset<sp/>&lt;&lt;<sp/>8)<sp/>+<sp/>c;</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(offset<sp/>&gt;<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)GoffsetMax())<sp/>{</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Offset<sp/>inside<sp/>xref<sp/>table<sp/>too<sp/>large<sp/>for<sp/>fseek&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(gen<sp/>=<sp/>0,<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>w[2];<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((c<sp/>=<sp/>xrefStr-&gt;getChar())<sp/>==<sp/>EOF)<sp/>{</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>gen<sp/>=<sp/>(gen<sp/>&lt;&lt;<sp/>8)<sp/>+<sp/>c;</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(entries[i].offset<sp/>==<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(type)<sp/>{</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/>entries[i].offset<sp/>=<sp/>offset;</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/>entries[i].gen<sp/>=<sp/>gen;</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/>entries[i].type<sp/>=<sp/>xrefEntryFree;</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/>entries[i].offset<sp/>=<sp/>offset;</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/>entries[i].gen<sp/>=<sp/>gen;</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/>entries[i].type<sp/>=<sp/>xrefEntryUncompressed;</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/>entries[i].offset<sp/>=<sp/>offset;</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/>entries[i].gen<sp/>=<sp/>gen;</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/>entries[i].type<sp/>=<sp/>xrefEntryCompressed;</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="890"><highlight class="normal"></highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gTrue;</highlight></codeline>
<codeline lineno="892"><highlight class="normal">}</highlight></codeline>
<codeline lineno="893"><highlight class="normal"></highlight></codeline>
<codeline lineno="894"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Attempt<sp/>to<sp/>construct<sp/>an<sp/>xref<sp/>table<sp/>for<sp/>a<sp/>damaged<sp/>file.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="895"><highlight class="normal">GBool<sp/>XRef::constructXRef(GBool<sp/>*wasReconstructed,<sp/>GBool<sp/>needCatalogDict)<sp/>{</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><ref refid="class_parser" kindref="compound">Parser</ref><sp/>*parser;</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>newTrailerDict,<sp/>obj;</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buf[256];</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/>Goffset<sp/>pos;</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num,<sp/>gen;</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>newSize;</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>streamEndsSize;</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*p;</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/>GBool<sp/>gotRoot;</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>token<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>oneCycle<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>offset<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="908"><highlight class="normal"></highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/>gfree(entries);</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/>capacity<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/>size<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/>entries<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="913"><highlight class="normal"></highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/>gotRoot<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/>streamEndsLen<sp/>=<sp/>streamEndsSize<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="916"><highlight class="normal"></highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(wasReconstructed)</highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/>*wasReconstructed<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="921"><highlight class="normal"></highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/>str-&gt;reset();</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(1)<sp/>{</highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/>pos<sp/>=<sp/>str-&gt;getPos();</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!str-&gt;getLine(buf,<sp/>256))<sp/>{</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/>p<sp/>=<sp/>buf;</highlight></codeline>
<codeline lineno="929"><highlight class="normal"></highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>skip<sp/>whitespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*p<sp/>&amp;&amp;<sp/>Lexer::isSpace(*p<sp/>&amp;<sp/>0xff))<sp/>++p;</highlight></codeline>
<codeline lineno="932"><highlight class="normal"></highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/>oneCycle<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/>offset<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="935"><highlight class="normal"></highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(<sp/>(<sp/>token<sp/>=<sp/>strstr(<sp/>p,<sp/></highlight><highlight class="stringliteral">&quot;endobj&quot;</highlight><highlight class="normal"><sp/>)<sp/>)<sp/>||<sp/>oneCycle<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>oneCycle<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="938"><highlight class="normal"></highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>token<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oneCycle<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>token[0]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;<sp/></highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>offset<sp/>=<sp/>token<sp/>-<sp/>p;</highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="944"><highlight class="normal"></highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>got<sp/>trailer<sp/>dictionary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!strncmp(p,<sp/></highlight><highlight class="stringliteral">&quot;trailer&quot;</highlight><highlight class="normal">,<sp/>7))<sp/>{</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>obj.initNull();</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parser<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_parser" kindref="compound">Parser</ref>(NULL,</highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_lexer" kindref="compound">Lexer</ref>(NULL,</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str-&gt;makeSubStream(pos<sp/>+<sp/>7,<sp/>gFalse,<sp/>0,<sp/>&amp;obj)),</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gFalse);</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parser-&gt;getObj(&amp;newTrailerDict);</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(newTrailerDict.isDict())<sp/>{</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>newTrailerDict.dictLookupNF(</highlight><highlight class="stringliteral">&quot;Root&quot;</highlight><highlight class="normal">,<sp/>&amp;obj);</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj.isRef()<sp/>&amp;&amp;<sp/>(!gotRoot<sp/>||<sp/>!needCatalogDict)<sp/>&amp;&amp;<sp/>rootNum<sp/>!=<sp/>obj.getRefNum())<sp/>{</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rootNum<sp/>=<sp/>obj.getRefNum();</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rootGen<sp/>=<sp/>obj.getRefGen();</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!trailerDict.isNone())<sp/>{</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>trailerDict.free();</highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newTrailerDict.copy(&amp;trailerDict);</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gotRoot<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj.free();</highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newTrailerDict.free();</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>parser;</highlight></codeline>
<codeline lineno="968"><highlight class="normal"></highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>look<sp/>for<sp/>object</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isdigit(*p<sp/>&amp;<sp/>0xff))<sp/>{</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>num<sp/>=<sp/>atoi(p);</highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(num<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++p;</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*p<sp/>&amp;&amp;<sp/>isdigit(*p<sp/>&amp;<sp/>0xff));</highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((*p<sp/>&amp;<sp/>0xff)<sp/>==<sp/>0<sp/>||<sp/>isspace(*p<sp/>&amp;<sp/>0xff))<sp/>{</highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((*p<sp/>&amp;<sp/>0xff)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//new<sp/>line,<sp/>continue<sp/>with<sp/>next<sp/>line!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str-&gt;getLine(buf,<sp/>256);</highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>buf<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++p;</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*p<sp/>&amp;&amp;<sp/>isspace(*p<sp/>&amp;<sp/>0xff));</highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isdigit(*p<sp/>&amp;<sp/>0xff))<sp/>{</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gen<sp/>=<sp/>atoi(p);</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++p;</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*p<sp/>&amp;&amp;<sp/>isdigit(*p<sp/>&amp;<sp/>0xff));</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((*p<sp/>&amp;<sp/>0xff)<sp/>==<sp/>0<sp/>||<sp/>isspace(*p<sp/>&amp;<sp/>0xff))<sp/>{</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((*p<sp/>&amp;<sp/>0xff)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//new<sp/>line,<sp/>continue<sp/>with<sp/>next<sp/>line!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str-&gt;getLine(buf,<sp/>256);</highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>buf<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++p;</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*p<sp/>&amp;&amp;<sp/>isspace(*p<sp/>&amp;<sp/>0xff));</highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!strncmp(p,<sp/></highlight><highlight class="stringliteral">&quot;obj&quot;</highlight><highlight class="normal">,<sp/>3))<sp/>{</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(num<sp/>&gt;=<sp/>size)<sp/>{</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newSize<sp/>=<sp/>(num<sp/>+<sp/>1<sp/>+<sp/>255)<sp/>&amp;<sp/>~255;</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(newSize<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Bad<sp/>object<sp/>number&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(resize(newSize)<sp/>!=<sp/>newSize)<sp/>{</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>&apos;obj&apos;<sp/>parameters&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(entries[num].type<sp/>==<sp/>xrefEntryFree<sp/>||</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gen<sp/>&gt;=<sp/>entries[num].gen)<sp/>{</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>entries[num].offset<sp/>=<sp/>pos<sp/>-<sp/>start;</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>entries[num].gen<sp/>=<sp/>gen;</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>entries[num].type<sp/>=<sp/>xrefEntryUncompressed;</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"></highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!strncmp(p,<sp/></highlight><highlight class="stringliteral">&quot;endstream&quot;</highlight><highlight class="normal">,<sp/>9))<sp/>{</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(streamEndsLen<sp/>==<sp/>streamEndsSize)<sp/>{</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>streamEndsSize<sp/>+=<sp/>64;</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(streamEndsSize<sp/>&gt;=<sp/>INT_MAX<sp/>/<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>&apos;endstream&apos;<sp/>parameter.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>streamEnds<sp/>=<sp/>(Goffset<sp/>*)greallocn(streamEnds,</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>streamEndsSize,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Goffset));</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>streamEnds[streamEndsLen++]<sp/>=<sp/>pos;</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>token<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>token<sp/>+<sp/>6;</highlight><highlight class="comment">//<sp/>strlen(<sp/>&quot;endobj&quot;<sp/>)<sp/>=<sp/>6</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pos<sp/>+=<sp/>offset<sp/>+<sp/>6;</highlight><highlight class="comment">//<sp/>strlen(<sp/>&quot;endobj&quot;<sp/>)<sp/>=<sp/>6</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*p<sp/>&amp;&amp;<sp/>Lexer::isSpace(*p<sp/>&amp;<sp/>0xff))<sp/>{</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++p;</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++pos;</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"></highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(gotRoot)</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gTrue;</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"></highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/>error(errSyntaxError,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Couldn&apos;t<sp/>find<sp/>trailer<sp/>dictionary&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="1051"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"></highlight></codeline>
<codeline lineno="1053"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>XRef::setEncryption(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>permFlagsA,<sp/>GBool<sp/>ownerPasswordOkA,</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Guchar<sp/>*fileKeyA,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>keyLengthA,</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>encVersionA,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>encRevisionA,</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CryptAlgorithm<sp/>encAlgorithmA)<sp/>{</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"></highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/>encrypted<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/>permFlags<sp/>=<sp/>permFlagsA;</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/>ownerPasswordOk<sp/>=<sp/>ownerPasswordOkA;</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(keyLengthA<sp/>&lt;=<sp/>32)<sp/>{</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/><sp/><sp/>keyLength<sp/>=<sp/>keyLengthA;</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/><sp/><sp/>keyLength<sp/>=<sp/>32;</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>keyLength;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/>fileKey[i]<sp/>=<sp/>fileKeyA[i];</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/>encVersion<sp/>=<sp/>encVersionA;</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/>encRevision<sp/>=<sp/>encRevisionA;</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/>encAlgorithm<sp/>=<sp/>encAlgorithmA;</highlight></codeline>
<codeline lineno="1073"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"></highlight></codeline>
<codeline lineno="1075"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>XRef::getEncryptionParameters(Guchar<sp/>**fileKeyA,<sp/>CryptAlgorithm<sp/>*encAlgorithmA,</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*keyLengthA)<sp/>{</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(encrypted)<sp/>{</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/><sp/><sp/>*fileKeyA<sp/>=<sp/>fileKey;</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/><sp/><sp/>*encAlgorithmA<sp/>=<sp/>encAlgorithm;</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/><sp/><sp/>*keyLengthA<sp/>=<sp/>keyLength;</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>null<sp/>encryption<sp/>parameters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/><sp/><sp/>*fileKeyA<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/><sp/><sp/>*encAlgorithmA<sp/>=<sp/>cryptRC4;</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/><sp/><sp/>*keyLengthA<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1087"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"></highlight></codeline>
<codeline lineno="1089"><highlight class="normal">GBool<sp/>XRef::okToPrint(GBool<sp/>ignoreOwnerPW)<sp/>{</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(!ignoreOwnerPW<sp/>&amp;&amp;<sp/>ownerPasswordOk)<sp/>||<sp/>(permFlags<sp/>&amp;<sp/>permPrint);</highlight></codeline>
<codeline lineno="1091"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1092"><highlight class="normal"></highlight></codeline>
<codeline lineno="1093"><highlight class="normal"></highlight><highlight class="comment">//<sp/>we<sp/>can<sp/>print<sp/>at<sp/>high<sp/>res<sp/>if<sp/>we<sp/>are<sp/>only<sp/>doing<sp/>security<sp/>handler<sp/>revision</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1094"><highlight class="normal"></highlight><highlight class="comment">//<sp/>2<sp/>(and<sp/>we<sp/>are<sp/>allowed<sp/>to<sp/>print<sp/>at<sp/>all),<sp/>or<sp/>with<sp/>security<sp/>handler<sp/>rev</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1095"><highlight class="normal"></highlight><highlight class="comment">//<sp/>3<sp/>and<sp/>we<sp/>are<sp/>allowed<sp/>to<sp/>print,<sp/>and<sp/>bit<sp/>12<sp/>is<sp/>set.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1096"><highlight class="normal">GBool<sp/>XRef::okToPrintHighRes(GBool<sp/>ignoreOwnerPW)<sp/>{</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(encrypted)<sp/>{</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(2<sp/>==<sp/>encRevision)<sp/>{</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(okToPrint(ignoreOwnerPW));</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(encRevision<sp/>&gt;=<sp/>3)<sp/>{</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(okToPrint(ignoreOwnerPW)<sp/>&amp;&amp;<sp/>(permFlags<sp/>&amp;<sp/>permHighResPrint));</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>something<sp/>weird<sp/>-<sp/>unknown<sp/>security<sp/>handler<sp/>version</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gTrue;</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1109"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"></highlight></codeline>
<codeline lineno="1111"><highlight class="normal">GBool<sp/>XRef::okToChange(GBool<sp/>ignoreOwnerPW)<sp/>{</highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(!ignoreOwnerPW<sp/>&amp;&amp;<sp/>ownerPasswordOk)<sp/>||<sp/>(permFlags<sp/>&amp;<sp/>permChange);</highlight></codeline>
<codeline lineno="1113"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1114"><highlight class="normal"></highlight></codeline>
<codeline lineno="1115"><highlight class="normal">GBool<sp/>XRef::okToCopy(GBool<sp/>ignoreOwnerPW)<sp/>{</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(!ignoreOwnerPW<sp/>&amp;&amp;<sp/>ownerPasswordOk)<sp/>||<sp/>(permFlags<sp/>&amp;<sp/>permCopy);</highlight></codeline>
<codeline lineno="1117"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"></highlight></codeline>
<codeline lineno="1119"><highlight class="normal">GBool<sp/>XRef::okToAddNotes(GBool<sp/>ignoreOwnerPW)<sp/>{</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(!ignoreOwnerPW<sp/>&amp;&amp;<sp/>ownerPasswordOk)<sp/>||<sp/>(permFlags<sp/>&amp;<sp/>permNotes);</highlight></codeline>
<codeline lineno="1121"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"></highlight></codeline>
<codeline lineno="1123"><highlight class="normal">GBool<sp/>XRef::okToFillForm(GBool<sp/>ignoreOwnerPW)<sp/>{</highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(!ignoreOwnerPW<sp/>&amp;&amp;<sp/>ownerPasswordOk)<sp/>||<sp/>(permFlags<sp/>&amp;<sp/>permFillForm);</highlight></codeline>
<codeline lineno="1125"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"></highlight></codeline>
<codeline lineno="1127"><highlight class="normal">GBool<sp/>XRef::okToAccessibility(GBool<sp/>ignoreOwnerPW)<sp/>{</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(!ignoreOwnerPW<sp/>&amp;&amp;<sp/>ownerPasswordOk)<sp/>||<sp/>(permFlags<sp/>&amp;<sp/>permAccessibility);</highlight></codeline>
<codeline lineno="1129"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"></highlight></codeline>
<codeline lineno="1131"><highlight class="normal">GBool<sp/>XRef::okToAssemble(GBool<sp/>ignoreOwnerPW)<sp/>{</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(!ignoreOwnerPW<sp/>&amp;&amp;<sp/>ownerPasswordOk)<sp/>||<sp/>(permFlags<sp/>&amp;<sp/>permAssemble);</highlight></codeline>
<codeline lineno="1133"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"></highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><ref refid="class_object" kindref="compound">Object</ref><sp/>*XRef::getCatalog(<ref refid="class_object" kindref="compound">Object</ref><sp/>*catalog)<sp/>{</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>*obj<sp/>=<sp/>fetch(rootNum,<sp/>rootGen,<sp/>catalog);</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj-&gt;isDict())<sp/>{</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>obj;</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/>GBool<sp/>wasReconstructed<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/>GBool<sp/>ok<sp/>=<sp/>constructXRef(&amp;wasReconstructed,<sp/>gTrue);</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(ok)<sp/>?<sp/>fetch(rootNum,<sp/>rootGen,<sp/>catalog)<sp/>:<sp/>obj;</highlight></codeline>
<codeline lineno="1143"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1144"><highlight class="normal"></highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><ref refid="class_object" kindref="compound">Object</ref><sp/>*XRef::fetch(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>gen,<sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>*obj,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>recursion)<sp/>{</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/><ref refid="struct_x_ref_entry" kindref="compound">XRefEntry</ref><sp/>*e;</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/><ref refid="class_parser" kindref="compound">Parser</ref><sp/>*parser;</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>obj1,<sp/>obj2,<sp/>obj3;</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"></highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/>xrefLocker();</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>for<sp/>bogus<sp/>ref<sp/>-<sp/>this<sp/>can<sp/>happen<sp/>in<sp/>corrupted<sp/>PDF<sp/>files</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(num<sp/>&lt;<sp/>0<sp/>||<sp/>num<sp/>&gt;=<sp/>size)<sp/>{</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err;</highlight></codeline>
<codeline lineno="1154"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"></highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/>e<sp/>=<sp/>getEntry(num);</highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!e-&gt;obj.isNull<sp/>())<sp/>{<sp/></highlight><highlight class="comment">//check<sp/>for<sp/>updated<sp/>object</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/><sp/><sp/>obj<sp/>=<sp/>e-&gt;obj.copy(obj);</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>obj;</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1161"><highlight class="normal"></highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(e-&gt;type)<sp/>{</highlight></codeline>
<codeline lineno="1163"><highlight class="normal"></highlight></codeline>
<codeline lineno="1164"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>xrefEntryUncompressed:</highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(e-&gt;gen<sp/>!=<sp/>gen)<sp/>{</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err;</highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/><sp/><sp/>obj1.initNull();</highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><sp/><sp/><sp/><sp/>parser<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_parser" kindref="compound">Parser</ref>(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_lexer" kindref="compound">Lexer</ref>(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str-&gt;makeSubStream(start<sp/>+<sp/>e-&gt;offset,<sp/>gFalse,<sp/>0,<sp/>&amp;obj1)),</highlight></codeline>
<codeline lineno="1172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gTrue);</highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/><sp/><sp/>parser-&gt;getObj(&amp;obj1,<sp/>recursion);</highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/><sp/><sp/>parser-&gt;getObj(&amp;obj2,<sp/>recursion);</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/><sp/><sp/>parser-&gt;getObj(&amp;obj3,<sp/>recursion);</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!obj1.isInt()<sp/>||<sp/>obj1.getInt()<sp/>!=<sp/>num<sp/>||</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/><sp/><sp/>!obj2.isInt()<sp/>||<sp/>obj2.getInt()<sp/>!=<sp/>gen<sp/>||</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/><sp/><sp/>!obj3.isCmd(</highlight><highlight class="stringliteral">&quot;obj&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>some<sp/>buggy<sp/>pdf<sp/>have<sp/>obj1234<sp/>for<sp/>ints<sp/>that<sp/>represent<sp/>1234</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>try<sp/>to<sp/>recover<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj1.isInt()<sp/>&amp;&amp;<sp/>obj1.getInt()<sp/>==<sp/>num<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj2.isInt()<sp/>&amp;&amp;<sp/>obj2.getInt()<sp/>==<sp/>gen<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj3.isCmd())<sp/>{</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*cmd<sp/>=<sp/>obj3.getCmd();</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strlen(cmd)<sp/>&gt;<sp/>3<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cmd[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;o&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cmd[1]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;b&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cmd[2]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;j&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*end_ptr;</highlight></codeline>
<codeline lineno="1190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>longNumber<sp/>=<sp/>strtol(cmd<sp/>+<sp/>3,<sp/>&amp;end_ptr,<sp/>0);</highlight></codeline>
<codeline lineno="1191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(longNumber<sp/>&lt;=<sp/>INT_MAX<sp/>&amp;&amp;<sp/>longNumber<sp/>&gt;=<sp/>INT_MIN<sp/>&amp;&amp;<sp/>*end_ptr<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>number<sp/>=<sp/>longNumber;</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxWarning,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Cmd<sp/>was<sp/>not<sp/>obj<sp/>but<sp/>{0:s},<sp/>assuming<sp/>the<sp/>creator<sp/>meant<sp/>obj<sp/>{1:d}&quot;</highlight><highlight class="normal">,<sp/>cmd,<sp/>number);</highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>obj-&gt;initInt(number);</highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>obj3.free();</highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>parser;</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="1204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj3.free();</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>parser;</highlight></codeline>
<codeline lineno="1207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err;</highlight></codeline>
<codeline lineno="1208"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><sp/><sp/><sp/><sp/>parser-&gt;getObj(obj,<sp/>gFalse,<sp/>(encrypted<sp/>&amp;&amp;<sp/>!e-&gt;getFlag(XRefEntry::Unencrypted))<sp/>?<sp/>fileKey<sp/>:<sp/>NULL,</highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>encAlgorithm,<sp/>keyLength,<sp/>num,<sp/>gen,<sp/>recursion);</highlight></codeline>
<codeline lineno="1211"><highlight class="normal"><sp/><sp/><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="1212"><highlight class="normal"><sp/><sp/><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/><sp/><sp/>obj3.free();</highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>parser;</highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1216"><highlight class="normal"></highlight></codeline>
<codeline lineno="1217"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>xrefEntryCompressed:</highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1219"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>0<sp/>//<sp/>Adobe<sp/>apparently<sp/>ignores<sp/>the<sp/>generation<sp/>number<sp/>on<sp/>compressed<sp/>objects</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(gen<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err;</highlight></codeline>
<codeline lineno="1222"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1223"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1224"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(e-&gt;offset<sp/>&gt;=<sp/>(Guint)size<sp/>||</highlight></codeline>
<codeline lineno="1225"><highlight class="normal"><sp/><sp/><sp/><sp/>entries[e-&gt;offset].type<sp/>!=<sp/>xrefEntryUncompressed)<sp/>{</highlight></codeline>
<codeline lineno="1226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>object<sp/>stream&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err;</highlight></codeline>
<codeline lineno="1228"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1229"><highlight class="normal"></highlight></codeline>
<codeline lineno="1230"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_object_stream" kindref="compound">ObjectStream</ref><sp/>*objStr<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1231"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_object_stream_key" kindref="compound">ObjectStreamKey</ref><sp/>key(e-&gt;offset);</highlight></codeline>
<codeline lineno="1232"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_poppler_cache_item" kindref="compound">PopplerCacheItem</ref><sp/>*item<sp/>=<sp/>objStrs-&gt;lookup(key);</highlight></codeline>
<codeline lineno="1233"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(item)<sp/>{</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_object_stream_item" kindref="compound">ObjectStreamItem</ref><sp/>*it<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="class_object_stream_item" kindref="compound">ObjectStreamItem</ref><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(item);</highlight></codeline>
<codeline lineno="1235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>objStr<sp/>=<sp/>it-&gt;objStream;</highlight></codeline>
<codeline lineno="1236"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1237"><highlight class="normal"></highlight></codeline>
<codeline lineno="1238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!objStr)<sp/>{</highlight></codeline>
<codeline lineno="1239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>objStr<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_object_stream" kindref="compound">ObjectStream</ref>(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>e-&gt;offset,<sp/>recursion<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="1240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!objStr-&gt;isOk())<sp/>{</highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>objStr;</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"><sp/><sp/><sp/><sp/>objStr<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1243"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err;</highlight></codeline>
<codeline lineno="1244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1245"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>XRef<sp/>could<sp/>be<sp/>reconstructed<sp/>in<sp/>constructor<sp/>of<sp/>ObjectStream:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1246"><highlight class="normal"><sp/><sp/><sp/><sp/>e<sp/>=<sp/>getEntry(num);</highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_object_stream_key" kindref="compound">ObjectStreamKey</ref><sp/>*newkey<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_object_stream_key" kindref="compound">ObjectStreamKey</ref>(e-&gt;offset);</highlight></codeline>
<codeline lineno="1248"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_object_stream_item" kindref="compound">ObjectStreamItem</ref><sp/>*newitem<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_object_stream_item" kindref="compound">ObjectStreamItem</ref>(objStr);</highlight></codeline>
<codeline lineno="1249"><highlight class="normal"><sp/><sp/><sp/><sp/>objStrs-&gt;put(newkey,<sp/>newitem);</highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1251"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1252"><highlight class="normal"><sp/><sp/><sp/><sp/>objStr-&gt;getObject(e-&gt;gen,<sp/>num,<sp/>obj);</highlight></codeline>
<codeline lineno="1253"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1254"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1255"><highlight class="normal"></highlight></codeline>
<codeline lineno="1256"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err;</highlight></codeline>
<codeline lineno="1258"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1260"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>obj;</highlight></codeline>
<codeline lineno="1261"><highlight class="normal"></highlight></codeline>
<codeline lineno="1262"><highlight class="normal"><sp/>err:</highlight></codeline>
<codeline lineno="1263"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!xRefStream<sp/>&amp;&amp;<sp/>!xrefReconstructed)<sp/>{</highlight></codeline>
<codeline lineno="1264"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errInternal,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;xref<sp/>num<sp/>{0:d}<sp/>not<sp/>found<sp/>but<sp/>needed,<sp/>try<sp/>to<sp/>reconstruct\n&quot;</highlight><highlight class="normal">,<sp/>num);</highlight></codeline>
<codeline lineno="1265"><highlight class="normal"><sp/><sp/><sp/><sp/>rootNum<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="1266"><highlight class="normal"><sp/><sp/><sp/><sp/>constructXRef(&amp;xrefReconstructed);</highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fetch(num,<sp/>gen,<sp/>obj,<sp/>++recursion);</highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1269"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>obj-&gt;initNull();</highlight></codeline>
<codeline lineno="1270"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1271"><highlight class="normal"></highlight></codeline>
<codeline lineno="1272"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>XRef::lock()<sp/>{</highlight></codeline>
<codeline lineno="1273"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>MULTITHREADED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1274"><highlight class="normal"><sp/><sp/>gLockMutex(&amp;mutex);</highlight></codeline>
<codeline lineno="1275"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1276"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1277"><highlight class="normal"></highlight></codeline>
<codeline lineno="1278"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>XRef::unlock()<sp/>{</highlight></codeline>
<codeline lineno="1279"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>MULTITHREADED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1280"><highlight class="normal"><sp/><sp/>gUnlockMutex(&amp;mutex);</highlight></codeline>
<codeline lineno="1281"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1282"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1283"><highlight class="normal"></highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><ref refid="class_object" kindref="compound">Object</ref><sp/>*XRef::getDocInfo(<ref refid="class_object" kindref="compound">Object</ref><sp/>*obj)<sp/>{</highlight></codeline>
<codeline lineno="1285"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>trailerDict.dictLookup(</highlight><highlight class="stringliteral">&quot;Info&quot;</highlight><highlight class="normal">,<sp/>obj);</highlight></codeline>
<codeline lineno="1286"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1287"><highlight class="normal"></highlight></codeline>
<codeline lineno="1288"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Added<sp/>for<sp/>the<sp/>pdftex<sp/>project.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1289"><highlight class="normal"><ref refid="class_object" kindref="compound">Object</ref><sp/>*XRef::getDocInfoNF(<ref refid="class_object" kindref="compound">Object</ref><sp/>*obj)<sp/>{</highlight></codeline>
<codeline lineno="1290"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>trailerDict.dictLookupNF(</highlight><highlight class="stringliteral">&quot;Info&quot;</highlight><highlight class="normal">,<sp/>obj);</highlight></codeline>
<codeline lineno="1291"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1292"><highlight class="normal"></highlight></codeline>
<codeline lineno="1293"><highlight class="normal">GBool<sp/>XRef::getStreamEnd(Goffset<sp/>streamStart,<sp/>Goffset<sp/>*streamEnd)<sp/>{</highlight></codeline>
<codeline lineno="1294"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a,<sp/>b,<sp/>m;</highlight></codeline>
<codeline lineno="1295"><highlight class="normal"></highlight></codeline>
<codeline lineno="1296"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(streamEndsLen<sp/>==<sp/>0<sp/>||</highlight></codeline>
<codeline lineno="1297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>streamStart<sp/>&gt;<sp/>streamEnds[streamEndsLen<sp/>-<sp/>1])<sp/>{</highlight></codeline>
<codeline lineno="1298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="1299"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1300"><highlight class="normal"></highlight></codeline>
<codeline lineno="1301"><highlight class="normal"><sp/><sp/>a<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="1302"><highlight class="normal"><sp/><sp/>b<sp/>=<sp/>streamEndsLen<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="1303"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>invariant:<sp/>streamEnds[a]<sp/>&lt;<sp/>streamStart<sp/>&lt;=<sp/>streamEnds[b]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1304"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(b<sp/>-<sp/>a<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="1305"><highlight class="normal"><sp/><sp/><sp/><sp/>m<sp/>=<sp/>(a<sp/>+<sp/>b)<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="1306"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(streamStart<sp/>&lt;=<sp/>streamEnds[m])<sp/>{</highlight></codeline>
<codeline lineno="1307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>b<sp/>=<sp/>m;</highlight></codeline>
<codeline lineno="1308"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>a<sp/>=<sp/>m;</highlight></codeline>
<codeline lineno="1310"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1311"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1312"><highlight class="normal"><sp/><sp/>*streamEnd<sp/>=<sp/>streamEnds[b];</highlight></codeline>
<codeline lineno="1313"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gTrue;</highlight></codeline>
<codeline lineno="1314"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1315"><highlight class="normal"></highlight></codeline>
<codeline lineno="1316"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>XRef::getNumEntry(Goffset<sp/>offset)</highlight></codeline>
<codeline lineno="1317"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1318"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(size<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="1319"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1320"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>res<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1321"><highlight class="normal"><sp/><sp/><sp/><sp/>Goffset<sp/>resOffset<sp/>=<sp/>getEntry(0)-&gt;offset;</highlight></codeline>
<codeline lineno="1322"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_x_ref_entry" kindref="compound">XRefEntry</ref><sp/>*e;</highlight></codeline>
<codeline lineno="1323"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>size;<sp/>++i)</highlight></codeline>
<codeline lineno="1324"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>e<sp/>=<sp/>getEntry(i,<sp/>gFalse);</highlight></codeline>
<codeline lineno="1326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(e-&gt;type<sp/>!=<sp/>xrefEntryFree<sp/>&amp;&amp;<sp/>e-&gt;offset<sp/>&lt;<sp/>offset<sp/>&amp;&amp;<sp/>e-&gt;offset<sp/>&gt;=<sp/>resOffset)</highlight></codeline>
<codeline lineno="1327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="1329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>resOffset<sp/>=<sp/>e-&gt;offset;</highlight></codeline>
<codeline lineno="1330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1331"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1332"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="1333"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1334"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="1335"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1336"><highlight class="normal"></highlight></codeline>
<codeline lineno="1337"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>XRef::add(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>gen,<sp/>Goffset<sp/>offs,<sp/>GBool<sp/>used)<sp/>{</highlight></codeline>
<codeline lineno="1338"><highlight class="normal"><sp/><sp/>xrefLocker();</highlight></codeline>
<codeline lineno="1339"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(num<sp/>&gt;=<sp/>size)<sp/>{</highlight></codeline>
<codeline lineno="1340"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(num<sp/>&gt;=<sp/>capacity)<sp/>{</highlight></codeline>
<codeline lineno="1341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>entries<sp/>=<sp/>(<ref refid="struct_x_ref_entry" kindref="compound">XRefEntry</ref><sp/>*)greallocn(entries,<sp/>num<sp/>+<sp/>1,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_x_ref_entry" kindref="compound">XRefEntry</ref>));</highlight></codeline>
<codeline lineno="1342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>capacity<sp/>=<sp/>num<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="1343"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1344"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>size;<sp/>i<sp/>&lt;<sp/>num<sp/>+<sp/>1;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>entries[i].offset<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="1346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>entries[i].type<sp/>=<sp/>xrefEntryFree;</highlight></codeline>
<codeline lineno="1347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>entries[i].obj.initNull<sp/>();</highlight></codeline>
<codeline lineno="1348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>entries[i].flags<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>entries[i].gen<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1350"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1351"><highlight class="normal"><sp/><sp/><sp/><sp/>size<sp/>=<sp/>num<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="1352"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1353"><highlight class="normal"><sp/><sp/><ref refid="struct_x_ref_entry" kindref="compound">XRefEntry</ref><sp/>*e<sp/>=<sp/>getEntry(num);</highlight></codeline>
<codeline lineno="1354"><highlight class="normal"><sp/><sp/>e-&gt;gen<sp/>=<sp/>gen;</highlight></codeline>
<codeline lineno="1355"><highlight class="normal"><sp/><sp/>e-&gt;obj.initNull<sp/>();</highlight></codeline>
<codeline lineno="1356"><highlight class="normal"><sp/><sp/>e-&gt;flags<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1357"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(used)<sp/>{</highlight></codeline>
<codeline lineno="1358"><highlight class="normal"><sp/><sp/><sp/><sp/>e-&gt;type<sp/>=<sp/>xrefEntryUncompressed;</highlight></codeline>
<codeline lineno="1359"><highlight class="normal"><sp/><sp/><sp/><sp/>e-&gt;offset<sp/>=<sp/>offs;</highlight></codeline>
<codeline lineno="1360"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1361"><highlight class="normal"><sp/><sp/><sp/><sp/>e-&gt;type<sp/>=<sp/>xrefEntryFree;</highlight></codeline>
<codeline lineno="1362"><highlight class="normal"><sp/><sp/><sp/><sp/>e-&gt;offset<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1363"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1364"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1365"><highlight class="normal"></highlight></codeline>
<codeline lineno="1366"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>XRef::setModifiedObject<sp/>(<ref refid="class_object" kindref="compound">Object</ref>*<sp/>o,<sp/><ref refid="struct_ref" kindref="compound">Ref</ref><sp/>r)<sp/>{</highlight></codeline>
<codeline lineno="1367"><highlight class="normal"><sp/><sp/>xrefLocker();</highlight></codeline>
<codeline lineno="1368"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(r.num<sp/>&lt;<sp/>0<sp/>||<sp/>r.num<sp/>&gt;=<sp/>size)<sp/>{</highlight></codeline>
<codeline lineno="1369"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errInternal,<sp/>-1,</highlight><highlight class="stringliteral">&quot;XRef::setModifiedObject<sp/>on<sp/>unknown<sp/>ref:<sp/>{0:d},<sp/>{1:d}\n&quot;</highlight><highlight class="normal">,<sp/>r.num,<sp/>r.gen);</highlight></codeline>
<codeline lineno="1370"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1371"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1372"><highlight class="normal"><sp/><sp/><ref refid="struct_x_ref_entry" kindref="compound">XRefEntry</ref><sp/>*e<sp/>=<sp/>getEntry(r.num);</highlight></codeline>
<codeline lineno="1373"><highlight class="normal"><sp/><sp/>e-&gt;obj.free();</highlight></codeline>
<codeline lineno="1374"><highlight class="normal"><sp/><sp/>o-&gt;copy(&amp;(e-&gt;obj));</highlight></codeline>
<codeline lineno="1375"><highlight class="normal"><sp/><sp/>e-&gt;setFlag(XRefEntry::Updated,<sp/>gTrue);</highlight></codeline>
<codeline lineno="1376"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1377"><highlight class="normal"></highlight></codeline>
<codeline lineno="1378"><highlight class="normal"><ref refid="struct_ref" kindref="compound">Ref</ref><sp/>XRef::addIndirectObject<sp/>(<ref refid="class_object" kindref="compound">Object</ref>*<sp/>o)<sp/>{</highlight></codeline>
<codeline lineno="1379"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>entryIndexToUse<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="1380"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>entryIndexToUse<sp/>==<sp/>-1<sp/>&amp;&amp;<sp/>i<sp/>&lt;<sp/>size;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1381"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_x_ref_entry" kindref="compound">XRefEntry</ref><sp/>*e<sp/>=<sp/>getEntry(i,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*<sp/>complainIfMissing<sp/>*/</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1382"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(e-&gt;type<sp/>==<sp/>xrefEntryFree<sp/>&amp;&amp;<sp/>e-&gt;gen<sp/>!=<sp/>65535)<sp/>{</highlight></codeline>
<codeline lineno="1383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>entryIndexToUse<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="1384"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1385"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1386"><highlight class="normal"></highlight></codeline>
<codeline lineno="1387"><highlight class="normal"><sp/><sp/><ref refid="struct_x_ref_entry" kindref="compound">XRefEntry</ref><sp/>*e;</highlight></codeline>
<codeline lineno="1388"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(entryIndexToUse<sp/>==<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="1389"><highlight class="normal"><sp/><sp/><sp/><sp/>entryIndexToUse<sp/>=<sp/>size;</highlight></codeline>
<codeline lineno="1390"><highlight class="normal"><sp/><sp/><sp/><sp/>add(entryIndexToUse,<sp/>0,<sp/>0,<sp/>gFalse);</highlight></codeline>
<codeline lineno="1391"><highlight class="normal"><sp/><sp/><sp/><sp/>e<sp/>=<sp/>getEntry(entryIndexToUse);</highlight></codeline>
<codeline lineno="1392"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1393"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//reuse<sp/>a<sp/>free<sp/>entry</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1394"><highlight class="normal"><sp/><sp/><sp/><sp/>e<sp/>=<sp/>getEntry(entryIndexToUse);</highlight></codeline>
<codeline lineno="1395"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//we<sp/>don&apos;t<sp/>touch<sp/>gen<sp/>number,<sp/>because<sp/>it<sp/>should<sp/>have<sp/>been<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1396"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//incremented<sp/>when<sp/>the<sp/>object<sp/>was<sp/>deleted</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1397"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1398"><highlight class="normal"><sp/><sp/>e-&gt;type<sp/>=<sp/>xrefEntryUncompressed;</highlight></codeline>
<codeline lineno="1399"><highlight class="normal"><sp/><sp/>o-&gt;copy(&amp;e-&gt;obj);</highlight></codeline>
<codeline lineno="1400"><highlight class="normal"><sp/><sp/>e-&gt;setFlag(XRefEntry::Updated,<sp/>gTrue);</highlight></codeline>
<codeline lineno="1401"><highlight class="normal"></highlight></codeline>
<codeline lineno="1402"><highlight class="normal"><sp/><sp/><ref refid="struct_ref" kindref="compound">Ref</ref><sp/>r;</highlight></codeline>
<codeline lineno="1403"><highlight class="normal"><sp/><sp/>r.num<sp/>=<sp/>entryIndexToUse;</highlight></codeline>
<codeline lineno="1404"><highlight class="normal"><sp/><sp/>r.gen<sp/>=<sp/>e-&gt;gen;</highlight></codeline>
<codeline lineno="1405"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>r;</highlight></codeline>
<codeline lineno="1406"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1407"><highlight class="normal"></highlight></codeline>
<codeline lineno="1408"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>XRef::removeIndirectObject(<ref refid="struct_ref" kindref="compound">Ref</ref><sp/>r)<sp/>{</highlight></codeline>
<codeline lineno="1409"><highlight class="normal"><sp/><sp/>xrefLocker();</highlight></codeline>
<codeline lineno="1410"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(r.num<sp/>&lt;<sp/>0<sp/>||<sp/>r.num<sp/>&gt;=<sp/>size)<sp/>{</highlight></codeline>
<codeline lineno="1411"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errInternal,<sp/>-1,</highlight><highlight class="stringliteral">&quot;XRef::removeIndirectObject<sp/>on<sp/>unknown<sp/>ref:<sp/>{0:d},<sp/>{1:d}\n&quot;</highlight><highlight class="normal">,<sp/>r.num,<sp/>r.gen);</highlight></codeline>
<codeline lineno="1412"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1413"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1414"><highlight class="normal"><sp/><sp/><ref refid="struct_x_ref_entry" kindref="compound">XRefEntry</ref><sp/>*e<sp/>=<sp/>getEntry(r.num);</highlight></codeline>
<codeline lineno="1415"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(e-&gt;type<sp/>==<sp/>xrefEntryFree)<sp/>{</highlight></codeline>
<codeline lineno="1416"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1417"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1418"><highlight class="normal"><sp/><sp/>e-&gt;obj.free();</highlight></codeline>
<codeline lineno="1419"><highlight class="normal"><sp/><sp/>e-&gt;type<sp/>=<sp/>xrefEntryFree;</highlight></codeline>
<codeline lineno="1420"><highlight class="normal"><sp/><sp/>e-&gt;gen++;</highlight></codeline>
<codeline lineno="1421"><highlight class="normal"><sp/><sp/>e-&gt;setFlag(XRefEntry::Updated,<sp/>gTrue);</highlight></codeline>
<codeline lineno="1422"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1423"><highlight class="normal"></highlight></codeline>
<codeline lineno="1424"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>XRef::writeXRef(XRef::XRefWriter<sp/>*writer,<sp/>GBool<sp/>writeAllEntries)<sp/>{</highlight></codeline>
<codeline lineno="1425"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//create<sp/>free<sp/>entries<sp/>linked-list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1426"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(getEntry(0)-&gt;gen<sp/>!=<sp/>65535)<sp/>{</highlight></codeline>
<codeline lineno="1427"><highlight class="normal"><sp/><sp/><sp/><sp/>error(errInternal,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;XRef::writeXRef,<sp/>entry<sp/>0<sp/>of<sp/>the<sp/>XRef<sp/>is<sp/>invalid<sp/>(gen<sp/>!=<sp/>65535)\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1428"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1429"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lastFreeEntry<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1430"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;size;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1431"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(getEntry(i)-&gt;type<sp/>==<sp/>xrefEntryFree)<sp/>{</highlight></codeline>
<codeline lineno="1432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>getEntry(lastFreeEntry)-&gt;offset<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="1433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lastFreeEntry<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="1434"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1435"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1436"><highlight class="normal"><sp/><sp/>getEntry(lastFreeEntry)-&gt;offset<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1437"><highlight class="normal"></highlight></codeline>
<codeline lineno="1438"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(writeAllEntries)<sp/>{</highlight></codeline>
<codeline lineno="1439"><highlight class="normal"><sp/><sp/><sp/><sp/>writer-&gt;startSection(0,<sp/>size);</highlight></codeline>
<codeline lineno="1440"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;size;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_x_ref_entry" kindref="compound">XRefEntry</ref><sp/>*e<sp/>=<sp/>getEntry(i);</highlight></codeline>
<codeline lineno="1442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(e-&gt;gen<sp/>&gt;<sp/>65535)<sp/>e-&gt;gen<sp/>=<sp/>65535;<sp/></highlight><highlight class="comment">//cap<sp/>generation<sp/>number<sp/>to<sp/>65535<sp/>(required<sp/>by<sp/>PDFReference)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writer-&gt;writeEntry(e-&gt;offset,<sp/>e-&gt;gen,<sp/>e-&gt;type);</highlight></codeline>
<codeline lineno="1444"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1445"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1446"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1447"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>size)<sp/>{</highlight></codeline>
<codeline lineno="1448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j;</highlight></codeline>
<codeline lineno="1449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(j=i;<sp/>j&lt;size;<sp/>j++)<sp/>{<sp/></highlight><highlight class="comment">//look<sp/>for<sp/>consecutive<sp/>entries</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((getEntry(j)-&gt;type<sp/>==<sp/>xrefEntryFree)<sp/>&amp;&amp;<sp/>(getEntry(j)-&gt;gen<sp/>==<sp/>0))</highlight></codeline>
<codeline lineno="1451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j-i<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="1454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writer-&gt;startSection(i,<sp/>j-i);</highlight></codeline>
<codeline lineno="1456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k=i;<sp/>k&lt;j;<sp/>k++)<sp/>{</highlight></codeline>
<codeline lineno="1457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_x_ref_entry" kindref="compound">XRefEntry</ref><sp/>*e<sp/>=<sp/>getEntry(k);</highlight></codeline>
<codeline lineno="1458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(e-&gt;gen<sp/>&gt;<sp/>65535)<sp/>e-&gt;gen<sp/>=<sp/>65535;<sp/></highlight><highlight class="comment">//cap<sp/>generation<sp/>number<sp/>to<sp/>65535<sp/>(required<sp/>by<sp/>PDFReference)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writer-&gt;writeEntry(e-&gt;offset,<sp/>e-&gt;gen,<sp/>e-&gt;type);</highlight></codeline>
<codeline lineno="1460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>=<sp/>j;</highlight></codeline>
<codeline lineno="1462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>++i;</highlight></codeline>
<codeline lineno="1464"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1465"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1466"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1467"><highlight class="normal"></highlight></codeline>
<codeline lineno="1468"><highlight class="normal">XRef::XRefTableWriter::XRefTableWriter(<ref refid="class_out_stream" kindref="compound">OutStream</ref>*<sp/>outStrA)<sp/>{</highlight></codeline>
<codeline lineno="1469"><highlight class="normal"><sp/><sp/>outStr<sp/>=<sp/>outStrA;</highlight></codeline>
<codeline lineno="1470"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1471"><highlight class="normal"></highlight></codeline>
<codeline lineno="1472"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>XRef::XRefTableWriter::startSection(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>first,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count)<sp/>{</highlight></codeline>
<codeline lineno="1473"><highlight class="normal"><sp/><sp/>outStr-&gt;printf(</highlight><highlight class="stringliteral">&quot;%i<sp/>%i\r\n&quot;</highlight><highlight class="normal">,<sp/>first,<sp/>count);</highlight></codeline>
<codeline lineno="1474"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1475"><highlight class="normal"></highlight></codeline>
<codeline lineno="1476"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>XRef::XRefTableWriter::writeEntry(Goffset<sp/>offset,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>gen,<sp/>XRefEntryType<sp/>type)<sp/>{</highlight></codeline>
<codeline lineno="1477"><highlight class="normal"><sp/><sp/>outStr-&gt;printf(</highlight><highlight class="stringliteral">&quot;%010lli<sp/>%05i<sp/>%c\r\n&quot;</highlight><highlight class="normal">,<sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)offset,<sp/>gen,<sp/>(type==xrefEntryFree)?</highlight><highlight class="charliteral">&apos;f&apos;</highlight><highlight class="normal">:</highlight><highlight class="charliteral">&apos;n&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1478"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1479"><highlight class="normal"></highlight></codeline>
<codeline lineno="1480"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>XRef::writeTableToFile(<ref refid="class_out_stream" kindref="compound">OutStream</ref>*<sp/>outStr,<sp/>GBool<sp/>writeAllEntries)<sp/>{</highlight></codeline>
<codeline lineno="1481"><highlight class="normal"><sp/><sp/>XRefTableWriter<sp/>writer(outStr);</highlight></codeline>
<codeline lineno="1482"><highlight class="normal"><sp/><sp/>outStr-&gt;printf(</highlight><highlight class="stringliteral">&quot;xref\r\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1483"><highlight class="normal"><sp/><sp/>writeXRef(&amp;writer,<sp/>writeAllEntries);</highlight></codeline>
<codeline lineno="1484"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1485"><highlight class="normal"></highlight></codeline>
<codeline lineno="1486"><highlight class="normal">XRef::XRefStreamWriter::XRefStreamWriter(<ref refid="class_object" kindref="compound">Object</ref><sp/>*indexA,<sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*stmBufA,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>offsetSizeA)<sp/>{</highlight></codeline>
<codeline lineno="1487"><highlight class="normal"><sp/><sp/>index<sp/>=<sp/>indexA;</highlight></codeline>
<codeline lineno="1488"><highlight class="normal"><sp/><sp/>stmBuf<sp/>=<sp/>stmBufA;</highlight></codeline>
<codeline lineno="1489"><highlight class="normal"><sp/><sp/>offsetSize<sp/>=<sp/>offsetSizeA;</highlight></codeline>
<codeline lineno="1490"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1491"><highlight class="normal"></highlight></codeline>
<codeline lineno="1492"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>XRef::XRefStreamWriter::startSection(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>first,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count)<sp/>{</highlight></codeline>
<codeline lineno="1493"><highlight class="normal"><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>obj;</highlight></codeline>
<codeline lineno="1494"><highlight class="normal"><sp/><sp/>index-&gt;arrayAdd(<sp/>obj.initInt(first)<sp/>);</highlight></codeline>
<codeline lineno="1495"><highlight class="normal"><sp/><sp/>index-&gt;arrayAdd(<sp/>obj.initInt(count)<sp/>);</highlight></codeline>
<codeline lineno="1496"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1497"><highlight class="normal"></highlight></codeline>
<codeline lineno="1498"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>XRef::XRefStreamWriter::writeEntry(Goffset<sp/>offset,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>gen,<sp/>XRefEntryType<sp/>type)<sp/>{</highlight></codeline>
<codeline lineno="1499"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>entryTotalSize<sp/>=<sp/>1<sp/>+<sp/>offsetSize<sp/>+<sp/>2;<sp/></highlight><highlight class="comment">/*<sp/>type<sp/>+<sp/>offset<sp/>+<sp/>gen<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1500"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>data[16];</highlight></codeline>
<codeline lineno="1501"><highlight class="normal"><sp/><sp/>data[0]<sp/>=<sp/>(type==xrefEntryFree)<sp/>?<sp/>0<sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="1502"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>offsetSize;<sp/>i<sp/>&gt;<sp/>0;<sp/>i--)<sp/>{</highlight></codeline>
<codeline lineno="1503"><highlight class="normal"><sp/><sp/><sp/><sp/>data[i]<sp/>=<sp/>offset<sp/>&amp;<sp/>0xff;</highlight></codeline>
<codeline lineno="1504"><highlight class="normal"><sp/><sp/><sp/><sp/>offset<sp/>&gt;&gt;=<sp/>8;</highlight></codeline>
<codeline lineno="1505"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1506"><highlight class="normal"><sp/><sp/>data[offsetSize<sp/>+<sp/>1]<sp/>=<sp/>(gen<sp/>&gt;&gt;<sp/>8)<sp/>&amp;<sp/>0xff;</highlight></codeline>
<codeline lineno="1507"><highlight class="normal"><sp/><sp/>data[offsetSize<sp/>+<sp/>2]<sp/>=<sp/>gen<sp/>&amp;<sp/>0xff;</highlight></codeline>
<codeline lineno="1508"><highlight class="normal"><sp/><sp/>stmBuf-&gt;append(data,<sp/>entryTotalSize);</highlight></codeline>
<codeline lineno="1509"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1510"><highlight class="normal"></highlight></codeline>
<codeline lineno="1511"><highlight class="normal">XRef::XRefPreScanWriter::XRefPreScanWriter()<sp/>{</highlight></codeline>
<codeline lineno="1512"><highlight class="normal"><sp/><sp/>hasOffsetsBeyond4GB<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="1513"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1514"><highlight class="normal"></highlight></codeline>
<codeline lineno="1515"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>XRef::XRefPreScanWriter::startSection(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>first,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count)<sp/>{</highlight></codeline>
<codeline lineno="1516"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1517"><highlight class="normal"></highlight></codeline>
<codeline lineno="1518"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>XRef::XRefPreScanWriter::writeEntry(Goffset<sp/>offset,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>gen,<sp/>XRefEntryType<sp/>type)<sp/>{</highlight></codeline>
<codeline lineno="1519"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(offset<sp/>&gt;=<sp/>0x100000000ll)</highlight></codeline>
<codeline lineno="1520"><highlight class="normal"><sp/><sp/><sp/><sp/>hasOffsetsBeyond4GB<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="1521"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1522"><highlight class="normal"></highlight></codeline>
<codeline lineno="1523"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>XRef::writeStreamToBuffer(<ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*stmBuf,<sp/><ref refid="class_dict" kindref="compound">Dict</ref><sp/>*xrefDict,<sp/><ref refid="class_x_ref" kindref="compound">XRef</ref><sp/>*xref)<sp/>{</highlight></codeline>
<codeline lineno="1524"><highlight class="normal"><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>index;</highlight></codeline>
<codeline lineno="1525"><highlight class="normal"><sp/><sp/>index.initArray(xref);</highlight></codeline>
<codeline lineno="1526"><highlight class="normal"><sp/><sp/>stmBuf-&gt;clear();</highlight></codeline>
<codeline lineno="1527"><highlight class="normal"></highlight></codeline>
<codeline lineno="1528"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>First<sp/>pass:<sp/>determine<sp/>whether<sp/>all<sp/>offsets<sp/>fit<sp/>in<sp/>4<sp/>bytes<sp/>or<sp/>not</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1529"><highlight class="normal"><sp/><sp/>XRefPreScanWriter<sp/>prescan;</highlight></codeline>
<codeline lineno="1530"><highlight class="normal"><sp/><sp/>writeXRef(&amp;prescan,<sp/>gFalse);</highlight></codeline>
<codeline lineno="1531"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>offsetSize<sp/>=<sp/>prescan.hasOffsetsBeyond4GB<sp/>?<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Goffset)<sp/>:<sp/>4;</highlight></codeline>
<codeline lineno="1532"><highlight class="normal"></highlight></codeline>
<codeline lineno="1533"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Second<sp/>pass:<sp/>actually<sp/>write<sp/>the<sp/>xref<sp/>stream</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1534"><highlight class="normal"><sp/><sp/>XRefStreamWriter<sp/>writer(&amp;index,<sp/>stmBuf,<sp/>offsetSize);</highlight></codeline>
<codeline lineno="1535"><highlight class="normal"><sp/><sp/>writeXRef(&amp;writer,<sp/>gFalse);</highlight></codeline>
<codeline lineno="1536"><highlight class="normal"></highlight></codeline>
<codeline lineno="1537"><highlight class="normal"><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>obj1,<sp/>obj2;</highlight></codeline>
<codeline lineno="1538"><highlight class="normal"><sp/><sp/>xrefDict-&gt;set(</highlight><highlight class="stringliteral">&quot;Type&quot;</highlight><highlight class="normal">,<sp/>obj1.initName(</highlight><highlight class="stringliteral">&quot;XRef&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1539"><highlight class="normal"><sp/><sp/>xrefDict-&gt;set(</highlight><highlight class="stringliteral">&quot;Index&quot;</highlight><highlight class="normal">,<sp/>&amp;index);</highlight></codeline>
<codeline lineno="1540"><highlight class="normal"><sp/><sp/>obj2.initArray(xref);</highlight></codeline>
<codeline lineno="1541"><highlight class="normal"><sp/><sp/>obj2.arrayAdd(<sp/>obj1.initInt(1)<sp/>);</highlight></codeline>
<codeline lineno="1542"><highlight class="normal"><sp/><sp/>obj2.arrayAdd(<sp/>obj1.initInt(offsetSize)<sp/>);</highlight></codeline>
<codeline lineno="1543"><highlight class="normal"><sp/><sp/>obj2.arrayAdd(<sp/>obj1.initInt(2)<sp/>);</highlight></codeline>
<codeline lineno="1544"><highlight class="normal"><sp/><sp/>xrefDict-&gt;set(</highlight><highlight class="stringliteral">&quot;W&quot;</highlight><highlight class="normal">,<sp/>&amp;obj2);</highlight></codeline>
<codeline lineno="1545"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1546"><highlight class="normal"></highlight></codeline>
<codeline lineno="1547"><highlight class="normal">GBool<sp/>XRef::parseEntry(Goffset<sp/>offset,<sp/><ref refid="struct_x_ref_entry" kindref="compound">XRefEntry</ref><sp/>*entry)</highlight></codeline>
<codeline lineno="1548"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1549"><highlight class="normal"><sp/><sp/>GBool<sp/>r;</highlight></codeline>
<codeline lineno="1550"><highlight class="normal"></highlight></codeline>
<codeline lineno="1551"><highlight class="normal"><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>obj;</highlight></codeline>
<codeline lineno="1552"><highlight class="normal"><sp/><sp/>obj.initNull();</highlight></codeline>
<codeline lineno="1553"><highlight class="normal"><sp/><sp/><ref refid="class_parser" kindref="compound">Parser</ref><sp/>parser<sp/>=<sp/><ref refid="class_parser" kindref="compound">Parser</ref>(NULL,<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_lexer" kindref="compound">Lexer</ref>(NULL,</highlight></codeline>
<codeline lineno="1554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>str-&gt;makeSubStream(offset,<sp/>gFalse,<sp/>20,<sp/>&amp;obj)),<sp/>gTrue);</highlight></codeline>
<codeline lineno="1555"><highlight class="normal"></highlight></codeline>
<codeline lineno="1556"><highlight class="normal"><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>obj1,<sp/>obj2,<sp/>obj3;</highlight></codeline>
<codeline lineno="1557"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(((parser.getObj(&amp;obj1)-&gt;isInt())<sp/>||</highlight></codeline>
<codeline lineno="1558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parser.getObj(&amp;obj1)-&gt;isInt64())<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(parser.getObj(&amp;obj2)-&gt;isInt())<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(parser.getObj(&amp;obj3)-&gt;isCmd(</highlight><highlight class="stringliteral">&quot;n&quot;</highlight><highlight class="normal">)<sp/>||<sp/>obj3.isCmd(</highlight><highlight class="stringliteral">&quot;f&quot;</highlight><highlight class="normal">)))<sp/>{</highlight></codeline>
<codeline lineno="1561"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj1.isInt64())</highlight></codeline>
<codeline lineno="1562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>entry-&gt;offset<sp/>=<sp/>obj1.getInt64();</highlight></codeline>
<codeline lineno="1563"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>entry-&gt;offset<sp/>=<sp/>obj1.getInt();</highlight></codeline>
<codeline lineno="1565"><highlight class="normal"><sp/><sp/><sp/><sp/>entry-&gt;gen<sp/>=<sp/>obj2.getInt();</highlight></codeline>
<codeline lineno="1566"><highlight class="normal"><sp/><sp/><sp/><sp/>entry-&gt;type<sp/>=<sp/>obj3.isCmd(</highlight><highlight class="stringliteral">&quot;n&quot;</highlight><highlight class="normal">)<sp/>?<sp/>xrefEntryUncompressed<sp/>:<sp/>xrefEntryFree;</highlight></codeline>
<codeline lineno="1567"><highlight class="normal"><sp/><sp/><sp/><sp/>entry-&gt;obj.initNull<sp/>();</highlight></codeline>
<codeline lineno="1568"><highlight class="normal"><sp/><sp/><sp/><sp/>entry-&gt;flags<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1569"><highlight class="normal"><sp/><sp/><sp/><sp/>r<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="1570"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1571"><highlight class="normal"><sp/><sp/><sp/><sp/>r<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="1572"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1573"><highlight class="normal"><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="1574"><highlight class="normal"><sp/><sp/>obj2.free();</highlight></codeline>
<codeline lineno="1575"><highlight class="normal"><sp/><sp/>obj3.free();</highlight></codeline>
<codeline lineno="1576"><highlight class="normal"></highlight></codeline>
<codeline lineno="1577"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>r;</highlight></codeline>
<codeline lineno="1578"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1579"><highlight class="normal"></highlight></codeline>
<codeline lineno="1580"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Traverse<sp/>all<sp/>XRef<sp/>tables<sp/>and,<sp/>if<sp/>untilEntryNum<sp/>!=<sp/>-1,<sp/>stop<sp/>as<sp/>soon<sp/>as</highlight></codeline>
<codeline lineno="1581"><highlight class="comment"><sp/>*<sp/>untilEntryNum<sp/>is<sp/>found,<sp/>or<sp/>try<sp/>to<sp/>reconstruct<sp/>the<sp/>xref<sp/>table<sp/>if<sp/>it&apos;s<sp/>not</highlight></codeline>
<codeline lineno="1582"><highlight class="comment"><sp/>*<sp/>present<sp/>in<sp/>any<sp/>xref.</highlight></codeline>
<codeline lineno="1583"><highlight class="comment"><sp/>*<sp/>If<sp/>xrefStreamObjsNum<sp/>is<sp/>not<sp/>NULL,<sp/>it<sp/>is<sp/>filled<sp/>with<sp/>the<sp/>list<sp/>of<sp/>the<sp/>object</highlight></codeline>
<codeline lineno="1584"><highlight class="comment"><sp/>*<sp/>numbers<sp/>of<sp/>the<sp/>XRef<sp/>streams<sp/>that<sp/>have<sp/>been<sp/>traversed<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1585"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>XRef::readXRefUntil(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>untilEntryNum,<sp/>std::vector&lt;int&gt;<sp/>*xrefStreamObjsNum)</highlight></codeline>
<codeline lineno="1586"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1587"><highlight class="normal"><sp/><sp/>std::vector&lt;Goffset&gt;<sp/>followedPrev;</highlight></codeline>
<codeline lineno="1588"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(prevXRefOffset<sp/>&amp;&amp;<sp/>(untilEntryNum<sp/>==<sp/>-1<sp/>||<sp/>(untilEntryNum<sp/>&lt;<sp/>size<sp/>&amp;&amp;<sp/>entries[untilEntryNum].type<sp/>==<sp/>xrefEntryNone)))<sp/>{</highlight></codeline>
<codeline lineno="1589"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>followed<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1590"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>followedPrev.size();<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="1591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(followedPrev.at(j)<sp/>==<sp/>prevXRefOffset)<sp/>{</highlight></codeline>
<codeline lineno="1592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>followed<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1595"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1596"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(followed)<sp/>{</highlight></codeline>
<codeline lineno="1597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Circular<sp/>XRef&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(ok<sp/>=<sp/>constructXRef(NULL)))<sp/>{</highlight></codeline>
<codeline lineno="1599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>errCode<sp/>=<sp/>errDamaged;</highlight></codeline>
<codeline lineno="1600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1602"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1603"><highlight class="normal"></highlight></codeline>
<codeline lineno="1604"><highlight class="normal"><sp/><sp/><sp/><sp/>followedPrev.push_back<sp/>(prevXRefOffset);</highlight></codeline>
<codeline lineno="1605"><highlight class="normal"></highlight></codeline>
<codeline lineno="1606"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;Goffset&gt;<sp/>followedXRefStm;</highlight></codeline>
<codeline lineno="1607"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!readXRef(&amp;prevXRefOffset,<sp/>&amp;followedXRefStm,<sp/>xrefStreamObjsNum))<sp/>{</highlight></codeline>
<codeline lineno="1608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prevXRefOffset<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1609"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1610"><highlight class="normal"></highlight></codeline>
<codeline lineno="1611"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>there<sp/>was<sp/>a<sp/>problem<sp/>with<sp/>the<sp/>xref<sp/>table,<sp/>or<sp/>we<sp/>haven&apos;t<sp/>found<sp/>the<sp/>entry</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1612"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>were<sp/>looking<sp/>for,<sp/>try<sp/>to<sp/>reconstruct<sp/>the<sp/>xref</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1613"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ok<sp/>||<sp/>(!prevXRefOffset<sp/>&amp;&amp;<sp/>untilEntryNum<sp/>!=<sp/>-1<sp/>&amp;&amp;<sp/>entries[untilEntryNum].type<sp/>==<sp/>xrefEntryNone))<sp/>{</highlight></codeline>
<codeline lineno="1614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GBool<sp/>wasReconstructed<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(ok<sp/>=<sp/>constructXRef(&amp;wasReconstructed)))<sp/>{</highlight></codeline>
<codeline lineno="1616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>errCode<sp/>=<sp/>errDamaged;</highlight></codeline>
<codeline lineno="1617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1620"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1621"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1622"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1623"><highlight class="normal"></highlight></codeline>
<codeline lineno="1624"><highlight class="normal"><ref refid="struct_x_ref_entry" kindref="compound">XRefEntry</ref><sp/>*XRef::getEntry(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>GBool<sp/>complainIfMissing)</highlight></codeline>
<codeline lineno="1625"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1626"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&gt;=<sp/>size<sp/>||<sp/>entries[i].type<sp/>==<sp/>xrefEntryNone)<sp/>{</highlight></codeline>
<codeline lineno="1627"><highlight class="normal"></highlight></codeline>
<codeline lineno="1628"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((!xRefStream)<sp/>&amp;&amp;<sp/>mainXRefEntriesOffset)<sp/>{</highlight></codeline>
<codeline lineno="1629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!parseEntry(mainXRefEntriesOffset<sp/>+<sp/>20*i,<sp/>&amp;entries[i]))<sp/>{</highlight></codeline>
<codeline lineno="1630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>parse<sp/>XRef<sp/>entry<sp/>[{0:d}].&quot;</highlight><highlight class="normal">,<sp/>i);</highlight></codeline>
<codeline lineno="1631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1632"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Read<sp/>XRef<sp/>tables<sp/>until<sp/>the<sp/>entry<sp/>we&apos;re<sp/>looking<sp/>for<sp/>is<sp/>found</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>readXRefUntil(i);</highlight></codeline>
<codeline lineno="1635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>might<sp/>have<sp/>reconstructed<sp/>the<sp/>xref</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>again<sp/>i<sp/>is<sp/>in<sp/>bounds</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlikely(i<sp/>&gt;=<sp/>size))<sp/>{</highlight></codeline>
<codeline lineno="1639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="struct_x_ref_entry" kindref="compound">XRefEntry</ref><sp/>dummy;</highlight></codeline>
<codeline lineno="1640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dummy.offset<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dummy.gen<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="1642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dummy.type<sp/>=<sp/>xrefEntryNone;</highlight></codeline>
<codeline lineno="1643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dummy.flags<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;dummy;</highlight></codeline>
<codeline lineno="1645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1646"><highlight class="normal"></highlight></codeline>
<codeline lineno="1647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(entries[i].type<sp/>==<sp/>xrefEntryNone)<sp/>{</highlight></codeline>
<codeline lineno="1648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(complainIfMissing)<sp/>{</highlight></codeline>
<codeline lineno="1649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>XRef<sp/>entry&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>entries[i].type<sp/>=<sp/>xrefEntryFree;</highlight></codeline>
<codeline lineno="1652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1653"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1654"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1655"><highlight class="normal"></highlight></codeline>
<codeline lineno="1656"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;entries[i];</highlight></codeline>
<codeline lineno="1657"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1658"><highlight class="normal"></highlight></codeline>
<codeline lineno="1659"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Recursively<sp/>sets<sp/>the<sp/>Unencrypted<sp/>flag<sp/>in<sp/>all<sp/>referenced<sp/>xref<sp/>entries</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1660"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>XRef::markUnencrypted(<ref refid="class_object" kindref="compound">Object</ref><sp/>*obj)<sp/>{</highlight></codeline>
<codeline lineno="1661"><highlight class="normal"><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>obj1;</highlight></codeline>
<codeline lineno="1662"><highlight class="normal"></highlight></codeline>
<codeline lineno="1663"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(obj-&gt;getType())<sp/>{</highlight></codeline>
<codeline lineno="1664"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>objArray:</highlight></codeline>
<codeline lineno="1665"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_array" kindref="compound">Array</ref><sp/>*array<sp/>=<sp/>obj-&gt;getArray();</highlight></codeline>
<codeline lineno="1667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>array-&gt;getLength();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>markUnencrypted(array-&gt;getNF(i,<sp/>&amp;obj1));</highlight></codeline>
<codeline lineno="1669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="1670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1672"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1673"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>objStream:</highlight></codeline>
<codeline lineno="1674"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>objDict:</highlight></codeline>
<codeline lineno="1675"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_dict" kindref="compound">Dict</ref><sp/>*dict;</highlight></codeline>
<codeline lineno="1677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj-&gt;getType()<sp/>==<sp/>objStream)<sp/>{</highlight></codeline>
<codeline lineno="1678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_stream" kindref="compound">Stream</ref><sp/>*stream<sp/>=<sp/>obj-&gt;getStream();</highlight></codeline>
<codeline lineno="1679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dict<sp/>=<sp/>stream-&gt;getDict();</highlight></codeline>
<codeline lineno="1680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dict<sp/>=<sp/>obj-&gt;getDict();</highlight></codeline>
<codeline lineno="1682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>dict-&gt;getLength();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>markUnencrypted(dict-&gt;getValNF(i,<sp/>&amp;obj1));</highlight></codeline>
<codeline lineno="1685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="1686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1688"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1689"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>objRef:</highlight></codeline>
<codeline lineno="1690"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_ref" kindref="compound">Ref</ref><sp/>ref<sp/>=<sp/>obj-&gt;getRef();</highlight></codeline>
<codeline lineno="1692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_x_ref_entry" kindref="compound">XRefEntry</ref><sp/>*e<sp/>=<sp/>getEntry(ref.num);</highlight></codeline>
<codeline lineno="1693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(e-&gt;getFlag(XRefEntry::Unencrypted))</highlight></codeline>
<codeline lineno="1694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>We&apos;ve<sp/>already<sp/>been<sp/>here:<sp/>prevent<sp/>infinite<sp/>recursion</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>e-&gt;setFlag(XRefEntry::Unencrypted,<sp/>gTrue);</highlight></codeline>
<codeline lineno="1696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fetch(ref.num,<sp/>ref.gen,<sp/>&amp;obj1);</highlight></codeline>
<codeline lineno="1697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>markUnencrypted(&amp;obj1);</highlight></codeline>
<codeline lineno="1698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj1.free();</highlight></codeline>
<codeline lineno="1699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1700"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1701"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1703"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1704"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1705"><highlight class="normal"></highlight></codeline>
<codeline lineno="1706"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>XRef::scanSpecialFlags()<sp/>{</highlight></codeline>
<codeline lineno="1707"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(scannedSpecialFlags)<sp/>{</highlight></codeline>
<codeline lineno="1708"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1709"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1710"><highlight class="normal"><sp/><sp/>scannedSpecialFlags<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="1711"><highlight class="normal"></highlight></codeline>
<codeline lineno="1712"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>&quot;Rewind&quot;<sp/>the<sp/>XRef<sp/>linked<sp/>list,<sp/>so<sp/>that<sp/>readXRefUntil<sp/>re-reads<sp/>all<sp/>XRef</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1713"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>tables/streams,<sp/>even<sp/>those<sp/>that<sp/>had<sp/>already<sp/>been<sp/>parsed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1714"><highlight class="normal"><sp/><sp/>prevXRefOffset<sp/>=<sp/>mainXRefOffset;</highlight></codeline>
<codeline lineno="1715"><highlight class="normal"></highlight></codeline>
<codeline lineno="1716"><highlight class="normal"><sp/><sp/>std::vector&lt;int&gt;<sp/>xrefStreamObjNums;</highlight></codeline>
<codeline lineno="1717"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!streamEndsLen)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>don&apos;t<sp/>do<sp/>it<sp/>for<sp/>already<sp/>reconstructed<sp/>xref</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1718"><highlight class="normal"><sp/><sp/><sp/><sp/>readXRefUntil(-1<sp/></highlight><highlight class="comment">/*<sp/>read<sp/>all<sp/>xref<sp/>sections<sp/>*/</highlight><highlight class="normal">,<sp/>&amp;xrefStreamObjNums);</highlight></codeline>
<codeline lineno="1719"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1720"><highlight class="normal"></highlight></codeline>
<codeline lineno="1721"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Mark<sp/>object<sp/>streams<sp/>as<sp/>DontRewrite,<sp/>because<sp/>we<sp/>write<sp/>each<sp/>object</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1722"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>individually<sp/>in<sp/>full<sp/>rewrite<sp/>mode.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1723"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>size;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1724"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(entries[i].type<sp/>==<sp/>xrefEntryCompressed)<sp/>{</highlight></codeline>
<codeline lineno="1725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>objStmNum<sp/>=<sp/>entries[i].offset;</highlight></codeline>
<codeline lineno="1726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlikely(objStmNum<sp/>&lt;<sp/>0<sp/>||<sp/>objStmNum<sp/>&gt;=<sp/>size))<sp/>{</highlight></codeline>
<codeline lineno="1727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxError,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Compressed<sp/>object<sp/>offset<sp/>out<sp/>of<sp/>xref<sp/>bounds&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getEntry(objStmNum)-&gt;setFlag(XRefEntry::DontRewrite,<sp/>gTrue);</highlight></codeline>
<codeline lineno="1730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1731"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1732"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1733"><highlight class="normal"></highlight></codeline>
<codeline lineno="1734"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Mark<sp/>XRef<sp/>streams<sp/>objects<sp/>as<sp/>Unencrypted<sp/>and<sp/>DontRewrite</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1735"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>xrefStreamObjNums.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1736"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>objNum<sp/>=<sp/>xrefStreamObjNums.at(i);</highlight></codeline>
<codeline lineno="1737"><highlight class="normal"><sp/><sp/><sp/><sp/>getEntry(objNum)-&gt;setFlag(XRefEntry::Unencrypted,<sp/>gTrue);</highlight></codeline>
<codeline lineno="1738"><highlight class="normal"><sp/><sp/><sp/><sp/>getEntry(objNum)-&gt;setFlag(XRefEntry::DontRewrite,<sp/>gTrue);</highlight></codeline>
<codeline lineno="1739"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1740"><highlight class="normal"></highlight></codeline>
<codeline lineno="1741"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Mark<sp/>objects<sp/>referred<sp/>from<sp/>the<sp/>Encrypt<sp/>dict<sp/>as<sp/>Unencrypted</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1742"><highlight class="normal"><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>obj;</highlight></codeline>
<codeline lineno="1743"><highlight class="normal"><sp/><sp/>markUnencrypted(trailerDict.dictLookupNF(</highlight><highlight class="stringliteral">&quot;Encrypt&quot;</highlight><highlight class="normal">,<sp/>&amp;obj));</highlight></codeline>
<codeline lineno="1744"><highlight class="normal"><sp/><sp/>obj.free();</highlight></codeline>
<codeline lineno="1745"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1746"><highlight class="normal"></highlight></codeline>
<codeline lineno="1747"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>XRef::markUnencrypted()<sp/>{</highlight></codeline>
<codeline lineno="1748"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Mark<sp/>objects<sp/>referred<sp/>from<sp/>the<sp/>Encrypt<sp/>dict<sp/>as<sp/>Unencrypted</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1749"><highlight class="normal"><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>obj;</highlight></codeline>
<codeline lineno="1750"><highlight class="normal"><sp/><sp/>trailerDict.dictLookupNF(</highlight><highlight class="stringliteral">&quot;Encrypt&quot;</highlight><highlight class="normal">,<sp/>&amp;obj);</highlight></codeline>
<codeline lineno="1751"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj.isRef())<sp/>{</highlight></codeline>
<codeline lineno="1752"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_x_ref_entry" kindref="compound">XRefEntry</ref><sp/>*e<sp/>=<sp/>getEntry(obj.getRefNum());</highlight></codeline>
<codeline lineno="1753"><highlight class="normal"><sp/><sp/><sp/><sp/>e-&gt;setFlag(XRefEntry::Unencrypted,<sp/>gTrue);</highlight></codeline>
<codeline lineno="1754"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1755"><highlight class="normal"><sp/><sp/>obj.free();</highlight></codeline>
<codeline lineno="1756"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1757"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="thirdparty/poppler/poppler/XRef.cc"/>
  </compounddef>
</doxygen>
