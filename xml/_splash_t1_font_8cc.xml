<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="_splash_t1_font_8cc" kind="file" language="C++">
    <compoundname>SplashT1Font.cc</compoundname>
    <includes local="no">config.h</includes>
    <incdepgraph>
      <node id="92763">
        <label>thirdparty/poppler/splash/SplashT1Font.cc</label>
        <link refid="_splash_t1_font_8cc"/>
        <childnode refid="92764" relation="include">
        </childnode>
      </node>
      <node id="92764">
        <label>config.h</label>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//========================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SplashT1Font.cc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//========================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//========================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Modified<sp/>under<sp/>the<sp/>Poppler<sp/>project<sp/>-<sp/>http://poppler.freedesktop.org</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>All<sp/>changes<sp/>made<sp/>under<sp/>the<sp/>Poppler<sp/>project<sp/>to<sp/>this<sp/>file<sp/>are<sp/>licensed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>under<sp/>GPL<sp/>version<sp/>2<sp/>or<sp/>later</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2007<sp/>Albert<sp/>Astals<sp/>Cid<sp/>&lt;aacid@kde.org&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>To<sp/>see<sp/>a<sp/>description<sp/>of<sp/>the<sp/>changes<sp/>please<sp/>see<sp/>the<sp/>Changelog<sp/>file<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//<sp/>came<sp/>with<sp/>your<sp/>tarball<sp/>or<sp/>type<sp/>make<sp/>ChangeLog<sp/>if<sp/>you<sp/>are<sp/>building<sp/>from<sp/>git</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//========================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;config.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>HAVE_T1LIB_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>USE_GCC_PRAGMAS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>implementation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;t1lib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;goo/gmem.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;SplashMath.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;SplashGlyphBitmap.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;SplashPath.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;SplashT1FontEngine.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;SplashT1FontFile.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;SplashT1Font.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>Guchar<sp/>bitReverse[256]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/>0x00,<sp/>0x80,<sp/>0x40,<sp/>0xc0,<sp/>0x20,<sp/>0xa0,<sp/>0x60,<sp/>0xe0,</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/>0x10,<sp/>0x90,<sp/>0x50,<sp/>0xd0,<sp/>0x30,<sp/>0xb0,<sp/>0x70,<sp/>0xf0,</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/>0x08,<sp/>0x88,<sp/>0x48,<sp/>0xc8,<sp/>0x28,<sp/>0xa8,<sp/>0x68,<sp/>0xe8,</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/>0x18,<sp/>0x98,<sp/>0x58,<sp/>0xd8,<sp/>0x38,<sp/>0xb8,<sp/>0x78,<sp/>0xf8,</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/>0x04,<sp/>0x84,<sp/>0x44,<sp/>0xc4,<sp/>0x24,<sp/>0xa4,<sp/>0x64,<sp/>0xe4,</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/>0x14,<sp/>0x94,<sp/>0x54,<sp/>0xd4,<sp/>0x34,<sp/>0xb4,<sp/>0x74,<sp/>0xf4,</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/>0x0c,<sp/>0x8c,<sp/>0x4c,<sp/>0xcc,<sp/>0x2c,<sp/>0xac,<sp/>0x6c,<sp/>0xec,</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/>0x1c,<sp/>0x9c,<sp/>0x5c,<sp/>0xdc,<sp/>0x3c,<sp/>0xbc,<sp/>0x7c,<sp/>0xfc,</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/>0x02,<sp/>0x82,<sp/>0x42,<sp/>0xc2,<sp/>0x22,<sp/>0xa2,<sp/>0x62,<sp/>0xe2,</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/>0x12,<sp/>0x92,<sp/>0x52,<sp/>0xd2,<sp/>0x32,<sp/>0xb2,<sp/>0x72,<sp/>0xf2,</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/>0x0a,<sp/>0x8a,<sp/>0x4a,<sp/>0xca,<sp/>0x2a,<sp/>0xaa,<sp/>0x6a,<sp/>0xea,</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/>0x1a,<sp/>0x9a,<sp/>0x5a,<sp/>0xda,<sp/>0x3a,<sp/>0xba,<sp/>0x7a,<sp/>0xfa,</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/>0x06,<sp/>0x86,<sp/>0x46,<sp/>0xc6,<sp/>0x26,<sp/>0xa6,<sp/>0x66,<sp/>0xe6,</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/>0x16,<sp/>0x96,<sp/>0x56,<sp/>0xd6,<sp/>0x36,<sp/>0xb6,<sp/>0x76,<sp/>0xf6,</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/>0x0e,<sp/>0x8e,<sp/>0x4e,<sp/>0xce,<sp/>0x2e,<sp/>0xae,<sp/>0x6e,<sp/>0xee,</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/>0x1e,<sp/>0x9e,<sp/>0x5e,<sp/>0xde,<sp/>0x3e,<sp/>0xbe,<sp/>0x7e,<sp/>0xfe,</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/>0x01,<sp/>0x81,<sp/>0x41,<sp/>0xc1,<sp/>0x21,<sp/>0xa1,<sp/>0x61,<sp/>0xe1,</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/>0x11,<sp/>0x91,<sp/>0x51,<sp/>0xd1,<sp/>0x31,<sp/>0xb1,<sp/>0x71,<sp/>0xf1,</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/>0x09,<sp/>0x89,<sp/>0x49,<sp/>0xc9,<sp/>0x29,<sp/>0xa9,<sp/>0x69,<sp/>0xe9,</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/>0x19,<sp/>0x99,<sp/>0x59,<sp/>0xd9,<sp/>0x39,<sp/>0xb9,<sp/>0x79,<sp/>0xf9,</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/>0x05,<sp/>0x85,<sp/>0x45,<sp/>0xc5,<sp/>0x25,<sp/>0xa5,<sp/>0x65,<sp/>0xe5,</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/>0x15,<sp/>0x95,<sp/>0x55,<sp/>0xd5,<sp/>0x35,<sp/>0xb5,<sp/>0x75,<sp/>0xf5,</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/>0x0d,<sp/>0x8d,<sp/>0x4d,<sp/>0xcd,<sp/>0x2d,<sp/>0xad,<sp/>0x6d,<sp/>0xed,</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/>0x1d,<sp/>0x9d,<sp/>0x5d,<sp/>0xdd,<sp/>0x3d,<sp/>0xbd,<sp/>0x7d,<sp/>0xfd,</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/>0x03,<sp/>0x83,<sp/>0x43,<sp/>0xc3,<sp/>0x23,<sp/>0xa3,<sp/>0x63,<sp/>0xe3,</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/>0x13,<sp/>0x93,<sp/>0x53,<sp/>0xd3,<sp/>0x33,<sp/>0xb3,<sp/>0x73,<sp/>0xf3,</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/>0x0b,<sp/>0x8b,<sp/>0x4b,<sp/>0xcb,<sp/>0x2b,<sp/>0xab,<sp/>0x6b,<sp/>0xeb,</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/>0x1b,<sp/>0x9b,<sp/>0x5b,<sp/>0xdb,<sp/>0x3b,<sp/>0xbb,<sp/>0x7b,<sp/>0xfb,</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/>0x07,<sp/>0x87,<sp/>0x47,<sp/>0xc7,<sp/>0x27,<sp/>0xa7,<sp/>0x67,<sp/>0xe7,</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/>0x17,<sp/>0x97,<sp/>0x57,<sp/>0xd7,<sp/>0x37,<sp/>0xb7,<sp/>0x77,<sp/>0xf7,</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/>0x0f,<sp/>0x8f,<sp/>0x4f,<sp/>0xcf,<sp/>0x2f,<sp/>0xaf,<sp/>0x6f,<sp/>0xef,</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/>0x1f,<sp/>0x9f,<sp/>0x5f,<sp/>0xdf,<sp/>0x3f,<sp/>0xbf,<sp/>0x7f,<sp/>0xff</highlight></codeline>
<codeline lineno="74"><highlight class="normal">};</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SplashT1Font</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal">SplashT1Font::SplashT1Font(SplashT1FontFile<sp/>*fontFileA,<sp/>SplashCoord<sp/>*matA,</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SplashCoord<sp/>*textMatA):</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><ref refid="class_splash_font" kindref="compound">SplashFont</ref>(fontFileA,<sp/>matA,<sp/>textMatA,<sp/>fontFileA-&gt;engine-&gt;aa)</highlight></codeline>
<codeline lineno="83"><highlight class="normal">{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/>T1_TMATRIX<sp/>matrix;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/>BBox<sp/>bbox;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/>SplashCoord<sp/>bbx0,<sp/>bby0,<sp/>bbx1,<sp/>bby1;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x,<sp/>y;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/>t1libID<sp/>=<sp/>T1_CopyFont(fontFileA-&gt;t1libID);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/>outlineID<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>compute<sp/>font<sp/>size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/>size<sp/>=<sp/>(float)splashDist(0,<sp/>0,<sp/>mat[2],<sp/>mat[3]);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>transform<sp/>the<sp/>four<sp/>corners<sp/>of<sp/>the<sp/>font<sp/>bounding<sp/>box<sp/>--<sp/>the<sp/>min</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>max<sp/>values<sp/>form<sp/>the<sp/>bounding<sp/>box<sp/>of<sp/>the<sp/>transformed<sp/>font</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/>bbox<sp/>=<sp/>T1_GetFontBBox(t1libID);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/>bbx0<sp/>=<sp/>0.001<sp/>*<sp/>bbox.llx;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/>bby0<sp/>=<sp/>0.001<sp/>*<sp/>bbox.lly;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/>bbx1<sp/>=<sp/>0.001<sp/>*<sp/>bbox.urx;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/>bby1<sp/>=<sp/>0.001<sp/>*<sp/>bbox.ury;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>some<sp/>fonts<sp/>are<sp/>completely<sp/>broken,<sp/>so<sp/>we<sp/>fake<sp/>it<sp/>(with<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>large<sp/>enough<sp/>that<sp/>most<sp/>glyphs<sp/>should<sp/>fit)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bbx0<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>bby0<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>bbx1<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>bby1<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>bbx0<sp/>=<sp/>bby0<sp/>=<sp/>-0.5;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>bbx1<sp/>=<sp/>bby1<sp/>=<sp/>1.5;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/>x<sp/>=<sp/>(int)(mat[0]<sp/>*<sp/>bbx0<sp/>+<sp/>mat[2]<sp/>*<sp/>bby0);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/>xMin<sp/>=<sp/>xMax<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/>y<sp/>=<sp/>(int)(mat[1]<sp/>*<sp/>bbx0<sp/>+<sp/>mat[3]<sp/>*<sp/>bby0);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/>yMin<sp/>=<sp/>yMax<sp/>=<sp/>y;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/>x<sp/>=<sp/>(int)(mat[0]<sp/>*<sp/>bbx0<sp/>+<sp/>mat[2]<sp/>*<sp/>bby1);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>&lt;<sp/>xMin)<sp/>{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>xMin<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>&gt;<sp/>xMax)<sp/>{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>xMax<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/>y<sp/>=<sp/>(int)(mat[1]<sp/>*<sp/>bbx0<sp/>+<sp/>mat[3]<sp/>*<sp/>bby1);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y<sp/>&lt;<sp/>yMin)<sp/>{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>yMin<sp/>=<sp/>y;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y<sp/>&gt;<sp/>yMax)<sp/>{</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>yMax<sp/>=<sp/>y;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/>x<sp/>=<sp/>(int)(mat[0]<sp/>*<sp/>bbx1<sp/>+<sp/>mat[2]<sp/>*<sp/>bby0);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>&lt;<sp/>xMin)<sp/>{</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>xMin<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>&gt;<sp/>xMax)<sp/>{</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>xMax<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/>y<sp/>=<sp/>(int)(mat[1]<sp/>*<sp/>bbx1<sp/>+<sp/>mat[3]<sp/>*<sp/>bby0);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y<sp/>&lt;<sp/>yMin)<sp/>{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>yMin<sp/>=<sp/>y;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y<sp/>&gt;<sp/>yMax)<sp/>{</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>yMax<sp/>=<sp/>y;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/>x<sp/>=<sp/>(int)(mat[0]<sp/>*<sp/>bbx1<sp/>+<sp/>mat[2]<sp/>*<sp/>bby1);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>&lt;<sp/>xMin)<sp/>{</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>xMin<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>&gt;<sp/>xMax)<sp/>{</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>xMax<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/>y<sp/>=<sp/>(int)(mat[1]<sp/>*<sp/>bbx1<sp/>+<sp/>mat[3]<sp/>*<sp/>bby1);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y<sp/>&lt;<sp/>yMin)<sp/>{</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>yMin<sp/>=<sp/>y;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y<sp/>&gt;<sp/>yMax)<sp/>{</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>yMax<sp/>=<sp/>y;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>a<sp/>kludge:<sp/>some<sp/>buggy<sp/>PDF<sp/>generators<sp/>embed<sp/>fonts<sp/>with</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>zero<sp/>bounding<sp/>boxes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(xMax<sp/>==<sp/>xMin)<sp/>{</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>xMin<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>xMax<sp/>=<sp/>(int)size;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(yMax<sp/>==<sp/>yMin)<sp/>{</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>yMin<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>yMax<sp/>=<sp/>(int)(1.2<sp/>*<sp/>size);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Another<sp/>kludge:<sp/>an<sp/>unusually<sp/>large<sp/>xMin<sp/>or<sp/>yMin<sp/>coordinate<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>probably<sp/>wrong.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(xMin<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>xMin<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(yMin<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>yMin<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Another<sp/>kludge:<sp/>t1lib<sp/>doesn&apos;t<sp/>correctly<sp/>handle<sp/>fonts<sp/>with</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>real<sp/>(non-integer)<sp/>bounding<sp/>box<sp/>coordinates.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(xMax<sp/>-<sp/>xMin<sp/>&gt;<sp/>5000)<sp/>{</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>xMin<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>xMax<sp/>=<sp/>(int)size;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(yMax<sp/>-<sp/>yMin<sp/>&gt;<sp/>5000)<sp/>{</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>yMin<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>yMax<sp/>=<sp/>(int)(1.2<sp/>*<sp/>size);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>transform<sp/>the<sp/>font</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/>matrix.cxx<sp/>=<sp/>(double)mat[0]<sp/>/<sp/>size;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/>matrix.cxy<sp/>=<sp/>(double)mat[1]<sp/>/<sp/>size;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/>matrix.cyx<sp/>=<sp/>(double)mat[2]<sp/>/<sp/>size;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/>matrix.cyy<sp/>=<sp/>(double)mat[3]<sp/>/<sp/>size;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/>T1_TransformFont(t1libID,<sp/>&amp;matrix);</highlight></codeline>
<codeline lineno="183"><highlight class="normal">}</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal">SplashT1Font::~SplashT1Font()<sp/>{</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/>T1_DeleteFont(t1libID);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(outlineID<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/>T1_DeleteFont(outlineID);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="190"><highlight class="normal">}</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal">GBool<sp/>SplashT1Font::getGlyph(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>xFrac,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>yFrac,</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_splash_glyph_bitmap" kindref="compound">SplashGlyphBitmap</ref><sp/>*bitmap,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x0,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y0,<sp/><ref refid="class_splash_clip" kindref="compound">SplashClip</ref><sp/>*clip,<sp/>SplashClipResult<sp/>*clipRes)<sp/>{</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SplashFont::getGlyph(c,<sp/>0,<sp/>0,<sp/>bitmap,<sp/>x0,<sp/>y0,<sp/>clip,<sp/>clipRes);</highlight></codeline>
<codeline lineno="195"><highlight class="normal">}</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal">GBool<sp/>SplashT1Font::makeGlyph(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>xFrac,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>yFrac,</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_splash_glyph_bitmap" kindref="compound">SplashGlyphBitmap</ref><sp/>*bitmap,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x0,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y0,<sp/><ref refid="class_splash_clip" kindref="compound">SplashClip</ref><sp/>*clip,<sp/>SplashClipResult<sp/>*clipRes)<sp/>{</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/>GLYPH<sp/>*glyph;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,<sp/>i;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(aa)<sp/>{</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/>glyph<sp/>=<sp/>T1_AASetChar(t1libID,<sp/>c,<sp/>size,<sp/>NULL);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/>glyph<sp/>=<sp/>T1_SetChar(t1libID,<sp/>c,<sp/>size,<sp/>NULL);</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!glyph)<sp/>{</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/>bitmap-&gt;x<sp/>=<sp/>-glyph-&gt;metrics.leftSideBearing;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/>bitmap-&gt;y<sp/>=<sp/>glyph-&gt;metrics.ascent;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/>bitmap-&gt;w<sp/>=<sp/>glyph-&gt;metrics.rightSideBearing<sp/>-<sp/>glyph-&gt;metrics.leftSideBearing;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/>bitmap-&gt;h<sp/>=<sp/>glyph-&gt;metrics.ascent<sp/>-<sp/>glyph-&gt;metrics.descent;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/>bitmap-&gt;aa<sp/>=<sp/>aa;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(aa)<sp/>{</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>bitmap-&gt;data<sp/>=<sp/>(Guchar<sp/>*)glyph-&gt;bits;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/>bitmap-&gt;freeData<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/>n<sp/>=<sp/>bitmap-&gt;h<sp/>*<sp/>((bitmap-&gt;w<sp/>+<sp/>7)<sp/>&gt;&gt;<sp/>3);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/>bitmap-&gt;data<sp/>=<sp/>(Guchar<sp/>*)gmalloc(n);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bitmap-&gt;data[i]<sp/>=<sp/>bitReverse[glyph-&gt;bits[i]<sp/>&amp;<sp/>0xff];</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/>bitmap-&gt;freeData<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/>*clipRes<sp/>=<sp/>clip-&gt;testRect(x0<sp/>-<sp/>bitmap-&gt;x,</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y0<sp/>-<sp/>bitmap-&gt;y,</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x0<sp/>-<sp/>bitmap-&gt;x<sp/>+<sp/>bitmap-&gt;w<sp/>-<sp/>1,</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y0<sp/>-<sp/>bitmap-&gt;y<sp/>+<sp/>bitmap-&gt;h<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gTrue;</highlight></codeline>
<codeline lineno="234"><highlight class="normal">}</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><ref refid="class_splash_path" kindref="compound">SplashPath</ref><sp/>*SplashT1Font::getGlyphPath(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c)<sp/>{</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/>T1_TMATRIX<sp/>matrix;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><ref refid="class_splash_path" kindref="compound">SplashPath</ref><sp/>*path;</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/>T1_OUTLINE<sp/>*outline;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/>T1_PATHSEGMENT<sp/>*seg;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/>T1_BEZIERSEGMENT<sp/>*bez;</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x,<sp/>y,<sp/>x1,<sp/>y1;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/>GBool<sp/>needClose;</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(outlineID<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/>outlineID<sp/>=<sp/>T1_CopyFont(((SplashT1FontFile<sp/>*)fontFile)-&gt;t1libID);</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/>outlineSize<sp/>=<sp/>(float)splashDist(0,<sp/>0,<sp/>textMat[2],<sp/>textMat[3]);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/>matrix.cxx<sp/>=<sp/>(double)textMat[0]<sp/>/<sp/>outlineSize;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/>matrix.cxy<sp/>=<sp/>(double)textMat[1]<sp/>/<sp/>outlineSize;</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/>matrix.cyx<sp/>=<sp/>(double)textMat[2]<sp/>/<sp/>outlineSize;</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/>matrix.cyy<sp/>=<sp/>(double)textMat[3]<sp/>/<sp/>outlineSize;</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>t1lib<sp/>doesn&apos;t<sp/>seem<sp/>to<sp/>handle<sp/>small<sp/>sizes<sp/>correctly<sp/>here,<sp/>so<sp/>set</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>size<sp/>to<sp/>1000,<sp/>and<sp/>scale<sp/>the<sp/>resulting<sp/>coordinates<sp/>later</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/>outlineMul<sp/>=<sp/>(float)(outlineSize<sp/>/<sp/>65536000.0);</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/>outlineSize<sp/>=<sp/>1000;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/>T1_TransformFont(outlineID,<sp/>&amp;matrix);</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/>path<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_splash_path" kindref="compound">SplashPath</ref>();</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((outline<sp/>=<sp/>T1_GetCharOutline(outlineID,<sp/>c,<sp/>outlineSize,<sp/>NULL)))<sp/>{</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NB:<sp/>t1lib<sp/>uses<sp/>integer<sp/>coordinates<sp/>here;<sp/>we<sp/>keep<sp/>a<sp/>running</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(x,y)<sp/>total<sp/>as<sp/>integers,<sp/>so<sp/>that<sp/>the<sp/>final<sp/>point<sp/>in<sp/>the<sp/>path<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>exactly<sp/>the<sp/>same<sp/>as<sp/>the<sp/>first<sp/>point,<sp/>thus<sp/>avoiding<sp/>weird</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>mitered<sp/>join<sp/>glitches</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/>x<sp/>=<sp/>y<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/>needClose<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(seg<sp/>=<sp/>outline;<sp/>seg;<sp/>seg<sp/>=<sp/>seg-&gt;link)<sp/>{</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(seg-&gt;type)<sp/>{</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>T1_PATHTYPE_MOVE:</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(needClose)<sp/>{</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>path-&gt;close();</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>needClose<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/>x<sp/>+=<sp/>seg-&gt;dest.x;</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/>y<sp/>+=<sp/>seg-&gt;dest.y;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/>path-&gt;moveTo(outlineMul<sp/>*<sp/>x,<sp/>-outlineMul<sp/>*<sp/>y);</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>T1_PATHTYPE_LINE:</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/>x<sp/>+=<sp/>seg-&gt;dest.x;</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/>y<sp/>+=<sp/>seg-&gt;dest.y;</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/>path-&gt;lineTo(outlineMul<sp/>*<sp/>x,<sp/>-outlineMul<sp/>*<sp/>y);</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/>needClose<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>T1_PATHTYPE_BEZIER:</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/>bez<sp/>=<sp/>(T1_BEZIERSEGMENT<sp/>*)seg;</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/>x1<sp/>=<sp/>x<sp/>+<sp/>bez-&gt;dest.x;</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/>y1<sp/>=<sp/>y<sp/>+<sp/>bez-&gt;dest.y;</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/>path-&gt;curveTo(outlineMul<sp/>*<sp/>(x<sp/>+<sp/>bez-&gt;B.x),</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-outlineMul<sp/>*<sp/>(y<sp/>+<sp/>bez-&gt;B.y),</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outlineMul<sp/>*<sp/>(x<sp/>+<sp/>bez-&gt;C.x),</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-outlineMul<sp/>*<sp/>(y<sp/>+<sp/>bez-&gt;C.y),</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outlineMul<sp/>*<sp/>x1,</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-outlineMul<sp/>*<sp/>y1);</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/>x<sp/>=<sp/>x1;</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/>y<sp/>=<sp/>y1;</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/>needClose<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(needClose)<sp/>{</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>path-&gt;close();</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/>T1_FreeOutline(outline);</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>path;</highlight></codeline>
<codeline lineno="307"><highlight class="normal">}</highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>HAVE_T1LIB_H</highlight></codeline>
    </programlisting>
    <location file="thirdparty/poppler/splash/SplashT1Font.cc"/>
  </compounddef>
</doxygen>
