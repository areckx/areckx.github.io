<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="stack_8h" kind="file" language="C++">
    <compoundname>stack.h</compoundname>
    <includedby refid="asn1_8h" local="no">thirdparty/openssl/include/openssl/asn1.h</includedby>
    <includedby refid="conf_8h" local="no">thirdparty/openssl/include/openssl/conf.h</includedby>
    <includedby refid="crypto_8h" local="no">thirdparty/openssl/include/openssl/crypto.h</includedby>
    <includedby refid="pem_8h" local="no">thirdparty/openssl/include/openssl/pem.h</includedby>
    <includedby refid="safestack_8h" local="no">thirdparty/openssl/include/openssl/safestack.h</includedby>
    <includedby refid="ts_8h" local="no">thirdparty/openssl/include/openssl/ts.h</includedby>
    <includedby refid="txt__db_8h" local="no">thirdparty/openssl/include/openssl/txt_db.h</includedby>
    <includedby refid="x509_8h" local="no">thirdparty/openssl/include/openssl/x509.h</includedby>
    <invincdepgraph>
      <node id="83607">
        <label>thirdparty/openssl/include/openssl/engine.h</label>
        <link refid="engine_8h_source"/>
      </node>
      <node id="83640">
        <label>thirdparty/openssl/include/openssl/dso.h</label>
        <link refid="dso_8h_source"/>
      </node>
      <node id="83618">
        <label>thirdparty/openssl/include/openssl/ts.h</label>
        <link refid="ts_8h_source"/>
      </node>
      <node id="83625">
        <label>thirdparty/openssl/include/openssl/hmac.h</label>
        <link refid="hmac_8h_source"/>
        <childnode refid="83615" relation="include">
        </childnode>
      </node>
      <node id="83647">
        <label>thirdparty/openssl/include/openssl/krb5_asn.h</label>
        <link refid="krb5__asn_8h_source"/>
      </node>
      <node id="83605">
        <label>thirdparty/openssl/include/openssl/ec.h</label>
        <link refid="ec_8h_source"/>
        <childnode refid="83606" relation="include">
        </childnode>
        <childnode refid="83621" relation="include">
        </childnode>
        <childnode refid="83608" relation="include">
        </childnode>
      </node>
      <node id="83631">
        <label>thirdparty/openssl/include/openssl/bio.h</label>
        <link refid="bio_8h_source"/>
        <childnode refid="83602" relation="include">
        </childnode>
        <childnode refid="83628" relation="include">
        </childnode>
        <childnode refid="83632" relation="include">
        </childnode>
        <childnode refid="83633" relation="include">
        </childnode>
        <childnode refid="83634" relation="include">
        </childnode>
        <childnode refid="83623" relation="include">
        </childnode>
        <childnode refid="83635" relation="include">
        </childnode>
        <childnode refid="83622" relation="include">
        </childnode>
        <childnode refid="83613" relation="include">
        </childnode>
        <childnode refid="83617" relation="include">
        </childnode>
        <childnode refid="83626" relation="include">
        </childnode>
        <childnode refid="83627" relation="include">
        </childnode>
        <childnode refid="83615" relation="include">
        </childnode>
        <childnode refid="83618" relation="include">
        </childnode>
        <childnode refid="83636" relation="include">
        </childnode>
        <childnode refid="83608" relation="include">
        </childnode>
        <childnode refid="83619" relation="include">
        </childnode>
        <childnode refid="83620" relation="include">
        </childnode>
      </node>
      <node id="83610">
        <label>thirdparty/poppler/poppler/SignatureHandler.h</label>
        <link refid="_signature_handler_8h_source"/>
        <childnode refid="83611" relation="include">
        </childnode>
      </node>
      <node id="83645">
        <label>thirdparty/openssl/include/openssl/des.h</label>
        <link refid="des_8h_source"/>
      </node>
      <node id="83644">
        <label>thirdparty/openssl/include/openssl/des_old.h</label>
        <link refid="des__old_8h_source"/>
        <childnode refid="83645" relation="include">
        </childnode>
      </node>
      <node id="83627">
        <label>thirdparty/openssl/include/openssl/rsa.h</label>
        <link refid="rsa_8h_source"/>
        <childnode refid="83607" relation="include">
        </childnode>
        <childnode refid="83618" relation="include">
        </childnode>
        <childnode refid="83608" relation="include">
        </childnode>
      </node>
      <node id="83601">
        <label>thirdparty/openssl/include/openssl/stack.h</label>
        <link refid="stack_8h"/>
        <childnode refid="83602" relation="include">
        </childnode>
        <childnode refid="83628" relation="include">
        </childnode>
        <childnode refid="83630" relation="include">
        </childnode>
        <childnode refid="83613" relation="include">
        </childnode>
        <childnode refid="83646" relation="include">
        </childnode>
        <childnode refid="83618" relation="include">
        </childnode>
        <childnode refid="83636" relation="include">
        </childnode>
        <childnode refid="83608" relation="include">
        </childnode>
      </node>
      <node id="83639">
        <label>thirdparty/openssl/include/openssl/comp.h</label>
        <link refid="comp_8h_source"/>
        <childnode refid="83615" relation="include">
        </childnode>
        <childnode refid="83616" relation="include">
        </childnode>
      </node>
      <node id="83624">
        <label>thirdparty/openssl/include/openssl/cmac.h</label>
        <link refid="cmac_8h_source"/>
      </node>
      <node id="83641">
        <label>thirdparty/openssl/include/openssl/seed.h</label>
        <link refid="seed_8h_source"/>
      </node>
      <node id="83614">
        <label>thirdparty/kQOAuth/kqoauthutils.cpp</label>
        <link refid="kqoauthutils_8cpp_source"/>
      </node>
      <node id="83636">
        <label>thirdparty/openssl/include/openssl/txt_db.h</label>
        <link refid="txt__db_8h_source"/>
      </node>
      <node id="83626">
        <label>thirdparty/openssl/include/openssl/pkcs7.h</label>
        <link refid="pkcs7_8h_source"/>
        <childnode refid="83608" relation="include">
        </childnode>
      </node>
      <node id="83603">
        <label>thirdparty/openssl/include/openssl/asn1_mac.h</label>
        <link refid="asn1__mac_8h_source"/>
      </node>
      <node id="83616">
        <label>thirdparty/openssl/include/openssl/ssl3.h</label>
        <link refid="ssl3_8h_source"/>
        <childnode refid="83615" relation="include">
        </childnode>
      </node>
      <node id="83637">
        <label>thirdparty/openssl/include/openssl/bn.h</label>
        <link refid="bn_8h_source"/>
        <childnode refid="83602" relation="include">
        </childnode>
        <childnode refid="83632" relation="include">
        </childnode>
        <childnode refid="83633" relation="include">
        </childnode>
        <childnode refid="83605" relation="include">
        </childnode>
        <childnode refid="83606" relation="include">
        </childnode>
        <childnode refid="83621" relation="include">
        </childnode>
        <childnode refid="83607" relation="include">
        </childnode>
        <childnode refid="83627" relation="include">
        </childnode>
        <childnode refid="83638" relation="include">
        </childnode>
      </node>
      <node id="83608">
        <label>thirdparty/openssl/include/openssl/x509.h</label>
        <link refid="x509_8h_source"/>
        <childnode refid="83609" relation="include">
        </childnode>
        <childnode refid="83607" relation="include">
        </childnode>
        <childnode refid="83612" relation="include">
        </childnode>
        <childnode refid="83613" relation="include">
        </childnode>
        <childnode refid="83617" relation="include">
        </childnode>
        <childnode refid="83615" relation="include">
        </childnode>
        <childnode refid="83618" relation="include">
        </childnode>
        <childnode refid="83619" relation="include">
        </childnode>
        <childnode refid="83620" relation="include">
        </childnode>
      </node>
      <node id="83633">
        <label>thirdparty/openssl/include/openssl/dsa.h</label>
        <link refid="dsa_8h_source"/>
        <childnode refid="83607" relation="include">
        </childnode>
        <childnode refid="83618" relation="include">
        </childnode>
        <childnode refid="83608" relation="include">
        </childnode>
      </node>
      <node id="83619">
        <label>thirdparty/openssl/include/openssl/x509_vfy.h</label>
        <link refid="x509__vfy_8h_source"/>
        <childnode refid="83608" relation="include">
        </childnode>
      </node>
      <node id="83642">
        <label>thirdparty/openssl/include/openssl/ui.h</label>
        <link refid="ui_8h_source"/>
        <childnode refid="83607" relation="include">
        </childnode>
        <childnode refid="83643" relation="include">
        </childnode>
      </node>
      <node id="83602">
        <label>thirdparty/openssl/include/openssl/asn1.h</label>
        <link refid="asn1_8h_source"/>
        <childnode refid="83603" relation="include">
        </childnode>
        <childnode refid="83604" relation="include">
        </childnode>
        <childnode refid="83605" relation="include">
        </childnode>
        <childnode refid="83622" relation="include">
        </childnode>
        <childnode refid="83626" relation="include">
        </childnode>
        <childnode refid="83627" relation="include">
        </childnode>
        <childnode refid="83618" relation="include">
        </childnode>
        <childnode refid="83608" relation="include">
        </childnode>
      </node>
      <node id="83629">
        <label>thirdparty/openssl/include/openssl/conf_api.h</label>
        <link refid="conf__api_8h_source"/>
      </node>
      <node id="83646">
        <label>thirdparty/openssl/include/openssl/safestack.h</label>
        <link refid="safestack_8h_source"/>
        <childnode refid="83602" relation="include">
        </childnode>
        <childnode refid="83628" relation="include">
        </childnode>
        <childnode refid="83630" relation="include">
        </childnode>
        <childnode refid="83647" relation="include">
        </childnode>
        <childnode refid="83612" relation="include">
        </childnode>
        <childnode refid="83638" relation="include">
        </childnode>
        <childnode refid="83615" relation="include">
        </childnode>
        <childnode refid="83618" relation="include">
        </childnode>
        <childnode refid="83642" relation="include">
        </childnode>
        <childnode refid="83608" relation="include">
        </childnode>
      </node>
      <node id="83623">
        <label>thirdparty/openssl/include/openssl/evp.h</label>
        <link refid="evp_8h_source"/>
        <childnode refid="83614" relation="include">
        </childnode>
        <childnode refid="83624" relation="include">
        </childnode>
        <childnode refid="83625" relation="include">
        </childnode>
        <childnode refid="83613" relation="include">
        </childnode>
        <childnode refid="83616" relation="include">
        </childnode>
        <childnode refid="83618" relation="include">
        </childnode>
        <childnode refid="83608" relation="include">
        </childnode>
      </node>
      <node id="83621">
        <label>thirdparty/openssl/include/openssl/ecdsa.h</label>
        <link refid="ecdsa_8h_source"/>
        <childnode refid="83607" relation="include">
        </childnode>
        <childnode refid="83608" relation="include">
        </childnode>
      </node>
      <node id="83628">
        <label>thirdparty/openssl/include/openssl/conf.h</label>
        <link refid="conf_8h_source"/>
        <childnode refid="83629" relation="include">
        </childnode>
        <childnode refid="83620" relation="include">
        </childnode>
      </node>
      <node id="83613">
        <label>thirdparty/openssl/include/openssl/pem.h</label>
        <link refid="pem_8h_source"/>
        <childnode refid="83614" relation="include">
        </childnode>
        <childnode refid="83615" relation="include">
        </childnode>
      </node>
      <node id="83635">
        <label>thirdparty/openssl/include/openssl/lhash.h</label>
        <link refid="lhash_8h_source"/>
        <childnode refid="83628" relation="include">
        </childnode>
        <childnode refid="83629" relation="include">
        </childnode>
        <childnode refid="83634" relation="include">
        </childnode>
        <childnode refid="83615" relation="include">
        </childnode>
        <childnode refid="83636" relation="include">
        </childnode>
        <childnode refid="83619" relation="include">
        </childnode>
      </node>
      <node id="83609">
        <label>thirdparty/openssl/include/openssl/cms.h</label>
        <link refid="cms_8h_source"/>
        <childnode refid="83610" relation="include">
        </childnode>
      </node>
      <node id="83638">
        <label>thirdparty/openssl/include/openssl/srp.h</label>
        <link refid="srp_8h_source"/>
      </node>
      <node id="83622">
        <label>thirdparty/openssl/include/openssl/objects.h</label>
        <link refid="objects_8h_source"/>
        <childnode refid="83623" relation="include">
        </childnode>
      </node>
      <node id="83615">
        <label>thirdparty/openssl/include/openssl/ssl.h</label>
        <link refid="ssl_8h_source"/>
        <childnode refid="83614" relation="include">
        </childnode>
        <childnode refid="83616" relation="include">
        </childnode>
      </node>
      <node id="83604">
        <label>thirdparty/openssl/include/openssl/asn1t.h</label>
        <link refid="asn1t_8h_source"/>
      </node>
      <node id="83634">
        <label>thirdparty/openssl/include/openssl/err.h</label>
        <link refid="err_8h_source"/>
        <childnode refid="83614" relation="include">
        </childnode>
        <childnode refid="83607" relation="include">
        </childnode>
      </node>
      <node id="83611">
        <label>thirdparty/poppler/poppler/SignatureHandler.cc</label>
        <link refid="_signature_handler_8cc_source"/>
      </node>
      <node id="83606">
        <label>thirdparty/openssl/include/openssl/ecdh.h</label>
        <link refid="ecdh_8h_source"/>
        <childnode refid="83607" relation="include">
        </childnode>
        <childnode refid="83608" relation="include">
        </childnode>
      </node>
      <node id="83620">
        <label>thirdparty/openssl/include/openssl/x509v3.h</label>
        <link refid="x509v3_8h_source"/>
        <childnode refid="83612" relation="include">
        </childnode>
        <childnode refid="83618" relation="include">
        </childnode>
      </node>
      <node id="83643">
        <label>thirdparty/openssl/include/openssl/ui_compat.h</label>
        <link refid="ui__compat_8h_source"/>
        <childnode refid="83644" relation="include">
        </childnode>
      </node>
      <node id="83617">
        <label>thirdparty/openssl/include/openssl/pkcs12.h</label>
        <link refid="pkcs12_8h_source"/>
      </node>
      <node id="83612">
        <label>thirdparty/openssl/include/openssl/ocsp.h</label>
        <link refid="ocsp_8h_source"/>
      </node>
      <node id="83630">
        <label>thirdparty/openssl/include/openssl/crypto.h</label>
        <link refid="crypto_8h_source"/>
        <childnode refid="83631" relation="include">
        </childnode>
        <childnode refid="83637" relation="include">
        </childnode>
        <childnode refid="83639" relation="include">
        </childnode>
        <childnode refid="83633" relation="include">
        </childnode>
        <childnode refid="83640" relation="include">
        </childnode>
        <childnode refid="83627" relation="include">
        </childnode>
        <childnode refid="83641" relation="include">
        </childnode>
        <childnode refid="83638" relation="include">
        </childnode>
        <childnode refid="83615" relation="include">
        </childnode>
        <childnode refid="83642" relation="include">
        </childnode>
        <childnode refid="83619" relation="include">
        </childnode>
      </node>
      <node id="83632">
        <label>thirdparty/openssl/include/openssl/dh.h</label>
        <link refid="dh_8h_source"/>
        <childnode refid="83633" relation="include">
        </childnode>
        <childnode refid="83607" relation="include">
        </childnode>
        <childnode refid="83618" relation="include">
        </childnode>
        <childnode refid="83608" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="structstack__st" prot="public">stack_st</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="stack_8h_1aefb72413520398ef3cf5cdbada71d492" prot="public" static="no">
        <name>M_sk_num</name>
        <param><defname>sk</defname></param>
        <initializer>((sk) ? (sk)-&gt;num:-1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/stack.h" line="76" column="9" bodyfile="thirdparty/openssl/include/openssl/stack.h" bodystart="76" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stack_8h_1a744a682bcfe4ae8ee8c8f8693958d331" prot="public" static="no">
        <name>M_sk_value</name>
        <param><defname>sk</defname></param>
        <param><defname>n</defname></param>
        <initializer>((sk) ? (sk)-&gt;data[n] : NULL)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/stack.h" line="77" column="9" bodyfile="thirdparty/openssl/include/openssl/stack.h" bodystart="77" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="stack_8h_1a2e12a6afc1cc21ee637cd150875c6b36" prot="public" static="no">
        <type>struct <ref refid="structstack__st" kindref="compound">stack_st</ref></type>
        <definition>typedef struct stack_st  _STACK</definition>
        <argsstring></argsstring>
        <name>_STACK</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/stack.h" line="74" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="stack_8h_1a560efd141113a07fe2e517c813798362" prot="public" static="no" mutable="no">
        <type>int(*)(const void *, const void *)</type>
        <definition>int(*)(const void *, const void *) sk_set_cmp_func(_STACK *sk, int(*c)(const void *, const void *))</definition>
        <argsstring>(_STACK *sk, int(*c)(const void *, const void *))</argsstring>
        <name>sk_set_cmp_func</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/stack.h" line="98" column="1" bodyfile="thirdparty/openssl/include/openssl/stack.h" bodystart="98" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="stack_8h_1a969dd221b689fb521952e2ee67cb5c42" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int sk_num</definition>
        <argsstring>(const _STACK *)</argsstring>
        <name>sk_num</name>
        <param>
          <type>const <ref refid="structstack__st" kindref="compound">_STACK</ref> *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/stack.h" line="79" column="1"/>
      </memberdef>
      <memberdef kind="function" id="stack_8h_1a017376298dd088cdb19c30d76a0e3f88" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* sk_value</definition>
        <argsstring>(const _STACK *, int)</argsstring>
        <name>sk_value</name>
        <param>
          <type>const <ref refid="structstack__st" kindref="compound">_STACK</ref> *</type>
        </param>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/stack.h" line="80" column="1"/>
      </memberdef>
      <memberdef kind="function" id="stack_8h_1adcecdc7eb24f68a94e3a3684effb71cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* sk_set</definition>
        <argsstring>(_STACK *, int, void *)</argsstring>
        <name>sk_set</name>
        <param>
          <type><ref refid="structstack__st" kindref="compound">_STACK</ref> *</type>
        </param>
        <param>
          <type>int</type>
        </param>
        <param>
          <type>void *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/stack.h" line="82" column="1"/>
      </memberdef>
      <memberdef kind="function" id="stack_8h_1aaa07fa4338f10a3c9d76ee4dfa8a3c22" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structstack__st" kindref="compound">_STACK</ref> *</type>
        <definition>_STACK* sk_new</definition>
        <argsstring>(int(*cmp)(const void *, const void *))</argsstring>
        <name>sk_new</name>
        <param>
          <type>int(*)(const void *, const void *)</type>
          <declname>cmp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/stack.h" line="84" column="1"/>
      </memberdef>
      <memberdef kind="function" id="stack_8h_1af2a18b52c143b1cfdc5b879e2c7e39d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structstack__st" kindref="compound">_STACK</ref> *</type>
        <definition>_STACK* sk_new_null</definition>
        <argsstring>(void)</argsstring>
        <name>sk_new_null</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/stack.h" line="85" column="1"/>
      </memberdef>
      <memberdef kind="function" id="stack_8h_1a36aa60efc9f75a989798fa889b44f68f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sk_free</definition>
        <argsstring>(_STACK *)</argsstring>
        <name>sk_free</name>
        <param>
          <type><ref refid="structstack__st" kindref="compound">_STACK</ref> *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/stack.h" line="86" column="1"/>
      </memberdef>
      <memberdef kind="function" id="stack_8h_1ac7ce2189039a0f7b0f878558d2eb78e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sk_pop_free</definition>
        <argsstring>(_STACK *st, void(*func)(void *))</argsstring>
        <name>sk_pop_free</name>
        <param>
          <type><ref refid="structstack__st" kindref="compound">_STACK</ref> *</type>
          <declname>st</declname>
        </param>
        <param>
          <type>void(*)(void *)</type>
          <declname>func</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/stack.h" line="87" column="1"/>
      </memberdef>
      <memberdef kind="function" id="stack_8h_1a55569f8e961e5e798977219c9d95f747" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int sk_insert</definition>
        <argsstring>(_STACK *sk, void *data, int where)</argsstring>
        <name>sk_insert</name>
        <param>
          <type><ref refid="structstack__st" kindref="compound">_STACK</ref> *</type>
          <declname>sk</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>int</type>
          <declname>where</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/stack.h" line="88" column="1"/>
      </memberdef>
      <memberdef kind="function" id="stack_8h_1a5beb31b05b65b36ad7c52cd893993387" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* sk_delete</definition>
        <argsstring>(_STACK *st, int loc)</argsstring>
        <name>sk_delete</name>
        <param>
          <type><ref refid="structstack__st" kindref="compound">_STACK</ref> *</type>
          <declname>st</declname>
        </param>
        <param>
          <type>int</type>
          <declname>loc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/stack.h" line="89" column="1"/>
      </memberdef>
      <memberdef kind="function" id="stack_8h_1a307e16d97463e5c00509b9cf2a373aff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* sk_delete_ptr</definition>
        <argsstring>(_STACK *st, void *p)</argsstring>
        <name>sk_delete_ptr</name>
        <param>
          <type><ref refid="structstack__st" kindref="compound">_STACK</ref> *</type>
          <declname>st</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/stack.h" line="90" column="1"/>
      </memberdef>
      <memberdef kind="function" id="stack_8h_1ab3e51e9047677221f71302ed04bee18a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int sk_find</definition>
        <argsstring>(_STACK *st, void *data)</argsstring>
        <name>sk_find</name>
        <param>
          <type><ref refid="structstack__st" kindref="compound">_STACK</ref> *</type>
          <declname>st</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/stack.h" line="91" column="1"/>
      </memberdef>
      <memberdef kind="function" id="stack_8h_1a23c9f6e06cd70c3cf0c4b37bbe864ba4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int sk_find_ex</definition>
        <argsstring>(_STACK *st, void *data)</argsstring>
        <name>sk_find_ex</name>
        <param>
          <type><ref refid="structstack__st" kindref="compound">_STACK</ref> *</type>
          <declname>st</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/stack.h" line="92" column="1"/>
      </memberdef>
      <memberdef kind="function" id="stack_8h_1a85b8541e074e3ce81cff481742d2c014" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int sk_push</definition>
        <argsstring>(_STACK *st, void *data)</argsstring>
        <name>sk_push</name>
        <param>
          <type><ref refid="structstack__st" kindref="compound">_STACK</ref> *</type>
          <declname>st</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/stack.h" line="93" column="1"/>
      </memberdef>
      <memberdef kind="function" id="stack_8h_1a351f136ee68c5f1192f5bc910b517fb4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int sk_unshift</definition>
        <argsstring>(_STACK *st, void *data)</argsstring>
        <name>sk_unshift</name>
        <param>
          <type><ref refid="structstack__st" kindref="compound">_STACK</ref> *</type>
          <declname>st</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/stack.h" line="94" column="1"/>
      </memberdef>
      <memberdef kind="function" id="stack_8h_1a0e42e8f0b7dc34ebeabfe7b5c39f7fd5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* sk_shift</definition>
        <argsstring>(_STACK *st)</argsstring>
        <name>sk_shift</name>
        <param>
          <type><ref refid="structstack__st" kindref="compound">_STACK</ref> *</type>
          <declname>st</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/stack.h" line="95" column="1"/>
      </memberdef>
      <memberdef kind="function" id="stack_8h_1a309c8f6b089f456a56ed9b50a06ff4a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* sk_pop</definition>
        <argsstring>(_STACK *st)</argsstring>
        <name>sk_pop</name>
        <param>
          <type><ref refid="structstack__st" kindref="compound">_STACK</ref> *</type>
          <declname>st</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/stack.h" line="96" column="1"/>
      </memberdef>
      <memberdef kind="function" id="stack_8h_1aa17f2ea0be1abe5d8a8f9d56ed43ed06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sk_zero</definition>
        <argsstring>(_STACK *st)</argsstring>
        <name>sk_zero</name>
        <param>
          <type><ref refid="structstack__st" kindref="compound">_STACK</ref> *</type>
          <declname>st</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/stack.h" line="97" column="1"/>
      </memberdef>
      <memberdef kind="function" id="stack_8h_1aa397c063c7385b1a76dbed078ff5f7d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structstack__st" kindref="compound">_STACK</ref> *</type>
        <definition>_STACK* sk_dup</definition>
        <argsstring>(_STACK *st)</argsstring>
        <name>sk_dup</name>
        <param>
          <type><ref refid="structstack__st" kindref="compound">_STACK</ref> *</type>
          <declname>st</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/stack.h" line="100" column="1"/>
      </memberdef>
      <memberdef kind="function" id="stack_8h_1a2621d172e66debb3a08f63d044d929b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sk_sort</definition>
        <argsstring>(_STACK *st)</argsstring>
        <name>sk_sort</name>
        <param>
          <type><ref refid="structstack__st" kindref="compound">_STACK</ref> *</type>
          <declname>st</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/stack.h" line="101" column="1"/>
      </memberdef>
      <memberdef kind="function" id="stack_8h_1a7127f172e68021d7902549de44701d8b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int sk_is_sorted</definition>
        <argsstring>(const _STACK *st)</argsstring>
        <name>sk_is_sorted</name>
        <param>
          <type>const <ref refid="structstack__st" kindref="compound">_STACK</ref> *</type>
          <declname>st</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/openssl/include/openssl/stack.h" line="102" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>crypto/stack/stack.h<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Copyright<sp/>(C)<sp/>1995-1998<sp/>Eric<sp/>Young<sp/>(eay@cryptsoft.com)</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>This<sp/>package<sp/>is<sp/>an<sp/>SSL<sp/>implementation<sp/>written</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>by<sp/>Eric<sp/>Young<sp/>(eay@cryptsoft.com).</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>The<sp/>implementation<sp/>was<sp/>written<sp/>so<sp/>as<sp/>to<sp/>conform<sp/>with<sp/>Netscapes<sp/>SSL.</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>This<sp/>library<sp/>is<sp/>free<sp/>for<sp/>commercial<sp/>and<sp/>non-commercial<sp/>use<sp/>as<sp/>long<sp/>as</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>the<sp/>following<sp/>conditions<sp/>are<sp/>aheared<sp/>to.<sp/><sp/>The<sp/>following<sp/>conditions</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>apply<sp/>to<sp/>all<sp/>code<sp/>found<sp/>in<sp/>this<sp/>distribution,<sp/>be<sp/>it<sp/>the<sp/>RC4,<sp/>RSA,</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>lhash,<sp/>DES,<sp/>etc.,<sp/>code;<sp/>not<sp/>just<sp/>the<sp/>SSL<sp/>code.<sp/><sp/>The<sp/>SSL<sp/>documentation</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>included<sp/>with<sp/>this<sp/>distribution<sp/>is<sp/>covered<sp/>by<sp/>the<sp/>same<sp/>copyright<sp/>terms</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>except<sp/>that<sp/>the<sp/>holder<sp/>is<sp/>Tim<sp/>Hudson<sp/>(tjh@cryptsoft.com).</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>remains<sp/>Eric<sp/>Young&apos;s,<sp/>and<sp/>as<sp/>such<sp/>any<sp/>Copyright<sp/>notices<sp/>in</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>the<sp/>code<sp/>are<sp/>not<sp/>to<sp/>be<sp/>removed.</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>If<sp/>this<sp/>package<sp/>is<sp/>used<sp/>in<sp/>a<sp/>product,<sp/>Eric<sp/>Young<sp/>should<sp/>be<sp/>given<sp/>attribution</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>as<sp/>the<sp/>author<sp/>of<sp/>the<sp/>parts<sp/>of<sp/>the<sp/>library<sp/>used.</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>This<sp/>can<sp/>be<sp/>in<sp/>the<sp/>form<sp/>of<sp/>a<sp/>textual<sp/>message<sp/>at<sp/>program<sp/>startup<sp/>or</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>in<sp/>documentation<sp/>(online<sp/>or<sp/>textual)<sp/>provided<sp/>with<sp/>the<sp/>package.</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>1.<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>copyright</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>2.<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*<sp/>3.<sp/>All<sp/>advertising<sp/>materials<sp/>mentioning<sp/>features<sp/>or<sp/>use<sp/>of<sp/>this<sp/>software</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>must<sp/>display<sp/>the<sp/>following<sp/>acknowledgement:</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>&quot;This<sp/>product<sp/>includes<sp/>cryptographic<sp/>software<sp/>written<sp/>by</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>Eric<sp/>Young<sp/>(eay@cryptsoft.com)&quot;</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>The<sp/>word<sp/>&apos;cryptographic&apos;<sp/>can<sp/>be<sp/>left<sp/>out<sp/>if<sp/>the<sp/>rouines<sp/>from<sp/>the<sp/>library</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>being<sp/>used<sp/>are<sp/>not<sp/>cryptographic<sp/>related<sp/>:-).</highlight></codeline>
<codeline lineno="37"><highlight class="comment"><sp/>*<sp/>4.<sp/>If<sp/>you<sp/>include<sp/>any<sp/>Windows<sp/>specific<sp/>code<sp/>(or<sp/>a<sp/>derivative<sp/>thereof)<sp/>from<sp/></highlight></codeline>
<codeline lineno="38"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>the<sp/>apps<sp/>directory<sp/>(application<sp/>code)<sp/>you<sp/>must<sp/>include<sp/>an<sp/>acknowledgement:</highlight></codeline>
<codeline lineno="39"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>&quot;This<sp/>product<sp/>includes<sp/>software<sp/>written<sp/>by<sp/>Tim<sp/>Hudson<sp/>(tjh@cryptsoft.com)&quot;</highlight></codeline>
<codeline lineno="40"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="41"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>ERIC<sp/>YOUNG<sp/>``AS<sp/>IS&apos;&apos;<sp/>AND</highlight></codeline>
<codeline lineno="42"><highlight class="comment"><sp/>*<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>THE</highlight></codeline>
<codeline lineno="43"><highlight class="comment"><sp/>*<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/>*<sp/>ARE<sp/>DISCLAIMED.<sp/><sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>AUTHOR<sp/>OR<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/>*<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/>*<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/>*<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/>*<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/>*<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY</highlight></codeline>
<codeline lineno="50"><highlight class="comment"><sp/>*<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF</highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/>*<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="52"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/>*<sp/>The<sp/>licence<sp/>and<sp/>distribution<sp/>terms<sp/>for<sp/>any<sp/>publically<sp/>available<sp/>version<sp/>or</highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/>*<sp/>derivative<sp/>of<sp/>this<sp/>code<sp/>cannot<sp/>be<sp/>changed.<sp/><sp/>i.e.<sp/>this<sp/>code<sp/>cannot<sp/>simply<sp/>be</highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/>*<sp/>copied<sp/>and<sp/>put<sp/>under<sp/>another<sp/>distribution<sp/>licence</highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/>*<sp/>[including<sp/>the<sp/>GNU<sp/>Public<sp/>Licence.]</highlight></codeline>
<codeline lineno="57"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>HEADER_STACK_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>HEADER_STACK_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/><sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66" refid="structstack__st" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structstack__st" kindref="compound">stack_st</ref></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**data;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sorted;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_alloc;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>(*comp)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><ref refid="structstack__st" kindref="compound">_STACK</ref>;<sp/><sp/></highlight><highlight class="comment">/*<sp/>Use<sp/>STACK_OF(...)<sp/>instead<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>M_sk_num(sk)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((sk)<sp/>?<sp/>(sk)-&gt;num:-1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>M_sk_value(sk,n)<sp/><sp/><sp/><sp/>((sk)<sp/>?<sp/>(sk)-&gt;data[n]<sp/>:<sp/>NULL)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sk_num(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structstack__st" kindref="compound">_STACK</ref><sp/>*);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*sk_value(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structstack__st" kindref="compound">_STACK</ref><sp/>*,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*sk_set(<ref refid="structstack__st" kindref="compound">_STACK</ref><sp/>*,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><ref refid="structstack__st" kindref="compound">_STACK</ref><sp/>*sk_new(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(*cmp)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*));</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><ref refid="structstack__st" kindref="compound">_STACK</ref><sp/>*sk_new_null(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>sk_free(<ref refid="structstack__st" kindref="compound">_STACK</ref><sp/>*);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>sk_pop_free(<ref refid="structstack__st" kindref="compound">_STACK</ref><sp/>*st,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*func)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*));</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sk_insert(<ref refid="structstack__st" kindref="compound">_STACK</ref><sp/>*sk,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>where);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*sk_delete(<ref refid="structstack__st" kindref="compound">_STACK</ref><sp/>*st,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>loc);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*sk_delete_ptr(<ref refid="structstack__st" kindref="compound">_STACK</ref><sp/>*st,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sk_find(<ref refid="structstack__st" kindref="compound">_STACK</ref><sp/>*st,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sk_find_ex(<ref refid="structstack__st" kindref="compound">_STACK</ref><sp/>*st,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sk_push(<ref refid="structstack__st" kindref="compound">_STACK</ref><sp/>*st,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sk_unshift(<ref refid="structstack__st" kindref="compound">_STACK</ref><sp/>*st,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*sk_shift(<ref refid="structstack__st" kindref="compound">_STACK</ref><sp/>*st);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*sk_pop(<ref refid="structstack__st" kindref="compound">_STACK</ref><sp/>*st);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>sk_zero(<ref refid="structstack__st" kindref="compound">_STACK</ref><sp/>*st);</highlight></codeline>
<codeline lineno="98"><highlight class="normal">int<sp/>(*sk_set_cmp_func(<ref refid="structstack__st" kindref="compound">_STACK</ref><sp/>*sk,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(*c)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)))</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><ref refid="structstack__st" kindref="compound">_STACK</ref><sp/>*sk_dup(<ref refid="structstack__st" kindref="compound">_STACK</ref><sp/>*st);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>sk_sort(<ref refid="structstack__st" kindref="compound">_STACK</ref><sp/>*st);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sk_is_sorted(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structstack__st" kindref="compound">_STACK</ref><sp/>*st);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/><sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal">}</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="thirdparty/openssl/include/openssl/stack.h"/>
  </compounddef>
</doxygen>
