<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="class_ms_1_1_groups" kind="class" language="C++" prot="public">
    <compoundname>Ms::Groups</compoundname>
    <basecompoundref prot="public" virt="non-virtual">std::vector&lt; GroupNode &gt;</basecompoundref>
    <includes refid="groups_8h" local="no">groups.h</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_ms_1_1_groups_1afe18235431e3a45c7080d738995d4c01" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Ms::Groups::Groups</definition>
        <argsstring>()</argsstring>
        <name>Groups</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libmscore/groups.h" line="51" column="1" bodyfile="libmscore/groups.h" bodystart="51" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="class_ms_1_1_groups_1a2d44cdab028c7209b27ae07ab9a48840" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Ms::Groups::Groups</definition>
        <argsstring>(const std::vector&lt; GroupNode &gt; &amp;l)</argsstring>
        <name>Groups</name>
        <param>
          <type>const std::vector&lt; <ref refid="struct_ms_1_1_group_node" kindref="compound">GroupNode</ref> &gt; &amp;</type>
          <declname>l</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libmscore/groups.h" line="52" column="1" bodyfile="libmscore/groups.h" bodystart="52" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="class_ms_1_1_groups_1acbe5fcd72b434b707d135c9d0da3c0f7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ms::Groups::write</definition>
        <argsstring>(XmlWriter &amp;) const</argsstring>
        <name>write</name>
        <param>
          <type><ref refid="class_ms_1_1_xml_writer" kindref="compound">XmlWriter</ref> &amp;</type>
          <defname>xml</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libmscore/groups.h" line="54" column="1" bodyfile="libmscore/groups.cpp" bodystart="177" bodyend="184"/>
      </memberdef>
      <memberdef kind="function" id="class_ms_1_1_groups_1a00a9d9585518db17f37301dd517b2c9b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ms::Groups::read</definition>
        <argsstring>(XmlReader &amp;)</argsstring>
        <name>read</name>
        <param>
          <type><ref refid="class_ms_1_1_xml_reader" kindref="compound">XmlReader</ref> &amp;</type>
          <defname>e</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libmscore/groups.h" line="55" column="1" bodyfile="libmscore/groups.cpp" bodystart="190" bodyend="204"/>
      </memberdef>
      <memberdef kind="function" id="class_ms_1_1_groups_1a5ebd3c669b891876ab3c2e375d4f5f0a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Beam::Mode</type>
        <definition>Beam::Mode Ms::Groups::beamMode</definition>
        <argsstring>(int tick, TDuration::DurationType d) const</argsstring>
        <name>beamMode</name>
        <param>
          <type>int</type>
          <declname>tick</declname>
        </param>
        <param>
          <type>TDuration::DurationType</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libmscore/groups.h" line="57" column="1" bodyfile="libmscore/groups.cpp" bodystart="109" bodyend="138"/>
      </memberdef>
      <memberdef kind="function" id="class_ms_1_1_groups_1a04f95079e7e391c409e9b0609d0f252b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ms::Groups::addStop</definition>
        <argsstring>(int pos, TDuration::DurationType d, Beam::Mode bm)</argsstring>
        <name>addStop</name>
        <param>
          <type>int</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>TDuration::DurationType</type>
          <declname>d</declname>
        </param>
        <param>
          <type>Beam::Mode</type>
          <declname>bm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libmscore/groups.h" line="58" column="1" bodyfile="libmscore/groups.cpp" bodystart="210" bodyend="243"/>
      </memberdef>
      <memberdef kind="function" id="class_ms_1_1_groups_1a10c825af2e37c62c2c31a5c6eab30286" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Ms::Groups::operator==</definition>
        <argsstring>(const Groups &amp;g) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="class_ms_1_1_groups" kindref="compound">Groups</ref> &amp;</type>
          <declname>g</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libmscore/groups.h" line="59" column="1" bodyfile="libmscore/groups.h" bodystart="59" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="class_ms_1_1_groups_1a325aead99baf185fc0bb67056246e184" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ms::Groups::dump</definition>
        <argsstring>(const char *) const</argsstring>
        <name>dump</name>
        <param>
          <type>const char *</type>
          <defname>m</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libmscore/groups.h" line="68" column="1" bodyfile="libmscore/groups.cpp" bodystart="249" bodyend="255"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_ms_1_1_groups_1ac4775af435a15913a954eb560ec2fd8a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="class_ms_1_1_groups" kindref="compound">Groups</ref> &amp;</type>
        <definition>const Groups &amp; Ms::Groups::endings</definition>
        <argsstring>(const Fraction &amp;f)</argsstring>
        <name>endings</name>
        <param>
          <type>const <ref refid="class_ms_1_1_fraction" kindref="compound">Fraction</ref> &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libmscore/groups.h" line="70" column="1" bodyfile="libmscore/groups.cpp" bodystart="144" bodyend="171"/>
      </memberdef>
      <memberdef kind="function" id="class_ms_1_1_groups_1a941048b9a1849553fefa03c781b06c65" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Beam::Mode</type>
        <definition>Beam::Mode Ms::Groups::endBeam</definition>
        <argsstring>(ChordRest *cr, ChordRest *prev=0)</argsstring>
        <name>endBeam</name>
        <param>
          <type><ref refid="class_ms_1_1_chord_rest" kindref="compound">ChordRest</ref> *</type>
          <declname>cr</declname>
        </param>
        <param>
          <type><ref refid="class_ms_1_1_chord_rest" kindref="compound">ChordRest</ref> *</type>
          <declname>prev</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libmscore/groups.h" line="71" column="1" bodyfile="libmscore/groups.cpp" bodystart="69" bodyend="102"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>GroupNodes must be sorted by tick. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="7038">
        <label>Ms::Groups</label>
        <link refid="class_ms_1_1_groups"/>
        <childnode refid="7039" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7039">
        <label>std::vector&lt; GroupNode &gt;</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="7040">
        <label>Ms::Groups</label>
        <link refid="class_ms_1_1_groups"/>
        <childnode refid="7041" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7041">
        <label>std::vector&lt; GroupNode &gt;</label>
      </node>
    </collaborationgraph>
    <location file="libmscore/groups.h" line="48" column="1" bodyfile="libmscore/groups.h" bodystart="48" bodyend="72"/>
    <listofallmembers>
      <member refid="class_ms_1_1_groups_1a04f95079e7e391c409e9b0609d0f252b" prot="public" virt="non-virtual"><scope>Ms::Groups</scope><name>addStop</name></member>
      <member refid="class_ms_1_1_groups_1a5ebd3c669b891876ab3c2e375d4f5f0a" prot="public" virt="non-virtual"><scope>Ms::Groups</scope><name>beamMode</name></member>
      <member refid="class_ms_1_1_groups_1a325aead99baf185fc0bb67056246e184" prot="public" virt="non-virtual"><scope>Ms::Groups</scope><name>dump</name></member>
      <member refid="class_ms_1_1_groups_1a941048b9a1849553fefa03c781b06c65" prot="public" virt="non-virtual"><scope>Ms::Groups</scope><name>endBeam</name></member>
      <member refid="class_ms_1_1_groups_1ac4775af435a15913a954eb560ec2fd8a" prot="public" virt="non-virtual"><scope>Ms::Groups</scope><name>endings</name></member>
      <member refid="class_ms_1_1_groups_1afe18235431e3a45c7080d738995d4c01" prot="public" virt="non-virtual"><scope>Ms::Groups</scope><name>Groups</name></member>
      <member refid="class_ms_1_1_groups_1a2d44cdab028c7209b27ae07ab9a48840" prot="public" virt="non-virtual"><scope>Ms::Groups</scope><name>Groups</name></member>
      <member refid="class_ms_1_1_groups_1a10c825af2e37c62c2c31a5c6eab30286" prot="public" virt="non-virtual"><scope>Ms::Groups</scope><name>operator==</name></member>
      <member refid="class_ms_1_1_groups_1a00a9d9585518db17f37301dd517b2c9b" prot="public" virt="non-virtual"><scope>Ms::Groups</scope><name>read</name></member>
      <member refid="class_ms_1_1_groups_1acbe5fcd72b434b707d135c9d0da3c0f7" prot="public" virt="non-virtual"><scope>Ms::Groups</scope><name>write</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
