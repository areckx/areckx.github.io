<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="_text_output_dev_8cc" kind="file" language="C++">
    <compoundname>TextOutputDev.cc</compoundname>
    <includes local="no">config.h</includes>
    <includes local="no">stdio.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">stddef.h</includes>
    <includes local="no">math.h</includes>
    <includes local="no">float.h</includes>
    <includes local="no">ctype.h</includes>
    <includes local="no">algorithm</includes>
    <includes refid="gmem_8h" local="yes">goo/gmem.h</includes>
    <includes refid="_goo_string_8h" local="yes">goo/GooString.h</includes>
    <includes refid="_goo_list_8h" local="yes">goo/GooList.h</includes>
    <includes refid="poppler-config_8h" local="yes">poppler-config.h</includes>
    <includes refid="_error_8h" local="yes">Error.h</includes>
    <includes refid="_global_params_8h" local="yes">GlobalParams.h</includes>
    <includes refid="_unicode_map_8h" local="yes">UnicodeMap.h</includes>
    <includes refid="_unicode_type_table_8h" local="yes">UnicodeTypeTable.h</includes>
    <includes refid="_link_8h" local="yes">Link.h</includes>
    <includes refid="_text_output_dev_8h" local="yes">TextOutputDev.h</includes>
    <includes refid="thirdparty_2poppler_2poppler_2page_8h" local="yes">Page.h</includes>
    <includes refid="_annot_8h" local="yes">Annot.h</includes>
    <includes refid="_u_t_f_8h" local="yes">UTF.h</includes>
    <incdepgraph>
      <node id="90388">
        <label>TextOutputDev.h</label>
        <link refid="_text_output_dev_8h_source"/>
        <childnode refid="90366" relation="include">
        </childnode>
        <childnode refid="90358" relation="include">
        </childnode>
        <childnode refid="90370" relation="include">
        </childnode>
        <childnode refid="90389" relation="include">
        </childnode>
        <childnode refid="90390" relation="include">
        </childnode>
        <childnode refid="90393" relation="include">
        </childnode>
      </node>
      <node id="90369">
        <label>stdarg.h</label>
      </node>
      <node id="90356">
        <label>thirdparty/poppler/poppler/TextOutputDev.cc</label>
        <link refid="_text_output_dev_8cc"/>
        <childnode refid="90357" relation="include">
        </childnode>
        <childnode refid="90358" relation="include">
        </childnode>
        <childnode refid="90359" relation="include">
        </childnode>
        <childnode refid="90360" relation="include">
        </childnode>
        <childnode refid="90361" relation="include">
        </childnode>
        <childnode refid="90362" relation="include">
        </childnode>
        <childnode refid="90363" relation="include">
        </childnode>
        <childnode refid="90364" relation="include">
        </childnode>
        <childnode refid="90365" relation="include">
        </childnode>
        <childnode refid="90367" relation="include">
        </childnode>
        <childnode refid="90371" relation="include">
        </childnode>
        <childnode refid="90366" relation="include">
        </childnode>
        <childnode refid="90372" relation="include">
        </childnode>
        <childnode refid="90373" relation="include">
        </childnode>
        <childnode refid="90378" relation="include">
        </childnode>
        <childnode refid="90379" relation="include">
        </childnode>
        <childnode refid="90380" relation="include">
        </childnode>
        <childnode refid="90388" relation="include">
        </childnode>
        <childnode refid="90395" relation="include">
        </childnode>
        <childnode refid="90396" relation="include">
        </childnode>
        <childnode refid="90397" relation="include">
        </childnode>
      </node>
      <node id="90391">
        <label>Function.h</label>
        <link refid="_function_8h_source"/>
        <childnode refid="90370" relation="include">
        </childnode>
        <childnode refid="90381" relation="include">
        </childnode>
        <childnode refid="90382" relation="include">
        </childnode>
      </node>
      <node id="90374">
        <label>assert.h</label>
      </node>
      <node id="90362">
        <label>float.h</label>
      </node>
      <node id="90390">
        <label>GfxState.h</label>
        <link refid="_gfx_state_8h_source"/>
        <childnode refid="90366" relation="include">
        </childnode>
        <childnode refid="90370" relation="include">
        </childnode>
        <childnode refid="90381" relation="include">
        </childnode>
        <childnode refid="90391" relation="include">
        </childnode>
        <childnode refid="90374" relation="include">
        </childnode>
        <childnode refid="90392" relation="include">
        </childnode>
      </node>
      <node id="90389">
        <label>GfxFont.h</label>
        <link refid="_gfx_font_8h_source"/>
        <childnode refid="90370" relation="include">
        </childnode>
        <childnode refid="90367" relation="include">
        </childnode>
        <childnode refid="90381" relation="include">
        </childnode>
        <childnode refid="90375" relation="include">
        </childnode>
      </node>
      <node id="90359">
        <label>stdlib.h</label>
      </node>
      <node id="90365">
        <label>goo/gmem.h</label>
        <link refid="gmem_8h_source"/>
        <childnode refid="90358" relation="include">
        </childnode>
        <childnode refid="90366" relation="include">
        </childnode>
      </node>
      <node id="90385">
        <label>Array.h</label>
        <link refid="_array_8h_source"/>
        <childnode refid="90366" relation="include">
        </childnode>
        <childnode refid="90381" relation="include">
        </childnode>
        <childnode refid="90376" relation="include">
        </childnode>
      </node>
      <node id="90373">
        <label>GlobalParams.h</label>
        <link refid="_global_params_8h_source"/>
        <childnode refid="90374" relation="include">
        </childnode>
        <childnode refid="90366" relation="include">
        </childnode>
        <childnode refid="90358" relation="include">
        </childnode>
        <childnode refid="90370" relation="include">
        </childnode>
        <childnode refid="90375" relation="include">
        </childnode>
        <childnode refid="90376" relation="include">
        </childnode>
      </node>
      <node id="90392">
        <label>map</label>
      </node>
      <node id="90372">
        <label>Error.h</label>
        <link refid="_error_8h_source"/>
        <childnode refid="90369" relation="include">
        </childnode>
        <childnode refid="90366" relation="include">
        </childnode>
        <childnode refid="90370" relation="include">
        </childnode>
        <childnode refid="90367" relation="include">
        </childnode>
      </node>
      <node id="90371">
        <label>goo/GooList.h</label>
        <link refid="_goo_list_8h_source"/>
        <childnode refid="90370" relation="include">
        </childnode>
      </node>
      <node id="90386">
        <label>Dict.h</label>
        <link refid="_dict_8h_source"/>
        <childnode refid="90366" relation="include">
        </childnode>
        <childnode refid="90381" relation="include">
        </childnode>
        <childnode refid="90376" relation="include">
        </childnode>
      </node>
      <node id="90396">
        <label>Annot.h</label>
        <link refid="_annot_8h_source"/>
        <childnode refid="90381" relation="include">
        </childnode>
      </node>
      <node id="90360">
        <label>stddef.h</label>
      </node>
      <node id="90395">
        <label>Page.h</label>
        <link refid="thirdparty_2poppler_2poppler_2page_8h_source"/>
        <childnode refid="90366" relation="include">
        </childnode>
        <childnode refid="90381" relation="include">
        </childnode>
        <childnode refid="90376" relation="include">
        </childnode>
      </node>
      <node id="90368">
        <label>limits.h</label>
      </node>
      <node id="90366">
        <label>poppler-config.h</label>
        <link refid="poppler-config_8h_source"/>
        <childnode refid="90358" relation="include">
        </childnode>
      </node>
      <node id="90379">
        <label>UnicodeTypeTable.h</label>
        <link refid="_unicode_type_table_8h_source"/>
        <childnode refid="90370" relation="include">
        </childnode>
      </node>
      <node id="90384">
        <label>goo/GooLikely.h</label>
        <link refid="_goo_likely_8h_source"/>
      </node>
      <node id="90387">
        <label>Stream.h</label>
        <link refid="_stream_8h_source"/>
        <childnode refid="90366" relation="include">
        </childnode>
        <childnode refid="90358" relation="include">
        </childnode>
        <childnode refid="90370" relation="include">
        </childnode>
        <childnode refid="90381" relation="include">
        </childnode>
        <childnode refid="90376" relation="include">
        </childnode>
      </node>
      <node id="90377">
        <label>pthread.h</label>
      </node>
      <node id="90394">
        <label>PopplerCache.h</label>
        <link refid="_poppler_cache_8h_source"/>
        <childnode refid="90381" relation="include">
        </childnode>
      </node>
      <node id="90383">
        <label>string.h</label>
      </node>
      <node id="90367">
        <label>goo/GooString.h</label>
        <link refid="_goo_string_8h_source"/>
        <childnode refid="90368" relation="include">
        </childnode>
        <childnode refid="90369" relation="include">
        </childnode>
        <childnode refid="90359" relation="include">
        </childnode>
        <childnode refid="90370" relation="include">
        </childnode>
      </node>
      <node id="90381">
        <label>Object.h</label>
        <link refid="_object_8h_source"/>
        <childnode refid="90382" relation="include">
        </childnode>
        <childnode refid="90358" relation="include">
        </childnode>
        <childnode refid="90383" relation="include">
        </childnode>
        <childnode refid="90370" relation="include">
        </childnode>
        <childnode refid="90365" relation="include">
        </childnode>
        <childnode refid="90367" relation="include">
        </childnode>
        <childnode refid="90384" relation="include">
        </childnode>
        <childnode refid="90372" relation="include">
        </childnode>
        <childnode refid="90385" relation="include">
        </childnode>
        <childnode refid="90386" relation="include">
        </childnode>
        <childnode refid="90387" relation="include">
        </childnode>
      </node>
      <node id="90380">
        <label>Link.h</label>
        <link refid="_link_8h_source"/>
        <childnode refid="90381" relation="include">
        </childnode>
      </node>
      <node id="90393">
        <label>OutputDev.h</label>
        <link refid="_output_dev_8h_source"/>
        <childnode refid="90366" relation="include">
        </childnode>
        <childnode refid="90370" relation="include">
        </childnode>
        <childnode refid="90375" relation="include">
        </childnode>
        <childnode refid="90381" relation="include">
        </childnode>
        <childnode refid="90394" relation="include">
        </childnode>
      </node>
      <node id="90361">
        <label>math.h</label>
      </node>
      <node id="90376">
        <label>goo/GooMutex.h</label>
        <link refid="_goo_mutex_8h_source"/>
        <childnode refid="90377" relation="include">
        </childnode>
      </node>
      <node id="90375">
        <label>CharTypes.h</label>
        <link refid="_char_types_8h_source"/>
      </node>
      <node id="90363">
        <label>ctype.h</label>
      </node>
      <node id="90370">
        <label>gtypes.h</label>
        <link refid="gtypes_8h_source"/>
        <childnode refid="90366" relation="include">
        </childnode>
      </node>
      <node id="90378">
        <label>UnicodeMap.h</label>
        <link refid="_unicode_map_8h_source"/>
        <childnode refid="90366" relation="include">
        </childnode>
        <childnode refid="90370" relation="include">
        </childnode>
        <childnode refid="90375" relation="include">
        </childnode>
        <childnode refid="90376" relation="include">
        </childnode>
      </node>
      <node id="90397">
        <label>UTF.h</label>
        <link refid="_u_t_f_8h_source"/>
        <childnode refid="90367" relation="include">
        </childnode>
        <childnode refid="90375" relation="include">
        </childnode>
      </node>
      <node id="90382">
        <label>set</label>
      </node>
      <node id="90357">
        <label>config.h</label>
      </node>
      <node id="90364">
        <label>algorithm</label>
      </node>
      <node id="90358">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="class_text_underline" prot="public">TextUnderline</innerclass>
    <innerclass refid="class_text_link" prot="public">TextLink</innerclass>
    <innerclass refid="struct_combining_table" prot="public">CombiningTable</innerclass>
    <innerclass refid="class_text_line_frag" prot="public">TextLineFrag</innerclass>
    <innerclass refid="class_text_selection_visitor" prot="public">TextSelectionVisitor</innerclass>
    <innerclass refid="class_text_selection_dumper" prot="public">TextSelectionDumper</innerclass>
    <innerclass refid="class_text_selection_sizer" prot="public">TextSelectionSizer</innerclass>
    <innerclass refid="class_text_selection_painter" prot="public">TextSelectionPainter</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="_text_output_dev_8cc_1a0ba969c46f5d283dc25d1ad10f141d6d" prot="public" static="no">
        <name>textPoolStep</name>
        <initializer>4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/TextOutputDev.cc" line="87" column="9" bodyfile="thirdparty/poppler/poppler/TextOutputDev.cc" bodystart="87" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_text_output_dev_8cc_1a7c6c7d38cff55824970a491d2de979ab" prot="public" static="no">
        <name>minWordBreakSpace</name>
        <initializer>0.1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/TextOutputDev.cc" line="91" column="9" bodyfile="thirdparty/poppler/poppler/TextOutputDev.cc" bodystart="91" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_text_output_dev_8cc_1a5d021633ac93f4e4ea788de7608fed32" prot="public" static="no">
        <name>minDupBreakOverlap</name>
        <initializer>0.2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/TextOutputDev.cc" line="95" column="9" bodyfile="thirdparty/poppler/poppler/TextOutputDev.cc" bodystart="95" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_text_output_dev_8cc_1a844e0121b998df47f36a4cdae0f48491" prot="public" static="no">
        <name>maxLineSpacingDelta</name>
        <initializer>1.5</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/TextOutputDev.cc" line="99" column="9" bodyfile="thirdparty/poppler/poppler/TextOutputDev.cc" bodystart="99" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_text_output_dev_8cc_1a7a198e1ed107fff331c246c3ef7e1624" prot="public" static="no">
        <name>maxBlockFontSizeDelta1</name>
        <initializer>0.05</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/TextOutputDev.cc" line="106" column="9" bodyfile="thirdparty/poppler/poppler/TextOutputDev.cc" bodystart="106" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_text_output_dev_8cc_1acd32f239c225c91d35895559f882ba24" prot="public" static="no">
        <name>maxBlockFontSizeDelta2</name>
        <initializer>0.6</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/TextOutputDev.cc" line="107" column="9" bodyfile="thirdparty/poppler/poppler/TextOutputDev.cc" bodystart="107" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_text_output_dev_8cc_1af647ac9797b6540baa572ba9413d3aa7" prot="public" static="no">
        <name>maxBlockFontSizeDelta3</name>
        <initializer>0.2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/TextOutputDev.cc" line="108" column="9" bodyfile="thirdparty/poppler/poppler/TextOutputDev.cc" bodystart="108" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_text_output_dev_8cc_1a908e68099b50c701dd4c415faec48288" prot="public" static="no">
        <name>maxWordFontSizeDelta</name>
        <initializer>0.05</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/TextOutputDev.cc" line="111" column="9" bodyfile="thirdparty/poppler/poppler/TextOutputDev.cc" bodystart="111" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_text_output_dev_8cc_1ae604a7ee0da2428bc600aed87bf76426" prot="public" static="no">
        <name>maxIntraLineDelta</name>
        <initializer>0.5</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/TextOutputDev.cc" line="116" column="9" bodyfile="thirdparty/poppler/poppler/TextOutputDev.cc" bodystart="116" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_text_output_dev_8cc_1a7e276ad8dad3a14b08fc2ae0cda37982" prot="public" static="no">
        <name>minWordSpacing</name>
        <initializer>0.15</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/TextOutputDev.cc" line="120" column="9" bodyfile="thirdparty/poppler/poppler/TextOutputDev.cc" bodystart="120" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_text_output_dev_8cc_1a596bd44ca6ebb74c6b3b9134daad6345" prot="public" static="no">
        <name>maxWordSpacing</name>
        <initializer>1.5</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/TextOutputDev.cc" line="123" column="9" bodyfile="thirdparty/poppler/poppler/TextOutputDev.cc" bodystart="123" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_text_output_dev_8cc_1a155870d8d565c9cdcd7e667a0ee92697" prot="public" static="no">
        <name>minColSpacing1</name>
        <initializer>0.3</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/TextOutputDev.cc" line="127" column="9" bodyfile="thirdparty/poppler/poppler/TextOutputDev.cc" bodystart="127" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_text_output_dev_8cc_1a184f717551d7b4d7d44438fa039a8347" prot="public" static="no">
        <name>minColSpacing2</name>
        <initializer>1.0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/TextOutputDev.cc" line="130" column="9" bodyfile="thirdparty/poppler/poppler/TextOutputDev.cc" bodystart="130" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_text_output_dev_8cc_1a9537375abdc78c6ad3d37869aa22a6fa" prot="public" static="no">
        <name>maxBlockSpacing</name>
        <initializer>2.5</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/TextOutputDev.cc" line="134" column="9" bodyfile="thirdparty/poppler/poppler/TextOutputDev.cc" bodystart="134" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_text_output_dev_8cc_1ae7cc3064d593e6ec55ae3c7f368d0459" prot="public" static="no">
        <name>minCharSpacing</name>
        <initializer>-0.5</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/TextOutputDev.cc" line="138" column="9" bodyfile="thirdparty/poppler/poppler/TextOutputDev.cc" bodystart="138" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_text_output_dev_8cc_1a9b9dbc37a78238c85d9e52cbb743a741" prot="public" static="no">
        <name>maxCharSpacing</name>
        <initializer>0.03</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/TextOutputDev.cc" line="143" column="9" bodyfile="thirdparty/poppler/poppler/TextOutputDev.cc" bodystart="143" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_text_output_dev_8cc_1a42b15a4bf249b1ae77bd4c5dfca50b83" prot="public" static="no">
        <name>maxWideCharSpacingMul</name>
        <initializer>1.3</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/TextOutputDev.cc" line="148" column="9" bodyfile="thirdparty/poppler/poppler/TextOutputDev.cc" bodystart="148" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_text_output_dev_8cc_1a6c573b42ab5d8ba438214ae9d4c258e8" prot="public" static="no">
        <name>maxWideCharSpacing</name>
        <initializer>0.4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/TextOutputDev.cc" line="151" column="9" bodyfile="thirdparty/poppler/poppler/TextOutputDev.cc" bodystart="151" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_text_output_dev_8cc_1ab08ad4f2145a4127d28d482a835463ed" prot="public" static="no">
        <name>dupMaxPriDelta</name>
        <initializer>0.1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/TextOutputDev.cc" line="156" column="9" bodyfile="thirdparty/poppler/poppler/TextOutputDev.cc" bodystart="156" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_text_output_dev_8cc_1a6f073b2602564e1b8308efc1219a0710" prot="public" static="no">
        <name>dupMaxSecDelta</name>
        <initializer>0.2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/TextOutputDev.cc" line="157" column="9" bodyfile="thirdparty/poppler/poppler/TextOutputDev.cc" bodystart="157" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_text_output_dev_8cc_1a2e3bede35527784cf99f3d93316d1c47" prot="public" static="no">
        <name>maxUnderlineWidth</name>
        <initializer>3</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/TextOutputDev.cc" line="160" column="9" bodyfile="thirdparty/poppler/poppler/TextOutputDev.cc" bodystart="160" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_text_output_dev_8cc_1a2ad7d6dc03914903ebcc338f9bc67a90" prot="public" static="no">
        <name>minUnderlineGap</name>
        <initializer>-2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/TextOutputDev.cc" line="164" column="9" bodyfile="thirdparty/poppler/poppler/TextOutputDev.cc" bodystart="164" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_text_output_dev_8cc_1ad197198bcb5cdc8fae50b83b7ea1599e" prot="public" static="no">
        <name>maxUnderlineGap</name>
        <initializer>4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/TextOutputDev.cc" line="168" column="9" bodyfile="thirdparty/poppler/poppler/TextOutputDev.cc" bodystart="168" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_text_output_dev_8cc_1ae553a2075b257e2709580307c352155e" prot="public" static="no">
        <name>underlineSlack</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/TextOutputDev.cc" line="173" column="9" bodyfile="thirdparty/poppler/poppler/TextOutputDev.cc" bodystart="173" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_text_output_dev_8cc_1acaecc99bf463eda686a6c5ac60ce5df2" prot="public" static="no">
        <name>hyperlinkSlack</name>
        <initializer>2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/TextOutputDev.cc" line="176" column="9" bodyfile="thirdparty/poppler/poppler/TextOutputDev.cc" bodystart="176" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_text_output_dev_8cc_1a8c203e5db08e826c4359802aa7e1c875" prot="public" static="no">
        <name>combMaxMidDelta</name>
        <initializer>0.3</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/TextOutputDev.cc" line="180" column="9" bodyfile="thirdparty/poppler/poppler/TextOutputDev.cc" bodystart="180" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_text_output_dev_8cc_1af2c137030369b9407a84d4b616fee0c4" prot="public" static="no">
        <name>combMaxBaseDelta</name>
        <initializer>0.4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/TextOutputDev.cc" line="181" column="9" bodyfile="thirdparty/poppler/poppler/TextOutputDev.cc" bodystart="181" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="_text_output_dev_8cc_1aca96cd3193cb567d4415dd4ec2f2782f" prot="public" static="yes" mutable="no">
        <type>struct <ref refid="struct_combining_table" kindref="compound">CombiningTable</ref></type>
        <definition>struct CombiningTable combiningTable[]</definition>
        <argsstring>[]</argsstring>
        <name>combiningTable</name>
        <initializer>= {
  {0x0060, 0x0300}, 
  {0x00a8, 0x0308}, 
  {0x00af, 0x0304}, 
  {0x00b4, 0x0301}, 
  {0x00b8, 0x0327}, 
  {0x02c6, 0x0302}, 
  {0x02c7, 0x030c}, 
  {0x02d8, 0x0306}, 
  {0x02d9, 0x0307}, 
  {0x02da, 0x030a}, 
  {0x02dc, 0x0303}, 
  {0x02dd, 0x030b}  
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/TextOutputDev.cc" line="535" column="1" bodyfile="thirdparty/poppler/poppler/TextOutputDev.cc" bodystart="552" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="_text_output_dev_8cc_1a8ec9e14aa64fb8fabe64641bf84a2881" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int reorderText</definition>
        <argsstring>(Unicode *text, int len, UnicodeMap *uMap, GBool primaryLR, GooString *s, Unicode *u)</argsstring>
        <name>reorderText</name>
        <param>
          <type>Unicode *</type>
          <declname>text</declname>
        </param>
        <param>
          <type>int</type>
          <declname>len</declname>
        </param>
        <param>
          <type><ref refid="class_unicode_map" kindref="compound">UnicodeMap</ref> *</type>
          <declname>uMap</declname>
        </param>
        <param>
          <type>GBool</type>
          <declname>primaryLR</declname>
        </param>
        <param>
          <type><ref refid="class_goo_string" kindref="compound">GooString</ref> *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>Unicode *</type>
          <declname>u</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/TextOutputDev.cc" line="183" column="1" bodyfile="thirdparty/poppler/poppler/TextOutputDev.cc" bodystart="183" bodyend="269"/>
      </memberdef>
      <memberdef kind="function" id="_text_output_dev_8cc_1a8bd38feed6a57d071ae77115a392ecfb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Unicode</type>
        <definition>Unicode getCombiningChar</definition>
        <argsstring>(Unicode u)</argsstring>
        <name>getCombiningChar</name>
        <param>
          <type>Unicode</type>
          <declname>u</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/TextOutputDev.cc" line="568" column="1" bodyfile="thirdparty/poppler/poppler/TextOutputDev.cc" bodystart="568" bodyend="575"/>
      </memberdef>
      <memberdef kind="function" id="_text_output_dev_8cc_1a04f75bae676b1cc3d7139d8b0c3bfdcd" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void TextOutputDev_outputToFile</definition>
        <argsstring>(void *stream, const char *text, int len)</argsstring>
        <name>TextOutputDev_outputToFile</name>
        <param>
          <type>void *</type>
          <declname>stream</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>text</declname>
        </param>
        <param>
          <type>int</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/poppler/poppler/TextOutputDev.cc" line="5544" column="1" bodyfile="thirdparty/poppler/poppler/TextOutputDev.cc" bodystart="5544" bodyend="5546"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//========================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TextOutputDev.cc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>1997-2003<sp/>Glyph<sp/>&amp;<sp/>Cog,<sp/>LLC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//========================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//========================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Modified<sp/>under<sp/>the<sp/>Poppler<sp/>project<sp/>-<sp/>http://poppler.freedesktop.org</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>All<sp/>changes<sp/>made<sp/>under<sp/>the<sp/>Poppler<sp/>project<sp/>to<sp/>this<sp/>file<sp/>are<sp/>licensed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>under<sp/>GPL<sp/>version<sp/>2<sp/>or<sp/>later</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2005-2007<sp/>Kristian<sp/>Høgsberg<sp/>&lt;krh@redhat.com&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2005<sp/>Nickolay<sp/>V.<sp/>Shmyrev<sp/>&lt;nshmyrev@yandex.ru&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2006-2008,<sp/>2011-2013<sp/>Carlos<sp/>Garcia<sp/>Campos<sp/>&lt;carlosgc@gnome.org&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2006,<sp/>2007,<sp/>2013<sp/>Ed<sp/>Catmur<sp/>&lt;ed@catmur.co.uk&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2006<sp/>Jeff<sp/>Muizelaar<sp/>&lt;jeff@infidigm.net&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2007,<sp/>2008,<sp/>2012<sp/>Adrian<sp/>Johnson<sp/>&lt;ajohnson@redneon.com&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2008<sp/>Koji<sp/>Otani<sp/>&lt;sho@bbr.jp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2008,<sp/>2010-2012,<sp/>2014-2016<sp/>Albert<sp/>Astals<sp/>Cid<sp/>&lt;aacid@kde.org&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2008<sp/>Pino<sp/>Toscano<sp/>&lt;pino@kde.org&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2008,<sp/>2010<sp/>Hib<sp/>Eris<sp/>&lt;hib@hiberis.nl&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2009<sp/>Ross<sp/>Moore<sp/>&lt;ross@maths.mq.edu.au&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2009<sp/>Kovid<sp/>Goyal<sp/>&lt;kovid@kovidgoyal.net&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2010<sp/>Brian<sp/>Ewins<sp/>&lt;brian.ewins@gmail.com&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2010<sp/>Marek<sp/>Kasik<sp/>&lt;mkasik@redhat.com&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2010<sp/>Suzuki<sp/>Toshiya<sp/>&lt;mpsuzuki@hiroshima-u.ac.jp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2011<sp/>Sam<sp/>Liao<sp/>&lt;phyomh@gmail.com&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2012<sp/>Horst<sp/>Prote<sp/>&lt;prote@fmi.uni-stuttgart.de&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2012,<sp/>2013-2016<sp/>Jason<sp/>Crain<sp/>&lt;jason@aquaticape.us&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2012<sp/>Peter<sp/>Breitenlohner<sp/>&lt;peb@mppmu.mpg.de&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2013<sp/>José<sp/>Aliste<sp/>&lt;jaliste@src.gnome.org&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2013<sp/>Thomas<sp/>Freitag<sp/>&lt;Thomas.Freitag@alfa.de&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2013<sp/>Ed<sp/>Catmur<sp/>&lt;ed@catmur.co.uk&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2016<sp/>Khaled<sp/>Hosny<sp/>&lt;khaledhosny@eglug.org&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="comment">//<sp/>To<sp/>see<sp/>a<sp/>description<sp/>of<sp/>the<sp/>changes<sp/>please<sp/>see<sp/>the<sp/>Changelog<sp/>file<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="comment">//<sp/>came<sp/>with<sp/>your<sp/>tarball<sp/>or<sp/>type<sp/>make<sp/>ChangeLog<sp/>if<sp/>you<sp/>are<sp/>building<sp/>from<sp/>git</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="comment">//========================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;config.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>USE_GCC_PRAGMAS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>implementation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stddef.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;math.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;float.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ctype.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_WIN32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;fcntl.h&gt;</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>for<sp/>O_BINARY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;io.h&gt;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>setmode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;goo/gmem.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;goo/GooString.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;goo/GooList.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;poppler-config.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Error.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;GlobalParams.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;UnicodeMap.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;UnicodeTypeTable.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Link.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;TextOutputDev.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Page.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Annot.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;UTF.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>MACOS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="comment">//<sp/>needed<sp/>for<sp/>setting<sp/>type/creator<sp/>of<sp/>MacOS<sp/>files</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ICSupport.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="comment">//<sp/>parameters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Each<sp/>bucket<sp/>in<sp/>a<sp/>text<sp/>pool<sp/>includes<sp/>baselines<sp/>within<sp/>a<sp/>range<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="comment">//<sp/>this<sp/>many<sp/>points.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>textPoolStep<sp/>4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Inter-character<sp/>space<sp/>width<sp/>which<sp/>will<sp/>cause<sp/>addChar<sp/>to<sp/>start<sp/>a<sp/>new</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="comment">//<sp/>word.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>minWordBreakSpace<sp/>0.1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Negative<sp/>inter-character<sp/>space<sp/>width,<sp/>i.e.,<sp/>overlap,<sp/>which<sp/>will</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="comment">//<sp/>cause<sp/>addChar<sp/>to<sp/>start<sp/>a<sp/>new<sp/>word.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>minDupBreakOverlap<sp/>0.2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Max<sp/>distance<sp/>between<sp/>baselines<sp/>of<sp/>two<sp/>lines<sp/>within<sp/>a<sp/>block,<sp/>as<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="comment">//<sp/>fraction<sp/>of<sp/>the<sp/>font<sp/>size.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>maxLineSpacingDelta<sp/>1.5</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Max<sp/>difference<sp/>in<sp/>primary<sp/>font<sp/>sizes<sp/>on<sp/>two<sp/>lines<sp/>in<sp/>the<sp/>same</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="comment">//<sp/>block.<sp/><sp/>Delta1<sp/>is<sp/>used<sp/>when<sp/>examining<sp/>new<sp/>lines<sp/>above<sp/>and<sp/>below<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="comment">//<sp/>current<sp/>block;<sp/>delta2<sp/>is<sp/>used<sp/>when<sp/>examining<sp/>text<sp/>that<sp/>overlaps<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="comment">//<sp/>current<sp/>block;<sp/>delta3<sp/>is<sp/>used<sp/>when<sp/>examining<sp/>text<sp/>to<sp/>the<sp/>left<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="comment">//<sp/>right<sp/>of<sp/>the<sp/>current<sp/>block.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>maxBlockFontSizeDelta1<sp/>0.05</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>maxBlockFontSizeDelta2<sp/>0.6</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>maxBlockFontSizeDelta3<sp/>0.2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Max<sp/>difference<sp/>in<sp/>font<sp/>sizes<sp/>inside<sp/>a<sp/>word.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>maxWordFontSizeDelta<sp/>0.05</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Maximum<sp/>distance<sp/>between<sp/>baselines<sp/>of<sp/>two<sp/>words<sp/>on<sp/>the<sp/>same<sp/>line,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="comment">//<sp/>e.g.,<sp/>distance<sp/>between<sp/>subscript<sp/>or<sp/>superscript<sp/>and<sp/>the<sp/>primary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="comment">//<sp/>baseline,<sp/>as<sp/>a<sp/>fraction<sp/>of<sp/>the<sp/>font<sp/>size.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>maxIntraLineDelta<sp/>0.5</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Minimum<sp/>inter-word<sp/>spacing,<sp/>as<sp/>a<sp/>fraction<sp/>of<sp/>the<sp/>font<sp/>size.<sp/><sp/>(Only</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="comment">//<sp/>used<sp/>for<sp/>raw<sp/>ordering.)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>minWordSpacing<sp/>0.15</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Maximum<sp/>inter-word<sp/>spacing,<sp/>as<sp/>a<sp/>fraction<sp/>of<sp/>the<sp/>font<sp/>size.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>maxWordSpacing<sp/>1.5</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Maximum<sp/>horizontal<sp/>spacing<sp/>which<sp/>will<sp/>allow<sp/>a<sp/>word<sp/>to<sp/>be<sp/>pulled</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="comment">//<sp/>into<sp/>a<sp/>block.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>minColSpacing1<sp/>0.3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Minimum<sp/>spacing<sp/>between<sp/>columns,<sp/>as<sp/>a<sp/>fraction<sp/>of<sp/>the<sp/>font<sp/>size.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>minColSpacing2<sp/>1.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Maximum<sp/>vertical<sp/>spacing<sp/>between<sp/>blocks<sp/>within<sp/>a<sp/>flow,<sp/>as<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="comment">//<sp/>multiple<sp/>of<sp/>the<sp/>font<sp/>size.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>maxBlockSpacing<sp/>2.5</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Minimum<sp/>spacing<sp/>between<sp/>characters<sp/>within<sp/>a<sp/>word,<sp/>as<sp/>a<sp/>fraction<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>font<sp/>size.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>minCharSpacing<sp/>-0.5</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Maximum<sp/>spacing<sp/>between<sp/>characters<sp/>within<sp/>a<sp/>word,<sp/>as<sp/>a<sp/>fraction<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>font<sp/>size,<sp/>when<sp/>there<sp/>is<sp/>no<sp/>obvious<sp/>extra-wide<sp/>character</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="comment">//<sp/>spacing.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>maxCharSpacing<sp/>0.03</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="comment">//<sp/>When<sp/>extra-wide<sp/>character<sp/>spacing<sp/>is<sp/>detected,<sp/>the<sp/>inter-character</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="comment">//<sp/>space<sp/>threshold<sp/>is<sp/>set<sp/>to<sp/>the<sp/>minimum<sp/>inter-character<sp/>space</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="comment">//<sp/>multiplied<sp/>by<sp/>this<sp/>constant.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>maxWideCharSpacingMul<sp/>1.3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Upper<sp/>limit<sp/>on<sp/>spacing<sp/>between<sp/>characters<sp/>in<sp/>a<sp/>word.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>maxWideCharSpacing<sp/>0.4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Max<sp/>difference<sp/>in<sp/>primary,secondary<sp/>coordinates<sp/>(as<sp/>a<sp/>fraction<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>font<sp/>size)<sp/>allowed<sp/>for<sp/>duplicated<sp/>text<sp/>(fake<sp/>boldface,<sp/>drop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight><highlight class="comment">//<sp/>shadows)<sp/>which<sp/>is<sp/>to<sp/>be<sp/>discarded.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>dupMaxPriDelta<sp/>0.1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>dupMaxSecDelta<sp/>0.2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Max<sp/>width<sp/>of<sp/>underlines<sp/>(in<sp/>points).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>maxUnderlineWidth<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Min<sp/>distance<sp/>between<sp/>baseline<sp/>and<sp/>underline<sp/>(in<sp/>points).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight><highlight class="comment">//~<sp/>this<sp/>should<sp/>be<sp/>font-size-dependent</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>minUnderlineGap<sp/>-2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Max<sp/>distance<sp/>between<sp/>baseline<sp/>and<sp/>underline<sp/>(in<sp/>points).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight><highlight class="comment">//~<sp/>this<sp/>should<sp/>be<sp/>font-size-dependent</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>maxUnderlineGap<sp/>4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Max<sp/>horizontal<sp/>distance<sp/>between<sp/>edge<sp/>of<sp/>word<sp/>and<sp/>start<sp/>of<sp/>underline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(in<sp/>points).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight><highlight class="comment">//~<sp/>this<sp/>should<sp/>be<sp/>font-size-dependent</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>underlineSlack<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Max<sp/>distance<sp/>between<sp/>edge<sp/>of<sp/>text<sp/>and<sp/>edge<sp/>of<sp/>link<sp/>border</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>hyperlinkSlack<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Max<sp/>distance<sp/>between<sp/>characters<sp/>when<sp/>combining<sp/>a<sp/>base<sp/>character<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight><highlight class="comment">//<sp/>combining<sp/>character</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>combMaxMidDelta<sp/>0.3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>combMaxBaseDelta<sp/>0.4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>reorderText(Unicode<sp/>*text,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len,<sp/><ref refid="class_unicode_map" kindref="compound">UnicodeMap</ref><sp/>*uMap,<sp/>GBool<sp/>primaryLR,<sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*s,<sp/>Unicode*<sp/>u)<sp/>{</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>lre[8],<sp/>rle[8],<sp/>popdf[8],<sp/>buf[8];</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lreLen<sp/>=<sp/>0,<sp/>rleLen<sp/>=<sp/>0,<sp/>popdfLen<sp/>=<sp/>0,<sp/>n;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nCols,<sp/>i,<sp/>j,<sp/>k;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/>nCols<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s)<sp/>{</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/>lreLen<sp/>=<sp/>uMap-&gt;mapUnicode(0x202a,<sp/>lre,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(lre));</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/>rleLen<sp/>=<sp/>uMap-&gt;mapUnicode(0x202b,<sp/>rle,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(rle));</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/>popdfLen<sp/>=<sp/>uMap-&gt;mapUnicode(0x202c,<sp/>popdf,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(popdf));</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(primaryLR)<sp/>{</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>len)<sp/>{</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>output<sp/>a<sp/>left-to-right<sp/>section</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>i;<sp/>j<sp/>&lt;<sp/>len<sp/>&amp;&amp;<sp/>!unicodeTypeR(text[j]);<sp/>++j)<sp/>;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k<sp/>=<sp/>i;<sp/>k<sp/>&lt;<sp/>j;<sp/>++k)<sp/>{</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s)<sp/>{</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>uMap-&gt;mapUnicode(text[k],<sp/>buf,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(buf));</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;append(buf,<sp/>n);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(u)<sp/>u[nCols]<sp/>=<sp/>text[k];</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++nCols;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>=<sp/>j;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>output<sp/>a<sp/>right-to-left<sp/>section</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j<sp/>&lt;<sp/>len<sp/>&amp;&amp;<sp/>!(unicodeTypeL(text[j])<sp/>||<sp/>unicodeTypeNum(text[j]));</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++j)<sp/>;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j<sp/>&gt;<sp/>i)<sp/>{</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s)<sp/>s-&gt;append(rle,<sp/>rleLen);</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k<sp/>=<sp/>j<sp/>-<sp/>1;<sp/>k<sp/>&gt;=<sp/>i;<sp/>--k)<sp/>{</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s)<sp/>{</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>uMap-&gt;mapUnicode(text[k],<sp/>buf,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(buf));</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;append(buf,<sp/>n);</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(u)<sp/>u[nCols]<sp/>=<sp/>text[k];</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++nCols;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s)<sp/>s-&gt;append(popdf,<sp/>popdfLen);</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>=<sp/>j;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Note:<sp/>This<sp/>code<sp/>treats<sp/>numeric<sp/>characters<sp/>(European<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Arabic/Indic)<sp/>as<sp/>left-to-right,<sp/>which<sp/>isn&apos;t<sp/>strictly<sp/>correct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(incurs<sp/>extra<sp/>LRE/POPDF<sp/>pairs),<sp/>but<sp/>does<sp/>produce<sp/>correct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>visual<sp/>formatting.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s)<sp/>s-&gt;append(rle,<sp/>rleLen);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/>i<sp/>=<sp/>len<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>output<sp/>a<sp/>right-to-left<sp/>section</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>!(unicodeTypeL(text[j])<sp/>||<sp/>unicodeTypeNum(text[j]));</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--j)<sp/>;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k<sp/>=<sp/>i;<sp/>k<sp/>&gt;<sp/>j;<sp/>--k)<sp/>{</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s)<sp/>{</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>uMap-&gt;mapUnicode(text[k],<sp/>buf,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(buf));</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;append(buf,<sp/>n);</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(u)<sp/>u[nCols]<sp/>=<sp/>text[k];</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++nCols;</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>=<sp/>j;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>output<sp/>a<sp/>left-to-right<sp/>section</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>i;<sp/>j<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>!unicodeTypeR(text[j]);<sp/>--j)<sp/>;</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j<sp/>&lt;<sp/>i)<sp/>{</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s)<sp/>s-&gt;append(lre,<sp/>lreLen);</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k<sp/>=<sp/>j<sp/>+<sp/>1;<sp/>k<sp/>&lt;=<sp/>i;<sp/>++k)<sp/>{</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s)<sp/>{</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>uMap-&gt;mapUnicode(text[k],<sp/>buf,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(buf));</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;append(buf,<sp/>n);</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(u)<sp/>u[nCols]<sp/>=<sp/>text[k];</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++nCols;</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s)<sp/>s-&gt;append(popdf,<sp/>popdfLen);</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>=<sp/>j;</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s)<sp/>s-&gt;append(popdf,<sp/>popdfLen);</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nCols;</highlight></codeline>
<codeline lineno="269"><highlight class="normal">}</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TextUnderline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="275" refid="class_text_underline" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_text_underline" kindref="compound">TextUnderline</ref><sp/>{</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><ref refid="class_text_underline" kindref="compound">TextUnderline</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x0A,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y0A,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x1A,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y1A)</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>x0<sp/>=<sp/>x0A;<sp/>y0<sp/>=<sp/>y0A;<sp/>x1<sp/>=<sp/>x1A;<sp/>y1<sp/>=<sp/>y1A;<sp/>horiz<sp/>=<sp/>y0<sp/>==<sp/>y1;<sp/>}</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/>~<ref refid="class_text_underline" kindref="compound">TextUnderline</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x0,<sp/>y0,<sp/>x1,<sp/>y1;</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/>GBool<sp/>horiz;</highlight></codeline>
<codeline lineno="284"><highlight class="normal">};</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TextLink</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="290" refid="class_text_link" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_text_link" kindref="compound">TextLink</ref><sp/>{</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><ref refid="class_text_link" kindref="compound">TextLink</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>xMinA,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>yMinA,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>xMaxA,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>yMaxA,<sp/><ref refid="class_annot_link" kindref="compound">AnnotLink</ref><sp/>*linkA)</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>xMin<sp/>=<sp/>xMinA;<sp/>yMin<sp/>=<sp/>yMinA;<sp/>xMax<sp/>=<sp/>xMaxA;<sp/>yMax<sp/>=<sp/>yMaxA;<sp/>link<sp/>=<sp/>linkA;<sp/>}</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/>~<ref refid="class_text_link" kindref="compound">TextLink</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>xMin,<sp/>yMin,<sp/>xMax,<sp/>yMax;</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><ref refid="class_annot_link" kindref="compound">AnnotLink</ref><sp/>*link;</highlight></codeline>
<codeline lineno="299"><highlight class="normal">};</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TextFontInfo</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal">TextFontInfo::TextFontInfo(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state)<sp/>{</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/>gfxFont<sp/>=<sp/>state-&gt;getFont();</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(gfxFont)</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/>gfxFont-&gt;incRefCnt();</highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>TEXTOUT_WORD_LIST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/>fontName<sp/>=<sp/>(gfxFont<sp/>&amp;&amp;<sp/>gfxFont-&gt;getName())<sp/>?<sp/>gfxFont-&gt;getName()-&gt;copy()</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>(<ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*)NULL;</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/>flags<sp/>=<sp/>gfxFont<sp/>?<sp/>gfxFont-&gt;getFlags()<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal">}</highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal">TextFontInfo::~TextFontInfo()<sp/>{</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(gfxFont)</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/>gfxFont-&gt;decRefCnt();</highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>TEXTOUT_WORD_LIST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fontName)<sp/>{</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>fontName;</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal">}</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal">GBool<sp/>TextFontInfo::matches(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state)<sp/>{</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>state-&gt;getFont()<sp/>==<sp/>gfxFont;</highlight></codeline>
<codeline lineno="328"><highlight class="normal">}</highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal">GBool<sp/>TextFontInfo::matches(<ref refid="class_text_font_info" kindref="compound">TextFontInfo</ref><sp/>*fontInfo)<sp/>{</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gfxFont<sp/>==<sp/>fontInfo-&gt;gfxFont;</highlight></codeline>
<codeline lineno="332"><highlight class="normal">}</highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>TextFontInfo::getAscent()<sp/>{</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gfxFont<sp/>?<sp/>gfxFont-&gt;getAscent()<sp/>:<sp/>0.95;</highlight></codeline>
<codeline lineno="336"><highlight class="normal">}</highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>TextFontInfo::getDescent()<sp/>{</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gfxFont<sp/>?<sp/>gfxFont-&gt;getDescent()<sp/>:<sp/>-0.35;</highlight></codeline>
<codeline lineno="340"><highlight class="normal">}</highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>TextFontInfo::getWMode()<sp/>{</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gfxFont<sp/>?<sp/>gfxFont-&gt;getWMode()<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="344"><highlight class="normal">}</highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TextWord</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal">TextWord::TextWord(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rotA,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>fontSizeA)<sp/>{</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/>rot<sp/>=<sp/>rotA;</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/>fontSize<sp/>=<sp/>fontSizeA;</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/>text<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/>charcode<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/>edge<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/>charPos<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><ref refid="structfont" kindref="compound">font</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/>textMat<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/>len<sp/>=<sp/>size<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/>spaceAfter<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/>next<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>TEXTOUT_WORD_LIST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><ref refid="struct_gfx_r_g_b" kindref="compound">GfxRGB</ref><sp/>rgb;</highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((state-&gt;getRender()<sp/>&amp;<sp/>3)<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;getStrokeRGB(&amp;rgb);</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;getFillRGB(&amp;rgb);</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/>colorR<sp/>=<sp/>colToDbl(rgb.r);</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/>colorG<sp/>=<sp/>colToDbl(rgb.g);</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/>colorB<sp/>=<sp/>colToDbl(rgb.b);</highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/>underlined<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/>link<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="378"><highlight class="normal">}</highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal">TextWord::~TextWord()<sp/>{</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/>gfree(text);</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/>gfree(charcode);</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/>gfree(edge);</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/>gfree(charPos);</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/>gfree(<ref refid="structfont" kindref="compound">font</ref>);</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/>gfree(textMat);</highlight></codeline>
<codeline lineno="387"><highlight class="normal">}</highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TextWord::addChar(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state,<sp/><ref refid="class_text_font_info" kindref="compound">TextFontInfo</ref><sp/>*fontA,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y,</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dx,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dy,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>charPosA,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>charLen,</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CharCode<sp/>c,<sp/>Unicode<sp/>u,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_matrix" kindref="compound">Matrix</ref><sp/>&amp;textMatA)<sp/>{</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/>ensureCapacity(len+1);</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/>text[len]<sp/>=<sp/>u;</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/>charcode[len]<sp/>=<sp/>c;</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/>charPos[len]<sp/>=<sp/>charPosA;</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/>charPos[len<sp/>+<sp/>1]<sp/>=<sp/>charPosA<sp/>+<sp/>charLen;</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><ref refid="structfont" kindref="compound">font</ref>[len]<sp/>=<sp/>fontA;</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/>textMat[len]<sp/>=<sp/>textMatA;</highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/>setInitialBounds(fontA,<sp/>x,<sp/>y);</highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(wMode)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>vertical<sp/>writing<sp/>mode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NB:<sp/>the<sp/>rotation<sp/>value<sp/>has<sp/>been<sp/>incremented<sp/>by<sp/>1<sp/>(in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TextPage::beginWord())<sp/>for<sp/>vertical<sp/>writing<sp/>mode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(rot)<sp/>{</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>edge[len]<sp/>=<sp/>x<sp/>-<sp/>fontSize;</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xMax<sp/>=<sp/>edge[len+1]<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>edge[len]<sp/>=<sp/>y<sp/>-<sp/>fontSize;</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>yMax<sp/>=<sp/>edge[len+1]<sp/>=<sp/>y;</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>edge[len]<sp/>=<sp/>x<sp/>+<sp/>fontSize;</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xMin<sp/>=<sp/>edge[len+1]<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>3:</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>edge[len]<sp/>=<sp/>y<sp/>+<sp/>fontSize;</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>yMin<sp/>=<sp/>edge[len+1]<sp/>=<sp/>y;</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="comment">//<sp/>horizontal<sp/>writing<sp/>mode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(rot)<sp/>{</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>edge[len]<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xMax<sp/>=<sp/>edge[len+1]<sp/>=<sp/>x<sp/>+<sp/>dx;</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>edge[len]<sp/>=<sp/>y;</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>yMax<sp/>=<sp/>edge[len+1]<sp/>=<sp/>y<sp/>+<sp/>dy;</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>edge[len]<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xMin<sp/>=<sp/>edge[len+1]<sp/>=<sp/>x<sp/>+<sp/>dx;</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>3:</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>edge[len]<sp/>=<sp/>y;</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>yMin<sp/>=<sp/>edge[len+1]<sp/>=<sp/>y<sp/>+<sp/>dy;</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/>++len;</highlight></codeline>
<codeline lineno="445"><highlight class="normal">}</highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TextWord::setInitialBounds(<ref refid="class_text_font_info" kindref="compound">TextFontInfo</ref><sp/>*fontA,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y)<sp/>{</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ascent<sp/>=<sp/>fontA-&gt;getAscent()<sp/>*<sp/>fontSize;</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>descent<sp/>=<sp/>fontA-&gt;getDescent()<sp/>*<sp/>fontSize;</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/>wMode<sp/>=<sp/>fontA-&gt;getWMode();</highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(wMode)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>vertical<sp/>writing<sp/>mode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NB:<sp/>the<sp/>rotation<sp/>value<sp/>has<sp/>been<sp/>incremented<sp/>by<sp/>1<sp/>(in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TextPage::beginWord())<sp/>for<sp/>vertical<sp/>writing<sp/>mode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(rot)<sp/>{</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xMin<sp/>=<sp/>x<sp/>-<sp/>fontSize;</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>yMin<sp/>=<sp/>y<sp/>-<sp/>fontSize;</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>yMax<sp/>=<sp/>y;</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>base<sp/>=<sp/>y;</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xMin<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>yMin<sp/>=<sp/>y<sp/>-<sp/>fontSize;</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xMax<sp/>=<sp/>x<sp/>+<sp/>fontSize;</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>base<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>yMin<sp/>=<sp/>y;</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xMax<sp/>=<sp/>x<sp/>+<sp/>fontSize;</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>yMax<sp/>=<sp/>y<sp/>+<sp/>fontSize;</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>base<sp/>=<sp/>y;</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>3:</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xMin<sp/>=<sp/>x<sp/>-<sp/>fontSize;</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xMax<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>yMax<sp/>=<sp/>y<sp/>+<sp/>fontSize;</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>base<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="comment">//<sp/>horizontal<sp/>writing<sp/>mode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(rot)<sp/>{</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xMin<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>yMin<sp/>=<sp/>y<sp/>-<sp/>ascent;</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>yMax<sp/>=<sp/>y<sp/>-<sp/>descent;</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(yMin<sp/>==<sp/>yMax)<sp/>{</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>is<sp/>a<sp/>sanity<sp/>check<sp/>for<sp/>a<sp/>case<sp/>that<sp/>shouldn&apos;t<sp/>happen<sp/>--<sp/>but</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>it<sp/>does<sp/>happen,<sp/>we<sp/>want<sp/>to<sp/>avoid<sp/>dividing<sp/>by<sp/>zero<sp/>later</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/>yMin<sp/>=<sp/>y;</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/>yMax<sp/>=<sp/>y<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>base<sp/>=<sp/>y;</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xMin<sp/>=<sp/>x<sp/>+<sp/>descent;</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>yMin<sp/>=<sp/>y;</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xMax<sp/>=<sp/>x<sp/>+<sp/>ascent;</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(xMin<sp/>==<sp/>xMax)<sp/>{</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>is<sp/>a<sp/>sanity<sp/>check<sp/>for<sp/>a<sp/>case<sp/>that<sp/>shouldn&apos;t<sp/>happen<sp/>--<sp/>but</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>it<sp/>does<sp/>happen,<sp/>we<sp/>want<sp/>to<sp/>avoid<sp/>dividing<sp/>by<sp/>zero<sp/>later</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/>xMin<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/>xMax<sp/>=<sp/>x<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>base<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>yMin<sp/>=<sp/>y<sp/>+<sp/>descent;</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xMax<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>yMax<sp/>=<sp/>y<sp/>+<sp/>ascent;</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(yMin<sp/>==<sp/>yMax)<sp/>{</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>is<sp/>a<sp/>sanity<sp/>check<sp/>for<sp/>a<sp/>case<sp/>that<sp/>shouldn&apos;t<sp/>happen<sp/>--<sp/>but</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>it<sp/>does<sp/>happen,<sp/>we<sp/>want<sp/>to<sp/>avoid<sp/>dividing<sp/>by<sp/>zero<sp/>later</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/>yMin<sp/>=<sp/>y;</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/>yMax<sp/>=<sp/>y<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>base<sp/>=<sp/>y;</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>3:</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xMin<sp/>=<sp/>x<sp/>-<sp/>ascent;</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xMax<sp/>=<sp/>x<sp/>-<sp/>descent;</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>yMax<sp/>=<sp/>y;</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(xMin<sp/>==<sp/>xMax)<sp/>{</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>is<sp/>a<sp/>sanity<sp/>check<sp/>for<sp/>a<sp/>case<sp/>that<sp/>shouldn&apos;t<sp/>happen<sp/>--<sp/>but</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>it<sp/>does<sp/>happen,<sp/>we<sp/>want<sp/>to<sp/>avoid<sp/>dividing<sp/>by<sp/>zero<sp/>later</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/>xMin<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/>xMax<sp/>=<sp/>x<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>base<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="533"><highlight class="normal">}</highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TextWord::ensureCapacity(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>capacity)<sp/>{</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(capacity<sp/>&gt;<sp/>size)<sp/>{</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/>size<sp/>=<sp/>std::max(size<sp/>+<sp/>16,<sp/>capacity);</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/>text<sp/>=<sp/>(Unicode<sp/>*)greallocn(text,<sp/>size,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Unicode));</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/>charcode<sp/>=<sp/>(CharCode<sp/>*)greallocn(charcode,<sp/>(size<sp/>+<sp/>1),<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(CharCode));</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/>edge<sp/>=<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*)greallocn(edge,<sp/>(size<sp/>+<sp/>1),<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(double));</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/>charPos<sp/>=<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)greallocn(charPos,<sp/>size<sp/>+<sp/>1,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structfont" kindref="compound">font</ref><sp/>=<sp/>(<ref refid="class_text_font_info" kindref="compound">TextFontInfo</ref><sp/>**)greallocn(<ref refid="structfont" kindref="compound">font</ref>,<sp/>size,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="class_text_font_info" kindref="compound">TextFontInfo</ref><sp/>*));</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/>textMat<sp/>=<sp/>(<ref refid="class_matrix" kindref="compound">Matrix</ref><sp/>*)greallocn(textMat,<sp/>size,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="class_matrix" kindref="compound">Matrix</ref>));</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="545"><highlight class="normal">}</highlight></codeline>
<codeline lineno="546"><highlight class="normal"></highlight></codeline>
<codeline lineno="547" refid="struct_combining_table" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_combining_table" kindref="compound">CombiningTable</ref><sp/>{</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/>Unicode<sp/>base;</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/>Unicode<sp/>comb;</highlight></codeline>
<codeline lineno="550"><highlight class="normal">};</highlight></codeline>
<codeline lineno="551"><highlight class="normal"></highlight></codeline>
<codeline lineno="552"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_combining_table" kindref="compound">CombiningTable</ref><sp/>combiningTable[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/>{0x0060,<sp/>0x0300},<sp/></highlight><highlight class="comment">//<sp/>grave</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/>{0x00a8,<sp/>0x0308},<sp/></highlight><highlight class="comment">//<sp/>dieresis</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/>{0x00af,<sp/>0x0304},<sp/></highlight><highlight class="comment">//<sp/>macron</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/>{0x00b4,<sp/>0x0301},<sp/></highlight><highlight class="comment">//<sp/>acute</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/>{0x00b8,<sp/>0x0327},<sp/></highlight><highlight class="comment">//<sp/>cedilla</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/>{0x02c6,<sp/>0x0302},<sp/></highlight><highlight class="comment">//<sp/>circumflex</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/>{0x02c7,<sp/>0x030c},<sp/></highlight><highlight class="comment">//<sp/>caron</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/>{0x02d8,<sp/>0x0306},<sp/></highlight><highlight class="comment">//<sp/>breve</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/>{0x02d9,<sp/>0x0307},<sp/></highlight><highlight class="comment">//<sp/>dotaccent</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/>{0x02da,<sp/>0x030a},<sp/></highlight><highlight class="comment">//<sp/>ring</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/>{0x02dc,<sp/>0x0303},<sp/></highlight><highlight class="comment">//<sp/>tilde</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/>{0x02dd,<sp/>0x030b}<sp/><sp/></highlight><highlight class="comment">//<sp/>hungarumlaut<sp/>(double<sp/>acute<sp/>accent)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal">};</highlight></codeline>
<codeline lineno="566"><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"></highlight><highlight class="comment">//<sp/>returning<sp/>combining<sp/>versions<sp/>of<sp/>characters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="568"><highlight class="normal">Unicode<sp/>getCombiningChar(Unicode<sp/>u)<sp/>{</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(combiningTable)<sp/>/<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(combiningTable[0]);</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>len;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(u<sp/>==<sp/>combiningTable[i].base)</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>combiningTable[i].comb;</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="575"><highlight class="normal">}</highlight></codeline>
<codeline lineno="576"><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal">GBool<sp/>TextWord::addCombining(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state,<sp/><ref refid="class_text_font_info" kindref="compound">TextFontInfo</ref><sp/>*fontA,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>fontSizeA,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y,</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dx,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dy,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>charPosA,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>charLen,</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CharCode<sp/>c,<sp/>Unicode<sp/>u,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_matrix" kindref="compound">Matrix</ref><sp/>&amp;textMatA)<sp/>{</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len<sp/>==<sp/>0<sp/>||<sp/>wMode<sp/>!=<sp/>0<sp/>||<sp/>fontA-&gt;getWMode()<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="582"><highlight class="normal"></highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/>Unicode<sp/>cCurrent<sp/>=<sp/>getCombiningChar(u);</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/>Unicode<sp/>cPrev<sp/>=<sp/>getCombiningChar(text[len-1]);</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>edgeMid<sp/>=<sp/>(edge[len-1]<sp/>+<sp/>edge[len])<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>charMid,<sp/>maxScaledMidDelta,<sp/>charBase,<sp/>maxScaledBaseDelta;</highlight></codeline>
<codeline lineno="587"><highlight class="normal"></highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cCurrent<sp/>!=<sp/>0<sp/>&amp;&amp;<sp/>unicodeTypeAlphaNum(text[len-1]))<sp/>{</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Current<sp/>is<sp/>a<sp/>combining<sp/>character,<sp/>previous<sp/>is<sp/>base<sp/>character</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/>maxScaledMidDelta<sp/>=<sp/>fabs(edge[len]<sp/>-<sp/>edge[len-1])<sp/>*<sp/>combMaxMidDelta;</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/>charMid<sp/>=<sp/>charBase<sp/>=<sp/>maxScaledBaseDelta<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="592"><highlight class="normal"></highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>if<sp/>characters<sp/>overlap</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rot<sp/>==<sp/>0<sp/>||<sp/>rot<sp/>==<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>charMid<sp/>=<sp/>x<sp/>+<sp/>(dx<sp/>/<sp/>2);</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>charBase<sp/>=<sp/>y;</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>maxScaledBaseDelta<sp/>=<sp/>(yMax<sp/>-<sp/>yMin)<sp/>*<sp/>combMaxBaseDelta;</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>charMid<sp/>=<sp/>y<sp/>+<sp/>(dy<sp/>/<sp/>2);</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>charBase<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>maxScaledBaseDelta<sp/>=<sp/>(xMax<sp/>-<sp/>xMin)<sp/>*<sp/>combMaxBaseDelta;</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="603"><highlight class="normal"></highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabs(charMid<sp/>-<sp/>edgeMid)<sp/>&gt;=<sp/>maxScaledMidDelta<sp/>||</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/>fabs(charBase<sp/>-<sp/>base)<sp/>&gt;=<sp/>maxScaledBaseDelta)</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="607"><highlight class="normal"></highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>character,<sp/>but<sp/>don&apos;t<sp/>adjust<sp/>edge<sp/>/<sp/>bounding<sp/>box<sp/>because</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>combining<sp/>character&apos;s<sp/>positioning<sp/>could<sp/>be<sp/>odd.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/>ensureCapacity(len+1);</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/>text[len]<sp/>=<sp/>cCurrent;</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/>charcode[len]<sp/>=<sp/>c;</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/>charPos[len]<sp/>=<sp/>charPosA;</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/>charPos[len+1]<sp/>=<sp/>charPosA<sp/>+<sp/>charLen;</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structfont" kindref="compound">font</ref>[len]<sp/>=<sp/>fontA;</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/>textMat[len]<sp/>=<sp/>textMatA;</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/>edge[len+1]<sp/>=<sp/>edge[len];</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/>edge[len]<sp/>=<sp/>(edge[len+1]<sp/>+<sp/>edge[len-1])<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/>++len;</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gTrue;</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="622"><highlight class="normal"></highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cPrev<sp/>!=<sp/>0<sp/>&amp;&amp;<sp/>unicodeTypeAlphaNum(u))<sp/>{</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Previous<sp/>is<sp/>a<sp/>combining<sp/>character,<sp/>current<sp/>is<sp/>base<sp/>character</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/>maxScaledBaseDelta<sp/>=<sp/>(fontA-&gt;getAscent()<sp/>-<sp/>fontA-&gt;getDescent())<sp/>*<sp/>fontSizeA<sp/>*<sp/>combMaxBaseDelta;</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/>charMid<sp/>=<sp/>charBase<sp/>=<sp/>maxScaledMidDelta<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="627"><highlight class="normal"></highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>if<sp/>characters<sp/>overlap</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rot<sp/>==<sp/>0<sp/>||<sp/>rot<sp/>==<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>charMid<sp/>=<sp/>x<sp/>+<sp/>(dx<sp/>/<sp/>2);</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>charBase<sp/>=<sp/>y;</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>maxScaledMidDelta<sp/>=<sp/>fabs(dx<sp/>*<sp/>combMaxMidDelta);</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>charMid<sp/>=<sp/>y<sp/>+<sp/>(dy<sp/>/<sp/>2);</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>charBase<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>maxScaledMidDelta<sp/>=<sp/>fabs(dy<sp/>*<sp/>combMaxMidDelta);</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="638"><highlight class="normal"></highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabs(charMid<sp/>-<sp/>edgeMid)<sp/>&gt;=<sp/>maxScaledMidDelta<sp/>||</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/>fabs(charBase<sp/>-<sp/>base)<sp/>&gt;=<sp/>maxScaledBaseDelta)</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="642"><highlight class="normal"></highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>move<sp/>combining<sp/>character<sp/>to<sp/>after<sp/>base<sp/>character</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/>ensureCapacity(len+1);</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/>fontSize<sp/>=<sp/>fontSizeA;</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/>text[len]<sp/>=<sp/>cPrev;</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/>charcode[len]<sp/>=<sp/>charcode[len-1];</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/>charPos[len]<sp/>=<sp/>charPosA;</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/>charPos[len+1]<sp/>=<sp/>charPosA<sp/>+<sp/>charLen;</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structfont" kindref="compound">font</ref>[len]<sp/>=<sp/><ref refid="structfont" kindref="compound">font</ref>[len-1];</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/>textMat[len]<sp/>=<sp/>textMat[len-1];</highlight></codeline>
<codeline lineno="652"><highlight class="normal"></highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/>text[len-1]<sp/>=<sp/>u;</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/>charcode[len-1]<sp/>=<sp/>c;</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structfont" kindref="compound">font</ref>[len-1]<sp/>=<sp/>fontA;</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/>textMat[len-1]<sp/>=<sp/>textMatA;</highlight></codeline>
<codeline lineno="657"><highlight class="normal"></highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>setInitialBounds(fontA,<sp/>x,<sp/>y);</highlight></codeline>
<codeline lineno="660"><highlight class="normal"></highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Updated<sp/>edges<sp/>/<sp/>bounding<sp/>box<sp/>because<sp/>we<sp/>changed<sp/>the<sp/>base</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>character.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(wMode)<sp/>{</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(rot)<sp/>{</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/>edge[len-1]<sp/>=<sp/>x<sp/>-<sp/>fontSize;</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/>xMax<sp/>=<sp/>edge[len+1]<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/>edge[len-1]<sp/>=<sp/>y<sp/>-<sp/>fontSize;</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/>yMax<sp/>=<sp/>edge[len+1]<sp/>=<sp/>y;</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/>edge[len-1]<sp/>=<sp/>x<sp/>+<sp/>fontSize;</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/>xMin<sp/>=<sp/>edge[len+1]<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>3:</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/>edge[len-1]<sp/>=<sp/>y<sp/>+<sp/>fontSize;</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/>yMin<sp/>=<sp/>edge[len+1]<sp/>=<sp/>y;</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(rot)<sp/>{</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/>edge[len-1]<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/>xMax<sp/>=<sp/>edge[len+1]<sp/>=<sp/>x<sp/>+<sp/>dx;</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/>edge[len-1]<sp/>=<sp/>y;</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/>yMax<sp/>=<sp/>edge[len+1]<sp/>=<sp/>y<sp/>+<sp/>dy;</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/>edge[len-1]<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/>xMin<sp/>=<sp/>edge[len+1]<sp/>=<sp/>x<sp/>+<sp/>dx;</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>3:</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/>edge[len-1]<sp/>=<sp/>y;</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/>yMin<sp/>=<sp/>edge[len+1]<sp/>=<sp/>y<sp/>+<sp/>dy;</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="702"><highlight class="normal"></highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/>edge[len]<sp/>=<sp/>(edge[len+1]<sp/>+<sp/>edge[len-1])<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/>++len;</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gTrue;</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="708"><highlight class="normal">}</highlight></codeline>
<codeline lineno="709"><highlight class="normal"></highlight></codeline>
<codeline lineno="710"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TextWord::merge(<ref refid="class_text_word" kindref="compound">TextWord</ref><sp/>*word)<sp/>{</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="712"><highlight class="normal"></highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(word-&gt;xMin<sp/>&lt;<sp/>xMin)<sp/>{</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/>xMin<sp/>=<sp/>word-&gt;xMin;</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(word-&gt;yMin<sp/>&lt;<sp/>yMin)<sp/>{</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/>yMin<sp/>=<sp/>word-&gt;yMin;</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(word-&gt;xMax<sp/>&gt;<sp/>xMax)<sp/>{</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/>xMax<sp/>=<sp/>word-&gt;xMax;</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(word-&gt;yMax<sp/>&gt;<sp/>yMax)<sp/>{</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/>yMax<sp/>=<sp/>word-&gt;yMax;</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/>ensureCapacity(len<sp/>+<sp/>word-&gt;len);</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>word-&gt;len;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/>text[len<sp/>+<sp/>i]<sp/>=<sp/>word-&gt;text[i];</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/>charcode[len<sp/>+<sp/>i]<sp/>=<sp/>word-&gt;charcode[i];</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/>edge[len<sp/>+<sp/>i]<sp/>=<sp/>word-&gt;edge[i];</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/>charPos[len<sp/>+<sp/>i]<sp/>=<sp/>word-&gt;charPos[i];</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structfont" kindref="compound">font</ref>[len<sp/>+<sp/>i]<sp/>=<sp/>word-&gt;font[i];</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/>textMat[len<sp/>+<sp/>i]<sp/>=<sp/>word-&gt;textMat[i];</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/>edge[len<sp/>+<sp/>word-&gt;len]<sp/>=<sp/>word-&gt;edge[word-&gt;len];</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/>charPos[len<sp/>+<sp/>word-&gt;len]<sp/>=<sp/>word-&gt;charPos[word-&gt;len];</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/>len<sp/>+=<sp/>word-&gt;len;</highlight></codeline>
<codeline lineno="737"><highlight class="normal">}</highlight></codeline>
<codeline lineno="738"><highlight class="normal"></highlight></codeline>
<codeline lineno="739"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>TextWord::primaryCmp(<ref refid="class_text_word" kindref="compound">TextWord</ref><sp/>*word)<sp/>{</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>cmp;</highlight></codeline>
<codeline lineno="741"><highlight class="normal"></highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/>cmp<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>make<sp/>gcc<sp/>happy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(rot)<sp/>{</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/>cmp<sp/>=<sp/>xMin<sp/>-<sp/>word-&gt;xMin;</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/>cmp<sp/>=<sp/>yMin<sp/>-<sp/>word-&gt;yMin;</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/>cmp<sp/>=<sp/>word-&gt;xMax<sp/>-<sp/>xMax;</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>3:</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/>cmp<sp/>=<sp/>word-&gt;yMax<sp/>-<sp/>yMax;</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cmp<sp/>&lt;<sp/>0<sp/>?<sp/>-1<sp/>:<sp/>cmp<sp/>&gt;<sp/>0<sp/>?<sp/>1<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="758"><highlight class="normal">}</highlight></codeline>
<codeline lineno="759"><highlight class="normal"></highlight></codeline>
<codeline lineno="760"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>TextWord::primaryDelta(<ref refid="class_text_word" kindref="compound">TextWord</ref><sp/>*word)<sp/>{</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>delta;</highlight></codeline>
<codeline lineno="762"><highlight class="normal"></highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/>delta<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>make<sp/>gcc<sp/>happy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(rot)<sp/>{</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/>delta<sp/>=<sp/>word-&gt;xMin<sp/>-<sp/>xMax;</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/>delta<sp/>=<sp/>word-&gt;yMin<sp/>-<sp/>yMax;</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/>delta<sp/>=<sp/>xMin<sp/>-<sp/>word-&gt;xMax;</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>3:</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/>delta<sp/>=<sp/>yMin<sp/>-<sp/>word-&gt;yMax;</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>delta;</highlight></codeline>
<codeline lineno="779"><highlight class="normal">}</highlight></codeline>
<codeline lineno="780"><highlight class="normal"></highlight></codeline>
<codeline lineno="781"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>TextWord::cmpYX(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p2)<sp/>{</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><ref refid="class_text_word" kindref="compound">TextWord</ref><sp/>*word1<sp/>=<sp/>*(<ref refid="class_text_word" kindref="compound">TextWord</ref><sp/>**)p1;</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><ref refid="class_text_word" kindref="compound">TextWord</ref><sp/>*word2<sp/>=<sp/>*(<ref refid="class_text_word" kindref="compound">TextWord</ref><sp/>**)p2;</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>cmp;</highlight></codeline>
<codeline lineno="785"><highlight class="normal"></highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/>cmp<sp/>=<sp/>word1-&gt;yMin<sp/>-<sp/>word2-&gt;yMin;</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cmp<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/>cmp<sp/>=<sp/>word1-&gt;xMin<sp/>-<sp/>word2-&gt;xMin;</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cmp<sp/>&lt;<sp/>0<sp/>?<sp/>-1<sp/>:<sp/>cmp<sp/>&gt;<sp/>0<sp/>?<sp/>1<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="791"><highlight class="normal">}</highlight></codeline>
<codeline lineno="792"><highlight class="normal"></highlight></codeline>
<codeline lineno="793"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>TEXTOUT_WORD_LIST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="794"><highlight class="normal"></highlight></codeline>
<codeline lineno="795"><highlight class="normal"><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*TextWord::getText()<sp/>{</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*s;</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><ref refid="class_unicode_map" kindref="compound">UnicodeMap</ref><sp/>*uMap;</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buf[8];</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,<sp/>i;</highlight></codeline>
<codeline lineno="800"><highlight class="normal"></highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/>s<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref>();</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(uMap<sp/>=<sp/>globalParams-&gt;getTextEncoding()))<sp/>{</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s;</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>len;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/>n<sp/>=<sp/>uMap-&gt;mapUnicode(text[i],<sp/>buf,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(buf));</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;append(buf,<sp/>n);</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/>uMap-&gt;decRefCnt();</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s;</highlight></codeline>
<codeline lineno="811"><highlight class="normal">}</highlight></codeline>
<codeline lineno="812"><highlight class="normal"></highlight></codeline>
<codeline lineno="813"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TextWord::getCharBBox(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>charIdx,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*xMinA,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*yMinA,</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*xMaxA,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*yMaxA)<sp/>{</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(charIdx<sp/>&lt;<sp/>0<sp/>||<sp/>charIdx<sp/>&gt;=<sp/>len)<sp/>{</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(rot)<sp/>{</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/>*xMinA<sp/>=<sp/>edge[charIdx];</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/>*xMaxA<sp/>=<sp/>edge[charIdx<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/>*yMinA<sp/>=<sp/>yMin;</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/>*yMaxA<sp/>=<sp/>yMax;</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/>*xMinA<sp/>=<sp/>xMin;</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/>*xMaxA<sp/>=<sp/>xMax;</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/>*yMinA<sp/>=<sp/>edge[charIdx];</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/>*yMaxA<sp/>=<sp/>edge[charIdx<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/>*xMinA<sp/>=<sp/>edge[charIdx<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/>*xMaxA<sp/>=<sp/>edge[charIdx];</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/>*yMinA<sp/>=<sp/>yMin;</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/>*yMaxA<sp/>=<sp/>yMax;</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>3:</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/>*xMinA<sp/>=<sp/>xMin;</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/>*xMaxA<sp/>=<sp/>xMax;</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/>*yMinA<sp/>=<sp/>edge[charIdx<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/>*yMaxA<sp/>=<sp/>edge[charIdx];</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="844"><highlight class="normal">}</highlight></codeline>
<codeline lineno="845"><highlight class="normal"></highlight></codeline>
<codeline lineno="846"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>TEXTOUT_WORD_LIST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="847"><highlight class="normal"></highlight></codeline>
<codeline lineno="848"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="849"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TextPool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="850"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="851"><highlight class="normal"></highlight></codeline>
<codeline lineno="852"><highlight class="normal">TextPool::TextPool()<sp/>{</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/>minBaseIdx<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/>maxBaseIdx<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/>pool<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/>cursor<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/>cursorBaseIdx<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="858"><highlight class="normal">}</highlight></codeline>
<codeline lineno="859"><highlight class="normal"></highlight></codeline>
<codeline lineno="860"><highlight class="normal">TextPool::~TextPool()<sp/>{</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>baseIdx;</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><ref refid="class_text_word" kindref="compound">TextWord</ref><sp/>*word,<sp/>*word2;</highlight></codeline>
<codeline lineno="863"><highlight class="normal"></highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(baseIdx<sp/>=<sp/>minBaseIdx;<sp/>baseIdx<sp/>&lt;=<sp/>maxBaseIdx;<sp/>++baseIdx)<sp/>{</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(word<sp/>=<sp/>pool[baseIdx<sp/>-<sp/>minBaseIdx];<sp/>word;<sp/>word<sp/>=<sp/>word2)<sp/>{</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>word2<sp/>=<sp/>word-&gt;next;</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>word;</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/>gfree(pool);</highlight></codeline>
<codeline lineno="871"><highlight class="normal">}</highlight></codeline>
<codeline lineno="872"><highlight class="normal"></highlight></codeline>
<codeline lineno="873"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>TextPool::getBaseIdx(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>base)<sp/>{</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>baseIdx;</highlight></codeline>
<codeline lineno="875"><highlight class="normal"></highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/>baseIdx<sp/>=<sp/>(int)(base<sp/>/<sp/>textPoolStep);</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(baseIdx<sp/>&lt;<sp/>minBaseIdx)<sp/>{</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>minBaseIdx;</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(baseIdx<sp/>&gt;<sp/>maxBaseIdx)<sp/>{</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>maxBaseIdx;</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>baseIdx;</highlight></codeline>
<codeline lineno="884"><highlight class="normal">}</highlight></codeline>
<codeline lineno="885"><highlight class="normal"></highlight></codeline>
<codeline lineno="886"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TextPool::addWord(<ref refid="class_text_word" kindref="compound">TextWord</ref><sp/>*word)<sp/>{</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><ref refid="class_text_word" kindref="compound">TextWord</ref><sp/>**newPool;</highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>wordBaseIdx,<sp/>newMinBaseIdx,<sp/>newMaxBaseIdx,<sp/>baseIdx;</highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><ref refid="class_text_word" kindref="compound">TextWord</ref><sp/>*w0,<sp/>*w1;</highlight></codeline>
<codeline lineno="890"><highlight class="normal"></highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>expand<sp/>the<sp/>array<sp/>if<sp/>needed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlikely((word-&gt;base<sp/>/<sp/>textPoolStep)<sp/>&gt;<sp/>INT_MAX))<sp/>{</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error(errSyntaxWarning,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;word-&gt;base<sp/>/<sp/>textPoolStep<sp/>&gt;<sp/>INT_MAX&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/>wordBaseIdx<sp/>=<sp/>(int)(word-&gt;base<sp/>/<sp/>textPoolStep);</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(minBaseIdx<sp/>&gt;<sp/>maxBaseIdx)<sp/>{</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/>minBaseIdx<sp/>=<sp/>wordBaseIdx<sp/>-<sp/>128;</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/>maxBaseIdx<sp/>=<sp/>wordBaseIdx<sp/>+<sp/>128;</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/>pool<sp/>=<sp/>(<ref refid="class_text_word" kindref="compound">TextWord</ref><sp/>**)gmallocn(maxBaseIdx<sp/>-<sp/>minBaseIdx<sp/>+<sp/>1,</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="class_text_word" kindref="compound">TextWord</ref><sp/>*));</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(baseIdx<sp/>=<sp/>minBaseIdx;<sp/>baseIdx<sp/>&lt;=<sp/>maxBaseIdx;<sp/>++baseIdx)<sp/>{</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pool[baseIdx<sp/>-<sp/>minBaseIdx]<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(wordBaseIdx<sp/>&lt;<sp/>minBaseIdx)<sp/>{</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/>newMinBaseIdx<sp/>=<sp/>wordBaseIdx<sp/>-<sp/>128;</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/>newPool<sp/>=<sp/>(<ref refid="class_text_word" kindref="compound">TextWord</ref><sp/>**)gmallocn(maxBaseIdx<sp/>-<sp/>newMinBaseIdx<sp/>+<sp/>1,</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="class_text_word" kindref="compound">TextWord</ref><sp/>*));</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(baseIdx<sp/>=<sp/>newMinBaseIdx;<sp/>baseIdx<sp/>&lt;<sp/>minBaseIdx;<sp/>++baseIdx)<sp/>{</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>newPool[baseIdx<sp/>-<sp/>newMinBaseIdx]<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(&amp;newPool[minBaseIdx<sp/>-<sp/>newMinBaseIdx],<sp/>pool,</highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(maxBaseIdx<sp/>-<sp/>minBaseIdx<sp/>+<sp/>1)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="class_text_word" kindref="compound">TextWord</ref><sp/>*));</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/>gfree(pool);</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/>pool<sp/>=<sp/>newPool;</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/>minBaseIdx<sp/>=<sp/>newMinBaseIdx;</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(wordBaseIdx<sp/>&gt;<sp/>maxBaseIdx)<sp/>{</highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/><sp/><sp/>newMaxBaseIdx<sp/>=<sp/>wordBaseIdx<sp/>+<sp/>128;</highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/>pool<sp/>=<sp/>(<ref refid="class_text_word" kindref="compound">TextWord</ref><sp/>**)greallocn(pool,<sp/>newMaxBaseIdx<sp/>-<sp/>minBaseIdx<sp/>+<sp/>1,</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="class_text_word" kindref="compound">TextWord</ref><sp/>*));</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(baseIdx<sp/>=<sp/>maxBaseIdx<sp/>+<sp/>1;<sp/>baseIdx<sp/>&lt;=<sp/>newMaxBaseIdx;<sp/>++baseIdx)<sp/>{</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pool[baseIdx<sp/>-<sp/>minBaseIdx]<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/>maxBaseIdx<sp/>=<sp/>newMaxBaseIdx;</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="926"><highlight class="normal"></highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>insert<sp/>the<sp/>new<sp/>word</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cursor<sp/>&amp;&amp;<sp/>wordBaseIdx<sp/>==<sp/>cursorBaseIdx<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>word-&gt;primaryCmp(cursor)<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/>w0<sp/>=<sp/>cursor;</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/>w1<sp/>=<sp/>cursor-&gt;next;</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/>w0<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/>w1<sp/>=<sp/>pool[wordBaseIdx<sp/>-<sp/>minBaseIdx];</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>w1<sp/>&amp;&amp;<sp/>word-&gt;primaryCmp(w1)<sp/>&gt;<sp/>0;<sp/>w0<sp/>=<sp/>w1,<sp/>w1<sp/>=<sp/>w1-&gt;next)<sp/>;</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/>word-&gt;next<sp/>=<sp/>w1;</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(w0)<sp/>{</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/>w0-&gt;next<sp/>=<sp/>word;</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/><sp/>pool[wordBaseIdx<sp/>-<sp/>minBaseIdx]<sp/>=<sp/>word;</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/>cursor<sp/>=<sp/>word;</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/>cursorBaseIdx<sp/>=<sp/>wordBaseIdx;</highlight></codeline>
<codeline lineno="945"><highlight class="normal">}</highlight></codeline>
<codeline lineno="946"><highlight class="normal"></highlight></codeline>
<codeline lineno="947"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="948"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TextLine</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="949"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="950"><highlight class="normal"></highlight></codeline>
<codeline lineno="951"><highlight class="normal">TextLine::TextLine(<ref refid="class_text_block" kindref="compound">TextBlock</ref><sp/>*blkA,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rotA,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>baseA)<sp/>{</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/>blk<sp/>=<sp/>blkA;</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/>rot<sp/>=<sp/>rotA;</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/>base<sp/>=<sp/>baseA;</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/>words<sp/>=<sp/>lastWord<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/>text<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/>edge<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/>col<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/>len<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/>convertedLen<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/>hyphenated<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/>next<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/>xMin<sp/>=<sp/>yMin<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/>xMax<sp/>=<sp/>yMax<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/>normalized<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/>normalized_len<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/>normalized_idx<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="968"><highlight class="normal">}</highlight></codeline>
<codeline lineno="969"><highlight class="normal"></highlight></codeline>
<codeline lineno="970"><highlight class="normal">TextLine::~TextLine()<sp/>{</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><ref refid="class_text_word" kindref="compound">TextWord</ref><sp/>*word;</highlight></codeline>
<codeline lineno="972"><highlight class="normal"></highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(words)<sp/>{</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><sp/><sp/>word<sp/>=<sp/>words;</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/>words<sp/>=<sp/>words-&gt;next;</highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>word;</highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/>gfree(text);</highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/>gfree(edge);</highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/>gfree(col);</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(normalized)<sp/>{</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><sp/><sp/>gfree(normalized);</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/>gfree(normalized_idx);</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="985"><highlight class="normal">}</highlight></codeline>
<codeline lineno="986"><highlight class="normal"></highlight></codeline>
<codeline lineno="987"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TextLine::addWord(<ref refid="class_text_word" kindref="compound">TextWord</ref><sp/>*word)<sp/>{</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lastWord)<sp/>{</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/>lastWord-&gt;next<sp/>=<sp/>word;</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/><sp/><sp/>words<sp/>=<sp/>word;</highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/>lastWord<sp/>=<sp/>word;</highlight></codeline>
<codeline lineno="994"><highlight class="normal"></highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(xMin<sp/>&gt;<sp/>xMax)<sp/>{</highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/><sp/><sp/>xMin<sp/>=<sp/>word-&gt;xMin;</highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><sp/><sp/>xMax<sp/>=<sp/>word-&gt;xMax;</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/><sp/>yMin<sp/>=<sp/>word-&gt;yMin;</highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/><sp/><sp/>yMax<sp/>=<sp/>word-&gt;yMax;</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(word-&gt;xMin<sp/>&lt;<sp/>xMin)<sp/>{</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xMin<sp/>=<sp/>word-&gt;xMin;</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(word-&gt;xMax<sp/>&gt;<sp/>xMax)<sp/>{</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xMax<sp/>=<sp/>word-&gt;xMax;</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(word-&gt;yMin<sp/>&lt;<sp/>yMin)<sp/>{</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>yMin<sp/>=<sp/>word-&gt;yMin;</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(word-&gt;yMax<sp/>&gt;<sp/>yMax)<sp/>{</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>yMax<sp/>=<sp/>word-&gt;yMax;</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1014"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"></highlight></codeline>
<codeline lineno="1016"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>TextLine::primaryDelta(<ref refid="class_text_line" kindref="compound">TextLine</ref><sp/>*line)<sp/>{</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>delta;</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"></highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/>delta<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>make<sp/>gcc<sp/>happy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(rot)<sp/>{</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/><sp/><sp/>delta<sp/>=<sp/>line-&gt;xMin<sp/>-<sp/>xMax;</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/><sp/><sp/>delta<sp/>=<sp/>line-&gt;yMin<sp/>-<sp/>yMax;</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/><sp/>delta<sp/>=<sp/>xMin<sp/>-<sp/>line-&gt;xMax;</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>3:</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/><sp/>delta<sp/>=<sp/>yMin<sp/>-<sp/>line-&gt;yMax;</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>delta;</highlight></codeline>
<codeline lineno="1035"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"></highlight></codeline>
<codeline lineno="1037"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>TextLine::primaryCmp(<ref refid="class_text_line" kindref="compound">TextLine</ref><sp/>*line)<sp/>{</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>cmp;</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"></highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/>cmp<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>make<sp/>gcc<sp/>happy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(rot)<sp/>{</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/><sp/><sp/>cmp<sp/>=<sp/>xMin<sp/>-<sp/>line-&gt;xMin;</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/><sp/><sp/>cmp<sp/>=<sp/>yMin<sp/>-<sp/>line-&gt;yMin;</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/><sp/><sp/>cmp<sp/>=<sp/>line-&gt;xMax<sp/>-<sp/>xMax;</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>3:</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><sp/><sp/>cmp<sp/>=<sp/>line-&gt;yMax<sp/>-<sp/>yMax;</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cmp<sp/>&lt;<sp/>0<sp/>?<sp/>-1<sp/>:<sp/>cmp<sp/>&gt;<sp/>0<sp/>?<sp/>1<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="1056"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"></highlight></codeline>
<codeline lineno="1058"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>TextLine::secondaryCmp(<ref refid="class_text_line" kindref="compound">TextLine</ref><sp/>*line)<sp/>{</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>cmp;</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"></highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/>cmp<sp/>=<sp/>(rot<sp/>==<sp/>0<sp/>||<sp/>rot<sp/>==<sp/>3)<sp/>?<sp/>base<sp/>-<sp/>line-&gt;base<sp/>:<sp/>line-&gt;base<sp/>-<sp/>base;</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cmp<sp/>&lt;<sp/>0<sp/>?<sp/>-1<sp/>:<sp/>cmp<sp/>&gt;<sp/>0<sp/>?<sp/>1<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="1063"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"></highlight></codeline>
<codeline lineno="1065"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>TextLine::cmpYX(<ref refid="class_text_line" kindref="compound">TextLine</ref><sp/>*line)<sp/>{</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cmp;</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"></highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((cmp<sp/>=<sp/>secondaryCmp(line)))<sp/>{</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cmp;</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>primaryCmp(line);</highlight></codeline>
<codeline lineno="1072"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"></highlight></codeline>
<codeline lineno="1074"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>TextLine::cmpXY(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p2)<sp/>{</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/><ref refid="class_text_line" kindref="compound">TextLine</ref><sp/>*line1<sp/>=<sp/>*(<ref refid="class_text_line" kindref="compound">TextLine</ref><sp/>**)p1;</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/><ref refid="class_text_line" kindref="compound">TextLine</ref><sp/>*line2<sp/>=<sp/>*(<ref refid="class_text_line" kindref="compound">TextLine</ref><sp/>**)p2;</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cmp;</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"></highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((cmp<sp/>=<sp/>line1-&gt;primaryCmp(line2)))<sp/>{</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cmp;</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>line1-&gt;secondaryCmp(line2);</highlight></codeline>
<codeline lineno="1083"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"></highlight></codeline>
<codeline lineno="1085"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TextLine::coalesce(<ref refid="class_unicode_map" kindref="compound">UnicodeMap</ref><sp/>*uMap)<sp/>{</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/><ref refid="class_text_word" kindref="compound">TextWord</ref><sp/>*word0,<sp/>*word1;</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>space,<sp/>delta,<sp/>minSpace;</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/>GBool<sp/>isUnicode;</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buf[8];</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"></highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(words-&gt;next)<sp/>{</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"></highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>compute<sp/>the<sp/>inter-word<sp/>space<sp/>threshold</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(words-&gt;len<sp/>&gt;<sp/>1<sp/>||<sp/>words-&gt;next-&gt;len<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>minSpace<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>minSpace<sp/>=<sp/>words-&gt;primaryDelta(words-&gt;next);</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(word0<sp/>=<sp/>words-&gt;next,<sp/>word1<sp/>=<sp/>word0-&gt;next;</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>word1<sp/>&amp;&amp;<sp/>minSpace<sp/>&gt;<sp/>0;</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>word0<sp/>=<sp/>word1,<sp/>word1<sp/>=<sp/>word0-&gt;next)<sp/>{</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(word1-&gt;len<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>minSpace<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/><sp/><sp/>delta<sp/>=<sp/>word0-&gt;primaryDelta(word1);</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(delta<sp/>&lt;<sp/>minSpace)<sp/>{</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>minSpace<sp/>=<sp/>delta;</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(minSpace<sp/>&lt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>space<sp/>=<sp/>maxCharSpacing<sp/>*<sp/>words-&gt;fontSize;</highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>space<sp/>=<sp/>maxWideCharSpacingMul<sp/>*<sp/>minSpace;</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(space<sp/>&gt;<sp/>maxWideCharSpacing<sp/>*<sp/>words-&gt;fontSize)<sp/>{</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/><sp/><sp/>space<sp/>=<sp/>maxWideCharSpacing<sp/>*<sp/>words-&gt;fontSize;</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"></highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>merge<sp/>words</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/><sp/><sp/>word0<sp/>=<sp/>words;</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/><sp/><sp/>word1<sp/>=<sp/>words-&gt;next;</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(word1)<sp/>{</highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(word0-&gt;primaryDelta(word1)<sp/>&gt;=<sp/>space)<sp/>{</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/><sp/><sp/>word0-&gt;spaceAfter<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/><sp/><sp/>word0<sp/>=<sp/>word1;</highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/><sp/><sp/>word1<sp/>=<sp/>word1-&gt;next;</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(word0-&gt;font[word0-&gt;len<sp/>-<sp/>1]<sp/>==<sp/>word1-&gt;font[0]<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>word0-&gt;underlined<sp/>==<sp/>word1-&gt;underlined<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fabs(word0-&gt;fontSize<sp/>-<sp/>word1-&gt;fontSize)<sp/>&lt;</highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maxWordFontSizeDelta<sp/>*<sp/>words-&gt;fontSize<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>word1-&gt;charPos[0]<sp/>==<sp/>word0-&gt;charPos[word0-&gt;len])<sp/>{</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/><sp/><sp/>word0-&gt;merge(word1);</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/><sp/><sp/>word0-&gt;next<sp/>=<sp/>word1-&gt;next;</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>word1;</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/><sp/><sp/>word1<sp/>=<sp/>word0-&gt;next;</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/><sp/><sp/>word0<sp/>=<sp/>word1;</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/><sp/><sp/>word1<sp/>=<sp/>word1-&gt;next;</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"></highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>build<sp/>the<sp/>line<sp/>text</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/>isUnicode<sp/>=<sp/>uMap<sp/>?<sp/>uMap-&gt;isUnicode()<sp/>:<sp/>gFalse;</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/>len<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(word1<sp/>=<sp/>words;<sp/>word1;<sp/>word1<sp/>=<sp/>word1-&gt;next)<sp/>{</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/><sp/><sp/>len<sp/>+=<sp/>word1-&gt;len;</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(word1-&gt;spaceAfter)<sp/>{</highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++len;</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/>text<sp/>=<sp/>(Unicode<sp/>*)gmallocn(len,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Unicode));</highlight></codeline>
<codeline lineno="1154"><highlight class="normal"><sp/><sp/>edge<sp/>=<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*)gmallocn(len<sp/>+<sp/>1,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(word1<sp/>=<sp/>words;<sp/>word1;<sp/>word1<sp/>=<sp/>word1-&gt;next)<sp/>{</highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>word1-&gt;len;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>text[i]<sp/>=<sp/>word1-&gt;text[j];</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>edge[i]<sp/>=<sp/>word1-&gt;edge[j];</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++i;</highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><sp/><sp/><sp/><sp/>edge[i]<sp/>=<sp/>word1-&gt;edge[word1-&gt;len];</highlight></codeline>
<codeline lineno="1163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(word1-&gt;spaceAfter)<sp/>{</highlight></codeline>
<codeline lineno="1164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>text[i]<sp/>=<sp/>(Unicode)0x0020;</highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++i;</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1168"><highlight class="normal"></highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>compute<sp/>convertedLen<sp/>and<sp/>set<sp/>up<sp/>the<sp/>col<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1170"><highlight class="normal"><sp/><sp/>col<sp/>=<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)gmallocn(len<sp/>+<sp/>1,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1171"><highlight class="normal"><sp/><sp/>convertedLen<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1172"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>len;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/><sp/><sp/>col[i]<sp/>=<sp/>convertedLen;</highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isUnicode)<sp/>{</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++convertedLen;</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(uMap)<sp/>{</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>convertedLen<sp/>+=<sp/>uMap-&gt;mapUnicode(text[i],<sp/>buf,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(buf));</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/>col[len]<sp/>=<sp/>convertedLen;</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"></highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>for<sp/>hyphen<sp/>at<sp/>end<sp/>of<sp/>line</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//~<sp/>need<sp/>to<sp/>check<sp/>for<sp/>other<sp/>chars<sp/>used<sp/>as<sp/>hyphens</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/>hyphenated<sp/>=<sp/>text[len<sp/>-<sp/>1]<sp/>==<sp/>(Unicode)</highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1185"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"></highlight></codeline>
<codeline lineno="1187"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1188"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TextLineFrag</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1189"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1190"><highlight class="normal"></highlight></codeline>
<codeline lineno="1191" refid="class_text_line_frag" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_text_line_frag" kindref="compound">TextLineFrag</ref><sp/>{</highlight></codeline>
<codeline lineno="1192"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"></highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/><ref refid="class_text_line" kindref="compound">TextLine</ref><sp/>*line;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>line<sp/>object</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>start,<sp/>len;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>offset<sp/>and<sp/>length<sp/>of<sp/>this<sp/>fragment</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>(in<sp/>Unicode<sp/>chars)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>xMin,<sp/>xMax;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>bounding<sp/>box<sp/>coordinates</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>yMin,<sp/>yMax;</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>base;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>baseline<sp/>virtual<sp/>coordinate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>col;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>first<sp/>column</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1201"><highlight class="normal"></highlight></codeline>
<codeline lineno="1202"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>init(<ref refid="class_text_line" kindref="compound">TextLine</ref><sp/>*lineA,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>startA,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lenA);</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>computeCoords(GBool<sp/>oneRot);</highlight></codeline>
<codeline lineno="1204"><highlight class="normal"></highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cmpYXPrimaryRot(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p2);</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cmpYXLineRot(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p2);</highlight></codeline>
<codeline lineno="1207"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cmpXYLineRot(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p2);</highlight></codeline>
<codeline lineno="1208"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cmpXYColumnPrimaryRot(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p2);</highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cmpXYColumnLineRot(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p2);</highlight></codeline>
<codeline lineno="1210"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1211"><highlight class="normal"></highlight></codeline>
<codeline lineno="1212"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TextLineFrag::init(<ref refid="class_text_line" kindref="compound">TextLine</ref><sp/>*lineA,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>startA,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lenA)<sp/>{</highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/>line<sp/>=<sp/>lineA;</highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/>start<sp/>=<sp/>startA;</highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><sp/><sp/>len<sp/>=<sp/>lenA;</highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/>col<sp/>=<sp/>line-&gt;col[start];</highlight></codeline>
<codeline lineno="1217"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1218"><highlight class="normal"></highlight></codeline>
<codeline lineno="1219"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TextLineFrag::computeCoords(GBool<sp/>oneRot)<sp/>{</highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><sp/><sp/><ref refid="class_text_block" kindref="compound">TextBlock</ref><sp/>*blk;</highlight></codeline>
<codeline lineno="1221"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>d0,<sp/>d1,<sp/>d2,<sp/>d3,<sp/>d4;</highlight></codeline>
<codeline lineno="1222"><highlight class="normal"></highlight></codeline>
<codeline lineno="1223"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(oneRot)<sp/>{</highlight></codeline>
<codeline lineno="1224"><highlight class="normal"></highlight></codeline>
<codeline lineno="1225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(line-&gt;rot)<sp/>{</highlight></codeline>
<codeline lineno="1226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:</highlight></codeline>
<codeline lineno="1227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xMin<sp/>=<sp/>line-&gt;edge[start];</highlight></codeline>
<codeline lineno="1228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xMax<sp/>=<sp/>line-&gt;edge[start<sp/>+<sp/>len];</highlight></codeline>
<codeline lineno="1229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>yMin<sp/>=<sp/>line-&gt;yMin;</highlight></codeline>
<codeline lineno="1230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>yMax<sp/>=<sp/>line-&gt;yMax;</highlight></codeline>
<codeline lineno="1231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="1233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xMin<sp/>=<sp/>line-&gt;xMin;</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xMax<sp/>=<sp/>line-&gt;xMax;</highlight></codeline>
<codeline lineno="1235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>yMin<sp/>=<sp/>line-&gt;edge[start];</highlight></codeline>
<codeline lineno="1236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>yMax<sp/>=<sp/>line-&gt;edge[start<sp/>+<sp/>len];</highlight></codeline>
<codeline lineno="1237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:</highlight></codeline>
<codeline lineno="1239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xMin<sp/>=<sp/>line-&gt;edge[start<sp/>+<sp/>len];</highlight></codeline>
<codeline lineno="1240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xMax<sp/>=<sp/>line-&gt;edge[start];</highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>yMin<sp/>=<sp/>line-&gt;yMin;</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>yMax<sp/>=<sp/>line-&gt;yMax;</highlight></codeline>
<codeline lineno="1243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1244"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>3:</highlight></codeline>
<codeline lineno="1245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xMin<sp/>=<sp/>line-&gt;xMin;</highlight></codeline>
<codeline lineno="1246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xMax<sp/>=<sp/>line-&gt;xMax;</highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>yMin<sp/>=<sp/>line-&gt;edge[start<sp/>+<sp/>len];</highlight></codeline>
<codeline lineno="1248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>yMax<sp/>=<sp/>line-&gt;edge[start];</highlight></codeline>
<codeline lineno="1249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1251"><highlight class="normal"><sp/><sp/><sp/><sp/>base<sp/>=<sp/>line-&gt;base;</highlight></codeline>
<codeline lineno="1252"><highlight class="normal"></highlight></codeline>
<codeline lineno="1253"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1254"><highlight class="normal"></highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(line-&gt;rot<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>line-&gt;blk-&gt;page-&gt;primaryRot<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1256"><highlight class="normal"></highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xMin<sp/>=<sp/>line-&gt;edge[start];</highlight></codeline>
<codeline lineno="1258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xMax<sp/>=<sp/>line-&gt;edge[start<sp/>+<sp/>len];</highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>yMin<sp/>=<sp/>line-&gt;yMin;</highlight></codeline>
<codeline lineno="1260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>yMax<sp/>=<sp/>line-&gt;yMax;</highlight></codeline>
<codeline lineno="1261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>base<sp/>=<sp/>line-&gt;base;</highlight></codeline>
<codeline lineno="1262"><highlight class="normal"></highlight></codeline>
<codeline lineno="1263"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1264"><highlight class="normal"></highlight></codeline>
<codeline lineno="1265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>blk<sp/>=<sp/>line-&gt;blk;</highlight></codeline>
<codeline lineno="1266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>d0<sp/>=<sp/>line-&gt;edge[start];</highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>d1<sp/>=<sp/>line-&gt;edge[start<sp/>+<sp/>len];</highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>d2<sp/>=<sp/>d3<sp/>=<sp/>d4<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>make<sp/>gcc<sp/>happy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1269"><highlight class="normal"></highlight></codeline>
<codeline lineno="1270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(line-&gt;rot)<sp/>{</highlight></codeline>
<codeline lineno="1271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:</highlight></codeline>
<codeline lineno="1272"><highlight class="normal"><sp/><sp/><sp/><sp/>d2<sp/>=<sp/>line-&gt;yMin;</highlight></codeline>
<codeline lineno="1273"><highlight class="normal"><sp/><sp/><sp/><sp/>d3<sp/>=<sp/>line-&gt;yMax;</highlight></codeline>
<codeline lineno="1274"><highlight class="normal"><sp/><sp/><sp/><sp/>d4<sp/>=<sp/>line-&gt;base;</highlight></codeline>
<codeline lineno="1275"><highlight class="normal"><sp/><sp/><sp/><sp/>d0<sp/>=<sp/>(d0<sp/>-<sp/>blk-&gt;xMin)<sp/>/<sp/>(blk-&gt;xMax<sp/>-<sp/>blk-&gt;xMin);</highlight></codeline>
<codeline lineno="1276"><highlight class="normal"><sp/><sp/><sp/><sp/>d1<sp/>=<sp/>(d1<sp/>-<sp/>blk-&gt;xMin)<sp/>/<sp/>(blk-&gt;xMax<sp/>-<sp/>blk-&gt;xMin);</highlight></codeline>
<codeline lineno="1277"><highlight class="normal"><sp/><sp/><sp/><sp/>d2<sp/>=<sp/>(d2<sp/>-<sp/>blk-&gt;yMin)<sp/>/<sp/>(blk-&gt;yMax<sp/>-<sp/>blk-&gt;yMin);</highlight></codeline>
<codeline lineno="1278"><highlight class="normal"><sp/><sp/><sp/><sp/>d3<sp/>=<sp/>(d3<sp/>-<sp/>blk-&gt;yMin)<sp/>/<sp/>(blk-&gt;yMax<sp/>-<sp/>blk-&gt;yMin);</highlight></codeline>
<codeline lineno="1279"><highlight class="normal"><sp/><sp/><sp/><sp/>d4<sp/>=<sp/>(d4<sp/>-<sp/>blk-&gt;yMin)<sp/>/<sp/>(blk-&gt;yMax<sp/>-<sp/>blk-&gt;yMin);</highlight></codeline>
<codeline lineno="1280"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="1282"><highlight class="normal"><sp/><sp/><sp/><sp/>d2<sp/>=<sp/>line-&gt;xMax;</highlight></codeline>
<codeline lineno="1283"><highlight class="normal"><sp/><sp/><sp/><sp/>d3<sp/>=<sp/>line-&gt;xMin;</highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/><sp/><sp/><sp/>d4<sp/>=<sp/>line-&gt;base;</highlight></codeline>
<codeline lineno="1285"><highlight class="normal"><sp/><sp/><sp/><sp/>d0<sp/>=<sp/>(d0<sp/>-<sp/>blk-&gt;yMin)<sp/>/<sp/>(blk-&gt;yMax<sp/>-<sp/>blk-&gt;yMin);</highlight></codeline>
<codeline lineno="1286"><highlight class="normal"><sp/><sp/><sp/><sp/>d1<sp/>=<sp/>(d1<sp/>-<sp/>blk-&gt;yMin)<sp/>/<sp/>(blk-&gt;yMax<sp/>-<sp/>blk-&gt;yMin);</highlight></codeline>
<codeline lineno="1287"><highlight class="normal"><sp/><sp/><sp/><sp/>d2<sp/>=<sp/>(blk-&gt;xMax<sp/>-<sp/>d2)<sp/>/<sp/>(blk-&gt;xMax<sp/>-<sp/>blk-&gt;xMin);</highlight></codeline>
<codeline lineno="1288"><highlight class="normal"><sp/><sp/><sp/><sp/>d3<sp/>=<sp/>(blk-&gt;xMax<sp/>-<sp/>d3)<sp/>/<sp/>(blk-&gt;xMax<sp/>-<sp/>blk-&gt;xMin);</highlight></codeline>
<codeline lineno="1289"><highlight class="normal"><sp/><sp/><sp/><sp/>d4<sp/>=<sp/>(blk-&gt;xMax<sp/>-<sp/>d4)<sp/>/<sp/>(blk-&gt;xMax<sp/>-<sp/>blk-&gt;xMin);</highlight></codeline>
<codeline lineno="1290"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:</highlight></codeline>
<codeline lineno="1292"><highlight class="normal"><sp/><sp/><sp/><sp/>d2<sp/>=<sp/>line-&gt;yMax;</highlight></codeline>
<codeline lineno="1293"><highlight class="normal"><sp/><sp/><sp/><sp/>d3<sp/>=<sp/>line-&gt;yMin;</highlight></codeline>
<codeline lineno="1294"><highlight class="normal"><sp/><sp/><sp/><sp/>d4<sp/>=<sp/>line-&gt;base;</highlight></codeline>
<codeline lineno="1295"><highlight class="normal"><sp/><sp/><sp/><sp/>d0<sp/>=<sp/>(blk-&gt;xMax<sp/>-<sp/>d0)<sp/>/<sp/>(blk-&gt;xMax<sp/>-<sp/>blk-&gt;xMin);</highlight></codeline>
<codeline lineno="1296"><highlight class="normal"><sp/><sp/><sp/><sp/>d1<sp/>=<sp/>(blk-&gt;xMax<sp/>-<sp/>d1)<sp/>/<sp/>(blk-&gt;xMax<sp/>-<sp/>blk-&gt;xMin);</highlight></codeline>
<codeline lineno="1297"><highlight class="normal"><sp/><sp/><sp/><sp/>d2<sp/>=<sp/>(blk-&gt;yMax<sp/>-<sp/>d2)<sp/>/<sp/>(blk-&gt;yMax<sp/>-<sp/>blk-&gt;yMin);</highlight></codeline>
<codeline lineno="1298"><highlight class="normal"><sp/><sp/><sp/><sp/>d3<sp/>=<sp/>(blk-&gt;yMax<sp/>-<sp/>d3)<sp/>/<sp/>(blk-&gt;yMax<sp/>-<sp/>blk-&gt;yMin);</highlight></codeline>
<codeline lineno="1299"><highlight class="normal"><sp/><sp/><sp/><sp/>d4<sp/>=<sp/>(blk-&gt;yMax<sp/>-<sp/>d4)<sp/>/<sp/>(blk-&gt;yMax<sp/>-<sp/>blk-&gt;yMin);</highlight></codeline>
<codeline lineno="1300"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>3:</highlight></codeline>
<codeline lineno="1302"><highlight class="normal"><sp/><sp/><sp/><sp/>d2<sp/>=<sp/>line-&gt;xMin;</highlight></codeline>
<codeline lineno="1303"><highlight class="normal"><sp/><sp/><sp/><sp/>d3<sp/>=<sp/>line-&gt;xMax;</highlight></codeline>
<codeline lineno="1304"><highlight class="normal"><sp/><sp/><sp/><sp/>d4<sp/>=<sp/>line-&gt;base;</highlight></codeline>
<codeline lineno="1305"><highlight class="normal"><sp/><sp/><sp/><sp/>d0<sp/>=<sp/>(blk-&gt;yMax<sp/>-<sp/>d0)<sp/>/<sp/>(blk-&gt;yMax<sp/>-<sp/>blk-&gt;yMin);</highlight></codeline>
<codeline lineno="1306"><highlight class="normal"><sp/><sp/><sp/><sp/>d1<sp/>=<sp/>(blk-&gt;yMax<sp/>-<sp/>d1)<sp/>/<sp/>(blk-&gt;yMax<sp/>-<sp/>blk-&gt;yMin);</highlight></codeline>
<codeline lineno="1307"><highlight class="normal"><sp/><sp/><sp/><sp/>d2<sp/>=<sp/>(d2<sp/>-<sp/>blk-&gt;xMin)<sp/>/<sp/>(blk-&gt;xMax<sp/>-<sp/>blk-&gt;xMin);</highlight></codeline>
<codeline lineno="1308"><highlight class="normal"><sp/><sp/><sp/><sp/>d3<sp/>=<sp/>(d3<sp/>-<sp/>blk-&gt;xMin)<sp/>/<sp/>(blk-&gt;xMax<sp/>-<sp/>blk-&gt;xMin);</highlight></codeline>
<codeline lineno="1309"><highlight class="normal"><sp/><sp/><sp/><sp/>d4<sp/>=<sp/>(d4<sp/>-<sp/>blk-&gt;xMin)<sp/>/<sp/>(blk-&gt;xMax<sp/>-<sp/>blk-&gt;xMin);</highlight></codeline>
<codeline lineno="1310"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1312"><highlight class="normal"></highlight></codeline>
<codeline lineno="1313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(line-&gt;blk-&gt;page-&gt;primaryRot)<sp/>{</highlight></codeline>
<codeline lineno="1314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:</highlight></codeline>
<codeline lineno="1315"><highlight class="normal"><sp/><sp/><sp/><sp/>xMin<sp/>=<sp/>blk-&gt;xMin<sp/>+<sp/>d0<sp/>*<sp/>(blk-&gt;xMax<sp/>-<sp/>blk-&gt;xMin);</highlight></codeline>
<codeline lineno="1316"><highlight class="normal"><sp/><sp/><sp/><sp/>xMax<sp/>=<sp/>blk-&gt;xMin<sp/>+<sp/>d1<sp/>*<sp/>(blk-&gt;xMax<sp/>-<sp/>blk-&gt;xMin);</highlight></codeline>
<codeline lineno="1317"><highlight class="normal"><sp/><sp/><sp/><sp/>yMin<sp/>=<sp/>blk-&gt;yMin<sp/>+<sp/>d2<sp/>*<sp/>(blk-&gt;yMax<sp/>-<sp/>blk-&gt;yMin);</highlight></codeline>
<codeline lineno="1318"><highlight class="normal"><sp/><sp/><sp/><sp/>yMax<sp/>=<sp/>blk-&gt;yMin<sp/>+<sp/>d3<sp/>*<sp/>(blk-&gt;yMax<sp/>-<sp/>blk-&gt;yMin);</highlight></codeline>
<codeline lineno="1319"><highlight class="normal"><sp/><sp/><sp/><sp/>base<sp/>=<sp/>blk-&gt;yMin<sp/>+<sp/>d4<sp/>*<sp/>(blk-&gt;yMax<sp/>-<sp/>blk-&gt;yMin);</highlight></codeline>
<codeline lineno="1320"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="1322"><highlight class="normal"><sp/><sp/><sp/><sp/>xMin<sp/>=<sp/>blk-&gt;xMax<sp/>-<sp/>d3<sp/>*<sp/>(blk-&gt;xMax<sp/>-<sp/>blk-&gt;xMin);</highlight></codeline>
<codeline lineno="1323"><highlight class="normal"><sp/><sp/><sp/><sp/>xMax<sp/>=<sp/>blk-&gt;xMax<sp/>-<sp/>d2<sp/>*<sp/>(blk-&gt;xMax<sp/>-<sp/>blk-&gt;xMin);</highlight></codeline>
<codeline lineno="1324"><highlight class="normal"><sp/><sp/><sp/><sp/>yMin<sp/>=<sp/>blk-&gt;yMin<sp/>+<sp/>d0<sp/>*<sp/>(blk-&gt;yMax<sp/>-<sp/>blk-&gt;yMin);</highlight></codeline>
<codeline lineno="1325"><highlight class="normal"><sp/><sp/><sp/><sp/>yMax<sp/>=<sp/>blk-&gt;yMin<sp/>+<sp/>d1<sp/>*<sp/>(blk-&gt;yMax<sp/>-<sp/>blk-&gt;yMin);</highlight></codeline>
<codeline lineno="1326"><highlight class="normal"><sp/><sp/><sp/><sp/>base<sp/>=<sp/>blk-&gt;xMax<sp/>-<sp/>d4<sp/>*<sp/>(blk-&gt;xMax<sp/>-<sp/>blk-&gt;xMin);</highlight></codeline>
<codeline lineno="1327"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:</highlight></codeline>
<codeline lineno="1329"><highlight class="normal"><sp/><sp/><sp/><sp/>xMin<sp/>=<sp/>blk-&gt;xMax<sp/>-<sp/>d1<sp/>*<sp/>(blk-&gt;xMax<sp/>-<sp/>blk-&gt;xMin);</highlight></codeline>
<codeline lineno="1330"><highlight class="normal"><sp/><sp/><sp/><sp/>xMax<sp/>=<sp/>blk-&gt;xMax<sp/>-<sp/>d0<sp/>*<sp/>(blk-&gt;xMax<sp/>-<sp/>blk-&gt;xMin);</highlight></codeline>
<codeline lineno="1331"><highlight class="normal"><sp/><sp/><sp/><sp/>yMin<sp/>=<sp/>blk-&gt;yMax<sp/>-<sp/>d3<sp/>*<sp/>(blk-&gt;yMax<sp/>-<sp/>blk-&gt;yMin);</highlight></codeline>
<codeline lineno="1332"><highlight class="normal"><sp/><sp/><sp/><sp/>yMax<sp/>=<sp/>blk-&gt;yMax<sp/>-<sp/>d2<sp/>*<sp/>(blk-&gt;yMax<sp/>-<sp/>blk-&gt;yMin);</highlight></codeline>
<codeline lineno="1333"><highlight class="normal"><sp/><sp/><sp/><sp/>base<sp/>=<sp/>blk-&gt;yMax<sp/>-<sp/>d4<sp/>*<sp/>(blk-&gt;yMax<sp/>-<sp/>blk-&gt;yMin);</highlight></codeline>
<codeline lineno="1334"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>3:</highlight></codeline>
<codeline lineno="1336"><highlight class="normal"><sp/><sp/><sp/><sp/>xMin<sp/>=<sp/>blk-&gt;xMin<sp/>+<sp/>d2<sp/>*<sp/>(blk-&gt;xMax<sp/>-<sp/>blk-&gt;xMin);</highlight></codeline>
<codeline lineno="1337"><highlight class="normal"><sp/><sp/><sp/><sp/>xMax<sp/>=<sp/>blk-&gt;xMin<sp/>+<sp/>d3<sp/>*<sp/>(blk-&gt;xMax<sp/>-<sp/>blk-&gt;xMin);</highlight></codeline>
<codeline lineno="1338"><highlight class="normal"><sp/><sp/><sp/><sp/>yMin<sp/>=<sp/>blk-&gt;yMax<sp/>-<sp/>d1<sp/>*<sp/>(blk-&gt;yMax<sp/>-<sp/>blk-&gt;yMin);</highlight></codeline>
<codeline lineno="1339"><highlight class="normal"><sp/><sp/><sp/><sp/>yMax<sp/>=<sp/>blk-&gt;yMax<sp/>-<sp/>d0<sp/>*<sp/>(blk-&gt;yMax<sp/>-<sp/>blk-&gt;yMin);</highlight></codeline>
<codeline lineno="1340"><highlight class="normal"><sp/><sp/><sp/><sp/>base<sp/>=<sp/>blk-&gt;xMin<sp/>+<sp/>d4<sp/>*<sp/>(blk-&gt;xMax<sp/>-<sp/>blk-&gt;xMin);</highlight></codeline>
<codeline lineno="1341"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1343"><highlight class="normal"></highlight></codeline>
<codeline lineno="1344"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1345"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1346"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1347"><highlight class="normal"></highlight></codeline>
<codeline lineno="1348"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>TextLineFrag::cmpYXPrimaryRot(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p2)<sp/>{</highlight></codeline>
<codeline lineno="1349"><highlight class="normal"><sp/><sp/><ref refid="class_text_line_frag" kindref="compound">TextLineFrag</ref><sp/>*frag1<sp/>=<sp/>(<ref refid="class_text_line_frag" kindref="compound">TextLineFrag</ref><sp/>*)p1;</highlight></codeline>
<codeline lineno="1350"><highlight class="normal"><sp/><sp/><ref refid="class_text_line_frag" kindref="compound">TextLineFrag</ref><sp/>*frag2<sp/>=<sp/>(<ref refid="class_text_line_frag" kindref="compound">TextLineFrag</ref><sp/>*)p2;</highlight></codeline>
<codeline lineno="1351"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>cmp;</highlight></codeline>
<codeline lineno="1352"><highlight class="normal"></highlight></codeline>
<codeline lineno="1353"><highlight class="normal"><sp/><sp/>cmp<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>make<sp/>gcc<sp/>happy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1354"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(frag1-&gt;line-&gt;blk-&gt;page-&gt;primaryRot)<sp/>{</highlight></codeline>
<codeline lineno="1355"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:</highlight></codeline>
<codeline lineno="1356"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabs(cmp<sp/>=<sp/>frag1-&gt;yMin<sp/>-<sp/>frag2-&gt;yMin)<sp/>&lt;<sp/>0.01)<sp/>{</highlight></codeline>
<codeline lineno="1357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cmp<sp/>=<sp/>frag1-&gt;xMin<sp/>-<sp/>frag2-&gt;xMin;</highlight></codeline>
<codeline lineno="1358"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1359"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1360"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="1361"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabs(cmp<sp/>=<sp/>frag2-&gt;xMax<sp/>-<sp/>frag1-&gt;xMax)<sp/>&lt;<sp/>0.01)<sp/>{</highlight></codeline>
<codeline lineno="1362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cmp<sp/>=<sp/>frag1-&gt;yMin<sp/>-<sp/>frag2-&gt;yMin;</highlight></codeline>
<codeline lineno="1363"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1364"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1365"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:</highlight></codeline>
<codeline lineno="1366"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabs(cmp<sp/>=<sp/>frag2-&gt;yMin<sp/>-<sp/>frag1-&gt;yMin)<sp/>&lt;<sp/>0.01)<sp/>{</highlight></codeline>
<codeline lineno="1367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cmp<sp/>=<sp/>frag2-&gt;xMax<sp/>-<sp/>frag1-&gt;xMax;</highlight></codeline>
<codeline lineno="1368"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1369"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1370"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>3:</highlight></codeline>
<codeline lineno="1371"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabs(cmp<sp/>=<sp/>frag1-&gt;xMax<sp/>-<sp/>frag2-&gt;xMax)<sp/>&lt;<sp/>0.01)<sp/>{</highlight></codeline>
<codeline lineno="1372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cmp<sp/>=<sp/>frag2-&gt;yMax<sp/>-<sp/>frag1-&gt;yMax;</highlight></codeline>
<codeline lineno="1373"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1374"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1375"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1376"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cmp<sp/>&lt;<sp/>0<sp/>?<sp/>-1<sp/>:<sp/>cmp<sp/>&gt;<sp/>0<sp/>?<sp/>1<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="1377"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1378"><highlight class="normal"></highlight></codeline>
<codeline lineno="1379"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>TextLineFrag::cmpYXLineRot(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p2)<sp/>{</highlight></codeline>
<codeline lineno="1380"><highlight class="normal"><sp/><sp/><ref refid="class_text_line_frag" kindref="compound">TextLineFrag</ref><sp/>*frag1<sp/>=<sp/>(<ref refid="class_text_line_frag" kindref="compound">TextLineFrag</ref><sp/>*)p1;</highlight></codeline>
<codeline lineno="1381"><highlight class="normal"><sp/><sp/><ref refid="class_text_line_frag" kindref="compound">TextLineFrag</ref><sp/>*frag2<sp/>=<sp/>(<ref refid="class_text_line_frag" kindref="compound">TextLineFrag</ref><sp/>*)p2;</highlight></codeline>
<codeline lineno="1382"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>cmp;</highlight></codeline>
<codeline lineno="1383"><highlight class="normal"></highlight></codeline>
<codeline lineno="1384"><highlight class="normal"><sp/><sp/>cmp<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>make<sp/>gcc<sp/>happy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1385"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(frag1-&gt;line-&gt;rot)<sp/>{</highlight></codeline>
<codeline lineno="1386"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:</highlight></codeline>
<codeline lineno="1387"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((cmp<sp/>=<sp/>frag1-&gt;yMin<sp/>-<sp/>frag2-&gt;yMin)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cmp<sp/>=<sp/>frag1-&gt;xMin<sp/>-<sp/>frag2-&gt;xMin;</highlight></codeline>
<codeline lineno="1389"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1390"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1391"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="1392"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((cmp<sp/>=<sp/>frag2-&gt;xMax<sp/>-<sp/>frag1-&gt;xMax)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cmp<sp/>=<sp/>frag1-&gt;yMin<sp/>-<sp/>frag2-&gt;yMin;</highlight></codeline>
<codeline lineno="1394"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1395"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1396"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:</highlight></codeline>
<codeline lineno="1397"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((cmp<sp/>=<sp/>frag2-&gt;yMin<sp/>-<sp/>frag1-&gt;yMin)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cmp<sp/>=<sp/>frag2-&gt;xMax<sp/>-<sp/>frag1-&gt;xMax;</highlight></codeline>
<codeline lineno="1399"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1400"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1401"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>3:</highlight></codeline>
<codeline lineno="1402"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((cmp<sp/>=<sp/>frag1-&gt;xMax<sp/>-<sp/>frag2-&gt;xMax)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cmp<sp/>=<sp/>frag2-&gt;yMax<sp/>-<sp/>frag1-&gt;yMax;</highlight></codeline>
<codeline lineno="1404"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1405"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1406"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1407"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cmp<sp/>&lt;<sp/>0<sp/>?<sp/>-1<sp/>:<sp/>cmp<sp/>&gt;<sp/>0<sp/>?<sp/>1<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="1408"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1409"><highlight class="normal"></highlight></codeline>
<codeline lineno="1410"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>TextLineFrag::cmpXYLineRot(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p2)<sp/>{</highlight></codeline>
<codeline lineno="1411"><highlight class="normal"><sp/><sp/><ref refid="class_text_line_frag" kindref="compound">TextLineFrag</ref><sp/>*frag1<sp/>=<sp/>(<ref refid="class_text_line_frag" kindref="compound">TextLineFrag</ref><sp/>*)p1;</highlight></codeline>
<codeline lineno="1412"><highlight class="normal"><sp/><sp/><ref refid="class_text_line_frag" kindref="compound">TextLineFrag</ref><sp/>*frag2<sp/>=<sp/>(<ref refid="class_text_line_frag" kindref="compound">TextLineFrag</ref><sp/>*)p2;</highlight></codeline>
<codeline lineno="1413"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>cmp;</highlight></codeline>
<codeline lineno="1414"><highlight class="normal"></highlight></codeline>
<codeline lineno="1415"><highlight class="normal"><sp/><sp/>cmp<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>make<sp/>gcc<sp/>happy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1416"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(frag1-&gt;line-&gt;rot)<sp/>{</highlight></codeline>
<codeline lineno="1417"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:</highlight></codeline>
<codeline lineno="1418"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((cmp<sp/>=<sp/>frag1-&gt;xMin<sp/>-<sp/>frag2-&gt;xMin)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cmp<sp/>=<sp/>frag1-&gt;yMin<sp/>-<sp/>frag2-&gt;yMin;</highlight></codeline>
<codeline lineno="1420"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1421"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1422"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="1423"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((cmp<sp/>=<sp/>frag1-&gt;yMin<sp/>-<sp/>frag2-&gt;yMin)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cmp<sp/>=<sp/>frag2-&gt;xMax<sp/>-<sp/>frag1-&gt;xMax;</highlight></codeline>
<codeline lineno="1425"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1426"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1427"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:</highlight></codeline>
<codeline lineno="1428"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((cmp<sp/>=<sp/>frag2-&gt;xMax<sp/>-<sp/>frag1-&gt;xMax)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cmp<sp/>=<sp/>frag2-&gt;yMin<sp/>-<sp/>frag1-&gt;yMin;</highlight></codeline>
<codeline lineno="1430"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1431"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1432"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>3:</highlight></codeline>
<codeline lineno="1433"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((cmp<sp/>=<sp/>frag2-&gt;yMax<sp/>-<sp/>frag1-&gt;yMax)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cmp<sp/>=<sp/>frag1-&gt;xMax<sp/>-<sp/>frag2-&gt;xMax;</highlight></codeline>
<codeline lineno="1435"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1436"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1437"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1438"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cmp<sp/>&lt;<sp/>0<sp/>?<sp/>-1<sp/>:<sp/>cmp<sp/>&gt;<sp/>0<sp/>?<sp/>1<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="1439"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1440"><highlight class="normal"></highlight></codeline>
<codeline lineno="1441"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>TextLineFrag::cmpXYColumnPrimaryRot(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p2)<sp/>{</highlight></codeline>
<codeline lineno="1442"><highlight class="normal"><sp/><sp/><ref refid="class_text_line_frag" kindref="compound">TextLineFrag</ref><sp/>*frag1<sp/>=<sp/>(<ref refid="class_text_line_frag" kindref="compound">TextLineFrag</ref><sp/>*)p1;</highlight></codeline>
<codeline lineno="1443"><highlight class="normal"><sp/><sp/><ref refid="class_text_line_frag" kindref="compound">TextLineFrag</ref><sp/>*frag2<sp/>=<sp/>(<ref refid="class_text_line_frag" kindref="compound">TextLineFrag</ref><sp/>*)p2;</highlight></codeline>
<codeline lineno="1444"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>cmp;</highlight></codeline>
<codeline lineno="1445"><highlight class="normal"></highlight></codeline>
<codeline lineno="1446"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>columns<sp/>overlap,<sp/>compare<sp/>y<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1447"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(frag1-&gt;col<sp/>&lt;<sp/>frag2-&gt;col<sp/>+<sp/>(frag2-&gt;line-&gt;col[frag2-&gt;start<sp/>+<sp/>frag2-&gt;len]<sp/>-</highlight></codeline>
<codeline lineno="1448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>frag2-&gt;line-&gt;col[frag2-&gt;start])<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>frag2-&gt;col<sp/>&lt;<sp/>frag1-&gt;col<sp/>+<sp/>(frag1-&gt;line-&gt;col[frag1-&gt;start<sp/>+<sp/>frag1-&gt;len]<sp/>-</highlight></codeline>
<codeline lineno="1450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>frag1-&gt;line-&gt;col[frag1-&gt;start]))<sp/>{</highlight></codeline>
<codeline lineno="1451"><highlight class="normal"><sp/><sp/><sp/><sp/>cmp<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>make<sp/>gcc<sp/>happy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1452"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(frag1-&gt;line-&gt;blk-&gt;page-&gt;primaryRot)<sp/>{</highlight></codeline>
<codeline lineno="1453"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:<sp/>cmp<sp/>=<sp/>frag1-&gt;yMin<sp/>-<sp/>frag2-&gt;yMin;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1454"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:<sp/>cmp<sp/>=<sp/>frag2-&gt;xMax<sp/>-<sp/>frag1-&gt;xMax;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1455"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:<sp/>cmp<sp/>=<sp/>frag2-&gt;yMin<sp/>-<sp/>frag1-&gt;yMin;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1456"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>3:<sp/>cmp<sp/>=<sp/>frag1-&gt;xMax<sp/>-<sp/>frag2-&gt;xMax;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1457"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1458"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cmp<sp/>&lt;<sp/>0<sp/>?<sp/>-1<sp/>:<sp/>cmp<sp/>&gt;<sp/>0<sp/>?<sp/>1<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="1459"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1460"><highlight class="normal"></highlight></codeline>
<codeline lineno="1461"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>otherwise,<sp/>compare<sp/>starting<sp/>column</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1462"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>frag1-&gt;col<sp/>-<sp/>frag2-&gt;col;</highlight></codeline>
<codeline lineno="1463"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1464"><highlight class="normal"></highlight></codeline>
<codeline lineno="1465"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>TextLineFrag::cmpXYColumnLineRot(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p2)<sp/>{</highlight></codeline>
<codeline lineno="1466"><highlight class="normal"><sp/><sp/><ref refid="class_text_line_frag" kindref="compound">TextLineFrag</ref><sp/>*frag1<sp/>=<sp/>(<ref refid="class_text_line_frag" kindref="compound">TextLineFrag</ref><sp/>*)p1;</highlight></codeline>
<codeline lineno="1467"><highlight class="normal"><sp/><sp/><ref refid="class_text_line_frag" kindref="compound">TextLineFrag</ref><sp/>*frag2<sp/>=<sp/>(<ref refid="class_text_line_frag" kindref="compound">TextLineFrag</ref><sp/>*)p2;</highlight></codeline>
<codeline lineno="1468"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>cmp;</highlight></codeline>
<codeline lineno="1469"><highlight class="normal"></highlight></codeline>
<codeline lineno="1470"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>columns<sp/>overlap,<sp/>compare<sp/>y<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1471"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(frag1-&gt;col<sp/>&lt;<sp/>frag2-&gt;col<sp/>+<sp/>(frag2-&gt;line-&gt;col[frag2-&gt;start<sp/>+<sp/>frag2-&gt;len]<sp/>-</highlight></codeline>
<codeline lineno="1472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>frag2-&gt;line-&gt;col[frag2-&gt;start])<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>frag2-&gt;col<sp/>&lt;<sp/>frag1-&gt;col<sp/>+<sp/>(frag1-&gt;line-&gt;col[frag1-&gt;start<sp/>+<sp/>frag1-&gt;len]<sp/>-</highlight></codeline>
<codeline lineno="1474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>frag1-&gt;line-&gt;col[frag1-&gt;start]))<sp/>{</highlight></codeline>
<codeline lineno="1475"><highlight class="normal"><sp/><sp/><sp/><sp/>cmp<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>make<sp/>gcc<sp/>happy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1476"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(frag1-&gt;line-&gt;rot)<sp/>{</highlight></codeline>
<codeline lineno="1477"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:<sp/>cmp<sp/>=<sp/>frag1-&gt;yMin<sp/>-<sp/>frag2-&gt;yMin;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1478"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:<sp/>cmp<sp/>=<sp/>frag2-&gt;xMax<sp/>-<sp/>frag1-&gt;xMax;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1479"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:<sp/>cmp<sp/>=<sp/>frag2-&gt;yMin<sp/>-<sp/>frag1-&gt;yMin;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1480"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>3:<sp/>cmp<sp/>=<sp/>frag1-&gt;xMax<sp/>-<sp/>frag2-&gt;xMax;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1481"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1482"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cmp<sp/>&lt;<sp/>0<sp/>?<sp/>-1<sp/>:<sp/>cmp<sp/>&gt;<sp/>0<sp/>?<sp/>1<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="1483"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1484"><highlight class="normal"></highlight></codeline>
<codeline lineno="1485"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>otherwise,<sp/>compare<sp/>starting<sp/>column</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1486"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>frag1-&gt;col<sp/>-<sp/>frag2-&gt;col;</highlight></codeline>
<codeline lineno="1487"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1488"><highlight class="normal"></highlight></codeline>
<codeline lineno="1489"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1490"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TextBlock</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1491"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1492"><highlight class="normal"></highlight></codeline>
<codeline lineno="1493"><highlight class="normal">TextBlock::TextBlock(<ref refid="class_text_page" kindref="compound">TextPage</ref><sp/>*pageA,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rotA)<sp/>{</highlight></codeline>
<codeline lineno="1494"><highlight class="normal"><sp/><sp/>page<sp/>=<sp/>pageA;</highlight></codeline>
<codeline lineno="1495"><highlight class="normal"><sp/><sp/>rot<sp/>=<sp/>rotA;</highlight></codeline>
<codeline lineno="1496"><highlight class="normal"><sp/><sp/>xMin<sp/>=<sp/>yMin<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1497"><highlight class="normal"><sp/><sp/>xMax<sp/>=<sp/>yMax<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="1498"><highlight class="normal"><sp/><sp/>priMin<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1499"><highlight class="normal"><sp/><sp/>priMax<sp/>=<sp/>page-&gt;pageWidth;</highlight></codeline>
<codeline lineno="1500"><highlight class="normal"><sp/><sp/>pool<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_text_pool" kindref="compound">TextPool</ref>();</highlight></codeline>
<codeline lineno="1501"><highlight class="normal"><sp/><sp/>lines<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1502"><highlight class="normal"><sp/><sp/>curLine<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1503"><highlight class="normal"><sp/><sp/>next<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1504"><highlight class="normal"><sp/><sp/>stackNext<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1505"><highlight class="normal"><sp/><sp/>tableId<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="1506"><highlight class="normal"><sp/><sp/>tableEnd<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="1507"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1508"><highlight class="normal"></highlight></codeline>
<codeline lineno="1509"><highlight class="normal">TextBlock::~TextBlock()<sp/>{</highlight></codeline>
<codeline lineno="1510"><highlight class="normal"><sp/><sp/><ref refid="class_text_line" kindref="compound">TextLine</ref><sp/>*line;</highlight></codeline>
<codeline lineno="1511"><highlight class="normal"></highlight></codeline>
<codeline lineno="1512"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>pool;</highlight></codeline>
<codeline lineno="1513"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(lines)<sp/>{</highlight></codeline>
<codeline lineno="1514"><highlight class="normal"><sp/><sp/><sp/><sp/>line<sp/>=<sp/>lines;</highlight></codeline>
<codeline lineno="1515"><highlight class="normal"><sp/><sp/><sp/><sp/>lines<sp/>=<sp/>lines-&gt;next;</highlight></codeline>
<codeline lineno="1516"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>line;</highlight></codeline>
<codeline lineno="1517"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1518"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1519"><highlight class="normal"></highlight></codeline>
<codeline lineno="1520"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TextBlock::addWord(<ref refid="class_text_word" kindref="compound">TextWord</ref><sp/>*word)<sp/>{</highlight></codeline>
<codeline lineno="1521"><highlight class="normal"><sp/><sp/>pool-&gt;addWord(word);</highlight></codeline>
<codeline lineno="1522"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(xMin<sp/>&gt;<sp/>xMax)<sp/>{</highlight></codeline>
<codeline lineno="1523"><highlight class="normal"><sp/><sp/><sp/><sp/>xMin<sp/>=<sp/>word-&gt;xMin;</highlight></codeline>
<codeline lineno="1524"><highlight class="normal"><sp/><sp/><sp/><sp/>xMax<sp/>=<sp/>word-&gt;xMax;</highlight></codeline>
<codeline lineno="1525"><highlight class="normal"><sp/><sp/><sp/><sp/>yMin<sp/>=<sp/>word-&gt;yMin;</highlight></codeline>
<codeline lineno="1526"><highlight class="normal"><sp/><sp/><sp/><sp/>yMax<sp/>=<sp/>word-&gt;yMax;</highlight></codeline>
<codeline lineno="1527"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1528"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(word-&gt;xMin<sp/>&lt;<sp/>xMin)<sp/>{</highlight></codeline>
<codeline lineno="1529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xMin<sp/>=<sp/>word-&gt;xMin;</highlight></codeline>
<codeline lineno="1530"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1531"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(word-&gt;xMax<sp/>&gt;<sp/>xMax)<sp/>{</highlight></codeline>
<codeline lineno="1532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xMax<sp/>=<sp/>word-&gt;xMax;</highlight></codeline>
<codeline lineno="1533"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1534"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(word-&gt;yMin<sp/>&lt;<sp/>yMin)<sp/>{</highlight></codeline>
<codeline lineno="1535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>yMin<sp/>=<sp/>word-&gt;yMin;</highlight></codeline>
<codeline lineno="1536"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1537"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(word-&gt;yMax<sp/>&gt;<sp/>yMax)<sp/>{</highlight></codeline>
<codeline lineno="1538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>yMax<sp/>=<sp/>word-&gt;yMax;</highlight></codeline>
<codeline lineno="1539"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1540"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1541"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1542"><highlight class="normal"></highlight></codeline>
<codeline lineno="1543"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TextBlock::coalesce(<ref refid="class_unicode_map" kindref="compound">UnicodeMap</ref><sp/>*uMap,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>fixedPitch)<sp/>{</highlight></codeline>
<codeline lineno="1544"><highlight class="normal"><sp/><sp/><ref refid="class_text_word" kindref="compound">TextWord</ref><sp/>*word0,<sp/>*word1,<sp/>*word2,<sp/>*bestWord0,<sp/>*bestWord1,<sp/>*lastWord;</highlight></codeline>
<codeline lineno="1545"><highlight class="normal"><sp/><sp/><ref refid="class_text_line" kindref="compound">TextLine</ref><sp/>*line,<sp/>*line0,<sp/>*line1;</highlight></codeline>
<codeline lineno="1546"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>poolMinBaseIdx,<sp/>startBaseIdx,<sp/>minBaseIdx,<sp/>maxBaseIdx;</highlight></codeline>
<codeline lineno="1547"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>baseIdx,<sp/>bestWordBaseIdx,<sp/>idx0,<sp/>idx1;</highlight></codeline>
<codeline lineno="1548"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>minBase,<sp/>maxBase;</highlight></codeline>
<codeline lineno="1549"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>fontSize,<sp/>wordSpacing,<sp/>delta,<sp/>priDelta,<sp/>secDelta;</highlight></codeline>
<codeline lineno="1550"><highlight class="normal"><sp/><sp/><ref refid="class_text_line" kindref="compound">TextLine</ref><sp/>**lineArray;</highlight></codeline>
<codeline lineno="1551"><highlight class="normal"><sp/><sp/>GBool<sp/>found,<sp/>overlap;</highlight></codeline>
<codeline lineno="1552"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>col1,<sp/>col2;</highlight></codeline>
<codeline lineno="1553"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j,<sp/>k;</highlight></codeline>
<codeline lineno="1554"><highlight class="normal"></highlight></codeline>
<codeline lineno="1555"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>discard<sp/>duplicated<sp/>text<sp/>(fake<sp/>boldface,<sp/>drop<sp/>shadows)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1556"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(idx0<sp/>=<sp/>pool-&gt;minBaseIdx;<sp/>idx0<sp/>&lt;=<sp/>pool-&gt;maxBaseIdx;<sp/>++idx0)<sp/>{</highlight></codeline>
<codeline lineno="1557"><highlight class="normal"><sp/><sp/><sp/><sp/>word0<sp/>=<sp/>pool-&gt;getPool(idx0);</highlight></codeline>
<codeline lineno="1558"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(word0)<sp/>{</highlight></codeline>
<codeline lineno="1559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>priDelta<sp/>=<sp/>dupMaxPriDelta<sp/>*<sp/>word0-&gt;fontSize;</highlight></codeline>
<codeline lineno="1560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>secDelta<sp/>=<sp/>dupMaxSecDelta<sp/>*<sp/>word0-&gt;fontSize;</highlight></codeline>
<codeline lineno="1561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>maxBaseIdx<sp/>=<sp/>pool-&gt;getBaseIdx(word0-&gt;base<sp/>+<sp/>secDelta);</highlight></codeline>
<codeline lineno="1562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>found<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="1563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>word1<sp/>=<sp/>word2<sp/>=<sp/>NULL;<sp/></highlight><highlight class="comment">//<sp/>make<sp/>gcc<sp/>happy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(idx1<sp/>=<sp/>idx0;<sp/>idx1<sp/>&lt;=<sp/>maxBaseIdx;<sp/>++idx1)<sp/>{</highlight></codeline>
<codeline lineno="1565"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(idx1<sp/>==<sp/>idx0)<sp/>{</highlight></codeline>
<codeline lineno="1566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>word1<sp/>=<sp/>word0;</highlight></codeline>
<codeline lineno="1567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>word2<sp/>=<sp/>word0-&gt;next;</highlight></codeline>
<codeline lineno="1568"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>word1<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>word2<sp/>=<sp/>pool-&gt;getPool(idx1);</highlight></codeline>
<codeline lineno="1571"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1572"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>word2;<sp/>word1<sp/>=<sp/>word2,<sp/>word2<sp/>=<sp/>word2-&gt;next)<sp/>{</highlight></codeline>
<codeline lineno="1573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(word2-&gt;len<sp/>==<sp/>word0-&gt;len<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!memcmp(word2-&gt;text,<sp/>word0-&gt;text,</highlight></codeline>
<codeline lineno="1575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>word0-&gt;len<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Unicode)))<sp/>{</highlight></codeline>
<codeline lineno="1576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(rot)<sp/>{</highlight></codeline>
<codeline lineno="1577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:</highlight></codeline>
<codeline lineno="1578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:</highlight></codeline>
<codeline lineno="1579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>found<sp/>=<sp/>fabs(word0-&gt;xMin<sp/>-<sp/>word2-&gt;xMin)<sp/>&lt;<sp/>priDelta<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fabs(word0-&gt;xMax<sp/>-<sp/>word2-&gt;xMax)<sp/>&lt;<sp/>priDelta<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fabs(word0-&gt;yMin<sp/>-<sp/>word2-&gt;yMin)<sp/>&lt;<sp/>secDelta<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fabs(word0-&gt;yMax<sp/>-<sp/>word2-&gt;yMax)<sp/>&lt;<sp/>secDelta;</highlight></codeline>
<codeline lineno="1583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="1585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>3:</highlight></codeline>
<codeline lineno="1586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>found<sp/>=<sp/>fabs(word0-&gt;xMin<sp/>-<sp/>word2-&gt;xMin)<sp/>&lt;<sp/>secDelta<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fabs(word0-&gt;xMax<sp/>-<sp/>word2-&gt;xMax)<sp/>&lt;<sp/>secDelta<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fabs(word0-&gt;yMin<sp/>-<sp/>word2-&gt;yMin)<sp/>&lt;<sp/>priDelta<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fabs(word0-&gt;yMax<sp/>-<sp/>word2-&gt;yMax)<sp/>&lt;<sp/>priDelta;</highlight></codeline>
<codeline lineno="1590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(found)<sp/>{</highlight></codeline>
<codeline lineno="1594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1596"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1597"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(found)<sp/>{</highlight></codeline>
<codeline lineno="1598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1599"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(found)<sp/>{</highlight></codeline>
<codeline lineno="1602"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(word1)<sp/>{</highlight></codeline>
<codeline lineno="1603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>word1-&gt;next<sp/>=<sp/>word2-&gt;next;</highlight></codeline>
<codeline lineno="1604"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pool-&gt;setPool(idx1,<sp/>word2-&gt;next);</highlight></codeline>
<codeline lineno="1606"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1607"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>word2;</highlight></codeline>
<codeline lineno="1608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1609"><highlight class="normal"><sp/><sp/><sp/><sp/>word0<sp/>=<sp/>word0-&gt;next;</highlight></codeline>
<codeline lineno="1610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1611"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1612"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1613"><highlight class="normal"></highlight></codeline>
<codeline lineno="1614"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>build<sp/>the<sp/>lines</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1615"><highlight class="normal"><sp/><sp/>curLine<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1616"><highlight class="normal"><sp/><sp/>poolMinBaseIdx<sp/>=<sp/>pool-&gt;minBaseIdx;</highlight></codeline>
<codeline lineno="1617"><highlight class="normal"><sp/><sp/>charCount<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1618"><highlight class="normal"><sp/><sp/>nLines<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1619"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(1)<sp/>{</highlight></codeline>
<codeline lineno="1620"><highlight class="normal"></highlight></codeline>
<codeline lineno="1621"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>find<sp/>the<sp/>first<sp/>non-empty<sp/>line<sp/>in<sp/>the<sp/>pool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1622"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;</highlight></codeline>
<codeline lineno="1623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>poolMinBaseIdx<sp/>&lt;=<sp/>pool-&gt;maxBaseIdx<sp/>&amp;&amp;<sp/>!pool-&gt;getPool(poolMinBaseIdx);</highlight></codeline>
<codeline lineno="1624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>++poolMinBaseIdx)<sp/>;</highlight></codeline>
<codeline lineno="1625"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(poolMinBaseIdx<sp/>&gt;<sp/>pool-&gt;maxBaseIdx)<sp/>{</highlight></codeline>
<codeline lineno="1626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1627"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1628"><highlight class="normal"></highlight></codeline>
<codeline lineno="1629"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>look<sp/>for<sp/>the<sp/>left-most<sp/>word<sp/>in<sp/>the<sp/>first<sp/>four<sp/>lines<sp/>of<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1630"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>pool<sp/>--<sp/>this<sp/>avoids<sp/>starting<sp/>with<sp/>a<sp/>superscript<sp/>word</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1631"><highlight class="normal"><sp/><sp/><sp/><sp/>startBaseIdx<sp/>=<sp/>poolMinBaseIdx;</highlight></codeline>
<codeline lineno="1632"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(baseIdx<sp/>=<sp/>poolMinBaseIdx<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="1633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>baseIdx<sp/>&lt;<sp/>poolMinBaseIdx<sp/>+<sp/>4<sp/>&amp;&amp;<sp/>baseIdx<sp/>&lt;=<sp/>pool-&gt;maxBaseIdx;</highlight></codeline>
<codeline lineno="1634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>++baseIdx)<sp/>{</highlight></codeline>
<codeline lineno="1635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pool-&gt;getPool(baseIdx))<sp/>{</highlight></codeline>
<codeline lineno="1636"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pool-&gt;getPool(baseIdx)-&gt;primaryCmp(pool-&gt;getPool(startBaseIdx))</highlight></codeline>
<codeline lineno="1639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1640"><highlight class="normal"><sp/><sp/><sp/><sp/>startBaseIdx<sp/>=<sp/>baseIdx;</highlight></codeline>
<codeline lineno="1641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1642"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1643"><highlight class="normal"></highlight></codeline>
<codeline lineno="1644"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>a<sp/>new<sp/>line</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1645"><highlight class="normal"><sp/><sp/><sp/><sp/>word0<sp/>=<sp/>pool-&gt;getPool(startBaseIdx);</highlight></codeline>
<codeline lineno="1646"><highlight class="normal"><sp/><sp/><sp/><sp/>pool-&gt;setPool(startBaseIdx,<sp/>word0-&gt;next);</highlight></codeline>
<codeline lineno="1647"><highlight class="normal"><sp/><sp/><sp/><sp/>word0-&gt;next<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1648"><highlight class="normal"><sp/><sp/><sp/><sp/>line<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_text_line" kindref="compound">TextLine</ref>(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>word0-&gt;rot,<sp/>word0-&gt;base);</highlight></codeline>
<codeline lineno="1649"><highlight class="normal"><sp/><sp/><sp/><sp/>line-&gt;addWord(word0);</highlight></codeline>
<codeline lineno="1650"><highlight class="normal"><sp/><sp/><sp/><sp/>lastWord<sp/>=<sp/>word0;</highlight></codeline>
<codeline lineno="1651"><highlight class="normal"></highlight></codeline>
<codeline lineno="1652"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>compute<sp/>the<sp/>search<sp/>range</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1653"><highlight class="normal"><sp/><sp/><sp/><sp/>fontSize<sp/>=<sp/>word0-&gt;fontSize;</highlight></codeline>
<codeline lineno="1654"><highlight class="normal"><sp/><sp/><sp/><sp/>minBase<sp/>=<sp/>word0-&gt;base<sp/>-<sp/>maxIntraLineDelta<sp/>*<sp/>fontSize;</highlight></codeline>
<codeline lineno="1655"><highlight class="normal"><sp/><sp/><sp/><sp/>maxBase<sp/>=<sp/>word0-&gt;base<sp/>+<sp/>maxIntraLineDelta<sp/>*<sp/>fontSize;</highlight></codeline>
<codeline lineno="1656"><highlight class="normal"><sp/><sp/><sp/><sp/>minBaseIdx<sp/>=<sp/>pool-&gt;getBaseIdx(minBase);</highlight></codeline>
<codeline lineno="1657"><highlight class="normal"><sp/><sp/><sp/><sp/>maxBaseIdx<sp/>=<sp/>pool-&gt;getBaseIdx(maxBase);</highlight></codeline>
<codeline lineno="1658"><highlight class="normal"><sp/><sp/><sp/><sp/>wordSpacing<sp/>=<sp/>fixedPitch<sp/>?<sp/>fixedPitch<sp/>:<sp/>maxWordSpacing<sp/>*<sp/>fontSize;</highlight></codeline>
<codeline lineno="1659"><highlight class="normal"></highlight></codeline>
<codeline lineno="1660"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>find<sp/>the<sp/>rest<sp/>of<sp/>the<sp/>words<sp/>in<sp/>this<sp/>line</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1661"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(1)<sp/>{</highlight></codeline>
<codeline lineno="1662"><highlight class="normal"></highlight></codeline>
<codeline lineno="1663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>find<sp/>the<sp/>left-most<sp/>word<sp/>whose<sp/>baseline<sp/>is<sp/>in<sp/>the<sp/>range<sp/>for</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>line</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bestWordBaseIdx<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bestWord0<sp/>=<sp/>bestWord1<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>overlap<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="1668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(baseIdx<sp/>=<sp/>minBaseIdx;</highlight></codeline>
<codeline lineno="1669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!overlap<sp/>&amp;&amp;<sp/>baseIdx<sp/>&lt;=<sp/>maxBaseIdx;</highlight></codeline>
<codeline lineno="1670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++baseIdx)<sp/>{</highlight></codeline>
<codeline lineno="1671"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(word0<sp/>=<sp/>NULL,<sp/>word1<sp/>=<sp/>pool-&gt;getPool(baseIdx);</highlight></codeline>
<codeline lineno="1672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>word1;</highlight></codeline>
<codeline lineno="1673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>word0<sp/>=<sp/>word1,<sp/>word1<sp/>=<sp/>word1-&gt;next)<sp/>{</highlight></codeline>
<codeline lineno="1674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(word1-&gt;base<sp/>&gt;=<sp/>minBase<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>word1-&gt;base<sp/>&lt;=<sp/>maxBase)<sp/>{</highlight></codeline>
<codeline lineno="1676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>delta<sp/>=<sp/>lastWord-&gt;primaryDelta(word1);</highlight></codeline>
<codeline lineno="1677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(delta<sp/>&lt;<sp/>minCharSpacing<sp/>*<sp/>fontSize)<sp/>{</highlight></codeline>
<codeline lineno="1678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>overlap<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="1679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(delta<sp/>&lt;<sp/>wordSpacing<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(!bestWord1<sp/>||<sp/>word1-&gt;primaryCmp(bestWord1)<sp/>&lt;<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="1683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bestWordBaseIdx<sp/>=<sp/>baseIdx;</highlight></codeline>
<codeline lineno="1684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bestWord0<sp/>=<sp/>word0;</highlight></codeline>
<codeline lineno="1685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bestWord1<sp/>=<sp/>word1;</highlight></codeline>
<codeline lineno="1686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1690"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(overlap<sp/>||<sp/>!bestWord1)<sp/>{</highlight></codeline>
<codeline lineno="1693"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1695"><highlight class="normal"></highlight></codeline>
<codeline lineno="1696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>remove<sp/>it<sp/>from<sp/>the<sp/>pool,<sp/>and<sp/>add<sp/>it<sp/>to<sp/>the<sp/>line</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bestWord0)<sp/>{</highlight></codeline>
<codeline lineno="1698"><highlight class="normal"><sp/><sp/><sp/><sp/>bestWord0-&gt;next<sp/>=<sp/>bestWord1-&gt;next;</highlight></codeline>
<codeline lineno="1699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1700"><highlight class="normal"><sp/><sp/><sp/><sp/>pool-&gt;setPool(bestWordBaseIdx,<sp/>bestWord1-&gt;next);</highlight></codeline>
<codeline lineno="1701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bestWord1-&gt;next<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>line-&gt;addWord(bestWord1);</highlight></codeline>
<codeline lineno="1704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lastWord<sp/>=<sp/>bestWord1;</highlight></codeline>
<codeline lineno="1705"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1706"><highlight class="normal"></highlight></codeline>
<codeline lineno="1707"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>the<sp/>line</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1708"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(curLine<sp/>&amp;&amp;<sp/>line-&gt;cmpYX(curLine)<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>line0<sp/>=<sp/>curLine;</highlight></codeline>
<codeline lineno="1710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>line1<sp/>=<sp/>curLine-&gt;next;</highlight></codeline>
<codeline lineno="1711"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>line0<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>line1<sp/>=<sp/>lines;</highlight></codeline>
<codeline lineno="1714"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1715"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;</highlight></codeline>
<codeline lineno="1716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>line1<sp/>&amp;&amp;<sp/>line-&gt;cmpYX(line1)<sp/>&gt;<sp/>0;</highlight></codeline>
<codeline lineno="1717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>line0<sp/>=<sp/>line1,<sp/>line1<sp/>=<sp/>line1-&gt;next)<sp/>;</highlight></codeline>
<codeline lineno="1718"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(line0)<sp/>{</highlight></codeline>
<codeline lineno="1719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>line0-&gt;next<sp/>=<sp/>line;</highlight></codeline>
<codeline lineno="1720"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lines<sp/>=<sp/>line;</highlight></codeline>
<codeline lineno="1722"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1723"><highlight class="normal"><sp/><sp/><sp/><sp/>line-&gt;next<sp/>=<sp/>line1;</highlight></codeline>
<codeline lineno="1724"><highlight class="normal"><sp/><sp/><sp/><sp/>curLine<sp/>=<sp/>line;</highlight></codeline>
<codeline lineno="1725"><highlight class="normal"><sp/><sp/><sp/><sp/>line-&gt;coalesce(uMap);</highlight></codeline>
<codeline lineno="1726"><highlight class="normal"><sp/><sp/><sp/><sp/>charCount<sp/>+=<sp/>line-&gt;len;</highlight></codeline>
<codeline lineno="1727"><highlight class="normal"><sp/><sp/><sp/><sp/>++nLines;</highlight></codeline>
<codeline lineno="1728"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1729"><highlight class="normal"></highlight></codeline>
<codeline lineno="1730"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>sort<sp/>lines<sp/>into<sp/>xy<sp/>order<sp/>for<sp/>column<sp/>assignment</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1731"><highlight class="normal"><sp/><sp/>lineArray<sp/>=<sp/>(<ref refid="class_text_line" kindref="compound">TextLine</ref><sp/>**)gmallocn(nLines,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="class_text_line" kindref="compound">TextLine</ref><sp/>*));</highlight></codeline>
<codeline lineno="1732"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(line<sp/>=<sp/>lines,<sp/>i<sp/>=<sp/>0;<sp/>line;<sp/>line<sp/>=<sp/>line-&gt;next,<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1733"><highlight class="normal"><sp/><sp/><sp/><sp/>lineArray[i]<sp/>=<sp/>line;</highlight></codeline>
<codeline lineno="1734"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1735"><highlight class="normal"><sp/><sp/>qsort(lineArray,<sp/>nLines,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="class_text_line" kindref="compound">TextLine</ref><sp/>*),<sp/>&amp;TextLine::cmpXY);</highlight></codeline>
<codeline lineno="1736"><highlight class="normal"></highlight></codeline>
<codeline lineno="1737"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>column<sp/>assignment</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1738"><highlight class="normal"><sp/><sp/>nColumns<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1739"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fixedPitch)<sp/>{</highlight></codeline>
<codeline lineno="1740"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nLines;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>line0<sp/>=<sp/>lineArray[i];</highlight></codeline>
<codeline lineno="1742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>col1<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>make<sp/>gcc<sp/>happy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(rot)<sp/>{</highlight></codeline>
<codeline lineno="1744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:</highlight></codeline>
<codeline lineno="1745"><highlight class="normal"><sp/><sp/><sp/><sp/>col1<sp/>=<sp/>(int)((line0-&gt;xMin<sp/>-<sp/>xMin)<sp/>/<sp/>fixedPitch<sp/>+<sp/>0.5);</highlight></codeline>
<codeline lineno="1746"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="1748"><highlight class="normal"><sp/><sp/><sp/><sp/>col1<sp/>=<sp/>(int)((line0-&gt;yMin<sp/>-<sp/>yMin)<sp/>/<sp/>fixedPitch<sp/>+<sp/>0.5);</highlight></codeline>
<codeline lineno="1749"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:</highlight></codeline>
<codeline lineno="1751"><highlight class="normal"><sp/><sp/><sp/><sp/>col1<sp/>=<sp/>(int)((xMax<sp/>-<sp/>line0-&gt;xMax)<sp/>/<sp/>fixedPitch<sp/>+<sp/>0.5);</highlight></codeline>
<codeline lineno="1752"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>3:</highlight></codeline>
<codeline lineno="1754"><highlight class="normal"><sp/><sp/><sp/><sp/>col1<sp/>=<sp/>(int)((yMax<sp/>-<sp/>line0-&gt;yMax)<sp/>/<sp/>fixedPitch<sp/>+<sp/>0.5);</highlight></codeline>
<codeline lineno="1755"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k<sp/>=<sp/>0;<sp/>k<sp/>&lt;=<sp/>line0-&gt;len;<sp/>++k)<sp/>{</highlight></codeline>
<codeline lineno="1758"><highlight class="normal"><sp/><sp/><sp/><sp/>line0-&gt;col[k]<sp/>+=<sp/>col1;</highlight></codeline>
<codeline lineno="1759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(line0-&gt;col[line0-&gt;len]<sp/>&gt;<sp/>nColumns)<sp/>{</highlight></codeline>
<codeline lineno="1761"><highlight class="normal"><sp/><sp/><sp/><sp/>nColumns<sp/>=<sp/>line0-&gt;col[line0-&gt;len];</highlight></codeline>
<codeline lineno="1762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1763"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1764"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1765"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nLines;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>line0<sp/>=<sp/>lineArray[i];</highlight></codeline>
<codeline lineno="1767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>col1<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>i;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="1769"><highlight class="normal"><sp/><sp/><sp/><sp/>line1<sp/>=<sp/>lineArray[j];</highlight></codeline>
<codeline lineno="1770"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(line1-&gt;primaryDelta(line0)<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>col2<sp/>=<sp/>line1-&gt;col[line1-&gt;len]<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="1772"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>k<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>make<sp/>gcc<sp/>happy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(rot)<sp/>{</highlight></codeline>
<codeline lineno="1775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:</highlight></codeline>
<codeline lineno="1776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k<sp/>&lt;<sp/>line1-&gt;len<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>line0-&gt;xMin<sp/>&gt;=<sp/>0.5<sp/>*<sp/>(line1-&gt;edge[k]<sp/>+<sp/>line1-&gt;edge[k+1]);</highlight></codeline>
<codeline lineno="1779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++k)<sp/>;</highlight></codeline>
<codeline lineno="1780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="1782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k<sp/>&lt;<sp/>line1-&gt;len<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>line0-&gt;yMin<sp/>&gt;=<sp/>0.5<sp/>*<sp/>(line1-&gt;edge[k]<sp/>+<sp/>line1-&gt;edge[k+1]);</highlight></codeline>
<codeline lineno="1785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++k)<sp/>;</highlight></codeline>
<codeline lineno="1786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:</highlight></codeline>
<codeline lineno="1788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k<sp/>&lt;<sp/>line1-&gt;len<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>line0-&gt;xMax<sp/>&lt;=<sp/>0.5<sp/>*<sp/>(line1-&gt;edge[k]<sp/>+<sp/>line1-&gt;edge[k+1]);</highlight></codeline>
<codeline lineno="1791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++k)<sp/>;</highlight></codeline>
<codeline lineno="1792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>3:</highlight></codeline>
<codeline lineno="1794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k<sp/>&lt;<sp/>line1-&gt;len<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>line0-&gt;yMax<sp/>&lt;=<sp/>0.5<sp/>*<sp/>(line1-&gt;edge[k]<sp/>+<sp/>line1-&gt;edge[k+1]);</highlight></codeline>
<codeline lineno="1797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++k)<sp/>;</highlight></codeline>
<codeline lineno="1798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>col2<sp/>=<sp/>line1-&gt;col[k];</highlight></codeline>
<codeline lineno="1801"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1802"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(col2<sp/>&gt;<sp/>col1)<sp/>{</highlight></codeline>
<codeline lineno="1803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>col1<sp/>=<sp/>col2;</highlight></codeline>
<codeline lineno="1804"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k<sp/>=<sp/>0;<sp/>k<sp/>&lt;=<sp/>line0-&gt;len;<sp/>++k)<sp/>{</highlight></codeline>
<codeline lineno="1807"><highlight class="normal"><sp/><sp/><sp/><sp/>line0-&gt;col[k]<sp/>+=<sp/>col1;</highlight></codeline>
<codeline lineno="1808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(line0-&gt;col[line0-&gt;len]<sp/>&gt;<sp/>nColumns)<sp/>{</highlight></codeline>
<codeline lineno="1810"><highlight class="normal"><sp/><sp/><sp/><sp/>nColumns<sp/>=<sp/>line0-&gt;col[line0-&gt;len];</highlight></codeline>
<codeline lineno="1811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1812"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1813"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1814"><highlight class="normal"><sp/><sp/>gfree(lineArray);</highlight></codeline>
<codeline lineno="1815"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1816"><highlight class="normal"></highlight></codeline>
<codeline lineno="1817"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TextBlock::updatePriMinMax(<ref refid="class_text_block" kindref="compound">TextBlock</ref><sp/>*blk)<sp/>{</highlight></codeline>
<codeline lineno="1818"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>newPriMin,<sp/>newPriMax;</highlight></codeline>
<codeline lineno="1819"><highlight class="normal"><sp/><sp/>GBool<sp/>gotPriMin,<sp/>gotPriMax;</highlight></codeline>
<codeline lineno="1820"><highlight class="normal"></highlight></codeline>
<codeline lineno="1821"><highlight class="normal"><sp/><sp/>gotPriMin<sp/>=<sp/>gotPriMax<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="1822"><highlight class="normal"><sp/><sp/>newPriMin<sp/>=<sp/>newPriMax<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>make<sp/>gcc<sp/>happy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1823"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(page-&gt;primaryRot)<sp/>{</highlight></codeline>
<codeline lineno="1824"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:</highlight></codeline>
<codeline lineno="1825"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:</highlight></codeline>
<codeline lineno="1826"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(blk-&gt;yMin<sp/>&lt;<sp/>yMax<sp/>&amp;&amp;<sp/>blk-&gt;yMax<sp/>&gt;<sp/>yMin)<sp/>{</highlight></codeline>
<codeline lineno="1827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(blk-&gt;xMin<sp/>&lt;<sp/>xMin)<sp/>{</highlight></codeline>
<codeline lineno="1828"><highlight class="normal"><sp/><sp/><sp/><sp/>newPriMin<sp/>=<sp/>blk-&gt;xMax;</highlight></codeline>
<codeline lineno="1829"><highlight class="normal"><sp/><sp/><sp/><sp/>gotPriMin<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="1830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(blk-&gt;xMax<sp/>&gt;<sp/>xMax)<sp/>{</highlight></codeline>
<codeline lineno="1832"><highlight class="normal"><sp/><sp/><sp/><sp/>newPriMax<sp/>=<sp/>blk-&gt;xMin;</highlight></codeline>
<codeline lineno="1833"><highlight class="normal"><sp/><sp/><sp/><sp/>gotPriMax<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="1834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1835"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1836"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1837"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="1838"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>3:</highlight></codeline>
<codeline lineno="1839"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(blk-&gt;xMin<sp/>&lt;<sp/>xMax<sp/>&amp;&amp;<sp/>blk-&gt;xMax<sp/>&gt;<sp/>xMin)<sp/>{</highlight></codeline>
<codeline lineno="1840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(blk-&gt;yMin<sp/>&lt;<sp/>yMin)<sp/>{</highlight></codeline>
<codeline lineno="1841"><highlight class="normal"><sp/><sp/><sp/><sp/>newPriMin<sp/>=<sp/>blk-&gt;yMax;</highlight></codeline>
<codeline lineno="1842"><highlight class="normal"><sp/><sp/><sp/><sp/>gotPriMin<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="1843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(blk-&gt;yMax<sp/>&gt;<sp/>yMax)<sp/>{</highlight></codeline>
<codeline lineno="1845"><highlight class="normal"><sp/><sp/><sp/><sp/>newPriMax<sp/>=<sp/>blk-&gt;yMin;</highlight></codeline>
<codeline lineno="1846"><highlight class="normal"><sp/><sp/><sp/><sp/>gotPriMax<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="1847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1848"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1849"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1850"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1851"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(gotPriMin)<sp/>{</highlight></codeline>
<codeline lineno="1852"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(newPriMin<sp/>&gt;<sp/>xMin)<sp/>{</highlight></codeline>
<codeline lineno="1853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>newPriMin<sp/>=<sp/>xMin;</highlight></codeline>
<codeline lineno="1854"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1855"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(newPriMin<sp/>&gt;<sp/>priMin)<sp/>{</highlight></codeline>
<codeline lineno="1856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>priMin<sp/>=<sp/>newPriMin;</highlight></codeline>
<codeline lineno="1857"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1858"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1859"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(gotPriMax)<sp/>{</highlight></codeline>
<codeline lineno="1860"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(newPriMax<sp/>&lt;<sp/>xMax)<sp/>{</highlight></codeline>
<codeline lineno="1861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>newPriMax<sp/>=<sp/>xMax;</highlight></codeline>
<codeline lineno="1862"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1863"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(newPriMax<sp/>&lt;<sp/>priMax)<sp/>{</highlight></codeline>
<codeline lineno="1864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>priMax<sp/>=<sp/>newPriMax;</highlight></codeline>
<codeline lineno="1865"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1866"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1867"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1868"><highlight class="normal"></highlight></codeline>
<codeline lineno="1869"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>TextBlock::cmpXYPrimaryRot(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p2)<sp/>{</highlight></codeline>
<codeline lineno="1870"><highlight class="normal"><sp/><sp/><ref refid="class_text_block" kindref="compound">TextBlock</ref><sp/>*blk1<sp/>=<sp/>*(<ref refid="class_text_block" kindref="compound">TextBlock</ref><sp/>**)p1;</highlight></codeline>
<codeline lineno="1871"><highlight class="normal"><sp/><sp/><ref refid="class_text_block" kindref="compound">TextBlock</ref><sp/>*blk2<sp/>=<sp/>*(<ref refid="class_text_block" kindref="compound">TextBlock</ref><sp/>**)p2;</highlight></codeline>
<codeline lineno="1872"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>cmp;</highlight></codeline>
<codeline lineno="1873"><highlight class="normal"></highlight></codeline>
<codeline lineno="1874"><highlight class="normal"><sp/><sp/>cmp<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>make<sp/>gcc<sp/>happy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1875"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(blk1-&gt;page-&gt;primaryRot)<sp/>{</highlight></codeline>
<codeline lineno="1876"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:</highlight></codeline>
<codeline lineno="1877"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((cmp<sp/>=<sp/>blk1-&gt;xMin<sp/>-<sp/>blk2-&gt;xMin)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cmp<sp/>=<sp/>blk1-&gt;yMin<sp/>-<sp/>blk2-&gt;yMin;</highlight></codeline>
<codeline lineno="1879"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1880"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1881"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="1882"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((cmp<sp/>=<sp/>blk1-&gt;yMin<sp/>-<sp/>blk2-&gt;yMin)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cmp<sp/>=<sp/>blk2-&gt;xMax<sp/>-<sp/>blk1-&gt;xMax;</highlight></codeline>
<codeline lineno="1884"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1885"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1886"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:</highlight></codeline>
<codeline lineno="1887"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((cmp<sp/>=<sp/>blk2-&gt;xMax<sp/>-<sp/>blk1-&gt;xMax)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cmp<sp/>=<sp/>blk2-&gt;yMin<sp/>-<sp/>blk1-&gt;yMin;</highlight></codeline>
<codeline lineno="1889"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1890"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1891"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>3:</highlight></codeline>
<codeline lineno="1892"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((cmp<sp/>=<sp/>blk2-&gt;yMax<sp/>-<sp/>blk1-&gt;yMax)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cmp<sp/>=<sp/>blk1-&gt;xMax<sp/>-<sp/>blk2-&gt;xMax;</highlight></codeline>
<codeline lineno="1894"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1895"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1896"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1897"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cmp<sp/>&lt;<sp/>0<sp/>?<sp/>-1<sp/>:<sp/>cmp<sp/>&gt;<sp/>0<sp/>?<sp/>1<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="1898"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1899"><highlight class="normal"></highlight></codeline>
<codeline lineno="1900"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>TextBlock::cmpYXPrimaryRot(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p2)<sp/>{</highlight></codeline>
<codeline lineno="1901"><highlight class="normal"><sp/><sp/><ref refid="class_text_block" kindref="compound">TextBlock</ref><sp/>*blk1<sp/>=<sp/>*(<ref refid="class_text_block" kindref="compound">TextBlock</ref><sp/>**)p1;</highlight></codeline>
<codeline lineno="1902"><highlight class="normal"><sp/><sp/><ref refid="class_text_block" kindref="compound">TextBlock</ref><sp/>*blk2<sp/>=<sp/>*(<ref refid="class_text_block" kindref="compound">TextBlock</ref><sp/>**)p2;</highlight></codeline>
<codeline lineno="1903"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>cmp;</highlight></codeline>
<codeline lineno="1904"><highlight class="normal"></highlight></codeline>
<codeline lineno="1905"><highlight class="normal"><sp/><sp/>cmp<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>make<sp/>gcc<sp/>happy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1906"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(blk1-&gt;page-&gt;primaryRot)<sp/>{</highlight></codeline>
<codeline lineno="1907"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:</highlight></codeline>
<codeline lineno="1908"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((cmp<sp/>=<sp/>blk1-&gt;yMin<sp/>-<sp/>blk2-&gt;yMin)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cmp<sp/>=<sp/>blk1-&gt;xMin<sp/>-<sp/>blk2-&gt;xMin;</highlight></codeline>
<codeline lineno="1910"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1911"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1912"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="1913"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((cmp<sp/>=<sp/>blk2-&gt;xMax<sp/>-<sp/>blk1-&gt;xMax)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cmp<sp/>=<sp/>blk1-&gt;yMin<sp/>-<sp/>blk2-&gt;yMin;</highlight></codeline>
<codeline lineno="1915"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1916"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1917"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:</highlight></codeline>
<codeline lineno="1918"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((cmp<sp/>=<sp/>blk2-&gt;yMin<sp/>-<sp/>blk1-&gt;yMin)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cmp<sp/>=<sp/>blk2-&gt;xMax<sp/>-<sp/>blk1-&gt;xMax;</highlight></codeline>
<codeline lineno="1920"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1921"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1922"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>3:</highlight></codeline>
<codeline lineno="1923"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((cmp<sp/>=<sp/>blk1-&gt;xMax<sp/>-<sp/>blk2-&gt;xMax)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cmp<sp/>=<sp/>blk2-&gt;yMax<sp/>-<sp/>blk1-&gt;yMax;</highlight></codeline>
<codeline lineno="1925"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1926"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1927"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1928"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cmp<sp/>&lt;<sp/>0<sp/>?<sp/>-1<sp/>:<sp/>cmp<sp/>&gt;<sp/>0<sp/>?<sp/>1<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="1929"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1930"><highlight class="normal"></highlight></codeline>
<codeline lineno="1931"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>TextBlock::primaryCmp(<ref refid="class_text_block" kindref="compound">TextBlock</ref><sp/>*blk)<sp/>{</highlight></codeline>
<codeline lineno="1932"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>cmp;</highlight></codeline>
<codeline lineno="1933"><highlight class="normal"></highlight></codeline>
<codeline lineno="1934"><highlight class="normal"><sp/><sp/>cmp<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>make<sp/>gcc<sp/>happy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1935"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(rot)<sp/>{</highlight></codeline>
<codeline lineno="1936"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:</highlight></codeline>
<codeline lineno="1937"><highlight class="normal"><sp/><sp/><sp/><sp/>cmp<sp/>=<sp/>xMin<sp/>-<sp/>blk-&gt;xMin;</highlight></codeline>
<codeline lineno="1938"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1939"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="1940"><highlight class="normal"><sp/><sp/><sp/><sp/>cmp<sp/>=<sp/>yMin<sp/>-<sp/>blk-&gt;yMin;</highlight></codeline>
<codeline lineno="1941"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1942"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:</highlight></codeline>
<codeline lineno="1943"><highlight class="normal"><sp/><sp/><sp/><sp/>cmp<sp/>=<sp/>blk-&gt;xMax<sp/>-<sp/>xMax;</highlight></codeline>
<codeline lineno="1944"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1945"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>3:</highlight></codeline>
<codeline lineno="1946"><highlight class="normal"><sp/><sp/><sp/><sp/>cmp<sp/>=<sp/>blk-&gt;yMax<sp/>-<sp/>yMax;</highlight></codeline>
<codeline lineno="1947"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1948"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1949"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cmp<sp/>&lt;<sp/>0<sp/>?<sp/>-1<sp/>:<sp/>cmp<sp/>&gt;<sp/>0<sp/>?<sp/>1<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="1950"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1951"><highlight class="normal"></highlight></codeline>
<codeline lineno="1952"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>TextBlock::secondaryDelta(<ref refid="class_text_block" kindref="compound">TextBlock</ref><sp/>*blk)<sp/>{</highlight></codeline>
<codeline lineno="1953"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>delta;</highlight></codeline>
<codeline lineno="1954"><highlight class="normal"></highlight></codeline>
<codeline lineno="1955"><highlight class="normal"><sp/><sp/>delta<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>make<sp/>gcc<sp/>happy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1956"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(rot)<sp/>{</highlight></codeline>
<codeline lineno="1957"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:</highlight></codeline>
<codeline lineno="1958"><highlight class="normal"><sp/><sp/><sp/><sp/>delta<sp/>=<sp/>blk-&gt;yMin<sp/>-<sp/>yMax;</highlight></codeline>
<codeline lineno="1959"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1960"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="1961"><highlight class="normal"><sp/><sp/><sp/><sp/>delta<sp/>=<sp/>xMin<sp/>-<sp/>blk-&gt;xMax;</highlight></codeline>
<codeline lineno="1962"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1963"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:</highlight></codeline>
<codeline lineno="1964"><highlight class="normal"><sp/><sp/><sp/><sp/>delta<sp/>=<sp/>yMin<sp/>-<sp/>blk-&gt;yMax;</highlight></codeline>
<codeline lineno="1965"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1966"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>3:</highlight></codeline>
<codeline lineno="1967"><highlight class="normal"><sp/><sp/><sp/><sp/>delta<sp/>=<sp/>blk-&gt;xMin<sp/>-<sp/>xMax;</highlight></codeline>
<codeline lineno="1968"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1969"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1970"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>delta;</highlight></codeline>
<codeline lineno="1971"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1972"><highlight class="normal"></highlight></codeline>
<codeline lineno="1973"><highlight class="normal">GBool<sp/>TextBlock::isBelow(<ref refid="class_text_block" kindref="compound">TextBlock</ref><sp/>*blk)<sp/>{</highlight></codeline>
<codeline lineno="1974"><highlight class="normal"><sp/><sp/>GBool<sp/>below;</highlight></codeline>
<codeline lineno="1975"><highlight class="normal"></highlight></codeline>
<codeline lineno="1976"><highlight class="normal"><sp/><sp/>below<sp/>=<sp/>gFalse;<sp/></highlight><highlight class="comment">//<sp/>make<sp/>gcc<sp/>happy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1977"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(page-&gt;primaryRot)<sp/>{</highlight></codeline>
<codeline lineno="1978"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:</highlight></codeline>
<codeline lineno="1979"><highlight class="normal"><sp/><sp/><sp/><sp/>below<sp/>=<sp/>xMin<sp/>&gt;=<sp/>blk-&gt;priMin<sp/>&amp;&amp;<sp/>xMax<sp/>&lt;=<sp/>blk-&gt;priMax<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>yMin<sp/>&gt;<sp/>blk-&gt;yMin;</highlight></codeline>
<codeline lineno="1981"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1982"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="1983"><highlight class="normal"><sp/><sp/><sp/><sp/>below<sp/>=<sp/>yMin<sp/>&gt;=<sp/>blk-&gt;priMin<sp/>&amp;&amp;<sp/>yMax<sp/>&lt;=<sp/>blk-&gt;priMax<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xMax<sp/>&lt;<sp/>blk-&gt;xMax;</highlight></codeline>
<codeline lineno="1985"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1986"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:</highlight></codeline>
<codeline lineno="1987"><highlight class="normal"><sp/><sp/><sp/><sp/>below<sp/>=<sp/>xMin<sp/>&gt;=<sp/>blk-&gt;priMin<sp/>&amp;&amp;<sp/>xMax<sp/>&lt;=<sp/>blk-&gt;priMax<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>yMax<sp/>&lt;<sp/>blk-&gt;yMax;</highlight></codeline>
<codeline lineno="1989"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1990"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>3:</highlight></codeline>
<codeline lineno="1991"><highlight class="normal"><sp/><sp/><sp/><sp/>below<sp/>=<sp/>yMin<sp/>&gt;=<sp/>blk-&gt;priMin<sp/>&amp;&amp;<sp/>yMax<sp/>&lt;=<sp/>blk-&gt;priMax<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xMin<sp/>&gt;<sp/>blk-&gt;xMin;</highlight></codeline>
<codeline lineno="1993"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1994"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1995"><highlight class="normal"></highlight></codeline>
<codeline lineno="1996"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>below;</highlight></codeline>
<codeline lineno="1997"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1998"><highlight class="normal"></highlight></codeline>
<codeline lineno="1999"><highlight class="normal">GBool<sp/>TextBlock::isBeforeByRule1(<ref refid="class_text_block" kindref="compound">TextBlock</ref><sp/>*blk1)<sp/>{</highlight></codeline>
<codeline lineno="2000"><highlight class="normal"><sp/><sp/>GBool<sp/>before<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="2001"><highlight class="normal"><sp/><sp/>GBool<sp/>overlap<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="2002"><highlight class="normal"></highlight></codeline>
<codeline lineno="2003"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(this-&gt;page-&gt;primaryRot)<sp/>{</highlight></codeline>
<codeline lineno="2004"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:</highlight></codeline>
<codeline lineno="2005"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:</highlight></codeline>
<codeline lineno="2006"><highlight class="normal"><sp/><sp/><sp/><sp/>overlap<sp/>=<sp/>((this-&gt;ExMin<sp/>&lt;=<sp/>blk1-&gt;ExMin)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(blk1-&gt;ExMin<sp/>&lt;=<sp/>this-&gt;ExMax))<sp/>||</highlight></codeline>
<codeline lineno="2008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>((blk1-&gt;ExMin<sp/>&lt;=<sp/>this-&gt;ExMin)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(this-&gt;ExMin<sp/>&lt;=<sp/>blk1-&gt;ExMax));</highlight></codeline>
<codeline lineno="2010"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2011"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="2012"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>3:</highlight></codeline>
<codeline lineno="2013"><highlight class="normal"><sp/><sp/><sp/><sp/>overlap<sp/>=<sp/>((this-&gt;EyMin<sp/>&lt;=<sp/>blk1-&gt;EyMin)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(blk1-&gt;EyMin<sp/>&lt;=<sp/>this-&gt;EyMax))<sp/>||</highlight></codeline>
<codeline lineno="2015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>((blk1-&gt;EyMin<sp/>&lt;=<sp/>this-&gt;EyMin)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(this-&gt;EyMin<sp/>&lt;=<sp/>blk1-&gt;EyMax));</highlight></codeline>
<codeline lineno="2017"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2018"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2019"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(this-&gt;page-&gt;primaryRot)<sp/>{</highlight></codeline>
<codeline lineno="2020"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:</highlight></codeline>
<codeline lineno="2021"><highlight class="normal"><sp/><sp/><sp/><sp/>before<sp/>=<sp/>overlap<sp/>&amp;&amp;<sp/>this-&gt;EyMin<sp/>&lt;<sp/>blk1-&gt;EyMin;</highlight></codeline>
<codeline lineno="2022"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2023"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="2024"><highlight class="normal"><sp/><sp/><sp/><sp/>before<sp/>=<sp/>overlap<sp/>&amp;&amp;<sp/>this-&gt;ExMax<sp/>&gt;<sp/>blk1-&gt;ExMax;</highlight></codeline>
<codeline lineno="2025"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2026"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:</highlight></codeline>
<codeline lineno="2027"><highlight class="normal"><sp/><sp/><sp/><sp/>before<sp/>=<sp/>overlap<sp/>&amp;&amp;<sp/>this-&gt;EyMax<sp/>&gt;<sp/>blk1-&gt;EyMax;</highlight></codeline>
<codeline lineno="2028"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2029"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>3:</highlight></codeline>
<codeline lineno="2030"><highlight class="normal"><sp/><sp/><sp/><sp/>before<sp/>=<sp/>overlap<sp/>&amp;&amp;<sp/>this-&gt;ExMin<sp/>&lt;<sp/>blk1-&gt;ExMin;</highlight></codeline>
<codeline lineno="2031"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2032"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2033"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>before;</highlight></codeline>
<codeline lineno="2034"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2035"><highlight class="normal"></highlight></codeline>
<codeline lineno="2036"><highlight class="normal">GBool<sp/>TextBlock::isBeforeByRule2(<ref refid="class_text_block" kindref="compound">TextBlock</ref><sp/>*blk1)<sp/>{</highlight></codeline>
<codeline lineno="2037"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>cmp<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2038"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rotLR<sp/>=<sp/>rot;</highlight></codeline>
<codeline lineno="2039"><highlight class="normal"></highlight></codeline>
<codeline lineno="2040"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!page-&gt;primaryLR)<sp/>{</highlight></codeline>
<codeline lineno="2041"><highlight class="normal"><sp/><sp/><sp/><sp/>rotLR<sp/>=<sp/>(rotLR<sp/>+<sp/>2)<sp/>%<sp/>4;</highlight></codeline>
<codeline lineno="2042"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2043"><highlight class="normal"></highlight></codeline>
<codeline lineno="2044"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(rotLR)<sp/>{</highlight></codeline>
<codeline lineno="2045"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:</highlight></codeline>
<codeline lineno="2046"><highlight class="normal"><sp/><sp/><sp/><sp/>cmp<sp/>=<sp/>ExMax<sp/>-<sp/>blk1-&gt;ExMin;</highlight></codeline>
<codeline lineno="2047"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2048"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="2049"><highlight class="normal"><sp/><sp/><sp/><sp/>cmp<sp/>=<sp/>EyMin<sp/>-<sp/>blk1-&gt;EyMax;</highlight></codeline>
<codeline lineno="2050"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2051"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:</highlight></codeline>
<codeline lineno="2052"><highlight class="normal"><sp/><sp/><sp/><sp/>cmp<sp/>=<sp/>blk1-&gt;ExMax<sp/>-<sp/>ExMin;</highlight></codeline>
<codeline lineno="2053"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2054"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>3:</highlight></codeline>
<codeline lineno="2055"><highlight class="normal"><sp/><sp/><sp/><sp/>cmp<sp/>=<sp/>blk1-&gt;EyMin<sp/>-<sp/>EyMax;</highlight></codeline>
<codeline lineno="2056"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2057"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2058"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cmp<sp/>&lt;=<sp/>0;</highlight></codeline>
<codeline lineno="2059"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2060"><highlight class="normal"></highlight></codeline>
<codeline lineno="2061"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Sort<sp/>into<sp/>reading<sp/>order<sp/>by<sp/>performing<sp/>a<sp/>topological<sp/>sort<sp/>using<sp/>the<sp/>rules</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2062"><highlight class="normal"></highlight><highlight class="comment">//<sp/>given<sp/>in<sp/>&quot;High<sp/>Performance<sp/>Document<sp/>Layout<sp/>Analysis&quot;,<sp/>T.M.<sp/>Breuel,<sp/>2003.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2063"><highlight class="normal"></highlight><highlight class="comment">//<sp/>See<sp/>http://pubs.iupr.org/#2003-breuel-sdiut</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2064"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Topological<sp/>sort<sp/>is<sp/>done<sp/>by<sp/>depth<sp/>first<sp/>search,<sp/>see</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2065"><highlight class="normal"></highlight><highlight class="comment">//<sp/>http://en.wikipedia.org/wiki/Topological_sorting</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2066"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>TextBlock::visitDepthFirst(<ref refid="class_text_block" kindref="compound">TextBlock</ref><sp/>*blkList,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pos1,</highlight></codeline>
<codeline lineno="2067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_text_block" kindref="compound">TextBlock</ref><sp/>**sorted,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sortPos,</highlight></codeline>
<codeline lineno="2068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GBool*<sp/>visited,</highlight></codeline>
<codeline lineno="2069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_text_block" kindref="compound">TextBlock</ref><sp/>**cache,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cacheSize)<sp/>{</highlight></codeline>
<codeline lineno="2070"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pos2;</highlight></codeline>
<codeline lineno="2071"><highlight class="normal"><sp/><sp/><ref refid="class_text_block" kindref="compound">TextBlock</ref><sp/>*blk1,<sp/>*blk2,<sp/>*blk3;</highlight></codeline>
<codeline lineno="2072"><highlight class="normal"><sp/><sp/>GBool<sp/>before;</highlight></codeline>
<codeline lineno="2073"><highlight class="normal"></highlight></codeline>
<codeline lineno="2074"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(visited[pos1])<sp/>{</highlight></codeline>
<codeline lineno="2075"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sortPos;</highlight></codeline>
<codeline lineno="2076"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2077"><highlight class="normal"></highlight></codeline>
<codeline lineno="2078"><highlight class="normal"><sp/><sp/>blk1<sp/>=<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2079"><highlight class="normal"></highlight></codeline>
<codeline lineno="2080"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>0<sp/>//<sp/>for<sp/>debugging</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2081"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;visited:<sp/>%d<sp/>%.2f..%.2f<sp/>%.2f..%.2f\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>sortPos,<sp/>blk1-&gt;ExMin,<sp/>blk1-&gt;ExMax,<sp/>blk1-&gt;EyMin,<sp/>blk1-&gt;EyMax);</highlight></codeline>
<codeline lineno="2083"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2084"><highlight class="normal"><sp/><sp/>visited[pos1]<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="2085"><highlight class="normal"><sp/><sp/>pos2<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="2086"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(blk2<sp/>=<sp/>blkList;<sp/>blk2;<sp/>blk2<sp/>=<sp/>blk2-&gt;next)<sp/>{</highlight></codeline>
<codeline lineno="2087"><highlight class="normal"><sp/><sp/><sp/><sp/>pos2++;</highlight></codeline>
<codeline lineno="2088"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(visited[pos2])<sp/>{</highlight></codeline>
<codeline lineno="2089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>skip<sp/>visited<sp/>nodes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2091"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2092"><highlight class="normal"><sp/><sp/><sp/><sp/>before<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="2093"><highlight class="normal"></highlight></codeline>
<codeline lineno="2094"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>is<sp/>blk2<sp/>before<sp/>blk1?<sp/>(for<sp/>table<sp/>entries)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2095"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(blk1-&gt;tableId<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>blk1-&gt;tableId<sp/>==<sp/>blk2-&gt;tableId)<sp/>{</highlight></codeline>
<codeline lineno="2096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(page-&gt;primaryLR)<sp/>{</highlight></codeline>
<codeline lineno="2097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(blk2-&gt;xMax<sp/>&lt;=<sp/>blk1-&gt;xMin<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2098"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blk2-&gt;yMin<sp/>&lt;=<sp/>blk1-&gt;yMax<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blk2-&gt;yMax<sp/>&gt;=<sp/>blk1-&gt;yMin)</highlight></codeline>
<codeline lineno="2100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>before<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="2101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(blk2-&gt;xMin<sp/>&gt;=<sp/>blk1-&gt;xMax<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blk2-&gt;yMin<sp/>&lt;=<sp/>blk1-&gt;yMax<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blk2-&gt;yMax<sp/>&gt;=<sp/>blk1-&gt;yMin)</highlight></codeline>
<codeline lineno="2105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>before<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="2106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2107"><highlight class="normal"></highlight></codeline>
<codeline lineno="2108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(blk2-&gt;yMax<sp/>&lt;=<sp/>blk1-&gt;yMin)</highlight></codeline>
<codeline lineno="2109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>before<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="2110"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(blk2-&gt;isBeforeByRule1(blk1))<sp/>{</highlight></codeline>
<codeline lineno="2112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Rule<sp/>(1)<sp/>blk1<sp/>and<sp/>blk2<sp/>overlap,<sp/>and<sp/>blk2<sp/>is<sp/>above<sp/>blk1.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>before<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="2114"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>0<sp/><sp/><sp/>//<sp/>for<sp/>debugging</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;rule1:<sp/>%.2f..%.2f<sp/>%.2f..%.2f<sp/>%.2f..%.2f<sp/>%.2f..%.2f\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blk2-&gt;ExMin,<sp/>blk2-&gt;ExMax,<sp/>blk2-&gt;EyMin,<sp/>blk2-&gt;EyMax,</highlight></codeline>
<codeline lineno="2117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blk1-&gt;ExMin,<sp/>blk1-&gt;ExMax,<sp/>blk1-&gt;EyMin,<sp/>blk1-&gt;EyMax);</highlight></codeline>
<codeline lineno="2118"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(blk2-&gt;isBeforeByRule2(blk1))<sp/>{</highlight></codeline>
<codeline lineno="2120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Rule<sp/>(2)<sp/>blk2<sp/>left<sp/>of<sp/>blk1,<sp/>and<sp/>no<sp/>intervening<sp/>blk3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>such<sp/>that<sp/>blk1<sp/>is<sp/>before<sp/>blk3<sp/>by<sp/>rule<sp/>1,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>and<sp/>blk3<sp/>is<sp/>before<sp/>blk2<sp/>by<sp/>rule<sp/>1.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>before<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="2124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>cacheSize<sp/>&amp;&amp;<sp/>cache[i];<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="2125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(blk1-&gt;isBeforeByRule1(cache[i])<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cache[i]-&gt;isBeforeByRule1(blk2))<sp/>{</highlight></codeline>
<codeline lineno="2127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>before<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="2128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::rotate(cache,<sp/>cache<sp/>+<sp/>i,<sp/>cache<sp/>+<sp/>i<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="2129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2131"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2132"><highlight class="normal"></highlight></codeline>
<codeline lineno="2133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(before)<sp/>{</highlight></codeline>
<codeline lineno="2134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(blk3<sp/>=<sp/>blkList;<sp/>blk3;<sp/>blk3<sp/>=<sp/>blk3-&gt;next)<sp/>{</highlight></codeline>
<codeline lineno="2135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(blk3<sp/>==<sp/>blk2<sp/>||<sp/>blk3<sp/>==<sp/>blk1)<sp/>{</highlight></codeline>
<codeline lineno="2136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(blk1-&gt;isBeforeByRule1(blk3)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blk3-&gt;isBeforeByRule1(blk2))<sp/>{</highlight></codeline>
<codeline lineno="2140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>before<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="2141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::copy_backward(cache,<sp/>cache<sp/>+<sp/>cacheSize<sp/>-<sp/>1,</highlight></codeline>
<codeline lineno="2142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cache<sp/>+<sp/>cacheSize);</highlight></codeline>
<codeline lineno="2143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cache[0]<sp/>=<sp/>blk3;</highlight></codeline>
<codeline lineno="2144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2148"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>0<sp/>//<sp/>for<sp/>debugging</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(before)<sp/>{</highlight></codeline>
<codeline lineno="2150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;rule2:<sp/>%.2f..%.2f<sp/>%.2f..%.2f<sp/>%.2f..%.2f<sp/>%.2f..%.2f\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blk1-&gt;ExMin,<sp/>blk1-&gt;ExMax,<sp/>blk1-&gt;EyMin,<sp/>blk1-&gt;EyMax,</highlight></codeline>
<codeline lineno="2152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blk2-&gt;ExMin,<sp/>blk2-&gt;ExMax,<sp/>blk2-&gt;EyMin,<sp/>blk2-&gt;EyMax);</highlight></codeline>
<codeline lineno="2153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2154"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2156"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(before)<sp/>{</highlight></codeline>
<codeline lineno="2158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>blk2<sp/>is<sp/>before<sp/>blk1,<sp/>so<sp/>it<sp/>needs<sp/>to<sp/>be<sp/>visited</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>before<sp/>we<sp/>can<sp/>add<sp/>blk1<sp/>to<sp/>the<sp/>sorted<sp/>list.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sortPos<sp/>=<sp/>blk2-&gt;visitDepthFirst(blkList,<sp/>pos2,<sp/>sorted,<sp/>sortPos,<sp/>visited,<sp/>cache,<sp/>cacheSize);</highlight></codeline>
<codeline lineno="2161"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2162"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2163"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>0<sp/>//<sp/>for<sp/>debugging</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2164"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;sorted:<sp/>%d<sp/>%.2f..%.2f<sp/>%.2f..%.2f\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>sortPos,<sp/>blk1-&gt;ExMin,<sp/>blk1-&gt;ExMax,<sp/>blk1-&gt;EyMin,<sp/>blk1-&gt;EyMax);</highlight></codeline>
<codeline lineno="2166"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2167"><highlight class="normal"><sp/><sp/>sorted[sortPos++]<sp/>=<sp/>blk1;</highlight></codeline>
<codeline lineno="2168"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sortPos;</highlight></codeline>
<codeline lineno="2169"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2170"><highlight class="normal"></highlight></codeline>
<codeline lineno="2171"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>TextBlock::visitDepthFirst(<ref refid="class_text_block" kindref="compound">TextBlock</ref><sp/>*blkList,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pos1,</highlight></codeline>
<codeline lineno="2172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_text_block" kindref="compound">TextBlock</ref><sp/>**sorted,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sortPos,</highlight></codeline>
<codeline lineno="2173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GBool*<sp/>visited)<sp/>{</highlight></codeline>
<codeline lineno="2174"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>blockCacheSize<sp/>=<sp/>4;</highlight></codeline>
<codeline lineno="2175"><highlight class="normal"><sp/><sp/><ref refid="class_text_block" kindref="compound">TextBlock</ref><sp/>*blockCache[blockCacheSize];</highlight></codeline>
<codeline lineno="2176"><highlight class="normal"><sp/><sp/>std::fill(blockCache,<sp/>blockCache<sp/>+<sp/>blockCacheSize,<sp/>(<ref refid="class_text_block" kindref="compound">TextBlock</ref>*)NULL);</highlight></codeline>
<codeline lineno="2177"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>visitDepthFirst(blkList,<sp/>pos1,<sp/>sorted,<sp/>sortPos,<sp/>visited,<sp/>blockCache,</highlight></codeline>
<codeline lineno="2178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blockCacheSize);</highlight></codeline>
<codeline lineno="2179"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2180"><highlight class="normal"></highlight></codeline>
<codeline lineno="2181"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2182"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TextFlow</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2183"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2184"><highlight class="normal"></highlight></codeline>
<codeline lineno="2185"><highlight class="normal">TextFlow::TextFlow(<ref refid="class_text_page" kindref="compound">TextPage</ref><sp/>*pageA,<sp/><ref refid="class_text_block" kindref="compound">TextBlock</ref><sp/>*blk)<sp/>{</highlight></codeline>
<codeline lineno="2186"><highlight class="normal"><sp/><sp/>page<sp/>=<sp/>pageA;</highlight></codeline>
<codeline lineno="2187"><highlight class="normal"><sp/><sp/>xMin<sp/>=<sp/>blk-&gt;xMin;</highlight></codeline>
<codeline lineno="2188"><highlight class="normal"><sp/><sp/>xMax<sp/>=<sp/>blk-&gt;xMax;</highlight></codeline>
<codeline lineno="2189"><highlight class="normal"><sp/><sp/>yMin<sp/>=<sp/>blk-&gt;yMin;</highlight></codeline>
<codeline lineno="2190"><highlight class="normal"><sp/><sp/>yMax<sp/>=<sp/>blk-&gt;yMax;</highlight></codeline>
<codeline lineno="2191"><highlight class="normal"><sp/><sp/>priMin<sp/>=<sp/>blk-&gt;priMin;</highlight></codeline>
<codeline lineno="2192"><highlight class="normal"><sp/><sp/>priMax<sp/>=<sp/>blk-&gt;priMax;</highlight></codeline>
<codeline lineno="2193"><highlight class="normal"><sp/><sp/>blocks<sp/>=<sp/>lastBlk<sp/>=<sp/>blk;</highlight></codeline>
<codeline lineno="2194"><highlight class="normal"><sp/><sp/>next<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2195"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2196"><highlight class="normal"></highlight></codeline>
<codeline lineno="2197"><highlight class="normal">TextFlow::~TextFlow()<sp/>{</highlight></codeline>
<codeline lineno="2198"><highlight class="normal"><sp/><sp/><ref refid="class_text_block" kindref="compound">TextBlock</ref><sp/>*blk;</highlight></codeline>
<codeline lineno="2199"><highlight class="normal"></highlight></codeline>
<codeline lineno="2200"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(blocks)<sp/>{</highlight></codeline>
<codeline lineno="2201"><highlight class="normal"><sp/><sp/><sp/><sp/>blk<sp/>=<sp/>blocks;</highlight></codeline>
<codeline lineno="2202"><highlight class="normal"><sp/><sp/><sp/><sp/>blocks<sp/>=<sp/>blocks-&gt;next;</highlight></codeline>
<codeline lineno="2203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>blk;</highlight></codeline>
<codeline lineno="2204"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2205"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2206"><highlight class="normal"></highlight></codeline>
<codeline lineno="2207"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TextFlow::addBlock(<ref refid="class_text_block" kindref="compound">TextBlock</ref><sp/>*blk)<sp/>{</highlight></codeline>
<codeline lineno="2208"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lastBlk)<sp/>{</highlight></codeline>
<codeline lineno="2209"><highlight class="normal"><sp/><sp/><sp/><sp/>lastBlk-&gt;next<sp/>=<sp/>blk;</highlight></codeline>
<codeline lineno="2210"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2211"><highlight class="normal"><sp/><sp/><sp/><sp/>blocks<sp/>=<sp/>blk;</highlight></codeline>
<codeline lineno="2212"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2213"><highlight class="normal"><sp/><sp/>lastBlk<sp/>=<sp/>blk;</highlight></codeline>
<codeline lineno="2214"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(blk-&gt;xMin<sp/>&lt;<sp/>xMin)<sp/>{</highlight></codeline>
<codeline lineno="2215"><highlight class="normal"><sp/><sp/><sp/><sp/>xMin<sp/>=<sp/>blk-&gt;xMin;</highlight></codeline>
<codeline lineno="2216"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2217"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(blk-&gt;xMax<sp/>&gt;<sp/>xMax)<sp/>{</highlight></codeline>
<codeline lineno="2218"><highlight class="normal"><sp/><sp/><sp/><sp/>xMax<sp/>=<sp/>blk-&gt;xMax;</highlight></codeline>
<codeline lineno="2219"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2220"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(blk-&gt;yMin<sp/>&lt;<sp/>yMin)<sp/>{</highlight></codeline>
<codeline lineno="2221"><highlight class="normal"><sp/><sp/><sp/><sp/>yMin<sp/>=<sp/>blk-&gt;yMin;</highlight></codeline>
<codeline lineno="2222"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2223"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(blk-&gt;yMax<sp/>&gt;<sp/>yMax)<sp/>{</highlight></codeline>
<codeline lineno="2224"><highlight class="normal"><sp/><sp/><sp/><sp/>yMax<sp/>=<sp/>blk-&gt;yMax;</highlight></codeline>
<codeline lineno="2225"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2226"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2227"><highlight class="normal"></highlight></codeline>
<codeline lineno="2228"><highlight class="normal">GBool<sp/>TextFlow::blockFits(<ref refid="class_text_block" kindref="compound">TextBlock</ref><sp/>*blk,<sp/><ref refid="class_text_block" kindref="compound">TextBlock</ref><sp/>*prevBlk)<sp/>{</highlight></codeline>
<codeline lineno="2229"><highlight class="normal"><sp/><sp/>GBool<sp/>fits;</highlight></codeline>
<codeline lineno="2230"><highlight class="normal"></highlight></codeline>
<codeline lineno="2231"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>lower<sp/>blocks<sp/>must<sp/>use<sp/>smaller<sp/>fonts</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2232"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(blk-&gt;lines-&gt;words-&gt;fontSize<sp/>&gt;<sp/>lastBlk-&gt;lines-&gt;words-&gt;fontSize)<sp/>{</highlight></codeline>
<codeline lineno="2233"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="2234"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2235"><highlight class="normal"></highlight></codeline>
<codeline lineno="2236"><highlight class="normal"><sp/><sp/>fits<sp/>=<sp/>gFalse;<sp/></highlight><highlight class="comment">//<sp/>make<sp/>gcc<sp/>happy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2237"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(page-&gt;primaryRot)<sp/>{</highlight></codeline>
<codeline lineno="2238"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:</highlight></codeline>
<codeline lineno="2239"><highlight class="normal"><sp/><sp/><sp/><sp/>fits<sp/>=<sp/>blk-&gt;xMin<sp/>&gt;=<sp/>priMin<sp/>&amp;&amp;<sp/>blk-&gt;xMax<sp/>&lt;=<sp/>priMax;</highlight></codeline>
<codeline lineno="2240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2241"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="2242"><highlight class="normal"><sp/><sp/><sp/><sp/>fits<sp/>=<sp/>blk-&gt;yMin<sp/>&gt;=<sp/>priMin<sp/>&amp;&amp;<sp/>blk-&gt;yMax<sp/>&lt;=<sp/>priMax;</highlight></codeline>
<codeline lineno="2243"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2244"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:</highlight></codeline>
<codeline lineno="2245"><highlight class="normal"><sp/><sp/><sp/><sp/>fits<sp/>=<sp/>blk-&gt;xMin<sp/>&gt;=<sp/>priMin<sp/>&amp;&amp;<sp/>blk-&gt;xMax<sp/>&lt;=<sp/>priMax;</highlight></codeline>
<codeline lineno="2246"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2247"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>3:</highlight></codeline>
<codeline lineno="2248"><highlight class="normal"><sp/><sp/><sp/><sp/>fits<sp/>=<sp/>blk-&gt;yMin<sp/>&gt;=<sp/>priMin<sp/>&amp;&amp;<sp/>blk-&gt;yMax<sp/>&lt;=<sp/>priMax;</highlight></codeline>
<codeline lineno="2249"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2250"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2251"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fits;</highlight></codeline>
<codeline lineno="2252"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2253"><highlight class="normal"></highlight></codeline>
<codeline lineno="2254"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>TEXTOUT_WORD_LIST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2255"><highlight class="normal"></highlight></codeline>
<codeline lineno="2256"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2257"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TextWordList</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2258"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2259"><highlight class="normal"></highlight></codeline>
<codeline lineno="2260"><highlight class="normal">TextWordList::TextWordList(<ref refid="class_text_page" kindref="compound">TextPage</ref><sp/>*text,<sp/>GBool<sp/>physLayout)<sp/>{</highlight></codeline>
<codeline lineno="2261"><highlight class="normal"><sp/><sp/><ref refid="class_text_flow" kindref="compound">TextFlow</ref><sp/>*flow;</highlight></codeline>
<codeline lineno="2262"><highlight class="normal"><sp/><sp/><ref refid="class_text_block" kindref="compound">TextBlock</ref><sp/>*blk;</highlight></codeline>
<codeline lineno="2263"><highlight class="normal"><sp/><sp/><ref refid="class_text_line" kindref="compound">TextLine</ref><sp/>*line;</highlight></codeline>
<codeline lineno="2264"><highlight class="normal"><sp/><sp/><ref refid="class_text_word" kindref="compound">TextWord</ref><sp/>*word;</highlight></codeline>
<codeline lineno="2265"><highlight class="normal"><sp/><sp/><ref refid="class_text_word" kindref="compound">TextWord</ref><sp/>**wordArray;</highlight></codeline>
<codeline lineno="2266"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nWords,<sp/>i;</highlight></codeline>
<codeline lineno="2267"><highlight class="normal"></highlight></codeline>
<codeline lineno="2268"><highlight class="normal"><sp/><sp/>words<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_goo_list" kindref="compound">GooList</ref>();</highlight></codeline>
<codeline lineno="2269"><highlight class="normal"></highlight></codeline>
<codeline lineno="2270"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(text-&gt;rawOrder)<sp/>{</highlight></codeline>
<codeline lineno="2271"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(word<sp/>=<sp/>text-&gt;rawWords;<sp/>word;<sp/>word<sp/>=<sp/>word-&gt;next)<sp/>{</highlight></codeline>
<codeline lineno="2272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>words-&gt;append(word);</highlight></codeline>
<codeline lineno="2273"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2274"><highlight class="normal"></highlight></codeline>
<codeline lineno="2275"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(physLayout)<sp/>{</highlight></codeline>
<codeline lineno="2276"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>is<sp/>inefficient,<sp/>but<sp/>it&apos;s<sp/>also<sp/>the<sp/>least<sp/>useful<sp/>of<sp/>these</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2277"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>three<sp/>cases</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2278"><highlight class="normal"><sp/><sp/><sp/><sp/>nWords<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2279"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(flow<sp/>=<sp/>text-&gt;flows;<sp/>flow;<sp/>flow<sp/>=<sp/>flow-&gt;next)<sp/>{</highlight></codeline>
<codeline lineno="2280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(blk<sp/>=<sp/>flow-&gt;blocks;<sp/>blk;<sp/>blk<sp/>=<sp/>blk-&gt;next)<sp/>{</highlight></codeline>
<codeline lineno="2281"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(line<sp/>=<sp/>blk-&gt;lines;<sp/>line;<sp/>line<sp/>=<sp/>line-&gt;next)<sp/>{</highlight></codeline>
<codeline lineno="2282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(word<sp/>=<sp/>line-&gt;words;<sp/>word;<sp/>word<sp/>=<sp/>word-&gt;next)<sp/>{</highlight></codeline>
<codeline lineno="2283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++nWords;</highlight></codeline>
<codeline lineno="2284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2285"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2287"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2288"><highlight class="normal"><sp/><sp/><sp/><sp/>wordArray<sp/>=<sp/>(<ref refid="class_text_word" kindref="compound">TextWord</ref><sp/>**)gmallocn(nWords,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="class_text_word" kindref="compound">TextWord</ref><sp/>*));</highlight></codeline>
<codeline lineno="2289"><highlight class="normal"><sp/><sp/><sp/><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2290"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(flow<sp/>=<sp/>text-&gt;flows;<sp/>flow;<sp/>flow<sp/>=<sp/>flow-&gt;next)<sp/>{</highlight></codeline>
<codeline lineno="2291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(blk<sp/>=<sp/>flow-&gt;blocks;<sp/>blk;<sp/>blk<sp/>=<sp/>blk-&gt;next)<sp/>{</highlight></codeline>
<codeline lineno="2292"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(line<sp/>=<sp/>blk-&gt;lines;<sp/>line;<sp/>line<sp/>=<sp/>line-&gt;next)<sp/>{</highlight></codeline>
<codeline lineno="2293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(word<sp/>=<sp/>line-&gt;words;<sp/>word;<sp/>word<sp/>=<sp/>word-&gt;next)<sp/>{</highlight></codeline>
<codeline lineno="2294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wordArray[i++]<sp/>=<sp/>word;</highlight></codeline>
<codeline lineno="2295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2296"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2298"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2299"><highlight class="normal"><sp/><sp/><sp/><sp/>qsort(wordArray,<sp/>nWords,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="class_text_word" kindref="compound">TextWord</ref><sp/>*),<sp/>&amp;TextWord::cmpYX);</highlight></codeline>
<codeline lineno="2300"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nWords;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="2301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>words-&gt;append(wordArray[i]);</highlight></codeline>
<codeline lineno="2302"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2303"><highlight class="normal"><sp/><sp/><sp/><sp/>gfree(wordArray);</highlight></codeline>
<codeline lineno="2304"><highlight class="normal"></highlight></codeline>
<codeline lineno="2305"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2306"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(flow<sp/>=<sp/>text-&gt;flows;<sp/>flow;<sp/>flow<sp/>=<sp/>flow-&gt;next)<sp/>{</highlight></codeline>
<codeline lineno="2307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(blk<sp/>=<sp/>flow-&gt;blocks;<sp/>blk;<sp/>blk<sp/>=<sp/>blk-&gt;next)<sp/>{</highlight></codeline>
<codeline lineno="2308"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(line<sp/>=<sp/>blk-&gt;lines;<sp/>line;<sp/>line<sp/>=<sp/>line-&gt;next)<sp/>{</highlight></codeline>
<codeline lineno="2309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(word<sp/>=<sp/>line-&gt;words;<sp/>word;<sp/>word<sp/>=<sp/>word-&gt;next)<sp/>{</highlight></codeline>
<codeline lineno="2310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>words-&gt;append(word);</highlight></codeline>
<codeline lineno="2311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2312"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2314"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2315"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2316"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2317"><highlight class="normal"></highlight></codeline>
<codeline lineno="2318"><highlight class="normal">TextWordList::~TextWordList()<sp/>{</highlight></codeline>
<codeline lineno="2319"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>words;</highlight></codeline>
<codeline lineno="2320"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2321"><highlight class="normal"></highlight></codeline>
<codeline lineno="2322"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>TextWordList::getLength()<sp/>{</highlight></codeline>
<codeline lineno="2323"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>words-&gt;getLength();</highlight></codeline>
<codeline lineno="2324"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2325"><highlight class="normal"></highlight></codeline>
<codeline lineno="2326"><highlight class="normal"><ref refid="class_text_word" kindref="compound">TextWord</ref><sp/>*TextWordList::get(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idx)<sp/>{</highlight></codeline>
<codeline lineno="2327"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(idx<sp/>&lt;<sp/>0<sp/>||<sp/>idx<sp/>&gt;=<sp/>words-&gt;getLength())<sp/>{</highlight></codeline>
<codeline lineno="2328"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="2329"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2330"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="class_text_word" kindref="compound">TextWord</ref><sp/>*)words-&gt;get(idx);</highlight></codeline>
<codeline lineno="2331"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2332"><highlight class="normal"></highlight></codeline>
<codeline lineno="2333"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>TEXTOUT_WORD_LIST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2334"><highlight class="normal"></highlight></codeline>
<codeline lineno="2335"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2336"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TextPage</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2337"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2338"><highlight class="normal"></highlight></codeline>
<codeline lineno="2339"><highlight class="normal">TextPage::TextPage(GBool<sp/>rawOrderA)<sp/>{</highlight></codeline>
<codeline lineno="2340"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rot;</highlight></codeline>
<codeline lineno="2341"><highlight class="normal"></highlight></codeline>
<codeline lineno="2342"><highlight class="normal"><sp/><sp/>refCnt<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="2343"><highlight class="normal"><sp/><sp/>rawOrder<sp/>=<sp/>rawOrderA;</highlight></codeline>
<codeline lineno="2344"><highlight class="normal"><sp/><sp/>curWord<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2345"><highlight class="normal"><sp/><sp/>charPos<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2346"><highlight class="normal"><sp/><sp/>curFont<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2347"><highlight class="normal"><sp/><sp/>curFontSize<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2348"><highlight class="normal"><sp/><sp/>nest<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2349"><highlight class="normal"><sp/><sp/>nTinyChars<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2350"><highlight class="normal"><sp/><sp/>lastCharOverlap<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="2351"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!rawOrder)<sp/>{</highlight></codeline>
<codeline lineno="2352"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(rot<sp/>=<sp/>0;<sp/>rot<sp/>&lt;<sp/>4;<sp/>++rot)<sp/>{</highlight></codeline>
<codeline lineno="2353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pools[rot]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_text_pool" kindref="compound">TextPool</ref>();</highlight></codeline>
<codeline lineno="2354"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2355"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2356"><highlight class="normal"><sp/><sp/>flows<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2357"><highlight class="normal"><sp/><sp/>blocks<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2358"><highlight class="normal"><sp/><sp/>rawWords<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2359"><highlight class="normal"><sp/><sp/>rawLastWord<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2360"><highlight class="normal"><sp/><sp/>fonts<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_goo_list" kindref="compound">GooList</ref>();</highlight></codeline>
<codeline lineno="2361"><highlight class="normal"><sp/><sp/>lastFindXMin<sp/>=<sp/>lastFindYMin<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2362"><highlight class="normal"><sp/><sp/>haveLastFind<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="2363"><highlight class="normal"><sp/><sp/>underlines<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_goo_list" kindref="compound">GooList</ref>();</highlight></codeline>
<codeline lineno="2364"><highlight class="normal"><sp/><sp/>links<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_goo_list" kindref="compound">GooList</ref>();</highlight></codeline>
<codeline lineno="2365"><highlight class="normal"><sp/><sp/>mergeCombining<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="2366"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2367"><highlight class="normal"></highlight></codeline>
<codeline lineno="2368"><highlight class="normal">TextPage::~TextPage()<sp/>{</highlight></codeline>
<codeline lineno="2369"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rot;</highlight></codeline>
<codeline lineno="2370"><highlight class="normal"></highlight></codeline>
<codeline lineno="2371"><highlight class="normal"><sp/><sp/>clear();</highlight></codeline>
<codeline lineno="2372"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!rawOrder)<sp/>{</highlight></codeline>
<codeline lineno="2373"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(rot<sp/>=<sp/>0;<sp/>rot<sp/>&lt;<sp/>4;<sp/>++rot)<sp/>{</highlight></codeline>
<codeline lineno="2374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>pools[rot];</highlight></codeline>
<codeline lineno="2375"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2376"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2377"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>fonts;</highlight></codeline>
<codeline lineno="2378"><highlight class="normal"><sp/><sp/>deleteGooList(underlines,<sp/><ref refid="class_text_underline" kindref="compound">TextUnderline</ref>);</highlight></codeline>
<codeline lineno="2379"><highlight class="normal"><sp/><sp/>deleteGooList(links,<sp/><ref refid="class_text_link" kindref="compound">TextLink</ref>);</highlight></codeline>
<codeline lineno="2380"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2381"><highlight class="normal"></highlight></codeline>
<codeline lineno="2382"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TextPage::incRefCnt()<sp/>{</highlight></codeline>
<codeline lineno="2383"><highlight class="normal"><sp/><sp/>refCnt++;</highlight></codeline>
<codeline lineno="2384"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2385"><highlight class="normal"></highlight></codeline>
<codeline lineno="2386"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TextPage::decRefCnt()<sp/>{</highlight></codeline>
<codeline lineno="2387"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(--refCnt<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="2388"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2389"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2390"><highlight class="normal"></highlight></codeline>
<codeline lineno="2391"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TextPage::startPage(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state)<sp/>{</highlight></codeline>
<codeline lineno="2392"><highlight class="normal"><sp/><sp/>clear();</highlight></codeline>
<codeline lineno="2393"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(state)<sp/>{</highlight></codeline>
<codeline lineno="2394"><highlight class="normal"><sp/><sp/><sp/><sp/>pageWidth<sp/>=<sp/>state-&gt;getPageWidth();</highlight></codeline>
<codeline lineno="2395"><highlight class="normal"><sp/><sp/><sp/><sp/>pageHeight<sp/>=<sp/>state-&gt;getPageHeight();</highlight></codeline>
<codeline lineno="2396"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2397"><highlight class="normal"><sp/><sp/><sp/><sp/>pageWidth<sp/>=<sp/>pageHeight<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2398"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2399"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2400"><highlight class="normal"></highlight></codeline>
<codeline lineno="2401"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TextPage::endPage()<sp/>{</highlight></codeline>
<codeline lineno="2402"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(curWord)<sp/>{</highlight></codeline>
<codeline lineno="2403"><highlight class="normal"><sp/><sp/><sp/><sp/>endWord();</highlight></codeline>
<codeline lineno="2404"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2405"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2406"><highlight class="normal"></highlight></codeline>
<codeline lineno="2407"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TextPage::clear()<sp/>{</highlight></codeline>
<codeline lineno="2408"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rot;</highlight></codeline>
<codeline lineno="2409"><highlight class="normal"><sp/><sp/><ref refid="class_text_flow" kindref="compound">TextFlow</ref><sp/>*flow;</highlight></codeline>
<codeline lineno="2410"><highlight class="normal"><sp/><sp/><ref refid="class_text_word" kindref="compound">TextWord</ref><sp/>*word;</highlight></codeline>
<codeline lineno="2411"><highlight class="normal"></highlight></codeline>
<codeline lineno="2412"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(curWord)<sp/>{</highlight></codeline>
<codeline lineno="2413"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>curWord;</highlight></codeline>
<codeline lineno="2414"><highlight class="normal"><sp/><sp/><sp/><sp/>curWord<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2415"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2416"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rawOrder)<sp/>{</highlight></codeline>
<codeline lineno="2417"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(rawWords)<sp/>{</highlight></codeline>
<codeline lineno="2418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>word<sp/>=<sp/>rawWords;</highlight></codeline>
<codeline lineno="2419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rawWords<sp/>=<sp/>rawWords-&gt;next;</highlight></codeline>
<codeline lineno="2420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>word;</highlight></codeline>
<codeline lineno="2421"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2422"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2423"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(rot<sp/>=<sp/>0;<sp/>rot<sp/>&lt;<sp/>4;<sp/>++rot)<sp/>{</highlight></codeline>
<codeline lineno="2424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>pools[rot];</highlight></codeline>
<codeline lineno="2425"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2426"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(flows)<sp/>{</highlight></codeline>
<codeline lineno="2427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>flow<sp/>=<sp/>flows;</highlight></codeline>
<codeline lineno="2428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>flows<sp/>=<sp/>flows-&gt;next;</highlight></codeline>
<codeline lineno="2429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>flow;</highlight></codeline>
<codeline lineno="2430"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2431"><highlight class="normal"><sp/><sp/><sp/><sp/>gfree(blocks);</highlight></codeline>
<codeline lineno="2432"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2433"><highlight class="normal"><sp/><sp/>deleteGooList(fonts,<sp/><ref refid="class_text_font_info" kindref="compound">TextFontInfo</ref>);</highlight></codeline>
<codeline lineno="2434"><highlight class="normal"><sp/><sp/>deleteGooList(underlines,<sp/><ref refid="class_text_underline" kindref="compound">TextUnderline</ref>);</highlight></codeline>
<codeline lineno="2435"><highlight class="normal"><sp/><sp/>deleteGooList(links,<sp/><ref refid="class_text_link" kindref="compound">TextLink</ref>);</highlight></codeline>
<codeline lineno="2436"><highlight class="normal"></highlight></codeline>
<codeline lineno="2437"><highlight class="normal"><sp/><sp/>curWord<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2438"><highlight class="normal"><sp/><sp/>charPos<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2439"><highlight class="normal"><sp/><sp/>curFont<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2440"><highlight class="normal"><sp/><sp/>curFontSize<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2441"><highlight class="normal"><sp/><sp/>nest<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2442"><highlight class="normal"><sp/><sp/>nTinyChars<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2443"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!rawOrder)<sp/>{</highlight></codeline>
<codeline lineno="2444"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(rot<sp/>=<sp/>0;<sp/>rot<sp/>&lt;<sp/>4;<sp/>++rot)<sp/>{</highlight></codeline>
<codeline lineno="2445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pools[rot]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_text_pool" kindref="compound">TextPool</ref>();</highlight></codeline>
<codeline lineno="2446"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2447"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2448"><highlight class="normal"><sp/><sp/>flows<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2449"><highlight class="normal"><sp/><sp/>blocks<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2450"><highlight class="normal"><sp/><sp/>rawWords<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2451"><highlight class="normal"><sp/><sp/>rawLastWord<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2452"><highlight class="normal"><sp/><sp/>fonts<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_goo_list" kindref="compound">GooList</ref>();</highlight></codeline>
<codeline lineno="2453"><highlight class="normal"><sp/><sp/>underlines<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_goo_list" kindref="compound">GooList</ref>();</highlight></codeline>
<codeline lineno="2454"><highlight class="normal"><sp/><sp/>links<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_goo_list" kindref="compound">GooList</ref>();</highlight></codeline>
<codeline lineno="2455"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2456"><highlight class="normal"></highlight></codeline>
<codeline lineno="2457"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TextPage::updateFont(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state)<sp/>{</highlight></codeline>
<codeline lineno="2458"><highlight class="normal"><sp/><sp/><ref refid="class_gfx_font" kindref="compound">GfxFont</ref><sp/>*gfxFont;</highlight></codeline>
<codeline lineno="2459"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*fm;</highlight></codeline>
<codeline lineno="2460"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name;</highlight></codeline>
<codeline lineno="2461"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>code,<sp/>mCode,<sp/>letterCode,<sp/>anyCode;</highlight></codeline>
<codeline lineno="2462"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>w;</highlight></codeline>
<codeline lineno="2463"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="2464"><highlight class="normal"></highlight></codeline>
<codeline lineno="2465"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>the<sp/>font<sp/>info<sp/>object</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2466"><highlight class="normal"><sp/><sp/>curFont<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2467"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>fonts-&gt;getLength();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="2468"><highlight class="normal"><sp/><sp/><sp/><sp/>curFont<sp/>=<sp/>(<ref refid="class_text_font_info" kindref="compound">TextFontInfo</ref><sp/>*)fonts-&gt;get(i);</highlight></codeline>
<codeline lineno="2469"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(curFont-&gt;matches(state))<sp/>{</highlight></codeline>
<codeline lineno="2470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2471"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2472"><highlight class="normal"><sp/><sp/><sp/><sp/>curFont<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2473"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2474"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!curFont)<sp/>{</highlight></codeline>
<codeline lineno="2475"><highlight class="normal"><sp/><sp/><sp/><sp/>curFont<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_text_font_info" kindref="compound">TextFontInfo</ref>(state);</highlight></codeline>
<codeline lineno="2476"><highlight class="normal"><sp/><sp/><sp/><sp/>fonts-&gt;append(curFont);</highlight></codeline>
<codeline lineno="2477"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2478"><highlight class="normal"></highlight></codeline>
<codeline lineno="2479"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>adjust<sp/>the<sp/>font<sp/>size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2480"><highlight class="normal"><sp/><sp/>gfxFont<sp/>=<sp/>state-&gt;getFont();</highlight></codeline>
<codeline lineno="2481"><highlight class="normal"><sp/><sp/>curFontSize<sp/>=<sp/>state-&gt;getTransformedFontSize();</highlight></codeline>
<codeline lineno="2482"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(gfxFont<sp/>&amp;&amp;<sp/>gfxFont-&gt;getType()<sp/>==<sp/>fontType3)<sp/>{</highlight></codeline>
<codeline lineno="2483"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>a<sp/>hack<sp/>which<sp/>makes<sp/>it<sp/>possible<sp/>to<sp/>deal<sp/>with<sp/>some<sp/>Type<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2484"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>fonts.<sp/><sp/>The<sp/>problem<sp/>is<sp/>that<sp/>it&apos;s<sp/>impossible<sp/>to<sp/>know<sp/>what<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2485"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>base<sp/>coordinate<sp/>system<sp/>used<sp/>in<sp/>the<sp/>font<sp/>is<sp/>without<sp/>actually</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2486"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>rendering<sp/>the<sp/>font.<sp/><sp/>This<sp/>code<sp/>tries<sp/>to<sp/>guess<sp/>by<sp/>looking<sp/>at<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2487"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>width<sp/>of<sp/>the<sp/>character<sp/>&apos;m&apos;<sp/>(which<sp/>breaks<sp/>if<sp/>the<sp/>font<sp/>is<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2488"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>subset<sp/>that<sp/>doesn&apos;t<sp/>contain<sp/>&apos;m&apos;).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2489"><highlight class="normal"><sp/><sp/><sp/><sp/>mCode<sp/>=<sp/>letterCode<sp/>=<sp/>anyCode<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="2490"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(code<sp/>=<sp/>0;<sp/>code<sp/>&lt;<sp/>256;<sp/>++code)<sp/>{</highlight></codeline>
<codeline lineno="2491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>name<sp/>=<sp/>((<ref refid="class_gfx8_bit_font" kindref="compound">Gfx8BitFont</ref><sp/>*)gfxFont)-&gt;getCharName(code);</highlight></codeline>
<codeline lineno="2492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nameLen<sp/>=<sp/>name<sp/>?<sp/>strlen(name)<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="2493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GBool<sp/>nameOneChar<sp/>=<sp/>nameLen<sp/>==<sp/>1<sp/>||<sp/>(nameLen<sp/>&gt;<sp/>1<sp/>&amp;&amp;<sp/>name[1]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nameOneChar<sp/>&amp;&amp;<sp/>name[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;m&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="2495"><highlight class="normal"><sp/><sp/><sp/><sp/>mCode<sp/>=<sp/>code;</highlight></codeline>
<codeline lineno="2496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(letterCode<sp/>&lt;<sp/>0<sp/>&amp;&amp;<sp/>nameOneChar<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>((name[0]<sp/>&gt;=<sp/></highlight><highlight class="charliteral">&apos;A&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>name[0]<sp/>&lt;=<sp/></highlight><highlight class="charliteral">&apos;Z&apos;</highlight><highlight class="normal">)<sp/>||</highlight></codeline>
<codeline lineno="2499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(name[0]<sp/>&gt;=<sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>name[0]<sp/>&lt;=<sp/></highlight><highlight class="charliteral">&apos;z&apos;</highlight><highlight class="normal">)))<sp/>{</highlight></codeline>
<codeline lineno="2500"><highlight class="normal"><sp/><sp/><sp/><sp/>letterCode<sp/>=<sp/>code;</highlight></codeline>
<codeline lineno="2501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(anyCode<sp/>&lt;<sp/>0<sp/>&amp;&amp;<sp/>name<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>((<ref refid="class_gfx8_bit_font" kindref="compound">Gfx8BitFont</ref><sp/>*)gfxFont)-&gt;getWidth(code)<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2504"><highlight class="normal"><sp/><sp/><sp/><sp/>anyCode<sp/>=<sp/>code;</highlight></codeline>
<codeline lineno="2505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2506"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2507"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mCode<sp/>&gt;=<sp/>0<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2508"><highlight class="normal"><sp/><sp/><sp/><sp/>(w<sp/>=<sp/>((<ref refid="class_gfx8_bit_font" kindref="compound">Gfx8BitFont</ref><sp/>*)gfxFont)-&gt;getWidth(mCode))<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>0.6<sp/>is<sp/>a<sp/>generic<sp/>average<sp/>&apos;m&apos;<sp/>width<sp/>--<sp/>yes,<sp/>this<sp/>is<sp/>a<sp/>hack</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>curFontSize<sp/>*=<sp/>w<sp/>/<sp/>0.6;</highlight></codeline>
<codeline lineno="2511"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(letterCode<sp/>&gt;=<sp/>0<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(w<sp/>=<sp/>((<ref refid="class_gfx8_bit_font" kindref="compound">Gfx8BitFont</ref><sp/>*)gfxFont)-&gt;getWidth(letterCode))<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>even<sp/>more<sp/>of<sp/>a<sp/>hack:<sp/>0.5<sp/>is<sp/>a<sp/>generic<sp/>letter<sp/>width</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>curFontSize<sp/>*=<sp/>w<sp/>/<sp/>0.5;</highlight></codeline>
<codeline lineno="2515"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(anyCode<sp/>&gt;=<sp/>0<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(w<sp/>=<sp/>((<ref refid="class_gfx8_bit_font" kindref="compound">Gfx8BitFont</ref><sp/>*)gfxFont)-&gt;getWidth(anyCode))<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>better<sp/>than<sp/>nothing:<sp/>0.5<sp/>is<sp/>a<sp/>generic<sp/>character<sp/>width</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>curFontSize<sp/>*=<sp/>w<sp/>/<sp/>0.5;</highlight></codeline>
<codeline lineno="2519"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2520"><highlight class="normal"><sp/><sp/><sp/><sp/>fm<sp/>=<sp/>gfxFont-&gt;getFontMatrix();</highlight></codeline>
<codeline lineno="2521"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fm[0]<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>curFontSize<sp/>*=<sp/>fabs(fm[3]<sp/>/<sp/>fm[0]);</highlight></codeline>
<codeline lineno="2523"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2524"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2525"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2526"><highlight class="normal"></highlight></codeline>
<codeline lineno="2527"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TextPage::beginWord(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state)<sp/>{</highlight></codeline>
<codeline lineno="2528"><highlight class="normal"><sp/><sp/><ref refid="class_gfx_font" kindref="compound">GfxFont</ref><sp/>*gfxFont;</highlight></codeline>
<codeline lineno="2529"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*fontm;</highlight></codeline>
<codeline lineno="2530"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>m[4],<sp/>m2[4];</highlight></codeline>
<codeline lineno="2531"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rot;</highlight></codeline>
<codeline lineno="2532"><highlight class="normal"></highlight></codeline>
<codeline lineno="2533"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>check<sp/>is<sp/>needed<sp/>because<sp/>Type<sp/>3<sp/>characters<sp/>can<sp/>contain</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2534"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>text-drawing<sp/>operations<sp/>(when<sp/>TextPage<sp/>is<sp/>being<sp/>used<sp/>via</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2535"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>{X,Win}SplashOutputDev<sp/>rather<sp/>than<sp/>TextOutputDev).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2536"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(curWord)<sp/>{</highlight></codeline>
<codeline lineno="2537"><highlight class="normal"><sp/><sp/><sp/><sp/>++nest;</highlight></codeline>
<codeline lineno="2538"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2539"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2540"><highlight class="normal"></highlight></codeline>
<codeline lineno="2541"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>compute<sp/>the<sp/>rotation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2542"><highlight class="normal"><sp/><sp/>state-&gt;getFontTransMat(&amp;m[0],<sp/>&amp;m[1],<sp/>&amp;m[2],<sp/>&amp;m[3]);</highlight></codeline>
<codeline lineno="2543"><highlight class="normal"><sp/><sp/>gfxFont<sp/>=<sp/>state-&gt;getFont();</highlight></codeline>
<codeline lineno="2544"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(gfxFont<sp/>&amp;&amp;<sp/>gfxFont-&gt;getType()<sp/>==<sp/>fontType3)<sp/>{</highlight></codeline>
<codeline lineno="2545"><highlight class="normal"><sp/><sp/><sp/><sp/>fontm<sp/>=<sp/>state-&gt;getFont()-&gt;getFontMatrix();</highlight></codeline>
<codeline lineno="2546"><highlight class="normal"><sp/><sp/><sp/><sp/>m2[0]<sp/>=<sp/>fontm[0]<sp/>*<sp/>m[0]<sp/>+<sp/>fontm[1]<sp/>*<sp/>m[2];</highlight></codeline>
<codeline lineno="2547"><highlight class="normal"><sp/><sp/><sp/><sp/>m2[1]<sp/>=<sp/>fontm[0]<sp/>*<sp/>m[1]<sp/>+<sp/>fontm[1]<sp/>*<sp/>m[3];</highlight></codeline>
<codeline lineno="2548"><highlight class="normal"><sp/><sp/><sp/><sp/>m2[2]<sp/>=<sp/>fontm[2]<sp/>*<sp/>m[0]<sp/>+<sp/>fontm[3]<sp/>*<sp/>m[2];</highlight></codeline>
<codeline lineno="2549"><highlight class="normal"><sp/><sp/><sp/><sp/>m2[3]<sp/>=<sp/>fontm[2]<sp/>*<sp/>m[1]<sp/>+<sp/>fontm[3]<sp/>*<sp/>m[3];</highlight></codeline>
<codeline lineno="2550"><highlight class="normal"><sp/><sp/><sp/><sp/>m[0]<sp/>=<sp/>m2[0];</highlight></codeline>
<codeline lineno="2551"><highlight class="normal"><sp/><sp/><sp/><sp/>m[1]<sp/>=<sp/>m2[1];</highlight></codeline>
<codeline lineno="2552"><highlight class="normal"><sp/><sp/><sp/><sp/>m[2]<sp/>=<sp/>m2[2];</highlight></codeline>
<codeline lineno="2553"><highlight class="normal"><sp/><sp/><sp/><sp/>m[3]<sp/>=<sp/>m2[3];</highlight></codeline>
<codeline lineno="2554"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2555"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabs(m[0]<sp/>*<sp/>m[3])<sp/>&gt;<sp/>fabs(m[1]<sp/>*<sp/>m[2]))<sp/>{</highlight></codeline>
<codeline lineno="2556"><highlight class="normal"><sp/><sp/><sp/><sp/>rot<sp/>=<sp/>(m[0]<sp/>&gt;<sp/>0<sp/>||<sp/>m[3]<sp/>&lt;<sp/>0)<sp/>?<sp/>0<sp/>:<sp/>2;</highlight></codeline>
<codeline lineno="2557"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2558"><highlight class="normal"><sp/><sp/><sp/><sp/>rot<sp/>=<sp/>(m[2]<sp/>&gt;<sp/>0)<sp/>?<sp/>1<sp/>:<sp/>3;</highlight></codeline>
<codeline lineno="2559"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2560"><highlight class="normal"></highlight></codeline>
<codeline lineno="2561"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>vertical<sp/>writing<sp/>mode,<sp/>the<sp/>lines<sp/>are<sp/>effectively<sp/>rotated<sp/>90</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2562"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>degrees</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2563"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(gfxFont<sp/>&amp;&amp;<sp/>gfxFont-&gt;getWMode())<sp/>{</highlight></codeline>
<codeline lineno="2564"><highlight class="normal"><sp/><sp/><sp/><sp/>rot<sp/>=<sp/>(rot<sp/>+<sp/>1)<sp/>&amp;<sp/>3;</highlight></codeline>
<codeline lineno="2565"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2566"><highlight class="normal"></highlight></codeline>
<codeline lineno="2567"><highlight class="normal"><sp/><sp/>curWord<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_text_word" kindref="compound">TextWord</ref>(state,<sp/>rot,<sp/>curFontSize);</highlight></codeline>
<codeline lineno="2568"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2569"><highlight class="normal"></highlight></codeline>
<codeline lineno="2570"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TextPage::addChar(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y,</highlight></codeline>
<codeline lineno="2571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dx,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dy,</highlight></codeline>
<codeline lineno="2572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CharCode<sp/>c,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nBytes,<sp/>Unicode<sp/>*u,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>uLen)<sp/>{</highlight></codeline>
<codeline lineno="2573"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x1,<sp/>y1,<sp/>w1,<sp/>h1,<sp/>dx2,<sp/>dy2,<sp/>base,<sp/>sp,<sp/>delta;</highlight></codeline>
<codeline lineno="2574"><highlight class="normal"><sp/><sp/>GBool<sp/>overlap;</highlight></codeline>
<codeline lineno="2575"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="2576"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>wMode;</highlight></codeline>
<codeline lineno="2577"><highlight class="normal"><sp/><sp/><ref refid="class_matrix" kindref="compound">Matrix</ref><sp/>mat;</highlight></codeline>
<codeline lineno="2578"><highlight class="normal"></highlight></codeline>
<codeline lineno="2579"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>subtract<sp/>char<sp/>and<sp/>word<sp/>spacing<sp/>from<sp/>the<sp/>dx,dy<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2580"><highlight class="normal"><sp/><sp/>sp<sp/>=<sp/>state-&gt;getCharSpace();</highlight></codeline>
<codeline lineno="2581"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/>(CharCode)0x20)<sp/>{</highlight></codeline>
<codeline lineno="2582"><highlight class="normal"><sp/><sp/><sp/><sp/>sp<sp/>+=<sp/>state-&gt;getWordSpace();</highlight></codeline>
<codeline lineno="2583"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2584"><highlight class="normal"><sp/><sp/>state-&gt;textTransformDelta(sp<sp/>*<sp/>state-&gt;getHorizScaling(),<sp/>0,<sp/>&amp;dx2,<sp/>&amp;dy2);</highlight></codeline>
<codeline lineno="2585"><highlight class="normal"><sp/><sp/>dx<sp/>-=<sp/>dx2;</highlight></codeline>
<codeline lineno="2586"><highlight class="normal"><sp/><sp/>dy<sp/>-=<sp/>dy2;</highlight></codeline>
<codeline lineno="2587"><highlight class="normal"><sp/><sp/>state-&gt;transformDelta(dx,<sp/>dy,<sp/>&amp;w1,<sp/>&amp;h1);</highlight></codeline>
<codeline lineno="2588"><highlight class="normal"></highlight></codeline>
<codeline lineno="2589"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>throw<sp/>away<sp/>chars<sp/>that<sp/>aren&apos;t<sp/>inside<sp/>the<sp/>page<sp/>bounds</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2590"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>(and<sp/>also<sp/>do<sp/>a<sp/>sanity<sp/>check<sp/>on<sp/>the<sp/>character<sp/>size)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2591"><highlight class="normal"><sp/><sp/>state-&gt;transform(x,<sp/>y,<sp/>&amp;x1,<sp/>&amp;y1);</highlight></codeline>
<codeline lineno="2592"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x1<sp/>+<sp/>w1<sp/>&lt;<sp/>0<sp/>||<sp/>x1<sp/>&gt;<sp/>pageWidth<sp/>||</highlight></codeline>
<codeline lineno="2593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>y1<sp/>+<sp/>h1<sp/>&lt;<sp/>0<sp/>||<sp/>y1<sp/>&gt;<sp/>pageHeight<sp/>||</highlight></codeline>
<codeline lineno="2594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>x1<sp/>!=<sp/>x1<sp/>||<sp/>y1<sp/>!=<sp/>y1<sp/>||<sp/></highlight><highlight class="comment">//<sp/>IEEE<sp/>way<sp/>of<sp/>checking<sp/>for<sp/>isnan</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>w1<sp/>!=<sp/>w1<sp/>||<sp/>h1<sp/>!=<sp/>h1)<sp/>{</highlight></codeline>
<codeline lineno="2596"><highlight class="normal"><sp/><sp/><sp/><sp/>charPos<sp/>+=<sp/>nBytes;</highlight></codeline>
<codeline lineno="2597"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2598"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2599"><highlight class="normal"></highlight></codeline>
<codeline lineno="2600"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>the<sp/>tiny<sp/>chars<sp/>limit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2601"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!globalParams-&gt;getTextKeepTinyChars()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fabs(w1)<sp/>&lt;<sp/>3<sp/>&amp;&amp;<sp/>fabs(h1)<sp/>&lt;<sp/>3)<sp/>{</highlight></codeline>
<codeline lineno="2603"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(++nTinyChars<sp/>&gt;<sp/>50000)<sp/>{</highlight></codeline>
<codeline lineno="2604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>charPos<sp/>+=<sp/>nBytes;</highlight></codeline>
<codeline lineno="2605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2606"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2607"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2608"><highlight class="normal"></highlight></codeline>
<codeline lineno="2609"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>break<sp/>words<sp/>at<sp/>space<sp/>character</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2610"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(uLen<sp/>==<sp/>1<sp/>&amp;&amp;<sp/>u[0]<sp/>==<sp/>(Unicode)0x20)<sp/>{</highlight></codeline>
<codeline lineno="2611"><highlight class="normal"><sp/><sp/><sp/><sp/>charPos<sp/>+=<sp/>nBytes;</highlight></codeline>
<codeline lineno="2612"><highlight class="normal"><sp/><sp/><sp/><sp/>endWord();</highlight></codeline>
<codeline lineno="2613"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2614"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2615"><highlight class="normal"></highlight></codeline>
<codeline lineno="2616"><highlight class="normal"><sp/><sp/>state-&gt;getFontTransMat(&amp;mat.m[0],<sp/>&amp;mat.m[1],<sp/>&amp;mat.m[2],<sp/>&amp;mat.m[3]);</highlight></codeline>
<codeline lineno="2617"><highlight class="normal"><sp/><sp/>mat.m[4]<sp/>=<sp/>x1;</highlight></codeline>
<codeline lineno="2618"><highlight class="normal"><sp/><sp/>mat.m[5]<sp/>=<sp/>y1;</highlight></codeline>
<codeline lineno="2619"><highlight class="normal"></highlight></codeline>
<codeline lineno="2620"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mergeCombining<sp/>&amp;&amp;<sp/>curWord<sp/>&amp;&amp;<sp/>uLen<sp/>==<sp/>1<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>curWord-&gt;addCombining(state,<sp/>curFont,<sp/>curFontSize,<sp/>x1,<sp/>y1,<sp/>w1,<sp/>h1,<sp/>charPos,<sp/>nBytes,<sp/>c,</highlight></codeline>
<codeline lineno="2622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>u[0],<sp/>mat))<sp/>{</highlight></codeline>
<codeline lineno="2623"><highlight class="normal"><sp/><sp/><sp/><sp/>charPos<sp/>+=<sp/>nBytes;</highlight></codeline>
<codeline lineno="2624"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2625"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2626"><highlight class="normal"></highlight></codeline>
<codeline lineno="2627"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>start<sp/>a<sp/>new<sp/>word<sp/>if:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2628"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>(1)<sp/>this<sp/>character<sp/>doesn&apos;t<sp/>fall<sp/>in<sp/>the<sp/>right<sp/>place<sp/>relative<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2629"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>the<sp/>end<sp/>of<sp/>the<sp/>previous<sp/>word<sp/>(this<sp/>places<sp/>upper<sp/>and<sp/>lower</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2630"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>constraints<sp/>on<sp/>the<sp/>position<sp/>deltas<sp/>along<sp/>both<sp/>the<sp/>primary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2631"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>and<sp/>secondary<sp/>axes),<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2632"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>(2)<sp/>this<sp/>character<sp/>overlaps<sp/>the<sp/>previous<sp/>one<sp/>(duplicated<sp/>text),<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2633"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>(3)<sp/>the<sp/>previous<sp/>character<sp/>was<sp/>an<sp/>overlap<sp/>(we<sp/>want<sp/>each<sp/>duplicated</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2634"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>character<sp/>to<sp/>be<sp/>in<sp/>a<sp/>word<sp/>by<sp/>itself<sp/>at<sp/>this<sp/>stage),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2635"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>(4)<sp/>the<sp/>font<sp/>size<sp/>has<sp/>changed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2636"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>(5)<sp/>the<sp/>WMode<sp/>changed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2637"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(curWord<sp/>&amp;&amp;<sp/>curWord-&gt;len<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2638"><highlight class="normal"><sp/><sp/><sp/><sp/>base<sp/>=<sp/>sp<sp/>=<sp/>delta<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>make<sp/>gcc<sp/>happy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2639"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(curWord-&gt;rot)<sp/>{</highlight></codeline>
<codeline lineno="2640"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:</highlight></codeline>
<codeline lineno="2641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>base<sp/>=<sp/>y1;</highlight></codeline>
<codeline lineno="2642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sp<sp/>=<sp/>x1<sp/>-<sp/>curWord-&gt;xMax;</highlight></codeline>
<codeline lineno="2643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>delta<sp/>=<sp/>x1<sp/>-<sp/>curWord-&gt;edge[curWord-&gt;len<sp/>-<sp/>1];</highlight></codeline>
<codeline lineno="2644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2645"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="2646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>base<sp/>=<sp/>x1;</highlight></codeline>
<codeline lineno="2647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sp<sp/>=<sp/>y1<sp/>-<sp/>curWord-&gt;yMax;</highlight></codeline>
<codeline lineno="2648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>delta<sp/>=<sp/>y1<sp/>-<sp/>curWord-&gt;edge[curWord-&gt;len<sp/>-<sp/>1];</highlight></codeline>
<codeline lineno="2649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2650"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:</highlight></codeline>
<codeline lineno="2651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>base<sp/>=<sp/>y1;</highlight></codeline>
<codeline lineno="2652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sp<sp/>=<sp/>curWord-&gt;xMin<sp/>-<sp/>x1;</highlight></codeline>
<codeline lineno="2653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>delta<sp/>=<sp/>curWord-&gt;edge[curWord-&gt;len<sp/>-<sp/>1]<sp/>-<sp/>x1;</highlight></codeline>
<codeline lineno="2654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2655"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>3:</highlight></codeline>
<codeline lineno="2656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>base<sp/>=<sp/>x1;</highlight></codeline>
<codeline lineno="2657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sp<sp/>=<sp/>curWord-&gt;yMin<sp/>-<sp/>y1;</highlight></codeline>
<codeline lineno="2658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>delta<sp/>=<sp/>curWord-&gt;edge[curWord-&gt;len<sp/>-<sp/>1]<sp/>-<sp/>y1;</highlight></codeline>
<codeline lineno="2659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2660"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2661"><highlight class="normal"><sp/><sp/><sp/><sp/>overlap<sp/>=<sp/>fabs(delta)<sp/>&lt;<sp/>dupMaxPriDelta<sp/>*<sp/>curWord-&gt;fontSize<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fabs(base<sp/>-<sp/>curWord-&gt;base)<sp/>&lt;<sp/>dupMaxSecDelta<sp/>*<sp/>curWord-&gt;fontSize;</highlight></codeline>
<codeline lineno="2663"><highlight class="normal"><sp/><sp/><sp/><sp/>wMode<sp/>=<sp/>curFont-&gt;getWMode();</highlight></codeline>
<codeline lineno="2664"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(overlap<sp/>||<sp/>lastCharOverlap<sp/>||</highlight></codeline>
<codeline lineno="2665"><highlight class="normal"><sp/><sp/><sp/><sp/>sp<sp/>&lt;<sp/>-minDupBreakOverlap<sp/>*<sp/>curWord-&gt;fontSize<sp/>||</highlight></codeline>
<codeline lineno="2666"><highlight class="normal"><sp/><sp/><sp/><sp/>sp<sp/>&gt;<sp/>minWordBreakSpace<sp/>*<sp/>curWord-&gt;fontSize<sp/>||</highlight></codeline>
<codeline lineno="2667"><highlight class="normal"><sp/><sp/><sp/><sp/>fabs(base<sp/>-<sp/>curWord-&gt;base)<sp/>&gt;<sp/>0.5<sp/>||</highlight></codeline>
<codeline lineno="2668"><highlight class="normal"><sp/><sp/><sp/><sp/>curFontSize<sp/>!=<sp/>curWord-&gt;fontSize<sp/>||</highlight></codeline>
<codeline lineno="2669"><highlight class="normal"><sp/><sp/><sp/><sp/>wMode<sp/>!=<sp/>curWord-&gt;wMode)<sp/>{</highlight></codeline>
<codeline lineno="2670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>endWord();</highlight></codeline>
<codeline lineno="2671"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2672"><highlight class="normal"><sp/><sp/><sp/><sp/>lastCharOverlap<sp/>=<sp/>overlap;</highlight></codeline>
<codeline lineno="2673"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2674"><highlight class="normal"><sp/><sp/><sp/><sp/>lastCharOverlap<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="2675"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2676"><highlight class="normal"></highlight></codeline>
<codeline lineno="2677"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(uLen<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2678"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>start<sp/>a<sp/>new<sp/>word<sp/>if<sp/>needed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2679"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!curWord)<sp/>{</highlight></codeline>
<codeline lineno="2680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>beginWord(state);</highlight></codeline>
<codeline lineno="2681"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2682"><highlight class="normal"></highlight></codeline>
<codeline lineno="2683"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>page<sp/>rotation<sp/>and/or<sp/>transform<sp/>matrices<sp/>can<sp/>cause<sp/>text<sp/>to<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2684"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>drawn<sp/>in<sp/>reverse<sp/>order<sp/>--<sp/>in<sp/>this<sp/>case,<sp/>swap<sp/>the<sp/>begin/end</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2685"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>coordinates<sp/>and<sp/>break<sp/>text<sp/>into<sp/>individual<sp/>chars</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2686"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((curWord-&gt;rot<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>w1<sp/>&lt;<sp/>0)<sp/>||</highlight></codeline>
<codeline lineno="2687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(curWord-&gt;rot<sp/>==<sp/>1<sp/>&amp;&amp;<sp/>h1<sp/>&lt;<sp/>0)<sp/>||</highlight></codeline>
<codeline lineno="2688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(curWord-&gt;rot<sp/>==<sp/>2<sp/>&amp;&amp;<sp/>w1<sp/>&gt;<sp/>0)<sp/>||</highlight></codeline>
<codeline lineno="2689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(curWord-&gt;rot<sp/>==<sp/>3<sp/>&amp;&amp;<sp/>h1<sp/>&gt;<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="2690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>endWord();</highlight></codeline>
<codeline lineno="2691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>beginWord(state);</highlight></codeline>
<codeline lineno="2692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>x1<sp/>+=<sp/>w1;</highlight></codeline>
<codeline lineno="2693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>y1<sp/>+=<sp/>h1;</highlight></codeline>
<codeline lineno="2694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>w1<sp/>=<sp/>-w1;</highlight></codeline>
<codeline lineno="2695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>h1<sp/>=<sp/>-h1;</highlight></codeline>
<codeline lineno="2696"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2697"><highlight class="normal"></highlight></codeline>
<codeline lineno="2698"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>the<sp/>characters<sp/>to<sp/>the<sp/>current<sp/>word</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2699"><highlight class="normal"><sp/><sp/><sp/><sp/>w1<sp/>/=<sp/>uLen;</highlight></codeline>
<codeline lineno="2700"><highlight class="normal"><sp/><sp/><sp/><sp/>h1<sp/>/=<sp/>uLen;</highlight></codeline>
<codeline lineno="2701"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>uLen;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="2702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>curWord-&gt;addChar(state,<sp/>curFont,<sp/>x1<sp/>+<sp/>i*w1,<sp/>y1<sp/>+<sp/>i*h1,<sp/>w1,<sp/>h1,<sp/>charPos,<sp/>nBytes,<sp/>c,<sp/>u[i],<sp/>mat);</highlight></codeline>
<codeline lineno="2703"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2704"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2705"><highlight class="normal"><sp/><sp/>charPos<sp/>+=<sp/>nBytes;</highlight></codeline>
<codeline lineno="2706"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2707"><highlight class="normal"></highlight></codeline>
<codeline lineno="2708"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TextPage::incCharCount(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nChars)<sp/>{</highlight></codeline>
<codeline lineno="2709"><highlight class="normal"><sp/><sp/>charPos<sp/>+=<sp/>nChars;</highlight></codeline>
<codeline lineno="2710"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2711"><highlight class="normal"></highlight></codeline>
<codeline lineno="2712"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TextPage::endWord()<sp/>{</highlight></codeline>
<codeline lineno="2713"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>check<sp/>is<sp/>needed<sp/>because<sp/>Type<sp/>3<sp/>characters<sp/>can<sp/>contain</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2714"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>text-drawing<sp/>operations<sp/>(when<sp/>TextPage<sp/>is<sp/>being<sp/>used<sp/>via</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2715"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>{X,Win}SplashOutputDev<sp/>rather<sp/>than<sp/>TextOutputDev).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2716"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nest<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2717"><highlight class="normal"><sp/><sp/><sp/><sp/>--nest;</highlight></codeline>
<codeline lineno="2718"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2719"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2720"><highlight class="normal"></highlight></codeline>
<codeline lineno="2721"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(curWord)<sp/>{</highlight></codeline>
<codeline lineno="2722"><highlight class="normal"><sp/><sp/><sp/><sp/>addWord(curWord);</highlight></codeline>
<codeline lineno="2723"><highlight class="normal"><sp/><sp/><sp/><sp/>curWord<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2724"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2725"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2726"><highlight class="normal"></highlight></codeline>
<codeline lineno="2727"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TextPage::addWord(<ref refid="class_text_word" kindref="compound">TextWord</ref><sp/>*word)<sp/>{</highlight></codeline>
<codeline lineno="2728"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>throw<sp/>away<sp/>zero-length<sp/>words<sp/>--<sp/>they<sp/>don&apos;t<sp/>have<sp/>valid<sp/>xMin/xMax</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2729"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>values,<sp/>and<sp/>they&apos;re<sp/>useless<sp/>anyway</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2730"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(word-&gt;len<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2731"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>word;</highlight></codeline>
<codeline lineno="2732"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2733"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2734"><highlight class="normal"></highlight></codeline>
<codeline lineno="2735"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rawOrder)<sp/>{</highlight></codeline>
<codeline lineno="2736"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rawLastWord)<sp/>{</highlight></codeline>
<codeline lineno="2737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rawLastWord-&gt;next<sp/>=<sp/>word;</highlight></codeline>
<codeline lineno="2738"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rawWords<sp/>=<sp/>word;</highlight></codeline>
<codeline lineno="2740"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2741"><highlight class="normal"><sp/><sp/><sp/><sp/>rawLastWord<sp/>=<sp/>word;</highlight></codeline>
<codeline lineno="2742"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2743"><highlight class="normal"><sp/><sp/><sp/><sp/>pools[word-&gt;rot]-&gt;addWord(word);</highlight></codeline>
<codeline lineno="2744"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2745"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2746"><highlight class="normal"></highlight></codeline>
<codeline lineno="2747"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TextPage::addUnderline(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x0,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y0,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x1,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y1)<sp/>{</highlight></codeline>
<codeline lineno="2748"><highlight class="normal"><sp/><sp/>underlines-&gt;append(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_text_underline" kindref="compound">TextUnderline</ref>(x0,<sp/>y0,<sp/>x1,<sp/>y1));</highlight></codeline>
<codeline lineno="2749"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2750"><highlight class="normal"></highlight></codeline>
<codeline lineno="2751"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TextPage::addLink(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>xMin,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>yMin,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>xMax,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>yMax,<sp/><ref refid="class_annot_link" kindref="compound">AnnotLink</ref><sp/>*link)<sp/>{</highlight></codeline>
<codeline lineno="2752"><highlight class="normal"><sp/><sp/>links-&gt;append(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_text_link" kindref="compound">TextLink</ref>(xMin,<sp/>yMin,<sp/>xMax,<sp/>yMax,<sp/>link));</highlight></codeline>
<codeline lineno="2753"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2754"><highlight class="normal"></highlight></codeline>
<codeline lineno="2755"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TextPage::coalesce(GBool<sp/>physLayout,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>fixedPitch,<sp/>GBool<sp/>doHTML)<sp/>{</highlight></codeline>
<codeline lineno="2756"><highlight class="normal"><sp/><sp/><ref refid="class_unicode_map" kindref="compound">UnicodeMap</ref><sp/>*uMap;</highlight></codeline>
<codeline lineno="2757"><highlight class="normal"><sp/><sp/><ref refid="class_text_pool" kindref="compound">TextPool</ref><sp/>*pool;</highlight></codeline>
<codeline lineno="2758"><highlight class="normal"><sp/><sp/><ref refid="class_text_word" kindref="compound">TextWord</ref><sp/>*word0,<sp/>*word1,<sp/>*word2;</highlight></codeline>
<codeline lineno="2759"><highlight class="normal"><sp/><sp/><ref refid="class_text_line" kindref="compound">TextLine</ref><sp/>*line;</highlight></codeline>
<codeline lineno="2760"><highlight class="normal"><sp/><sp/><ref refid="class_text_block" kindref="compound">TextBlock</ref><sp/>*blkList,<sp/>*blk,<sp/>*lastBlk,<sp/>*blk0,<sp/>*blk1,<sp/>*blk2;</highlight></codeline>
<codeline lineno="2761"><highlight class="normal"><sp/><sp/><ref refid="class_text_flow" kindref="compound">TextFlow</ref><sp/>*flow,<sp/>*lastFlow;</highlight></codeline>
<codeline lineno="2762"><highlight class="normal"><sp/><sp/><ref refid="class_text_underline" kindref="compound">TextUnderline</ref><sp/>*underline;</highlight></codeline>
<codeline lineno="2763"><highlight class="normal"><sp/><sp/><ref refid="class_text_link" kindref="compound">TextLink</ref><sp/>*link;</highlight></codeline>
<codeline lineno="2764"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rot,<sp/>poolMinBaseIdx,<sp/>baseIdx,<sp/>startBaseIdx,<sp/>endBaseIdx;</highlight></codeline>
<codeline lineno="2765"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>minBase,<sp/>maxBase,<sp/>newMinBase,<sp/>newMaxBase;</highlight></codeline>
<codeline lineno="2766"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>fontSize,<sp/>colSpace1,<sp/>colSpace2,<sp/>lineSpace,<sp/>intraLineSpace,<sp/>blkSpace;</highlight></codeline>
<codeline lineno="2767"><highlight class="normal"><sp/><sp/>GBool<sp/>found;</highlight></codeline>
<codeline lineno="2768"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count[4];</highlight></codeline>
<codeline lineno="2769"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lrCount;</highlight></codeline>
<codeline lineno="2770"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>col1,<sp/>col2;</highlight></codeline>
<codeline lineno="2771"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j,<sp/>n;</highlight></codeline>
<codeline lineno="2772"><highlight class="normal"></highlight></codeline>
<codeline lineno="2773"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rawOrder)<sp/>{</highlight></codeline>
<codeline lineno="2774"><highlight class="normal"><sp/><sp/><sp/><sp/>primaryRot<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2775"><highlight class="normal"><sp/><sp/><sp/><sp/>primaryLR<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="2776"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2777"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2778"><highlight class="normal"></highlight></codeline>
<codeline lineno="2779"><highlight class="normal"><sp/><sp/>uMap<sp/>=<sp/>globalParams-&gt;getTextEncoding();</highlight></codeline>
<codeline lineno="2780"><highlight class="normal"><sp/><sp/>blkList<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2781"><highlight class="normal"><sp/><sp/>lastBlk<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2782"><highlight class="normal"><sp/><sp/>nBlocks<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2783"><highlight class="normal"><sp/><sp/>primaryRot<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2784"><highlight class="normal"></highlight></codeline>
<codeline lineno="2785"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>0<sp/>//<sp/>for<sp/>debugging</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2786"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;***<sp/>initial<sp/>words<sp/>***\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2787"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(rot<sp/>=<sp/>0;<sp/>rot<sp/>&lt;<sp/>4;<sp/>++rot)<sp/>{</highlight></codeline>
<codeline lineno="2788"><highlight class="normal"><sp/><sp/><sp/><sp/>pool<sp/>=<sp/>pools[rot];</highlight></codeline>
<codeline lineno="2789"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(baseIdx<sp/>=<sp/>pool-&gt;minBaseIdx;<sp/>baseIdx<sp/>&lt;=<sp/>pool-&gt;maxBaseIdx;<sp/>++baseIdx)<sp/>{</highlight></codeline>
<codeline lineno="2790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(word0<sp/>=<sp/>pool-&gt;getPool(baseIdx);<sp/>word0;<sp/>word0<sp/>=<sp/>word0-&gt;next)<sp/>{</highlight></codeline>
<codeline lineno="2791"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>word:<sp/>x=%.2f..%.2f<sp/>y=%.2f..%.2f<sp/>base=%.2f<sp/>fontSize=%.2f<sp/>rot=%d<sp/>link=%p<sp/>&apos;&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>word0-&gt;xMin,<sp/>word0-&gt;xMax,<sp/>word0-&gt;yMin,<sp/>word0-&gt;yMax,</highlight></codeline>
<codeline lineno="2793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>word0-&gt;base,<sp/>word0-&gt;fontSize,<sp/>rot*90,<sp/>word0-&gt;link);</highlight></codeline>
<codeline lineno="2794"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>word0-&gt;len;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="2795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fputc(word0-&gt;text[i]<sp/>&amp;<sp/>0xff,<sp/>stdout);</highlight></codeline>
<codeline lineno="2796"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2797"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;&apos;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2799"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2800"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2801"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2802"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2803"><highlight class="normal"></highlight></codeline>
<codeline lineno="2804"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>0<sp/>//~<sp/>for<sp/>debugging</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2805"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>underlines-&gt;getLength();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="2806"><highlight class="normal"><sp/><sp/><sp/><sp/>underline<sp/>=<sp/>(<ref refid="class_text_underline" kindref="compound">TextUnderline</ref><sp/>*)underlines-&gt;get(i);</highlight></codeline>
<codeline lineno="2807"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;underline:<sp/>x=%g..%g<sp/>y=%g..%g<sp/>horiz=%d\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>underline-&gt;x0,<sp/>underline-&gt;x1,<sp/>underline-&gt;y0,<sp/>underline-&gt;y1,</highlight></codeline>
<codeline lineno="2809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>underline-&gt;horiz);</highlight></codeline>
<codeline lineno="2810"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2811"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2812"><highlight class="normal"></highlight></codeline>
<codeline lineno="2813"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(doHTML)<sp/>{</highlight></codeline>
<codeline lineno="2814"><highlight class="normal"></highlight></codeline>
<codeline lineno="2815"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//-----<sp/>handle<sp/>underlining</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2816"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>underlines-&gt;getLength();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="2817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>underline<sp/>=<sp/>(<ref refid="class_text_underline" kindref="compound">TextUnderline</ref><sp/>*)underlines-&gt;get(i);</highlight></codeline>
<codeline lineno="2818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(underline-&gt;horiz)<sp/>{</highlight></codeline>
<codeline lineno="2819"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>rot<sp/>=<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2820"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pools[0]-&gt;minBaseIdx<sp/>&lt;=<sp/>pools[0]-&gt;maxBaseIdx)<sp/>{</highlight></codeline>
<codeline lineno="2821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>startBaseIdx<sp/>=<sp/>pools[0]-&gt;getBaseIdx(underline-&gt;y0<sp/>+<sp/>minUnderlineGap);</highlight></codeline>
<codeline lineno="2822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>endBaseIdx<sp/>=<sp/>pools[0]-&gt;getBaseIdx(underline-&gt;y0<sp/>+<sp/>maxUnderlineGap);</highlight></codeline>
<codeline lineno="2823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>startBaseIdx;<sp/>j<sp/>&lt;=<sp/>endBaseIdx;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="2824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(word0<sp/>=<sp/>pools[0]-&gt;getPool(j);<sp/>word0;<sp/>word0<sp/>=<sp/>word0-&gt;next)<sp/>{</highlight></codeline>
<codeline lineno="2825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//~<sp/>need<sp/>to<sp/>check<sp/>the<sp/>y<sp/>value<sp/>against<sp/>the<sp/>word<sp/>baseline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(underline-&gt;x0<sp/>&lt;<sp/>word0-&gt;xMin<sp/>+<sp/>underlineSlack<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>word0-&gt;xMax<sp/>-<sp/>underlineSlack<sp/>&lt;<sp/>underline-&gt;x1)<sp/>{</highlight></codeline>
<codeline lineno="2828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>word0-&gt;underlined<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="2829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2832"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2833"><highlight class="normal"></highlight></codeline>
<codeline lineno="2834"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>rot<sp/>=<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2835"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pools[2]-&gt;minBaseIdx<sp/>&lt;=<sp/>pools[2]-&gt;maxBaseIdx)<sp/>{</highlight></codeline>
<codeline lineno="2836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>startBaseIdx<sp/>=<sp/>pools[2]-&gt;getBaseIdx(underline-&gt;y0<sp/>-<sp/>maxUnderlineGap);</highlight></codeline>
<codeline lineno="2837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>endBaseIdx<sp/>=<sp/>pools[2]-&gt;getBaseIdx(underline-&gt;y0<sp/>-<sp/>minUnderlineGap);</highlight></codeline>
<codeline lineno="2838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>startBaseIdx;<sp/>j<sp/>&lt;=<sp/>endBaseIdx;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="2839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(word0<sp/>=<sp/>pools[2]-&gt;getPool(j);<sp/>word0;<sp/>word0<sp/>=<sp/>word0-&gt;next)<sp/>{</highlight></codeline>
<codeline lineno="2840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(underline-&gt;x0<sp/>&lt;<sp/>word0-&gt;xMin<sp/>+<sp/>underlineSlack<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>word0-&gt;xMax<sp/>-<sp/>underlineSlack<sp/>&lt;<sp/>underline-&gt;x1)<sp/>{</highlight></codeline>
<codeline lineno="2842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>word0-&gt;underlined<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="2843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2846"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2848"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>rot<sp/>=<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2849"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pools[1]-&gt;minBaseIdx<sp/>&lt;=<sp/>pools[1]-&gt;maxBaseIdx)<sp/>{</highlight></codeline>
<codeline lineno="2850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>startBaseIdx<sp/>=<sp/>pools[1]-&gt;getBaseIdx(underline-&gt;x0<sp/>-<sp/>maxUnderlineGap);</highlight></codeline>
<codeline lineno="2851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>endBaseIdx<sp/>=<sp/>pools[1]-&gt;getBaseIdx(underline-&gt;x0<sp/>-<sp/>minUnderlineGap);</highlight></codeline>
<codeline lineno="2852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>startBaseIdx;<sp/>j<sp/>&lt;=<sp/>endBaseIdx;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="2853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(word0<sp/>=<sp/>pools[1]-&gt;getPool(j);<sp/>word0;<sp/>word0<sp/>=<sp/>word0-&gt;next)<sp/>{</highlight></codeline>
<codeline lineno="2854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(underline-&gt;y0<sp/>&lt;<sp/>word0-&gt;yMin<sp/>+<sp/>underlineSlack<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>word0-&gt;yMax<sp/>-<sp/>underlineSlack<sp/>&lt;<sp/>underline-&gt;y1)<sp/>{</highlight></codeline>
<codeline lineno="2856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>word0-&gt;underlined<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="2857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2860"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2861"><highlight class="normal"></highlight></codeline>
<codeline lineno="2862"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>rot<sp/>=<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2863"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pools[3]-&gt;minBaseIdx<sp/>&lt;=<sp/>pools[3]-&gt;maxBaseIdx)<sp/>{</highlight></codeline>
<codeline lineno="2864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>startBaseIdx<sp/>=<sp/>pools[3]-&gt;getBaseIdx(underline-&gt;x0<sp/>+<sp/>minUnderlineGap);</highlight></codeline>
<codeline lineno="2865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>endBaseIdx<sp/>=<sp/>pools[3]-&gt;getBaseIdx(underline-&gt;x0<sp/>+<sp/>maxUnderlineGap);</highlight></codeline>
<codeline lineno="2866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>startBaseIdx;<sp/>j<sp/>&lt;=<sp/>endBaseIdx;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="2867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(word0<sp/>=<sp/>pools[3]-&gt;getPool(j);<sp/>word0;<sp/>word0<sp/>=<sp/>word0-&gt;next)<sp/>{</highlight></codeline>
<codeline lineno="2868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(underline-&gt;y0<sp/>&lt;<sp/>word0-&gt;yMin<sp/>+<sp/>underlineSlack<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>word0-&gt;yMax<sp/>-<sp/>underlineSlack<sp/>&lt;<sp/>underline-&gt;y1)<sp/>{</highlight></codeline>
<codeline lineno="2870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>word0-&gt;underlined<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="2871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2874"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2876"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2877"><highlight class="normal"></highlight></codeline>
<codeline lineno="2878"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//-----<sp/>handle<sp/>links</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2879"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>links-&gt;getLength();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="2880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>link<sp/>=<sp/>(<ref refid="class_text_link" kindref="compound">TextLink</ref><sp/>*)links-&gt;get(i);</highlight></codeline>
<codeline lineno="2881"><highlight class="normal"></highlight></codeline>
<codeline lineno="2882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>rot<sp/>=<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pools[0]-&gt;minBaseIdx<sp/>&lt;=<sp/>pools[0]-&gt;maxBaseIdx)<sp/>{</highlight></codeline>
<codeline lineno="2884"><highlight class="normal"><sp/><sp/><sp/><sp/>startBaseIdx<sp/>=<sp/>pools[0]-&gt;getBaseIdx(link-&gt;yMin);</highlight></codeline>
<codeline lineno="2885"><highlight class="normal"><sp/><sp/><sp/><sp/>endBaseIdx<sp/>=<sp/>pools[0]-&gt;getBaseIdx(link-&gt;yMax);</highlight></codeline>
<codeline lineno="2886"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>startBaseIdx;<sp/>j<sp/>&lt;=<sp/>endBaseIdx;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="2887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(word0<sp/>=<sp/>pools[0]-&gt;getPool(j);<sp/>word0;<sp/>word0<sp/>=<sp/>word0-&gt;next)<sp/>{</highlight></codeline>
<codeline lineno="2888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(link-&gt;xMin<sp/>&lt;<sp/>word0-&gt;xMin<sp/>+<sp/>hyperlinkSlack<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>word0-&gt;xMax<sp/>-<sp/>hyperlinkSlack<sp/>&lt;<sp/>link-&gt;xMax<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>link-&gt;yMin<sp/>&lt;<sp/>word0-&gt;yMin<sp/>+<sp/>hyperlinkSlack<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>word0-&gt;yMax<sp/>-<sp/>hyperlinkSlack<sp/>&lt;<sp/>link-&gt;yMax)<sp/>{</highlight></codeline>
<codeline lineno="2892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>word0-&gt;link<sp/>=<sp/>link-&gt;link;</highlight></codeline>
<codeline lineno="2893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2895"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2897"><highlight class="normal"></highlight></codeline>
<codeline lineno="2898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>rot<sp/>=<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pools[2]-&gt;minBaseIdx<sp/>&lt;=<sp/>pools[2]-&gt;maxBaseIdx)<sp/>{</highlight></codeline>
<codeline lineno="2900"><highlight class="normal"><sp/><sp/><sp/><sp/>startBaseIdx<sp/>=<sp/>pools[2]-&gt;getBaseIdx(link-&gt;yMin);</highlight></codeline>
<codeline lineno="2901"><highlight class="normal"><sp/><sp/><sp/><sp/>endBaseIdx<sp/>=<sp/>pools[2]-&gt;getBaseIdx(link-&gt;yMax);</highlight></codeline>
<codeline lineno="2902"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>startBaseIdx;<sp/>j<sp/>&lt;=<sp/>endBaseIdx;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="2903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(word0<sp/>=<sp/>pools[2]-&gt;getPool(j);<sp/>word0;<sp/>word0<sp/>=<sp/>word0-&gt;next)<sp/>{</highlight></codeline>
<codeline lineno="2904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(link-&gt;xMin<sp/>&lt;<sp/>word0-&gt;xMin<sp/>+<sp/>hyperlinkSlack<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>word0-&gt;xMax<sp/>-<sp/>hyperlinkSlack<sp/>&lt;<sp/>link-&gt;xMax<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>link-&gt;yMin<sp/>&lt;<sp/>word0-&gt;yMin<sp/>+<sp/>hyperlinkSlack<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>word0-&gt;yMax<sp/>-<sp/>hyperlinkSlack<sp/>&lt;<sp/>link-&gt;yMax)<sp/>{</highlight></codeline>
<codeline lineno="2908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>word0-&gt;link<sp/>=<sp/>link-&gt;link;</highlight></codeline>
<codeline lineno="2909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2911"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2913"><highlight class="normal"></highlight></codeline>
<codeline lineno="2914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>rot<sp/>=<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pools[1]-&gt;minBaseIdx<sp/>&lt;=<sp/>pools[1]-&gt;maxBaseIdx)<sp/>{</highlight></codeline>
<codeline lineno="2916"><highlight class="normal"><sp/><sp/><sp/><sp/>startBaseIdx<sp/>=<sp/>pools[1]-&gt;getBaseIdx(link-&gt;xMin);</highlight></codeline>
<codeline lineno="2917"><highlight class="normal"><sp/><sp/><sp/><sp/>endBaseIdx<sp/>=<sp/>pools[1]-&gt;getBaseIdx(link-&gt;xMax);</highlight></codeline>
<codeline lineno="2918"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>startBaseIdx;<sp/>j<sp/>&lt;=<sp/>endBaseIdx;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="2919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(word0<sp/>=<sp/>pools[1]-&gt;getPool(j);<sp/>word0;<sp/>word0<sp/>=<sp/>word0-&gt;next)<sp/>{</highlight></codeline>
<codeline lineno="2920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(link-&gt;yMin<sp/>&lt;<sp/>word0-&gt;yMin<sp/>+<sp/>hyperlinkSlack<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>word0-&gt;yMax<sp/>-<sp/>hyperlinkSlack<sp/>&lt;<sp/>link-&gt;yMax<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>link-&gt;xMin<sp/>&lt;<sp/>word0-&gt;xMin<sp/>+<sp/>hyperlinkSlack<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>word0-&gt;xMax<sp/>-<sp/>hyperlinkSlack<sp/>&lt;<sp/>link-&gt;xMax)<sp/>{</highlight></codeline>
<codeline lineno="2924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>word0-&gt;link<sp/>=<sp/>link-&gt;link;</highlight></codeline>
<codeline lineno="2925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2927"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2929"><highlight class="normal"></highlight></codeline>
<codeline lineno="2930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>rot<sp/>=<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pools[3]-&gt;minBaseIdx<sp/>&lt;=<sp/>pools[3]-&gt;maxBaseIdx)<sp/>{</highlight></codeline>
<codeline lineno="2932"><highlight class="normal"><sp/><sp/><sp/><sp/>startBaseIdx<sp/>=<sp/>pools[3]-&gt;getBaseIdx(link-&gt;xMin);</highlight></codeline>
<codeline lineno="2933"><highlight class="normal"><sp/><sp/><sp/><sp/>endBaseIdx<sp/>=<sp/>pools[3]-&gt;getBaseIdx(link-&gt;xMax);</highlight></codeline>
<codeline lineno="2934"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>startBaseIdx;<sp/>j<sp/>&lt;=<sp/>endBaseIdx;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="2935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(word0<sp/>=<sp/>pools[3]-&gt;getPool(j);<sp/>word0;<sp/>word0<sp/>=<sp/>word0-&gt;next)<sp/>{</highlight></codeline>
<codeline lineno="2936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(link-&gt;yMin<sp/>&lt;<sp/>word0-&gt;yMin<sp/>+<sp/>hyperlinkSlack<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>word0-&gt;yMax<sp/>-<sp/>hyperlinkSlack<sp/>&lt;<sp/>link-&gt;yMax<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>link-&gt;xMin<sp/>&lt;<sp/>word0-&gt;xMin<sp/>+<sp/>hyperlinkSlack<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>word0-&gt;xMax<sp/>-<sp/>hyperlinkSlack<sp/>&lt;<sp/>link-&gt;xMax)<sp/>{</highlight></codeline>
<codeline lineno="2940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>word0-&gt;link<sp/>=<sp/>link-&gt;link;</highlight></codeline>
<codeline lineno="2941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2943"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2945"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2946"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2947"><highlight class="normal"></highlight></codeline>
<codeline lineno="2948"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//-----<sp/>assemble<sp/>the<sp/>blocks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2949"><highlight class="normal"></highlight></codeline>
<codeline lineno="2950"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//~<sp/>add<sp/>an<sp/>outer<sp/>loop<sp/>for<sp/>writing<sp/>mode<sp/>(vertical<sp/>text)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2951"><highlight class="normal"></highlight></codeline>
<codeline lineno="2952"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>build<sp/>blocks<sp/>for<sp/>each<sp/>rotation<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2953"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(rot<sp/>=<sp/>0;<sp/>rot<sp/>&lt;<sp/>4;<sp/>++rot)<sp/>{</highlight></codeline>
<codeline lineno="2954"><highlight class="normal"><sp/><sp/><sp/><sp/>pool<sp/>=<sp/>pools[rot];</highlight></codeline>
<codeline lineno="2955"><highlight class="normal"><sp/><sp/><sp/><sp/>poolMinBaseIdx<sp/>=<sp/>pool-&gt;minBaseIdx;</highlight></codeline>
<codeline lineno="2956"><highlight class="normal"><sp/><sp/><sp/><sp/>count[rot]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2957"><highlight class="normal"></highlight></codeline>
<codeline lineno="2958"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>blocks<sp/>until<sp/>no<sp/>more<sp/>words<sp/>are<sp/>left</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2959"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(1)<sp/>{</highlight></codeline>
<codeline lineno="2960"><highlight class="normal"></highlight></codeline>
<codeline lineno="2961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>find<sp/>the<sp/>first<sp/>non-empty<sp/>line<sp/>in<sp/>the<sp/>pool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;</highlight></codeline>
<codeline lineno="2963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>poolMinBaseIdx<sp/>&lt;=<sp/>pool-&gt;maxBaseIdx<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!pool-&gt;getPool(poolMinBaseIdx);</highlight></codeline>
<codeline lineno="2965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++poolMinBaseIdx)<sp/>;</highlight></codeline>
<codeline lineno="2966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(poolMinBaseIdx<sp/>&gt;<sp/>pool-&gt;maxBaseIdx)<sp/>{</highlight></codeline>
<codeline lineno="2967"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2969"><highlight class="normal"></highlight></codeline>
<codeline lineno="2970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>look<sp/>for<sp/>the<sp/>left-most<sp/>word<sp/>in<sp/>the<sp/>first<sp/>four<sp/>lines<sp/>of<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>pool<sp/>--<sp/>this<sp/>avoids<sp/>starting<sp/>with<sp/>a<sp/>superscript<sp/>word</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>startBaseIdx<sp/>=<sp/>poolMinBaseIdx;</highlight></codeline>
<codeline lineno="2973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(baseIdx<sp/>=<sp/>poolMinBaseIdx<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="2974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>baseIdx<sp/>&lt;<sp/>poolMinBaseIdx<sp/>+<sp/>4<sp/>&amp;&amp;<sp/>baseIdx<sp/>&lt;=<sp/>pool-&gt;maxBaseIdx;</highlight></codeline>
<codeline lineno="2975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++baseIdx)<sp/>{</highlight></codeline>
<codeline lineno="2976"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pool-&gt;getPool(baseIdx))<sp/>{</highlight></codeline>
<codeline lineno="2977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2978"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2979"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pool-&gt;getPool(baseIdx)-&gt;primaryCmp(pool-&gt;getPool(startBaseIdx))</highlight></codeline>
<codeline lineno="2980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>startBaseIdx<sp/>=<sp/>baseIdx;</highlight></codeline>
<codeline lineno="2982"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2984"><highlight class="normal"></highlight></codeline>
<codeline lineno="2985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>a<sp/>new<sp/>block</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>word0<sp/>=<sp/>pool-&gt;getPool(startBaseIdx);</highlight></codeline>
<codeline lineno="2987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pool-&gt;setPool(startBaseIdx,<sp/>word0-&gt;next);</highlight></codeline>
<codeline lineno="2988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>word0-&gt;next<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>blk<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_text_block" kindref="compound">TextBlock</ref>(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>rot);</highlight></codeline>
<codeline lineno="2990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>blk-&gt;addWord(word0);</highlight></codeline>
<codeline lineno="2991"><highlight class="normal"></highlight></codeline>
<codeline lineno="2992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fontSize<sp/>=<sp/>word0-&gt;fontSize;</highlight></codeline>
<codeline lineno="2993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>minBase<sp/>=<sp/>maxBase<sp/>=<sp/>word0-&gt;base;</highlight></codeline>
<codeline lineno="2994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>colSpace1<sp/>=<sp/>minColSpacing1<sp/>*<sp/>fontSize;</highlight></codeline>
<codeline lineno="2995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>colSpace2<sp/>=<sp/>minColSpacing2<sp/>*<sp/>fontSize;</highlight></codeline>
<codeline lineno="2996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lineSpace<sp/>=<sp/>maxLineSpacingDelta<sp/>*<sp/>fontSize;</highlight></codeline>
<codeline lineno="2997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>intraLineSpace<sp/>=<sp/>maxIntraLineDelta<sp/>*<sp/>fontSize;</highlight></codeline>
<codeline lineno="2998"><highlight class="normal"></highlight></codeline>
<codeline lineno="2999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>words<sp/>to<sp/>the<sp/>block</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3001"><highlight class="normal"><sp/><sp/><sp/><sp/>found<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="3002"><highlight class="normal"></highlight></codeline>
<codeline lineno="3003"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>look<sp/>for<sp/>words<sp/>on<sp/>the<sp/>line<sp/>above<sp/>the<sp/>current<sp/>top<sp/>edge<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3004"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>block</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3005"><highlight class="normal"><sp/><sp/><sp/><sp/>newMinBase<sp/>=<sp/>minBase;</highlight></codeline>
<codeline lineno="3006"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(baseIdx<sp/>=<sp/>pool-&gt;getBaseIdx(minBase);</highlight></codeline>
<codeline lineno="3007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>baseIdx<sp/>&gt;=<sp/>pool-&gt;getBaseIdx(minBase<sp/>-<sp/>lineSpace);</highlight></codeline>
<codeline lineno="3008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--baseIdx)<sp/>{</highlight></codeline>
<codeline lineno="3009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>word0<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="3010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>word1<sp/>=<sp/>pool-&gt;getPool(baseIdx);</highlight></codeline>
<codeline lineno="3011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(word1)<sp/>{</highlight></codeline>
<codeline lineno="3012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(word1-&gt;base<sp/>&lt;<sp/>minBase<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>word1-&gt;base<sp/>&gt;=<sp/>minBase<sp/>-<sp/>lineSpace<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((rot<sp/>==<sp/>0<sp/>||<sp/>rot<sp/>==<sp/>2)</highlight></codeline>
<codeline lineno="3015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>(word1-&gt;xMin<sp/>&lt;<sp/>blk-&gt;xMax<sp/>&amp;&amp;<sp/>word1-&gt;xMax<sp/>&gt;<sp/>blk-&gt;xMin)</highlight></codeline>
<codeline lineno="3016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>(word1-&gt;yMin<sp/>&lt;<sp/>blk-&gt;yMax<sp/>&amp;&amp;<sp/>word1-&gt;yMax<sp/>&gt;<sp/>blk-&gt;yMin))<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fabs(word1-&gt;fontSize<sp/>-<sp/>fontSize)<sp/>&lt;</highlight></codeline>
<codeline lineno="3018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maxBlockFontSizeDelta1<sp/>*<sp/>fontSize)<sp/>{</highlight></codeline>
<codeline lineno="3019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>word2<sp/>=<sp/>word1;</highlight></codeline>
<codeline lineno="3020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(word0)<sp/>{</highlight></codeline>
<codeline lineno="3021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>word0-&gt;next<sp/>=<sp/>word1-&gt;next;</highlight></codeline>
<codeline lineno="3022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pool-&gt;setPool(baseIdx,<sp/>word1-&gt;next);</highlight></codeline>
<codeline lineno="3024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>word1<sp/>=<sp/>word1-&gt;next;</highlight></codeline>
<codeline lineno="3026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>word2-&gt;next<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="3027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blk-&gt;addWord(word2);</highlight></codeline>
<codeline lineno="3028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>found<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="3029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newMinBase<sp/>=<sp/>word2-&gt;base;</highlight></codeline>
<codeline lineno="3030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>word0<sp/>=<sp/>word1;</highlight></codeline>
<codeline lineno="3032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>word1<sp/>=<sp/>word1-&gt;next;</highlight></codeline>
<codeline lineno="3033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3035"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3036"><highlight class="normal"><sp/><sp/><sp/><sp/>minBase<sp/>=<sp/>newMinBase;</highlight></codeline>
<codeline lineno="3037"><highlight class="normal"></highlight></codeline>
<codeline lineno="3038"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>look<sp/>for<sp/>words<sp/>on<sp/>the<sp/>line<sp/>below<sp/>the<sp/>current<sp/>bottom<sp/>edge<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3039"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>block</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3040"><highlight class="normal"><sp/><sp/><sp/><sp/>newMaxBase<sp/>=<sp/>maxBase;</highlight></codeline>
<codeline lineno="3041"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(baseIdx<sp/>=<sp/>pool-&gt;getBaseIdx(maxBase);</highlight></codeline>
<codeline lineno="3042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>baseIdx<sp/>&lt;=<sp/>pool-&gt;getBaseIdx(maxBase<sp/>+<sp/>lineSpace);</highlight></codeline>
<codeline lineno="3043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++baseIdx)<sp/>{</highlight></codeline>
<codeline lineno="3044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>word0<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="3045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>word1<sp/>=<sp/>pool-&gt;getPool(baseIdx);</highlight></codeline>
<codeline lineno="3046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(word1)<sp/>{</highlight></codeline>
<codeline lineno="3047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(word1-&gt;base<sp/>&gt;<sp/>maxBase<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>word1-&gt;base<sp/>&lt;=<sp/>maxBase<sp/>+<sp/>lineSpace<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((rot<sp/>==<sp/>0<sp/>||<sp/>rot<sp/>==<sp/>2)</highlight></codeline>
<codeline lineno="3050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>(word1-&gt;xMin<sp/>&lt;<sp/>blk-&gt;xMax<sp/>&amp;&amp;<sp/>word1-&gt;xMax<sp/>&gt;<sp/>blk-&gt;xMin)</highlight></codeline>
<codeline lineno="3051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>(word1-&gt;yMin<sp/>&lt;<sp/>blk-&gt;yMax<sp/>&amp;&amp;<sp/>word1-&gt;yMax<sp/>&gt;<sp/>blk-&gt;yMin))<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fabs(word1-&gt;fontSize<sp/>-<sp/>fontSize)<sp/>&lt;</highlight></codeline>
<codeline lineno="3053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maxBlockFontSizeDelta1<sp/>*<sp/>fontSize)<sp/>{</highlight></codeline>
<codeline lineno="3054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>word2<sp/>=<sp/>word1;</highlight></codeline>
<codeline lineno="3055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(word0)<sp/>{</highlight></codeline>
<codeline lineno="3056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>word0-&gt;next<sp/>=<sp/>word1-&gt;next;</highlight></codeline>
<codeline lineno="3057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pool-&gt;setPool(baseIdx,<sp/>word1-&gt;next);</highlight></codeline>
<codeline lineno="3059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>word1<sp/>=<sp/>word1-&gt;next;</highlight></codeline>
<codeline lineno="3061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>word2-&gt;next<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="3062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blk-&gt;addWord(word2);</highlight></codeline>
<codeline lineno="3063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>found<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="3064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newMaxBase<sp/>=<sp/>word2-&gt;base;</highlight></codeline>
<codeline lineno="3065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>word0<sp/>=<sp/>word1;</highlight></codeline>
<codeline lineno="3067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>word1<sp/>=<sp/>word1-&gt;next;</highlight></codeline>
<codeline lineno="3068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3070"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3071"><highlight class="normal"><sp/><sp/><sp/><sp/>maxBase<sp/>=<sp/>newMaxBase;</highlight></codeline>
<codeline lineno="3072"><highlight class="normal"></highlight></codeline>
<codeline lineno="3073"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>look<sp/>for<sp/>words<sp/>that<sp/>are<sp/>on<sp/>lines<sp/>already<sp/>in<sp/>the<sp/>block,<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3074"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>that<sp/>overlap<sp/>the<sp/>block<sp/>horizontally</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3075"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(baseIdx<sp/>=<sp/>pool-&gt;getBaseIdx(minBase<sp/>-<sp/>intraLineSpace);</highlight></codeline>
<codeline lineno="3076"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>baseIdx<sp/>&lt;=<sp/>pool-&gt;getBaseIdx(maxBase<sp/>+<sp/>intraLineSpace);</highlight></codeline>
<codeline lineno="3077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++baseIdx)<sp/>{</highlight></codeline>
<codeline lineno="3078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>word0<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="3079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>word1<sp/>=<sp/>pool-&gt;getPool(baseIdx);</highlight></codeline>
<codeline lineno="3080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(word1)<sp/>{</highlight></codeline>
<codeline lineno="3081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(word1-&gt;base<sp/>&gt;=<sp/>minBase<sp/>-<sp/>intraLineSpace<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>word1-&gt;base<sp/>&lt;=<sp/>maxBase<sp/>+<sp/>intraLineSpace<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((rot<sp/>==<sp/>0<sp/>||<sp/>rot<sp/>==<sp/>2)</highlight></codeline>
<codeline lineno="3084"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>(word1-&gt;xMin<sp/>&lt;<sp/>blk-&gt;xMax<sp/>+<sp/>colSpace1<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>word1-&gt;xMax<sp/>&gt;<sp/>blk-&gt;xMin<sp/>-<sp/>colSpace1)</highlight></codeline>
<codeline lineno="3086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>(word1-&gt;yMin<sp/>&lt;<sp/>blk-&gt;yMax<sp/>+<sp/>colSpace1<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>word1-&gt;yMax<sp/>&gt;<sp/>blk-&gt;yMin<sp/>-<sp/>colSpace1))<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fabs(word1-&gt;fontSize<sp/>-<sp/>fontSize)<sp/>&lt;</highlight></codeline>
<codeline lineno="3089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maxBlockFontSizeDelta2<sp/>*<sp/>fontSize)<sp/>{</highlight></codeline>
<codeline lineno="3090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>word2<sp/>=<sp/>word1;</highlight></codeline>
<codeline lineno="3091"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(word0)<sp/>{</highlight></codeline>
<codeline lineno="3092"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>word0-&gt;next<sp/>=<sp/>word1-&gt;next;</highlight></codeline>
<codeline lineno="3093"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3094"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pool-&gt;setPool(baseIdx,<sp/>word1-&gt;next);</highlight></codeline>
<codeline lineno="3095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>word1<sp/>=<sp/>word1-&gt;next;</highlight></codeline>
<codeline lineno="3097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>word2-&gt;next<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="3098"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blk-&gt;addWord(word2);</highlight></codeline>
<codeline lineno="3099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>found<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="3100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>word0<sp/>=<sp/>word1;</highlight></codeline>
<codeline lineno="3102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>word1<sp/>=<sp/>word1-&gt;next;</highlight></codeline>
<codeline lineno="3103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3105"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3106"><highlight class="normal"></highlight></codeline>
<codeline lineno="3107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>only<sp/>check<sp/>for<sp/>outlying<sp/>words<sp/>(the<sp/>next<sp/>two<sp/>chunks<sp/>of<sp/>code)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>we<sp/>didn&apos;t<sp/>find<sp/>anything<sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(found)<sp/>{</highlight></codeline>
<codeline lineno="3110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3111"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3112"><highlight class="normal"></highlight></codeline>
<codeline lineno="3113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>scan<sp/>down<sp/>the<sp/>left<sp/>side<sp/>of<sp/>the<sp/>block,<sp/>looking<sp/>for<sp/>words</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>that<sp/>are<sp/>near<sp/>(but<sp/>not<sp/>overlapping)<sp/>the<sp/>block;<sp/>if<sp/>there<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>three<sp/>or<sp/>fewer,<sp/>add<sp/>them<sp/>to<sp/>the<sp/>block</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3116"><highlight class="normal"><sp/><sp/><sp/><sp/>n<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(baseIdx<sp/>=<sp/>pool-&gt;getBaseIdx(minBase<sp/>-<sp/>intraLineSpace);</highlight></codeline>
<codeline lineno="3118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>baseIdx<sp/>&lt;=<sp/>pool-&gt;getBaseIdx(maxBase<sp/>+<sp/>intraLineSpace);</highlight></codeline>
<codeline lineno="3119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++baseIdx)<sp/>{</highlight></codeline>
<codeline lineno="3120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>word1<sp/>=<sp/>pool-&gt;getPool(baseIdx);</highlight></codeline>
<codeline lineno="3121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(word1)<sp/>{</highlight></codeline>
<codeline lineno="3122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(word1-&gt;base<sp/>&gt;=<sp/>minBase<sp/>-<sp/>intraLineSpace<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>word1-&gt;base<sp/>&lt;=<sp/>maxBase<sp/>+<sp/>intraLineSpace<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((rot<sp/>==<sp/>0<sp/>||<sp/>rot<sp/>==<sp/>2)</highlight></codeline>
<codeline lineno="3125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>(word1-&gt;xMax<sp/>&lt;=<sp/>blk-&gt;xMin<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>word1-&gt;xMax<sp/>&gt;<sp/>blk-&gt;xMin<sp/>-<sp/>colSpace2)</highlight></codeline>
<codeline lineno="3127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>(word1-&gt;yMax<sp/>&lt;=<sp/>blk-&gt;yMin<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>word1-&gt;yMax<sp/>&gt;<sp/>blk-&gt;yMin<sp/>-<sp/>colSpace2))<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fabs(word1-&gt;fontSize<sp/>-<sp/>fontSize)<sp/>&lt;</highlight></codeline>
<codeline lineno="3130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maxBlockFontSizeDelta3<sp/>*<sp/>fontSize)<sp/>{</highlight></codeline>
<codeline lineno="3131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++n;</highlight></codeline>
<codeline lineno="3132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>word1<sp/>=<sp/>word1-&gt;next;</highlight></codeline>
<codeline lineno="3135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3136"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>n<sp/>&lt;=<sp/>3)<sp/>{</highlight></codeline>
<codeline lineno="3138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(baseIdx<sp/>=<sp/>pool-&gt;getBaseIdx(minBase<sp/>-<sp/>intraLineSpace);</highlight></codeline>
<codeline lineno="3139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>baseIdx<sp/>&lt;=<sp/>pool-&gt;getBaseIdx(maxBase<sp/>+<sp/>intraLineSpace);</highlight></codeline>
<codeline lineno="3140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++baseIdx)<sp/>{</highlight></codeline>
<codeline lineno="3141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>word0<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="3142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>word1<sp/>=<sp/>pool-&gt;getPool(baseIdx);</highlight></codeline>
<codeline lineno="3143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(word1)<sp/>{</highlight></codeline>
<codeline lineno="3144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(word1-&gt;base<sp/>&gt;=<sp/>minBase<sp/>-<sp/>intraLineSpace<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>word1-&gt;base<sp/>&lt;=<sp/>maxBase<sp/>+<sp/>intraLineSpace<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((rot<sp/>==<sp/>0<sp/>||<sp/>rot<sp/>==<sp/>2)</highlight></codeline>
<codeline lineno="3147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>(word1-&gt;xMax<sp/>&lt;=<sp/>blk-&gt;xMin<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>word1-&gt;xMax<sp/>&gt;<sp/>blk-&gt;xMin<sp/>-<sp/>colSpace2)</highlight></codeline>
<codeline lineno="3149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>(word1-&gt;yMax<sp/>&lt;=<sp/>blk-&gt;yMin<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>word1-&gt;yMax<sp/>&gt;<sp/>blk-&gt;yMin<sp/>-<sp/>colSpace2))<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fabs(word1-&gt;fontSize<sp/>-<sp/>fontSize)<sp/>&lt;</highlight></codeline>
<codeline lineno="3152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maxBlockFontSizeDelta3<sp/>*<sp/>fontSize)<sp/>{</highlight></codeline>
<codeline lineno="3153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>word2<sp/>=<sp/>word1;</highlight></codeline>
<codeline lineno="3154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(word0)<sp/>{</highlight></codeline>
<codeline lineno="3155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>word0-&gt;next<sp/>=<sp/>word1-&gt;next;</highlight></codeline>
<codeline lineno="3156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pool-&gt;setPool(baseIdx,<sp/>word1-&gt;next);</highlight></codeline>
<codeline lineno="3158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>word1<sp/>=<sp/>word1-&gt;next;</highlight></codeline>
<codeline lineno="3160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>word2-&gt;next<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="3161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blk-&gt;addWord(word2);</highlight></codeline>
<codeline lineno="3162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(word2-&gt;base<sp/>&lt;<sp/>minBase)<sp/>{</highlight></codeline>
<codeline lineno="3163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>minBase<sp/>=<sp/>word2-&gt;base;</highlight></codeline>
<codeline lineno="3164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(word2-&gt;base<sp/>&gt;<sp/>maxBase)<sp/>{</highlight></codeline>
<codeline lineno="3165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maxBase<sp/>=<sp/>word2-&gt;base;</highlight></codeline>
<codeline lineno="3166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>found<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="3168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>word0<sp/>=<sp/>word1;</highlight></codeline>
<codeline lineno="3171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>word1<sp/>=<sp/>word1-&gt;next;</highlight></codeline>
<codeline lineno="3172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3175"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3176"><highlight class="normal"></highlight></codeline>
<codeline lineno="3177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>scan<sp/>down<sp/>the<sp/>right<sp/>side<sp/>of<sp/>the<sp/>block,<sp/>looking<sp/>for<sp/>words</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>that<sp/>are<sp/>near<sp/>(but<sp/>not<sp/>overlapping)<sp/>the<sp/>block;<sp/>if<sp/>there<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>three<sp/>or<sp/>fewer,<sp/>add<sp/>them<sp/>to<sp/>the<sp/>block</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3180"><highlight class="normal"><sp/><sp/><sp/><sp/>n<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(baseIdx<sp/>=<sp/>pool-&gt;getBaseIdx(minBase<sp/>-<sp/>intraLineSpace);</highlight></codeline>
<codeline lineno="3182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>baseIdx<sp/>&lt;=<sp/>pool-&gt;getBaseIdx(maxBase<sp/>+<sp/>intraLineSpace);</highlight></codeline>
<codeline lineno="3183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++baseIdx)<sp/>{</highlight></codeline>
<codeline lineno="3184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>word1<sp/>=<sp/>pool-&gt;getPool(baseIdx);</highlight></codeline>
<codeline lineno="3185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(word1)<sp/>{</highlight></codeline>
<codeline lineno="3186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(word1-&gt;base<sp/>&gt;=<sp/>minBase<sp/>-<sp/>intraLineSpace<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>word1-&gt;base<sp/>&lt;=<sp/>maxBase<sp/>+<sp/>intraLineSpace<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((rot<sp/>==<sp/>0<sp/>||<sp/>rot<sp/>==<sp/>2)</highlight></codeline>
<codeline lineno="3189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>(word1-&gt;xMin<sp/>&gt;=<sp/>blk-&gt;xMax<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>word1-&gt;xMin<sp/>&lt;<sp/>blk-&gt;xMax<sp/>+<sp/>colSpace2)</highlight></codeline>
<codeline lineno="3191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>(word1-&gt;yMin<sp/>&gt;=<sp/>blk-&gt;yMax<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>word1-&gt;yMin<sp/>&lt;<sp/>blk-&gt;yMax<sp/>+<sp/>colSpace2))<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fabs(word1-&gt;fontSize<sp/>-<sp/>fontSize)<sp/>&lt;</highlight></codeline>
<codeline lineno="3194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maxBlockFontSizeDelta3<sp/>*<sp/>fontSize)<sp/>{</highlight></codeline>
<codeline lineno="3195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++n;</highlight></codeline>
<codeline lineno="3196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>word1<sp/>=<sp/>word1-&gt;next;</highlight></codeline>
<codeline lineno="3199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3200"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>n<sp/>&lt;=<sp/>3)<sp/>{</highlight></codeline>
<codeline lineno="3202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(baseIdx<sp/>=<sp/>pool-&gt;getBaseIdx(minBase<sp/>-<sp/>intraLineSpace);</highlight></codeline>
<codeline lineno="3203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>baseIdx<sp/>&lt;=<sp/>pool-&gt;getBaseIdx(maxBase<sp/>+<sp/>intraLineSpace);</highlight></codeline>
<codeline lineno="3204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++baseIdx)<sp/>{</highlight></codeline>
<codeline lineno="3205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>word0<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="3206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>word1<sp/>=<sp/>pool-&gt;getPool(baseIdx);</highlight></codeline>
<codeline lineno="3207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(word1)<sp/>{</highlight></codeline>
<codeline lineno="3208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(word1-&gt;base<sp/>&gt;=<sp/>minBase<sp/>-<sp/>intraLineSpace<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>word1-&gt;base<sp/>&lt;=<sp/>maxBase<sp/>+<sp/>intraLineSpace<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((rot<sp/>==<sp/>0<sp/>||<sp/>rot<sp/>==<sp/>2)</highlight></codeline>
<codeline lineno="3211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>(word1-&gt;xMin<sp/>&gt;=<sp/>blk-&gt;xMax<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>word1-&gt;xMin<sp/>&lt;<sp/>blk-&gt;xMax<sp/>+<sp/>colSpace2)</highlight></codeline>
<codeline lineno="3213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>(word1-&gt;yMin<sp/>&gt;=<sp/>blk-&gt;yMax<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>word1-&gt;yMin<sp/>&lt;<sp/>blk-&gt;yMax<sp/>+<sp/>colSpace2))<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fabs(word1-&gt;fontSize<sp/>-<sp/>fontSize)<sp/>&lt;</highlight></codeline>
<codeline lineno="3216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maxBlockFontSizeDelta3<sp/>*<sp/>fontSize)<sp/>{</highlight></codeline>
<codeline lineno="3217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>word2<sp/>=<sp/>word1;</highlight></codeline>
<codeline lineno="3218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(word0)<sp/>{</highlight></codeline>
<codeline lineno="3219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>word0-&gt;next<sp/>=<sp/>word1-&gt;next;</highlight></codeline>
<codeline lineno="3220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pool-&gt;setPool(baseIdx,<sp/>word1-&gt;next);</highlight></codeline>
<codeline lineno="3222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>word1<sp/>=<sp/>word1-&gt;next;</highlight></codeline>
<codeline lineno="3224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>word2-&gt;next<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="3225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blk-&gt;addWord(word2);</highlight></codeline>
<codeline lineno="3226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(word2-&gt;base<sp/>&lt;<sp/>minBase)<sp/>{</highlight></codeline>
<codeline lineno="3227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>minBase<sp/>=<sp/>word2-&gt;base;</highlight></codeline>
<codeline lineno="3228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(word2-&gt;base<sp/>&gt;<sp/>maxBase)<sp/>{</highlight></codeline>
<codeline lineno="3229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maxBase<sp/>=<sp/>word2-&gt;base;</highlight></codeline>
<codeline lineno="3230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>found<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="3232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>word0<sp/>=<sp/>word1;</highlight></codeline>
<codeline lineno="3235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>word1<sp/>=<sp/>word1-&gt;next;</highlight></codeline>
<codeline lineno="3236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3239"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3240"><highlight class="normal"></highlight></codeline>
<codeline lineno="3241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(found);</highlight></codeline>
<codeline lineno="3242"><highlight class="normal"></highlight></codeline>
<codeline lineno="3243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//~<sp/>need<sp/>to<sp/>compute<sp/>the<sp/>primary<sp/>writing<sp/>mode<sp/>(horiz/vert)<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//~<sp/>addition<sp/>to<sp/>primary<sp/>rotation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3245"><highlight class="normal"></highlight></codeline>
<codeline lineno="3246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>coalesce<sp/>the<sp/>block,<sp/>and<sp/>add<sp/>it<sp/>to<sp/>the<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>blk-&gt;coalesce(uMap,<sp/>fixedPitch);</highlight></codeline>
<codeline lineno="3248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lastBlk)<sp/>{</highlight></codeline>
<codeline lineno="3249"><highlight class="normal"><sp/><sp/><sp/><sp/>lastBlk-&gt;next<sp/>=<sp/>blk;</highlight></codeline>
<codeline lineno="3250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3251"><highlight class="normal"><sp/><sp/><sp/><sp/>blkList<sp/>=<sp/>blk;</highlight></codeline>
<codeline lineno="3252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lastBlk<sp/>=<sp/>blk;</highlight></codeline>
<codeline lineno="3254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>count[rot]<sp/>+=<sp/>blk-&gt;charCount;</highlight></codeline>
<codeline lineno="3255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++nBlocks;</highlight></codeline>
<codeline lineno="3256"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3257"><highlight class="normal"></highlight></codeline>
<codeline lineno="3258"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(count[rot]<sp/>&gt;<sp/>count[primaryRot])<sp/>{</highlight></codeline>
<codeline lineno="3259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>primaryRot<sp/>=<sp/>rot;</highlight></codeline>
<codeline lineno="3260"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3261"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3262"><highlight class="normal"></highlight></codeline>
<codeline lineno="3263"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>0<sp/>//<sp/>for<sp/>debugging</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3264"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;***<sp/>rotation<sp/>***\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3265"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(rot<sp/>=<sp/>0;<sp/>rot<sp/>&lt;<sp/>4;<sp/>++rot)<sp/>{</highlight></codeline>
<codeline lineno="3266"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>%d:<sp/>%6d\n&quot;</highlight><highlight class="normal">,<sp/>rot,<sp/>count[rot]);</highlight></codeline>
<codeline lineno="3267"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3268"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>primary<sp/>rot<sp/>=<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>primaryRot);</highlight></codeline>
<codeline lineno="3269"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3270"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3271"><highlight class="normal"></highlight></codeline>
<codeline lineno="3272"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>0<sp/>//<sp/>for<sp/>debugging</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3273"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;***<sp/>blocks<sp/>***\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3274"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(blk<sp/>=<sp/>blkList;<sp/>blk;<sp/>blk<sp/>=<sp/>blk-&gt;next)<sp/>{</highlight></codeline>
<codeline lineno="3275"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;block:<sp/>rot=%d<sp/>x=%.2f..%.2f<sp/>y=%.2f..%.2f\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blk-&gt;rot,<sp/>blk-&gt;xMin,<sp/>blk-&gt;xMax,<sp/>blk-&gt;yMin,<sp/>blk-&gt;yMax);</highlight></codeline>
<codeline lineno="3277"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(line<sp/>=<sp/>blk-&gt;lines;<sp/>line;<sp/>line<sp/>=<sp/>line-&gt;next)<sp/>{</highlight></codeline>
<codeline lineno="3278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>line:<sp/>x=%.2f..%.2f<sp/>y=%.2f..%.2f<sp/>base=%.2f\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>line-&gt;xMin,<sp/>line-&gt;xMax,<sp/>line-&gt;yMin,<sp/>line-&gt;yMax,<sp/>line-&gt;base);</highlight></codeline>
<codeline lineno="3280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(word0<sp/>=<sp/>line-&gt;words;<sp/>word0;<sp/>word0<sp/>=<sp/>word0-&gt;next)<sp/>{</highlight></codeline>
<codeline lineno="3281"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>word:<sp/>x=%.2f..%.2f<sp/>y=%.2f..%.2f<sp/>base=%.2f<sp/>fontSize=%.2f<sp/>space=%d:<sp/>&apos;&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>word0-&gt;xMin,<sp/>word0-&gt;xMax,<sp/>word0-&gt;yMin,<sp/>word0-&gt;yMax,</highlight></codeline>
<codeline lineno="3283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>word0-&gt;base,<sp/>word0-&gt;fontSize,<sp/>word0-&gt;spaceAfter);</highlight></codeline>
<codeline lineno="3284"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>word0-&gt;len;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="3285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fputc(word0-&gt;text[i]<sp/>&amp;<sp/>0xff,<sp/>stdout);</highlight></codeline>
<codeline lineno="3286"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3287"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;&apos;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3289"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3290"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3291"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3292"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3293"><highlight class="normal"></highlight></codeline>
<codeline lineno="3294"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>determine<sp/>the<sp/>primary<sp/>direction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3295"><highlight class="normal"><sp/><sp/>lrCount<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3296"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(blk<sp/>=<sp/>blkList;<sp/>blk;<sp/>blk<sp/>=<sp/>blk-&gt;next)<sp/>{</highlight></codeline>
<codeline lineno="3297"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(line<sp/>=<sp/>blk-&gt;lines;<sp/>line;<sp/>line<sp/>=<sp/>line-&gt;next)<sp/>{</highlight></codeline>
<codeline lineno="3298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(word0<sp/>=<sp/>line-&gt;words;<sp/>word0;<sp/>word0<sp/>=<sp/>word0-&gt;next)<sp/>{</highlight></codeline>
<codeline lineno="3299"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>word0-&gt;len;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="3300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unicodeTypeL(word0-&gt;text[i]))<sp/>{</highlight></codeline>
<codeline lineno="3301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++lrCount;</highlight></codeline>
<codeline lineno="3302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unicodeTypeR(word0-&gt;text[i]))<sp/>{</highlight></codeline>
<codeline lineno="3303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--lrCount;</highlight></codeline>
<codeline lineno="3304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3305"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3307"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3308"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3309"><highlight class="normal"><sp/><sp/>primaryLR<sp/>=<sp/>lrCount<sp/>&gt;=<sp/>0;</highlight></codeline>
<codeline lineno="3310"><highlight class="normal"></highlight></codeline>
<codeline lineno="3311"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>0<sp/>//<sp/>for<sp/>debugging</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3312"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;***<sp/>direction<sp/>***\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3313"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;lrCount<sp/>=<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>lrCount);</highlight></codeline>
<codeline lineno="3314"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;primaryLR<sp/>=<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>primaryLR);</highlight></codeline>
<codeline lineno="3315"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3316"><highlight class="normal"></highlight></codeline>
<codeline lineno="3317"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//-----<sp/>column<sp/>assignment</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3318"><highlight class="normal"></highlight></codeline>
<codeline lineno="3319"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>sort<sp/>blocks<sp/>into<sp/>xy<sp/>order<sp/>for<sp/>column<sp/>assignment</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3320"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(blocks)</highlight></codeline>
<codeline lineno="3321"><highlight class="normal"><sp/><sp/><sp/><sp/>gfree<sp/>(blocks);</highlight></codeline>
<codeline lineno="3322"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(physLayout<sp/>&amp;&amp;<sp/>fixedPitch)<sp/>{</highlight></codeline>
<codeline lineno="3323"><highlight class="normal"></highlight></codeline>
<codeline lineno="3324"><highlight class="normal"><sp/><sp/><sp/><sp/>blocks<sp/>=<sp/>(<ref refid="class_text_block" kindref="compound">TextBlock</ref><sp/>**)gmallocn(nBlocks,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="class_text_block" kindref="compound">TextBlock</ref><sp/>*));</highlight></codeline>
<codeline lineno="3325"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(blk<sp/>=<sp/>blkList,<sp/>i<sp/>=<sp/>0;<sp/>blk;<sp/>blk<sp/>=<sp/>blk-&gt;next,<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="3326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>blocks[i]<sp/>=<sp/>blk;</highlight></codeline>
<codeline lineno="3327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>col1<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>make<sp/>gcc<sp/>happy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(primaryRot)<sp/>{</highlight></codeline>
<codeline lineno="3329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:</highlight></codeline>
<codeline lineno="3330"><highlight class="normal"><sp/><sp/><sp/><sp/>col1<sp/>=<sp/>(int)(blk-&gt;xMin<sp/>/<sp/>fixedPitch<sp/>+<sp/>0.5);</highlight></codeline>
<codeline lineno="3331"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="3333"><highlight class="normal"><sp/><sp/><sp/><sp/>col1<sp/>=<sp/>(int)(blk-&gt;yMin<sp/>/<sp/>fixedPitch<sp/>+<sp/>0.5);</highlight></codeline>
<codeline lineno="3334"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:</highlight></codeline>
<codeline lineno="3336"><highlight class="normal"><sp/><sp/><sp/><sp/>col1<sp/>=<sp/>(int)((pageWidth<sp/>-<sp/>blk-&gt;xMax)<sp/>/<sp/>fixedPitch<sp/>+<sp/>0.5);</highlight></codeline>
<codeline lineno="3337"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>3:</highlight></codeline>
<codeline lineno="3339"><highlight class="normal"><sp/><sp/><sp/><sp/>col1<sp/>=<sp/>(int)((pageHeight<sp/>-<sp/>blk-&gt;yMax)<sp/>/<sp/>fixedPitch<sp/>+<sp/>0.5);</highlight></codeline>
<codeline lineno="3340"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>blk-&gt;col<sp/>=<sp/>col1;</highlight></codeline>
<codeline lineno="3343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(line<sp/>=<sp/>blk-&gt;lines;<sp/>line;<sp/>line<sp/>=<sp/>line-&gt;next)<sp/>{</highlight></codeline>
<codeline lineno="3344"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;=<sp/>line-&gt;len;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="3345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>line-&gt;col[j]<sp/>+=<sp/>col1;</highlight></codeline>
<codeline lineno="3346"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3348"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3349"><highlight class="normal"></highlight></codeline>
<codeline lineno="3350"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3351"><highlight class="normal"></highlight></codeline>
<codeline lineno="3352"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>sort<sp/>blocks<sp/>into<sp/>xy<sp/>order<sp/>for<sp/>column<sp/>assignment</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3353"><highlight class="normal"><sp/><sp/><sp/><sp/>blocks<sp/>=<sp/>(<ref refid="class_text_block" kindref="compound">TextBlock</ref><sp/>**)gmallocn(nBlocks,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="class_text_block" kindref="compound">TextBlock</ref><sp/>*));</highlight></codeline>
<codeline lineno="3354"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(blk<sp/>=<sp/>blkList,<sp/>i<sp/>=<sp/>0;<sp/>blk;<sp/>blk<sp/>=<sp/>blk-&gt;next,<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="3355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>blocks[i]<sp/>=<sp/>blk;</highlight></codeline>
<codeline lineno="3356"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3357"><highlight class="normal"><sp/><sp/><sp/><sp/>qsort(blocks,<sp/>nBlocks,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="class_text_block" kindref="compound">TextBlock</ref><sp/>*),<sp/>&amp;TextBlock::cmpXYPrimaryRot);</highlight></codeline>
<codeline lineno="3358"><highlight class="normal"></highlight></codeline>
<codeline lineno="3359"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>column<sp/>assignment</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3360"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nBlocks;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="3361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>blk0<sp/>=<sp/>blocks[i];</highlight></codeline>
<codeline lineno="3362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>col1<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>i;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="3364"><highlight class="normal"><sp/><sp/><sp/><sp/>blk1<sp/>=<sp/>blocks[j];</highlight></codeline>
<codeline lineno="3365"><highlight class="normal"><sp/><sp/><sp/><sp/>col2<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>make<sp/>gcc<sp/>happy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3366"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(primaryRot)<sp/>{</highlight></codeline>
<codeline lineno="3367"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:</highlight></codeline>
<codeline lineno="3368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(blk0-&gt;xMin<sp/>&gt;<sp/>blk1-&gt;xMax)<sp/>{</highlight></codeline>
<codeline lineno="3369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>col2<sp/>=<sp/>blk1-&gt;col<sp/>+<sp/>blk1-&gt;nColumns<sp/>+<sp/>3;</highlight></codeline>
<codeline lineno="3370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(blk1-&gt;xMax<sp/>==<sp/>blk1-&gt;xMin)<sp/>{</highlight></codeline>
<codeline lineno="3371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>col2<sp/>=<sp/>blk1-&gt;col;</highlight></codeline>
<codeline lineno="3372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>col2<sp/>=<sp/>blk1-&gt;col<sp/>+<sp/>(int)(((blk0-&gt;xMin<sp/>-<sp/>blk1-&gt;xMin)<sp/>/</highlight></codeline>
<codeline lineno="3374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(blk1-&gt;xMax<sp/>-<sp/>blk1-&gt;xMin))<sp/>*</highlight></codeline>
<codeline lineno="3375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blk1-&gt;nColumns);</highlight></codeline>
<codeline lineno="3376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3378"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="3379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(blk0-&gt;yMin<sp/>&gt;<sp/>blk1-&gt;yMax)<sp/>{</highlight></codeline>
<codeline lineno="3380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>col2<sp/>=<sp/>blk1-&gt;col<sp/>+<sp/>blk1-&gt;nColumns<sp/>+<sp/>3;</highlight></codeline>
<codeline lineno="3381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(blk1-&gt;yMax<sp/>==<sp/>blk1-&gt;yMin)<sp/>{</highlight></codeline>
<codeline lineno="3382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>col2<sp/>=<sp/>blk1-&gt;col;</highlight></codeline>
<codeline lineno="3383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>col2<sp/>=<sp/>blk1-&gt;col<sp/>+<sp/>(int)(((blk0-&gt;yMin<sp/>-<sp/>blk1-&gt;yMin)<sp/>/</highlight></codeline>
<codeline lineno="3385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(blk1-&gt;yMax<sp/>-<sp/>blk1-&gt;yMin))<sp/>*</highlight></codeline>
<codeline lineno="3386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blk1-&gt;nColumns);</highlight></codeline>
<codeline lineno="3387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3389"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:</highlight></codeline>
<codeline lineno="3390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(blk0-&gt;xMax<sp/>&lt;<sp/>blk1-&gt;xMin)<sp/>{</highlight></codeline>
<codeline lineno="3391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>col2<sp/>=<sp/>blk1-&gt;col<sp/>+<sp/>blk1-&gt;nColumns<sp/>+<sp/>3;</highlight></codeline>
<codeline lineno="3392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(blk1-&gt;xMin<sp/>==<sp/>blk1-&gt;xMax)<sp/>{</highlight></codeline>
<codeline lineno="3393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>col2<sp/>=<sp/>blk1-&gt;col;</highlight></codeline>
<codeline lineno="3394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>col2<sp/>=<sp/>blk1-&gt;col<sp/>+<sp/>(int)(((blk0-&gt;xMax<sp/>-<sp/>blk1-&gt;xMax)<sp/>/</highlight></codeline>
<codeline lineno="3396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(blk1-&gt;xMin<sp/>-<sp/>blk1-&gt;xMax))<sp/>*</highlight></codeline>
<codeline lineno="3397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blk1-&gt;nColumns);</highlight></codeline>
<codeline lineno="3398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3400"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>3:</highlight></codeline>
<codeline lineno="3401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(blk0-&gt;yMax<sp/>&lt;<sp/>blk1-&gt;yMin)<sp/>{</highlight></codeline>
<codeline lineno="3402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>col2<sp/>=<sp/>blk1-&gt;col<sp/>+<sp/>blk1-&gt;nColumns<sp/>+<sp/>3;</highlight></codeline>
<codeline lineno="3403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(blk1-&gt;yMin<sp/>==<sp/>blk1-&gt;yMax)<sp/>{</highlight></codeline>
<codeline lineno="3404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>col2<sp/>=<sp/>blk1-&gt;col;</highlight></codeline>
<codeline lineno="3405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>col2<sp/>=<sp/>blk1-&gt;col<sp/>+<sp/>(int)(((blk0-&gt;yMax<sp/>-<sp/>blk1-&gt;yMax)<sp/>/</highlight></codeline>
<codeline lineno="3407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(blk1-&gt;yMin<sp/>-<sp/>blk1-&gt;yMax))<sp/>*</highlight></codeline>
<codeline lineno="3408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blk1-&gt;nColumns);</highlight></codeline>
<codeline lineno="3409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3411"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3412"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(col2<sp/>&gt;<sp/>col1)<sp/>{</highlight></codeline>
<codeline lineno="3413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>col1<sp/>=<sp/>col2;</highlight></codeline>
<codeline lineno="3414"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>blk0-&gt;col<sp/>=<sp/>col1;</highlight></codeline>
<codeline lineno="3417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(line<sp/>=<sp/>blk0-&gt;lines;<sp/>line;<sp/>line<sp/>=<sp/>line-&gt;next)<sp/>{</highlight></codeline>
<codeline lineno="3418"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;=<sp/>line-&gt;len;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="3419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>line-&gt;col[j]<sp/>+=<sp/>col1;</highlight></codeline>
<codeline lineno="3420"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3422"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3423"><highlight class="normal"></highlight></codeline>
<codeline lineno="3424"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3425"><highlight class="normal"></highlight></codeline>
<codeline lineno="3426"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>0<sp/>//<sp/>for<sp/>debugging</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3427"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;***<sp/>blocks,<sp/>after<sp/>column<sp/>assignment<sp/>***\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3428"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(blk<sp/>=<sp/>blkList;<sp/>blk;<sp/>blk<sp/>=<sp/>blk-&gt;next)<sp/>{</highlight></codeline>
<codeline lineno="3429"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;block:<sp/>rot=%d<sp/>x=%.2f..%.2f<sp/>y=%.2f..%.2f<sp/>col=%d<sp/>nCols=%d\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blk-&gt;rot,<sp/>blk-&gt;xMin,<sp/>blk-&gt;xMax,<sp/>blk-&gt;yMin,<sp/>blk-&gt;yMax,<sp/>blk-&gt;col,</highlight></codeline>
<codeline lineno="3431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blk-&gt;nColumns);</highlight></codeline>
<codeline lineno="3432"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(line<sp/>=<sp/>blk-&gt;lines;<sp/>line;<sp/>line<sp/>=<sp/>line-&gt;next)<sp/>{</highlight></codeline>
<codeline lineno="3433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>line:<sp/>col[0]=%d\n&quot;</highlight><highlight class="normal">,<sp/>line-&gt;col[0]);</highlight></codeline>
<codeline lineno="3434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(word0<sp/>=<sp/>line-&gt;words;<sp/>word0;<sp/>word0<sp/>=<sp/>word0-&gt;next)<sp/>{</highlight></codeline>
<codeline lineno="3435"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>word:<sp/>x=%.2f..%.2f<sp/>y=%.2f..%.2f<sp/>base=%.2f<sp/>fontSize=%.2f<sp/>space=%d:<sp/>&apos;&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>word0-&gt;xMin,<sp/>word0-&gt;xMax,<sp/>word0-&gt;yMin,<sp/>word0-&gt;yMax,</highlight></codeline>
<codeline lineno="3437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>word0-&gt;base,<sp/>word0-&gt;fontSize,<sp/>word0-&gt;spaceAfter);</highlight></codeline>
<codeline lineno="3438"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>word0-&gt;len;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="3439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fputc(word0-&gt;text[i]<sp/>&amp;<sp/>0xff,<sp/>stdout);</highlight></codeline>
<codeline lineno="3440"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3441"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;&apos;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3443"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3444"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3445"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3446"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3447"><highlight class="normal"></highlight></codeline>
<codeline lineno="3448"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//-----<sp/>reading<sp/>order<sp/>sort</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3449"><highlight class="normal"></highlight></codeline>
<codeline lineno="3450"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>compute<sp/>space<sp/>on<sp/>left<sp/>and<sp/>right<sp/>sides<sp/>of<sp/>each<sp/>block</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3451"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nBlocks;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="3452"><highlight class="normal"><sp/><sp/><sp/><sp/>blk0<sp/>=<sp/>blocks[i];</highlight></codeline>
<codeline lineno="3453"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>nBlocks;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="3454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>blk1<sp/>=<sp/>blocks[j];</highlight></codeline>
<codeline lineno="3455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(blk1<sp/>!=<sp/>blk0)<sp/>{</highlight></codeline>
<codeline lineno="3456"><highlight class="normal"><sp/><sp/><sp/><sp/>blk0-&gt;updatePriMinMax(blk1);</highlight></codeline>
<codeline lineno="3457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3458"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3459"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3460"><highlight class="normal"></highlight></codeline>
<codeline lineno="3461"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>0<sp/>//<sp/>for<sp/>debugging</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3462"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;PAGE\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3463"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3464"><highlight class="normal"></highlight></codeline>
<codeline lineno="3465"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sortPos<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3466"><highlight class="normal"><sp/><sp/>GBool<sp/>*visited<sp/>=<sp/>(GBool<sp/>*)gmallocn(nBlocks,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(GBool));</highlight></codeline>
<codeline lineno="3467"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nBlocks;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="3468"><highlight class="normal"><sp/><sp/><sp/><sp/>visited[i]<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="3469"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3470"><highlight class="normal"></highlight></codeline>
<codeline lineno="3471"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>bxMin0,<sp/>byMin0,<sp/>bxMin1,<sp/>byMin1;</highlight></codeline>
<codeline lineno="3472"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numTables<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3473"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tableId<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="3474"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>correspondenceX,<sp/>correspondenceY;</highlight></codeline>
<codeline lineno="3475"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>xCentre1,<sp/>yCentre1,<sp/>xCentre2,<sp/>yCentre2;</highlight></codeline>
<codeline lineno="3476"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>xCentre3,<sp/>yCentre3,<sp/>xCentre4,<sp/>yCentre4;</highlight></codeline>
<codeline lineno="3477"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>deltaX,<sp/>deltaY;</highlight></codeline>
<codeline lineno="3478"><highlight class="normal"><sp/><sp/><ref refid="class_text_block" kindref="compound">TextBlock</ref><sp/>*fblk2<sp/>=<sp/>NULL,<sp/>*fblk3<sp/>=<sp/>NULL,<sp/>*fblk4<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="3479"><highlight class="normal"></highlight></codeline>
<codeline lineno="3480"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(blk1<sp/>=<sp/>blkList;<sp/>blk1;<sp/>blk1<sp/>=<sp/>blk1-&gt;next)<sp/>{</highlight></codeline>
<codeline lineno="3481"><highlight class="normal"><sp/><sp/><sp/><sp/>blk1-&gt;ExMin<sp/>=<sp/>blk1-&gt;xMin;</highlight></codeline>
<codeline lineno="3482"><highlight class="normal"><sp/><sp/><sp/><sp/>blk1-&gt;ExMax<sp/>=<sp/>blk1-&gt;xMax;</highlight></codeline>
<codeline lineno="3483"><highlight class="normal"><sp/><sp/><sp/><sp/>blk1-&gt;EyMin<sp/>=<sp/>blk1-&gt;yMin;</highlight></codeline>
<codeline lineno="3484"><highlight class="normal"><sp/><sp/><sp/><sp/>blk1-&gt;EyMax<sp/>=<sp/>blk1-&gt;yMax;</highlight></codeline>
<codeline lineno="3485"><highlight class="normal"></highlight></codeline>
<codeline lineno="3486"><highlight class="normal"><sp/><sp/><sp/><sp/>bxMin0<sp/>=<sp/>DBL_MAX;</highlight></codeline>
<codeline lineno="3487"><highlight class="normal"><sp/><sp/><sp/><sp/>byMin0<sp/>=<sp/>DBL_MAX;</highlight></codeline>
<codeline lineno="3488"><highlight class="normal"><sp/><sp/><sp/><sp/>bxMin1<sp/>=<sp/>DBL_MAX;</highlight></codeline>
<codeline lineno="3489"><highlight class="normal"><sp/><sp/><sp/><sp/>byMin1<sp/>=<sp/>DBL_MAX;</highlight></codeline>
<codeline lineno="3490"><highlight class="normal"></highlight></codeline>
<codeline lineno="3491"><highlight class="normal"><sp/><sp/><sp/><sp/>fblk2<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="3492"><highlight class="normal"><sp/><sp/><sp/><sp/>fblk3<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="3493"><highlight class="normal"><sp/><sp/><sp/><sp/>fblk4<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="3494"><highlight class="normal"></highlight></codeline>
<codeline lineno="3495"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/><sp/>find<sp/>fblk2,<sp/>fblk3<sp/>and<sp/>fblk4<sp/>so<sp/>that</highlight></codeline>
<codeline lineno="3496"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/>fblk2<sp/>is<sp/>on<sp/>the<sp/>right<sp/>of<sp/>blk1<sp/>and<sp/>overlap<sp/>with<sp/>blk1<sp/>in<sp/>y<sp/>axis</highlight></codeline>
<codeline lineno="3497"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/>fblk3<sp/>is<sp/>under<sp/>blk1<sp/>and<sp/>overlap<sp/>with<sp/>blk1<sp/>in<sp/>x<sp/>axis</highlight></codeline>
<codeline lineno="3498"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/>fblk4<sp/>is<sp/>under<sp/>blk1<sp/>and<sp/>on<sp/>the<sp/>right<sp/>of<sp/>blk1</highlight></codeline>
<codeline lineno="3499"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/>and<sp/>they<sp/>are<sp/>closest<sp/>to<sp/>blk1</highlight></codeline>
<codeline lineno="3500"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3501"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(blk2<sp/>=<sp/>blkList;<sp/>blk2;<sp/>blk2<sp/>=<sp/>blk2-&gt;next)<sp/>{</highlight></codeline>
<codeline lineno="3502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(blk2<sp/>!=<sp/>blk1)<sp/>{</highlight></codeline>
<codeline lineno="3503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(blk2-&gt;yMin<sp/>&lt;=<sp/>blk1-&gt;yMax<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blk2-&gt;yMax<sp/>&gt;=<sp/>blk1-&gt;yMin<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blk2-&gt;xMin<sp/>&gt;<sp/>blk1-&gt;xMax<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blk2-&gt;xMin<sp/>&lt;<sp/>bxMin0)<sp/>{</highlight></codeline>
<codeline lineno="3507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bxMin0<sp/>=<sp/>blk2-&gt;xMin;</highlight></codeline>
<codeline lineno="3508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fblk2<sp/>=<sp/>blk2;</highlight></codeline>
<codeline lineno="3509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(blk2-&gt;xMin<sp/>&lt;=<sp/>blk1-&gt;xMax<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blk2-&gt;xMax<sp/>&gt;=<sp/>blk1-&gt;xMin<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blk2-&gt;yMin<sp/>&gt;<sp/>blk1-&gt;yMax<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blk2-&gt;yMin<sp/>&lt;<sp/>byMin0)<sp/>{</highlight></codeline>
<codeline lineno="3513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>byMin0<sp/>=<sp/>blk2-&gt;yMin;</highlight></codeline>
<codeline lineno="3514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fblk3<sp/>=<sp/>blk2;</highlight></codeline>
<codeline lineno="3515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(blk2-&gt;xMin<sp/>&gt;<sp/>blk1-&gt;xMax<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blk2-&gt;xMin<sp/>&lt;<sp/>bxMin1<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blk2-&gt;yMin<sp/>&gt;<sp/>blk1-&gt;yMax<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blk2-&gt;yMin<sp/>&lt;<sp/>byMin1)<sp/>{</highlight></codeline>
<codeline lineno="3519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bxMin1<sp/>=<sp/>blk2-&gt;xMin;</highlight></codeline>
<codeline lineno="3520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>byMin1<sp/>=<sp/>blk2-&gt;yMin;</highlight></codeline>
<codeline lineno="3521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fblk4<sp/>=<sp/>blk2;</highlight></codeline>
<codeline lineno="3522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3524"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3525"><highlight class="normal"></highlight></codeline>
<codeline lineno="3526"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/><sp/>fblk4<sp/>can<sp/>not<sp/>overlap<sp/>with<sp/>fblk3<sp/>in<sp/>x<sp/>and<sp/>with<sp/>fblk2<sp/>in<sp/>y</highlight></codeline>
<codeline lineno="3527"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/>fblk2<sp/>can<sp/>not<sp/>overlap<sp/>with<sp/>fblk3<sp/>in<sp/>x<sp/>and<sp/>y</highlight></codeline>
<codeline lineno="3528"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/>fblk4<sp/>has<sp/>to<sp/>overlap<sp/>with<sp/>fblk3<sp/>in<sp/>y<sp/>and<sp/>with<sp/>fblk2<sp/>in<sp/>x</highlight></codeline>
<codeline lineno="3529"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3530"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fblk2<sp/>!=<sp/>NULL<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fblk3<sp/>!=<sp/>NULL<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fblk4<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="3533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(((fblk3-&gt;xMin<sp/>&lt;=<sp/>fblk4-&gt;xMax<sp/>&amp;&amp;<sp/>fblk3-&gt;xMax<sp/>&gt;=<sp/>fblk4-&gt;xMin)<sp/>||</highlight></codeline>
<codeline lineno="3534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(fblk2-&gt;yMin<sp/>&lt;=<sp/>fblk4-&gt;yMax<sp/>&amp;&amp;<sp/>fblk2-&gt;yMax<sp/>&gt;=<sp/>fblk4-&gt;yMin)<sp/>||</highlight></codeline>
<codeline lineno="3535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(fblk2-&gt;xMin<sp/>&lt;=<sp/>fblk3-&gt;xMax<sp/>&amp;&amp;<sp/>fblk2-&gt;xMax<sp/>&gt;=<sp/>fblk3-&gt;xMin)<sp/>||</highlight></codeline>
<codeline lineno="3536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(fblk2-&gt;yMin<sp/>&lt;=<sp/>fblk3-&gt;yMax<sp/>&amp;&amp;<sp/>fblk2-&gt;yMax<sp/>&gt;=<sp/>fblk3-&gt;yMin))<sp/>||</highlight></codeline>
<codeline lineno="3537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!(fblk4-&gt;xMin<sp/>&lt;=<sp/>fblk2-&gt;xMax<sp/>&amp;&amp;<sp/>fblk4-&gt;xMax<sp/>&gt;=<sp/>fblk2-&gt;xMin<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fblk4-&gt;yMin<sp/>&lt;=<sp/>fblk3-&gt;yMax<sp/>&amp;&amp;<sp/>fblk4-&gt;yMax<sp/>&gt;=<sp/>fblk3-&gt;yMin))<sp/>{</highlight></codeline>
<codeline lineno="3539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fblk2<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="3540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fblk3<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="3541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fblk4<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="3542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3543"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3544"><highlight class="normal"></highlight></codeline>
<codeline lineno="3545"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>we<sp/>found<sp/>any<sp/>then<sp/>look<sp/>whether<sp/>they<sp/>form<sp/>a<sp/>table</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3546"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fblk2<sp/>!=<sp/>NULL<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fblk3<sp/>!=<sp/>NULL<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fblk4<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="3549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tableId<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="3550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>correspondenceX<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>correspondenceY<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>deltaX<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="3553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>deltaY<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="3554"><highlight class="normal"></highlight></codeline>
<codeline lineno="3555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(blk1-&gt;lines<sp/>&amp;&amp;<sp/>blk1-&gt;lines-&gt;words)</highlight></codeline>
<codeline lineno="3556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>deltaX<sp/>=<sp/>blk1-&gt;lines-&gt;words-&gt;getFontSize();</highlight></codeline>
<codeline lineno="3557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fblk2-&gt;lines<sp/>&amp;&amp;<sp/>fblk2-&gt;lines-&gt;words)</highlight></codeline>
<codeline lineno="3558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>deltaX<sp/>=<sp/>deltaX<sp/>&lt;<sp/>fblk2-&gt;lines-&gt;words-&gt;getFontSize()<sp/>?</highlight></codeline>
<codeline lineno="3559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>deltaX<sp/>:<sp/>fblk2-&gt;lines-&gt;words-&gt;getFontSize();</highlight></codeline>
<codeline lineno="3560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fblk3-&gt;lines<sp/>&amp;&amp;<sp/>fblk3-&gt;lines-&gt;words)</highlight></codeline>
<codeline lineno="3561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>deltaX<sp/>=<sp/>deltaX<sp/>&lt;<sp/>fblk3-&gt;lines-&gt;words-&gt;getFontSize()<sp/>?</highlight></codeline>
<codeline lineno="3562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>deltaX<sp/>:<sp/>fblk3-&gt;lines-&gt;words-&gt;getFontSize();</highlight></codeline>
<codeline lineno="3563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fblk4-&gt;lines<sp/>&amp;&amp;<sp/>fblk4-&gt;lines-&gt;words)</highlight></codeline>
<codeline lineno="3564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>deltaX<sp/>=<sp/>deltaX<sp/>&lt;<sp/>fblk4-&gt;lines-&gt;words-&gt;getFontSize()<sp/>?</highlight></codeline>
<codeline lineno="3565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>deltaX<sp/>:<sp/>fblk4-&gt;lines-&gt;words-&gt;getFontSize();</highlight></codeline>
<codeline lineno="3566"><highlight class="normal"></highlight></codeline>
<codeline lineno="3567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>deltaY<sp/>=<sp/>deltaX;</highlight></codeline>
<codeline lineno="3568"><highlight class="normal"></highlight></codeline>
<codeline lineno="3569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>deltaX<sp/>*=<sp/>minColSpacing1;</highlight></codeline>
<codeline lineno="3570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>deltaY<sp/>*=<sp/>maxIntraLineDelta;</highlight></codeline>
<codeline lineno="3571"><highlight class="normal"></highlight></codeline>
<codeline lineno="3572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xCentre1<sp/>=<sp/>(blk1-&gt;xMax<sp/>+<sp/>blk1-&gt;xMin)<sp/>/<sp/>2.0;</highlight></codeline>
<codeline lineno="3573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>yCentre1<sp/>=<sp/>(blk1-&gt;yMax<sp/>+<sp/>blk1-&gt;yMin)<sp/>/<sp/>2.0;</highlight></codeline>
<codeline lineno="3574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xCentre2<sp/>=<sp/>(fblk2-&gt;xMax<sp/>+<sp/>fblk2-&gt;xMin)<sp/>/<sp/>2.0;</highlight></codeline>
<codeline lineno="3575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>yCentre2<sp/>=<sp/>(fblk2-&gt;yMax<sp/>+<sp/>fblk2-&gt;yMin)<sp/>/<sp/>2.0;</highlight></codeline>
<codeline lineno="3576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xCentre3<sp/>=<sp/>(fblk3-&gt;xMax<sp/>+<sp/>fblk3-&gt;xMin)<sp/>/<sp/>2.0;</highlight></codeline>
<codeline lineno="3577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>yCentre3<sp/>=<sp/>(fblk3-&gt;yMax<sp/>+<sp/>fblk3-&gt;yMin)<sp/>/<sp/>2.0;</highlight></codeline>
<codeline lineno="3578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xCentre4<sp/>=<sp/>(fblk4-&gt;xMax<sp/>+<sp/>fblk4-&gt;xMin)<sp/>/<sp/>2.0;</highlight></codeline>
<codeline lineno="3579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>yCentre4<sp/>=<sp/>(fblk4-&gt;yMax<sp/>+<sp/>fblk4-&gt;yMin)<sp/>/<sp/>2.0;</highlight></codeline>
<codeline lineno="3580"><highlight class="normal"></highlight></codeline>
<codeline lineno="3581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>are<sp/>blocks<sp/>centrally<sp/>aligned<sp/>in<sp/>x<sp/>?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabs<sp/>(xCentre1<sp/>-<sp/>xCentre3)<sp/>&lt;=<sp/>deltaX<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fabs<sp/>(xCentre2<sp/>-<sp/>xCentre4)<sp/>&lt;=<sp/>deltaX)</highlight></codeline>
<codeline lineno="3584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>correspondenceX++;</highlight></codeline>
<codeline lineno="3585"><highlight class="normal"></highlight></codeline>
<codeline lineno="3586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>are<sp/>blocks<sp/>centrally<sp/>aligned<sp/>in<sp/>y<sp/>?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabs<sp/>(yCentre1<sp/>-<sp/>yCentre2)<sp/>&lt;=<sp/>deltaY<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fabs<sp/>(yCentre3<sp/>-<sp/>yCentre4)<sp/>&lt;=<sp/>deltaY)</highlight></codeline>
<codeline lineno="3589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>correspondenceY++;</highlight></codeline>
<codeline lineno="3590"><highlight class="normal"></highlight></codeline>
<codeline lineno="3591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>are<sp/>blocks<sp/>aligned<sp/>to<sp/>the<sp/>left<sp/>?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabs<sp/>(blk1-&gt;xMin<sp/>-<sp/>fblk3-&gt;xMin)<sp/>&lt;=<sp/>deltaX<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fabs<sp/>(fblk2-&gt;xMin<sp/>-<sp/>fblk4-&gt;xMin)<sp/>&lt;=<sp/>deltaX)</highlight></codeline>
<codeline lineno="3594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>correspondenceX++;</highlight></codeline>
<codeline lineno="3595"><highlight class="normal"></highlight></codeline>
<codeline lineno="3596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>are<sp/>blocks<sp/>aligned<sp/>to<sp/>the<sp/>right<sp/>?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabs<sp/>(blk1-&gt;xMax<sp/>-<sp/>fblk3-&gt;xMax)<sp/>&lt;=<sp/>deltaX<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fabs<sp/>(fblk2-&gt;xMax<sp/>-<sp/>fblk4-&gt;xMax)<sp/>&lt;=<sp/>deltaX)</highlight></codeline>
<codeline lineno="3599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>correspondenceX++;</highlight></codeline>
<codeline lineno="3600"><highlight class="normal"></highlight></codeline>
<codeline lineno="3601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>are<sp/>blocks<sp/>aligned<sp/>to<sp/>the<sp/>top<sp/>?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabs<sp/>(blk1-&gt;yMin<sp/>-<sp/>fblk2-&gt;yMin)<sp/>&lt;=<sp/>deltaY<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fabs<sp/>(fblk3-&gt;yMin<sp/>-<sp/>fblk4-&gt;yMin)<sp/>&lt;=<sp/>deltaY)</highlight></codeline>
<codeline lineno="3604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>correspondenceY++;</highlight></codeline>
<codeline lineno="3605"><highlight class="normal"></highlight></codeline>
<codeline lineno="3606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>are<sp/>blocks<sp/>aligned<sp/>to<sp/>the<sp/>bottom<sp/>?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabs<sp/>(blk1-&gt;yMax<sp/>-<sp/>fblk2-&gt;yMax)<sp/>&lt;=<sp/>deltaY<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fabs<sp/>(fblk3-&gt;yMax<sp/>-<sp/>fblk4-&gt;yMax)<sp/>&lt;=<sp/>deltaY)</highlight></codeline>
<codeline lineno="3609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>correspondenceY++;</highlight></codeline>
<codeline lineno="3610"><highlight class="normal"></highlight></codeline>
<codeline lineno="3611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>are<sp/>blocks<sp/>aligned<sp/>in<sp/>x<sp/>and<sp/>y<sp/>?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(correspondenceX<sp/>&gt;<sp/>0<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>correspondenceY<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="3614"><highlight class="normal"></highlight></codeline>
<codeline lineno="3615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>find<sp/>maximal<sp/>tableId</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tableId<sp/>=<sp/>tableId<sp/>&lt;<sp/>fblk4-&gt;tableId<sp/>?<sp/>fblk4-&gt;tableId<sp/>:<sp/>tableId;</highlight></codeline>
<codeline lineno="3617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tableId<sp/>=<sp/>tableId<sp/>&lt;<sp/>fblk3-&gt;tableId<sp/>?<sp/>fblk3-&gt;tableId<sp/>:<sp/>tableId;</highlight></codeline>
<codeline lineno="3618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tableId<sp/>=<sp/>tableId<sp/>&lt;<sp/>fblk2-&gt;tableId<sp/>?<sp/>fblk2-&gt;tableId<sp/>:<sp/>tableId;</highlight></codeline>
<codeline lineno="3619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tableId<sp/>=<sp/>tableId<sp/>&lt;<sp/>blk1-&gt;tableId<sp/>?<sp/>blk1-&gt;tableId<sp/>:<sp/>tableId;</highlight></codeline>
<codeline lineno="3620"><highlight class="normal"></highlight></codeline>
<codeline lineno="3621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>the<sp/>tableId<sp/>is<sp/>-1,<sp/>then<sp/>we<sp/>found<sp/>new<sp/>table</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tableId<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="3623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tableId<sp/>=<sp/>numTables;</highlight></codeline>
<codeline lineno="3624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>numTables++;</highlight></codeline>
<codeline lineno="3625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3626"><highlight class="normal"></highlight></codeline>
<codeline lineno="3627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blk1-&gt;tableId<sp/>=<sp/>tableId;</highlight></codeline>
<codeline lineno="3628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fblk2-&gt;tableId<sp/>=<sp/>tableId;</highlight></codeline>
<codeline lineno="3629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fblk3-&gt;tableId<sp/>=<sp/>tableId;</highlight></codeline>
<codeline lineno="3630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fblk4-&gt;tableId<sp/>=<sp/>tableId;</highlight></codeline>
<codeline lineno="3631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3632"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3633"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3634"><highlight class="normal"></highlight></codeline>
<codeline lineno="3635"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/><sp/>set<sp/>extended<sp/>bounding<sp/>boxes<sp/>of<sp/>all<sp/>table<sp/>entries</highlight></codeline>
<codeline lineno="3636"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/>so<sp/>that<sp/>they<sp/>contain<sp/>whole<sp/>table</highlight></codeline>
<codeline lineno="3637"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/>(we<sp/>need<sp/>to<sp/>process<sp/>whole<sp/>table<sp/>size<sp/>when<sp/>comparing<sp/>it</highlight></codeline>
<codeline lineno="3638"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/><sp/>with<sp/>regular<sp/>text<sp/>blocks)</highlight></codeline>
<codeline lineno="3639"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3640"><highlight class="normal"><sp/><sp/><ref refid="class_p_d_f_rectangle" kindref="compound">PDFRectangle</ref><sp/>*envelopes<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_p_d_f_rectangle" kindref="compound">PDFRectangle</ref><sp/>[numTables];</highlight></codeline>
<codeline lineno="3641"><highlight class="normal"><sp/><sp/><ref refid="class_text_block" kindref="compound">TextBlock</ref><sp/>**ending_blocks<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_text_block" kindref="compound">TextBlock</ref>*<sp/>[numTables];</highlight></codeline>
<codeline lineno="3642"><highlight class="normal"></highlight></codeline>
<codeline lineno="3643"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>numTables;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="3644"><highlight class="normal"><sp/><sp/><sp/><sp/>envelopes[i].x1<sp/>=<sp/>DBL_MAX;</highlight></codeline>
<codeline lineno="3645"><highlight class="normal"><sp/><sp/><sp/><sp/>envelopes[i].x2<sp/>=<sp/>DBL_MIN;</highlight></codeline>
<codeline lineno="3646"><highlight class="normal"><sp/><sp/><sp/><sp/>envelopes[i].y1<sp/>=<sp/>DBL_MAX;</highlight></codeline>
<codeline lineno="3647"><highlight class="normal"><sp/><sp/><sp/><sp/>envelopes[i].y2<sp/>=<sp/>DBL_MIN;</highlight></codeline>
<codeline lineno="3648"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3649"><highlight class="normal"></highlight></codeline>
<codeline lineno="3650"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(blk1<sp/>=<sp/>blkList;<sp/>blk1;<sp/>blk1<sp/>=<sp/>blk1-&gt;next)<sp/>{</highlight></codeline>
<codeline lineno="3651"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(blk1-&gt;tableId<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="3652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(blk1-&gt;ExMin<sp/>&lt;<sp/>envelopes[blk1-&gt;tableId].x1)<sp/>{</highlight></codeline>
<codeline lineno="3653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>envelopes[blk1-&gt;tableId].x1<sp/>=<sp/>blk1-&gt;ExMin;</highlight></codeline>
<codeline lineno="3654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!blk1-&gt;page-&gt;primaryLR)</highlight></codeline>
<codeline lineno="3655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ending_blocks[blk1-&gt;tableId]<sp/>=<sp/>blk1;</highlight></codeline>
<codeline lineno="3656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3657"><highlight class="normal"></highlight></codeline>
<codeline lineno="3658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(blk1-&gt;ExMax<sp/>&gt;<sp/>envelopes[blk1-&gt;tableId].x2)<sp/>{</highlight></codeline>
<codeline lineno="3659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>envelopes[blk1-&gt;tableId].x2<sp/>=<sp/>blk1-&gt;ExMax;</highlight></codeline>
<codeline lineno="3660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(blk1-&gt;page-&gt;primaryLR)</highlight></codeline>
<codeline lineno="3661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ending_blocks[blk1-&gt;tableId]<sp/>=<sp/>blk1;</highlight></codeline>
<codeline lineno="3662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3663"><highlight class="normal"></highlight></codeline>
<codeline lineno="3664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>envelopes[blk1-&gt;tableId].y1<sp/>=<sp/>blk1-&gt;EyMin<sp/>&lt;<sp/>envelopes[blk1-&gt;tableId].y1<sp/>?</highlight></codeline>
<codeline lineno="3665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blk1-&gt;EyMin<sp/>:<sp/>envelopes[blk1-&gt;tableId].y1;</highlight></codeline>
<codeline lineno="3666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>envelopes[blk1-&gt;tableId].y2<sp/>=<sp/>blk1-&gt;EyMax<sp/>&gt;<sp/>envelopes[blk1-&gt;tableId].y2<sp/>?</highlight></codeline>
<codeline lineno="3667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blk1-&gt;EyMax<sp/>:<sp/>envelopes[blk1-&gt;tableId].y2;</highlight></codeline>
<codeline lineno="3668"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3669"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3670"><highlight class="normal"></highlight></codeline>
<codeline lineno="3671"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(blk1<sp/>=<sp/>blkList;<sp/>blk1;<sp/>blk1<sp/>=<sp/>blk1-&gt;next)<sp/>{</highlight></codeline>
<codeline lineno="3672"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(blk1-&gt;tableId<sp/>&gt;=<sp/>0<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blk1-&gt;xMin<sp/>&lt;=<sp/>ending_blocks[blk1-&gt;tableId]-&gt;xMax<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blk1-&gt;xMax<sp/>&gt;=<sp/>ending_blocks[blk1-&gt;tableId]-&gt;xMin)<sp/>{</highlight></codeline>
<codeline lineno="3675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>blk1-&gt;tableEnd<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="3676"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3677"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3678"><highlight class="normal"></highlight></codeline>
<codeline lineno="3679"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(blk1<sp/>=<sp/>blkList;<sp/>blk1;<sp/>blk1<sp/>=<sp/>blk1-&gt;next)<sp/>{</highlight></codeline>
<codeline lineno="3680"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(blk1-&gt;tableId<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="3681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>blk1-&gt;ExMin<sp/>=<sp/>envelopes[blk1-&gt;tableId].x1;</highlight></codeline>
<codeline lineno="3682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>blk1-&gt;ExMax<sp/>=<sp/>envelopes[blk1-&gt;tableId].x2;</highlight></codeline>
<codeline lineno="3683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>blk1-&gt;EyMin<sp/>=<sp/>envelopes[blk1-&gt;tableId].y1;</highlight></codeline>
<codeline lineno="3684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>blk1-&gt;EyMax<sp/>=<sp/>envelopes[blk1-&gt;tableId].y2;</highlight></codeline>
<codeline lineno="3685"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3686"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3687"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>envelopes;</highlight></codeline>
<codeline lineno="3688"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>ending_blocks;</highlight></codeline>
<codeline lineno="3689"><highlight class="normal"></highlight></codeline>
<codeline lineno="3690"><highlight class="normal"></highlight></codeline>
<codeline lineno="3691"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/><sp/>set<sp/>extended<sp/>bounding<sp/>boxes<sp/>of<sp/>all<sp/>other<sp/>blocks</highlight></codeline>
<codeline lineno="3692"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/>so<sp/>that<sp/>they<sp/>extend<sp/>in<sp/>x<sp/>without<sp/>hitting<sp/>neighbours</highlight></codeline>
<codeline lineno="3693"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3694"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(blk1<sp/>=<sp/>blkList;<sp/>blk1;<sp/>blk1<sp/>=<sp/>blk1-&gt;next)<sp/>{</highlight></codeline>
<codeline lineno="3695"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(blk1-&gt;tableId<sp/>&gt;=<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="3696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>xMax<sp/>=<sp/>DBL_MAX;</highlight></codeline>
<codeline lineno="3697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>xMin<sp/>=<sp/>DBL_MIN;</highlight></codeline>
<codeline lineno="3698"><highlight class="normal"></highlight></codeline>
<codeline lineno="3699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(blk2<sp/>=<sp/>blkList;<sp/>blk2;<sp/>blk2<sp/>=<sp/>blk2-&gt;next)<sp/>{</highlight></codeline>
<codeline lineno="3700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(blk2<sp/>==<sp/>blk1)</highlight></codeline>
<codeline lineno="3701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3702"><highlight class="normal"></highlight></codeline>
<codeline lineno="3703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(blk1-&gt;yMin<sp/>&lt;=<sp/>blk2-&gt;yMax<sp/>&amp;&amp;<sp/>blk1-&gt;yMax<sp/>&gt;=<sp/>blk2-&gt;yMin)<sp/>{</highlight></codeline>
<codeline lineno="3704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(blk2-&gt;xMin<sp/>&lt;<sp/>xMax<sp/>&amp;&amp;<sp/>blk2-&gt;xMin<sp/>&gt;<sp/>blk1-&gt;xMax)</highlight></codeline>
<codeline lineno="3705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xMax<sp/>=<sp/>blk2-&gt;xMin;</highlight></codeline>
<codeline lineno="3706"><highlight class="normal"></highlight></codeline>
<codeline lineno="3707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(blk2-&gt;xMax<sp/>&gt;<sp/>xMin<sp/>&amp;&amp;<sp/>blk2-&gt;xMax<sp/>&lt;<sp/>blk1-&gt;xMin)</highlight></codeline>
<codeline lineno="3708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xMin<sp/>=<sp/>blk2-&gt;xMax;</highlight></codeline>
<codeline lineno="3709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3711"><highlight class="normal"></highlight></codeline>
<codeline lineno="3712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(blk2<sp/>=<sp/>blkList;<sp/>blk2;<sp/>blk2<sp/>=<sp/>blk2-&gt;next)<sp/>{</highlight></codeline>
<codeline lineno="3713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(blk2<sp/>==<sp/>blk1)</highlight></codeline>
<codeline lineno="3714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3715"><highlight class="normal"></highlight></codeline>
<codeline lineno="3716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(blk2-&gt;xMax<sp/>&gt;<sp/>blk1-&gt;ExMax<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blk2-&gt;xMax<sp/>&lt;=<sp/>xMax<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blk2-&gt;yMin<sp/>&gt;=<sp/>blk1-&gt;yMax)<sp/>{</highlight></codeline>
<codeline lineno="3719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blk1-&gt;ExMax<sp/>=<sp/>blk2-&gt;xMax;</highlight></codeline>
<codeline lineno="3720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3721"><highlight class="normal"></highlight></codeline>
<codeline lineno="3722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(blk2-&gt;xMin<sp/>&lt;<sp/>blk1-&gt;ExMin<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blk2-&gt;xMin<sp/>&gt;=<sp/>xMin<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blk2-&gt;yMin<sp/>&gt;=<sp/>blk1-&gt;yMax)</highlight></codeline>
<codeline lineno="3725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blk1-&gt;ExMin<sp/>=<sp/>blk2-&gt;xMin;</highlight></codeline>
<codeline lineno="3726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3727"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3728"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3729"><highlight class="normal"></highlight></codeline>
<codeline lineno="3730"><highlight class="normal"><sp/><sp/>i<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="3731"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(blk1<sp/>=<sp/>blkList;<sp/>blk1;<sp/>blk1<sp/>=<sp/>blk1-&gt;next)<sp/>{</highlight></codeline>
<codeline lineno="3732"><highlight class="normal"><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="3733"><highlight class="normal"><sp/><sp/><sp/><sp/>sortPos<sp/>=<sp/>blk1-&gt;visitDepthFirst(blkList,<sp/>i,<sp/>blocks,<sp/>sortPos,<sp/>visited);</highlight></codeline>
<codeline lineno="3734"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3735"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(visited)<sp/>{</highlight></codeline>
<codeline lineno="3736"><highlight class="normal"><sp/><sp/><sp/><sp/>gfree(visited);</highlight></codeline>
<codeline lineno="3737"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3738"><highlight class="normal"></highlight></codeline>
<codeline lineno="3739"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>0<sp/>//<sp/>for<sp/>debugging</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3740"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;***<sp/>blocks,<sp/>after<sp/>ro<sp/>sort<sp/>***\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3741"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nBlocks;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="3742"><highlight class="normal"><sp/><sp/><sp/><sp/>blk<sp/>=<sp/>blocks[i];</highlight></codeline>
<codeline lineno="3743"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;block:<sp/>rot=%d<sp/>x=%.2f..%.2f<sp/>y=%.2f..%.2f<sp/>space=%.2f..%.2f\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blk-&gt;rot,<sp/>blk-&gt;xMin,<sp/>blk-&gt;xMax,<sp/>blk-&gt;yMin,<sp/>blk-&gt;yMax,</highlight></codeline>
<codeline lineno="3745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blk-&gt;priMin,<sp/>blk-&gt;priMax);</highlight></codeline>
<codeline lineno="3746"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(line<sp/>=<sp/>blk-&gt;lines;<sp/>line;<sp/>line<sp/>=<sp/>line-&gt;next)<sp/>{</highlight></codeline>
<codeline lineno="3747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>line:\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(word0<sp/>=<sp/>line-&gt;words;<sp/>word0;<sp/>word0<sp/>=<sp/>word0-&gt;next)<sp/>{</highlight></codeline>
<codeline lineno="3749"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>word:<sp/>x=%.2f..%.2f<sp/>y=%.2f..%.2f<sp/>base=%.2f<sp/>fontSize=%.2f<sp/>space=%d:<sp/>&apos;&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>word0-&gt;xMin,<sp/>word0-&gt;xMax,<sp/>word0-&gt;yMin,<sp/>word0-&gt;yMax,</highlight></codeline>
<codeline lineno="3751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>word0-&gt;base,<sp/>word0-&gt;fontSize,<sp/>word0-&gt;spaceAfter);</highlight></codeline>
<codeline lineno="3752"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>word0-&gt;len;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="3753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fputc(word0-&gt;text[j]<sp/>&amp;<sp/>0xff,<sp/>stdout);</highlight></codeline>
<codeline lineno="3754"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3755"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;&apos;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3757"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3758"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3759"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3760"><highlight class="normal"><sp/><sp/>fflush(stdout);</highlight></codeline>
<codeline lineno="3761"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3762"><highlight class="normal"></highlight></codeline>
<codeline lineno="3763"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>build<sp/>the<sp/>flows</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3764"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//~<sp/>this<sp/>needs<sp/>to<sp/>be<sp/>adjusted<sp/>for<sp/>writing<sp/>mode<sp/>(vertical<sp/>text)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3765"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//~<sp/>this<sp/>also<sp/>needs<sp/>to<sp/>account<sp/>for<sp/>right-to-left<sp/>column<sp/>ordering</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3766"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(flows)<sp/>{</highlight></codeline>
<codeline lineno="3767"><highlight class="normal"><sp/><sp/><sp/><sp/>flow<sp/>=<sp/>flows;</highlight></codeline>
<codeline lineno="3768"><highlight class="normal"><sp/><sp/><sp/><sp/>flows<sp/>=<sp/>flows-&gt;next;</highlight></codeline>
<codeline lineno="3769"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>flow;</highlight></codeline>
<codeline lineno="3770"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3771"><highlight class="normal"><sp/><sp/>flow<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="3772"><highlight class="normal"><sp/><sp/>flows<sp/>=<sp/>lastFlow<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="3773"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>assume<sp/>blocks<sp/>are<sp/>already<sp/>in<sp/>reading<sp/>order,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3774"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>construct<sp/>flows<sp/>accordingly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3775"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nBlocks;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="3776"><highlight class="normal"><sp/><sp/><sp/><sp/>blk<sp/>=<sp/>blocks[i];</highlight></codeline>
<codeline lineno="3777"><highlight class="normal"><sp/><sp/><sp/><sp/>blk-&gt;next<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="3778"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flow)<sp/>{</highlight></codeline>
<codeline lineno="3779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>blk1<sp/>=<sp/>blocks[i<sp/>-<sp/>1];</highlight></codeline>
<codeline lineno="3780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>blkSpace<sp/>=<sp/>maxBlockSpacing<sp/>*<sp/>blk1-&gt;lines-&gt;words-&gt;fontSize;</highlight></codeline>
<codeline lineno="3781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(blk1-&gt;secondaryDelta(blk)<sp/>&lt;=<sp/>blkSpace<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>blk-&gt;isBelow(blk1)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>flow-&gt;blockFits(blk,<sp/>blk1))<sp/>{</highlight></codeline>
<codeline lineno="3784"><highlight class="normal"><sp/><sp/><sp/><sp/>flow-&gt;addBlock(blk);</highlight></codeline>
<codeline lineno="3785"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3787"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3788"><highlight class="normal"><sp/><sp/><sp/><sp/>flow<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_text_flow" kindref="compound">TextFlow</ref>(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>blk);</highlight></codeline>
<codeline lineno="3789"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lastFlow)<sp/>{</highlight></codeline>
<codeline lineno="3790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lastFlow-&gt;next<sp/>=<sp/>flow;</highlight></codeline>
<codeline lineno="3791"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>flows<sp/>=<sp/>flow;</highlight></codeline>
<codeline lineno="3793"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3794"><highlight class="normal"><sp/><sp/><sp/><sp/>lastFlow<sp/>=<sp/>flow;</highlight></codeline>
<codeline lineno="3795"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3796"><highlight class="normal"></highlight></codeline>
<codeline lineno="3797"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>0<sp/>//<sp/>for<sp/>debugging</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3798"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;***<sp/>flows<sp/>***\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3799"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(flow<sp/>=<sp/>flows;<sp/>flow;<sp/>flow<sp/>=<sp/>flow-&gt;next)<sp/>{</highlight></codeline>
<codeline lineno="3800"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;flow:<sp/>x=%.2f..%.2f<sp/>y=%.2f..%.2f<sp/>pri:%.2f..%.2f\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>flow-&gt;xMin,<sp/>flow-&gt;xMax,<sp/>flow-&gt;yMin,<sp/>flow-&gt;yMax,</highlight></codeline>
<codeline lineno="3802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>flow-&gt;priMin,<sp/>flow-&gt;priMax);</highlight></codeline>
<codeline lineno="3803"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(blk<sp/>=<sp/>flow-&gt;blocks;<sp/>blk;<sp/>blk<sp/>=<sp/>blk-&gt;next)<sp/>{</highlight></codeline>
<codeline lineno="3804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>block:<sp/>rot=%d<sp/>x=%.2f..%.2f<sp/>y=%.2f..%.2f<sp/>pri=%.2f..%.2f\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blk-&gt;rot,<sp/>blk-&gt;ExMin,<sp/>blk-&gt;ExMax,<sp/>blk-&gt;EyMin,<sp/>blk-&gt;EyMax,</highlight></codeline>
<codeline lineno="3806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blk-&gt;priMin,<sp/>blk-&gt;priMax);</highlight></codeline>
<codeline lineno="3807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(line<sp/>=<sp/>blk-&gt;lines;<sp/>line;<sp/>line<sp/>=<sp/>line-&gt;next)<sp/>{</highlight></codeline>
<codeline lineno="3808"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>line:\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3809"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(word0<sp/>=<sp/>line-&gt;words;<sp/>word0;<sp/>word0<sp/>=<sp/>word0-&gt;next)<sp/>{</highlight></codeline>
<codeline lineno="3810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>word:<sp/>x=%.2f..%.2f<sp/>y=%.2f..%.2f<sp/>base=%.2f<sp/>fontSize=%.2f<sp/>space=%d:<sp/>&apos;&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>word0-&gt;xMin,<sp/>word0-&gt;xMax,<sp/>word0-&gt;yMin,<sp/>word0-&gt;yMax,</highlight></codeline>
<codeline lineno="3812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>word0-&gt;base,<sp/>word0-&gt;fontSize,<sp/>word0-&gt;spaceAfter);</highlight></codeline>
<codeline lineno="3813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>word0-&gt;len;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="3814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fputc(word0-&gt;text[i]<sp/>&amp;<sp/>0xff,<sp/>stdout);</highlight></codeline>
<codeline lineno="3815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;&apos;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3817"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3819"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3820"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3821"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3822"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3823"><highlight class="normal"></highlight></codeline>
<codeline lineno="3824"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(uMap)<sp/>{</highlight></codeline>
<codeline lineno="3825"><highlight class="normal"><sp/><sp/><sp/><sp/>uMap-&gt;decRefCnt();</highlight></codeline>
<codeline lineno="3826"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3827"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3828"><highlight class="normal"></highlight></codeline>
<codeline lineno="3829"><highlight class="normal">GBool<sp/>TextPage::findText(Unicode<sp/>*s,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len,</highlight></codeline>
<codeline lineno="3830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GBool<sp/>startAtTop,<sp/>GBool<sp/>stopAtBottom,</highlight></codeline>
<codeline lineno="3831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GBool<sp/>startAtLast,<sp/>GBool<sp/>stopAtLast,</highlight></codeline>
<codeline lineno="3832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GBool<sp/>caseSensitive,<sp/>GBool<sp/>backward,</highlight></codeline>
<codeline lineno="3833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GBool<sp/>wholeWord,</highlight></codeline>
<codeline lineno="3834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*xMin,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*yMin,</highlight></codeline>
<codeline lineno="3835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*xMax,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*yMax)<sp/>{</highlight></codeline>
<codeline lineno="3836"><highlight class="normal"><sp/><sp/><ref refid="class_text_block" kindref="compound">TextBlock</ref><sp/>*blk;</highlight></codeline>
<codeline lineno="3837"><highlight class="normal"><sp/><sp/><ref refid="class_text_line" kindref="compound">TextLine</ref><sp/>*line;</highlight></codeline>
<codeline lineno="3838"><highlight class="normal"><sp/><sp/>Unicode<sp/>*s2,<sp/>*txt,<sp/>*reordered;</highlight></codeline>
<codeline lineno="3839"><highlight class="normal"><sp/><sp/>Unicode<sp/>*p;</highlight></codeline>
<codeline lineno="3840"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>txtSize,<sp/>m,<sp/>i,<sp/>j,<sp/>k;</highlight></codeline>
<codeline lineno="3841"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>xStart,<sp/>yStart,<sp/>xStop,<sp/>yStop;</highlight></codeline>
<codeline lineno="3842"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>xMin0,<sp/>yMin0,<sp/>xMax0,<sp/>yMax0;</highlight></codeline>
<codeline lineno="3843"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>xMin1,<sp/>yMin1,<sp/>xMax1,<sp/>yMax1;</highlight></codeline>
<codeline lineno="3844"><highlight class="normal"><sp/><sp/>GBool<sp/>found;</highlight></codeline>
<codeline lineno="3845"><highlight class="normal"></highlight></codeline>
<codeline lineno="3846"><highlight class="normal"></highlight></codeline>
<codeline lineno="3847"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rawOrder)<sp/>{</highlight></codeline>
<codeline lineno="3848"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="3849"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3850"><highlight class="normal"></highlight></codeline>
<codeline lineno="3851"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>handle<sp/>right-to-left<sp/>text</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3852"><highlight class="normal"><sp/><sp/>reordered<sp/>=<sp/>(Unicode*)gmallocn(len,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Unicode));</highlight></codeline>
<codeline lineno="3853"><highlight class="normal"><sp/><sp/>reorderText(s,<sp/>len,<sp/>NULL,<sp/>primaryLR,<sp/>NULL,<sp/>reordered);</highlight></codeline>
<codeline lineno="3854"><highlight class="normal"></highlight></codeline>
<codeline lineno="3855"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>normalize<sp/>the<sp/>search<sp/>string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3856"><highlight class="normal"><sp/><sp/>s2<sp/>=<sp/>unicodeNormalizeNFKC(reordered,<sp/>len,<sp/>&amp;len,<sp/>NULL);</highlight></codeline>
<codeline lineno="3857"><highlight class="normal"></highlight></codeline>
<codeline lineno="3858"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>convert<sp/>the<sp/>search<sp/>string<sp/>to<sp/>uppercase</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3859"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!caseSensitive)<sp/>{</highlight></codeline>
<codeline lineno="3860"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>len;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="3861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s2[i]<sp/>=<sp/>unicodeToUpper(s2[i]);</highlight></codeline>
<codeline lineno="3862"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3863"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3864"><highlight class="normal"></highlight></codeline>
<codeline lineno="3865"><highlight class="normal"><sp/><sp/>txt<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="3866"><highlight class="normal"><sp/><sp/>txtSize<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3867"><highlight class="normal"></highlight></codeline>
<codeline lineno="3868"><highlight class="normal"><sp/><sp/>xStart<sp/>=<sp/>yStart<sp/>=<sp/>xStop<sp/>=<sp/>yStop<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3869"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(startAtLast<sp/>&amp;&amp;<sp/>haveLastFind)<sp/>{</highlight></codeline>
<codeline lineno="3870"><highlight class="normal"><sp/><sp/><sp/><sp/>xStart<sp/>=<sp/>lastFindXMin;</highlight></codeline>
<codeline lineno="3871"><highlight class="normal"><sp/><sp/><sp/><sp/>yStart<sp/>=<sp/>lastFindYMin;</highlight></codeline>
<codeline lineno="3872"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!startAtTop)<sp/>{</highlight></codeline>
<codeline lineno="3873"><highlight class="normal"><sp/><sp/><sp/><sp/>xStart<sp/>=<sp/>*xMin;</highlight></codeline>
<codeline lineno="3874"><highlight class="normal"><sp/><sp/><sp/><sp/>yStart<sp/>=<sp/>*yMin;</highlight></codeline>
<codeline lineno="3875"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3876"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stopAtLast<sp/>&amp;&amp;<sp/>haveLastFind)<sp/>{</highlight></codeline>
<codeline lineno="3877"><highlight class="normal"><sp/><sp/><sp/><sp/>xStop<sp/>=<sp/>lastFindXMin;</highlight></codeline>
<codeline lineno="3878"><highlight class="normal"><sp/><sp/><sp/><sp/>yStop<sp/>=<sp/>lastFindYMin;</highlight></codeline>
<codeline lineno="3879"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!stopAtBottom)<sp/>{</highlight></codeline>
<codeline lineno="3880"><highlight class="normal"><sp/><sp/><sp/><sp/>xStop<sp/>=<sp/>*xMax;</highlight></codeline>
<codeline lineno="3881"><highlight class="normal"><sp/><sp/><sp/><sp/>yStop<sp/>=<sp/>*yMax;</highlight></codeline>
<codeline lineno="3882"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3883"><highlight class="normal"></highlight></codeline>
<codeline lineno="3884"><highlight class="normal"><sp/><sp/>found<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="3885"><highlight class="normal"><sp/><sp/>xMin0<sp/>=<sp/>xMax0<sp/>=<sp/>yMin0<sp/>=<sp/>yMax0<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>make<sp/>gcc<sp/>happy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3886"><highlight class="normal"><sp/><sp/>xMin1<sp/>=<sp/>xMax1<sp/>=<sp/>yMin1<sp/>=<sp/>yMax1<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>make<sp/>gcc<sp/>happy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3887"><highlight class="normal"></highlight></codeline>
<codeline lineno="3888"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>backward<sp/>?<sp/>nBlocks<sp/>-<sp/>1<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="3889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>backward<sp/>?<sp/>i<sp/>&gt;=<sp/>0<sp/>:<sp/>i<sp/>&lt;<sp/>nBlocks;</highlight></codeline>
<codeline lineno="3890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>+=<sp/>backward<sp/>?<sp/>-1<sp/>:<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="3891"><highlight class="normal"><sp/><sp/><sp/><sp/>blk<sp/>=<sp/>blocks[i];</highlight></codeline>
<codeline lineno="3892"><highlight class="normal"></highlight></codeline>
<codeline lineno="3893"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check:<sp/>is<sp/>the<sp/>block<sp/>above<sp/>the<sp/>top<sp/>limit?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3894"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(this<sp/>only<sp/>works<sp/>if<sp/>the<sp/>page&apos;s<sp/>primary<sp/>rotation<sp/>is<sp/>zero<sp/>--</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3895"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>otherwise<sp/>the<sp/>blocks<sp/>won&apos;t<sp/>be<sp/>sorted<sp/>in<sp/>the<sp/>useful<sp/>order)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3896"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!startAtTop<sp/>&amp;&amp;<sp/>primaryRot<sp/>==<sp/>0<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3897"><highlight class="normal"><sp/><sp/><sp/><sp/>(backward<sp/>?<sp/>blk-&gt;yMin<sp/>&gt;<sp/>yStart<sp/>:<sp/>blk-&gt;yMax<sp/>&lt;<sp/>yStart))<sp/>{</highlight></codeline>
<codeline lineno="3898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3899"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3900"><highlight class="normal"></highlight></codeline>
<codeline lineno="3901"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check:<sp/>is<sp/>the<sp/>block<sp/>below<sp/>the<sp/>bottom<sp/>limit?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3902"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(this<sp/>only<sp/>works<sp/>if<sp/>the<sp/>page&apos;s<sp/>primary<sp/>rotation<sp/>is<sp/>zero<sp/>--</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3903"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>otherwise<sp/>the<sp/>blocks<sp/>won&apos;t<sp/>be<sp/>sorted<sp/>in<sp/>the<sp/>useful<sp/>order)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3904"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!stopAtBottom<sp/>&amp;&amp;<sp/>primaryRot<sp/>==<sp/>0<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3905"><highlight class="normal"><sp/><sp/><sp/><sp/>(backward<sp/>?<sp/>blk-&gt;yMax<sp/>&lt;<sp/>yStop<sp/>:<sp/>blk-&gt;yMin<sp/>&gt;<sp/>yStop))<sp/>{</highlight></codeline>
<codeline lineno="3906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3907"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3908"><highlight class="normal"></highlight></codeline>
<codeline lineno="3909"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(line<sp/>=<sp/>blk-&gt;lines;<sp/>line;<sp/>line<sp/>=<sp/>line-&gt;next)<sp/>{</highlight></codeline>
<codeline lineno="3910"><highlight class="normal"></highlight></codeline>
<codeline lineno="3911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check:<sp/>is<sp/>the<sp/>line<sp/>above<sp/>the<sp/>top<sp/>limit?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(this<sp/>only<sp/>works<sp/>if<sp/>the<sp/>page&apos;s<sp/>primary<sp/>rotation<sp/>is<sp/>zero<sp/>--</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>otherwise<sp/>the<sp/>lines<sp/>won&apos;t<sp/>be<sp/>sorted<sp/>in<sp/>the<sp/>useful<sp/>order)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!startAtTop<sp/>&amp;&amp;<sp/>primaryRot<sp/>==<sp/>0<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(backward<sp/>?<sp/>line-&gt;yMin<sp/>&gt;<sp/>yStart<sp/>:<sp/>line-&gt;yMin<sp/>&lt;<sp/>yStart))<sp/>{</highlight></codeline>
<codeline lineno="3916"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3918"><highlight class="normal"></highlight></codeline>
<codeline lineno="3919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check:<sp/>is<sp/>the<sp/>line<sp/>below<sp/>the<sp/>bottom<sp/>limit?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(this<sp/>only<sp/>works<sp/>if<sp/>the<sp/>page&apos;s<sp/>primary<sp/>rotation<sp/>is<sp/>zero<sp/>--</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>otherwise<sp/>the<sp/>lines<sp/>won&apos;t<sp/>be<sp/>sorted<sp/>in<sp/>the<sp/>useful<sp/>order)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!stopAtBottom<sp/>&amp;&amp;<sp/>primaryRot<sp/>==<sp/>0<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(backward<sp/>?<sp/>line-&gt;yMin<sp/>&lt;<sp/>yStop<sp/>:<sp/>line-&gt;yMin<sp/>&gt;<sp/>yStop))<sp/>{</highlight></codeline>
<codeline lineno="3924"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3926"><highlight class="normal"></highlight></codeline>
<codeline lineno="3927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!line-&gt;normalized)</highlight></codeline>
<codeline lineno="3928"><highlight class="normal"><sp/><sp/><sp/><sp/>line-&gt;normalized<sp/>=<sp/>unicodeNormalizeNFKC(line-&gt;text,<sp/>line-&gt;len,<sp/></highlight></codeline>
<codeline lineno="3929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;line-&gt;normalized_len,<sp/></highlight></codeline>
<codeline lineno="3930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;line-&gt;normalized_idx,</highlight></codeline>
<codeline lineno="3931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>convert<sp/>the<sp/>line<sp/>to<sp/>uppercase</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m<sp/>=<sp/>line-&gt;normalized_len;</highlight></codeline>
<codeline lineno="3934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!caseSensitive)<sp/>{</highlight></codeline>
<codeline lineno="3935"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m<sp/>&gt;<sp/>txtSize)<sp/>{</highlight></codeline>
<codeline lineno="3936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>txt<sp/>=<sp/>(Unicode<sp/>*)greallocn(txt,<sp/>m,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Unicode));</highlight></codeline>
<codeline lineno="3937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>txtSize<sp/>=<sp/>m;</highlight></codeline>
<codeline lineno="3938"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3939"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>m;<sp/>++k)<sp/>{</highlight></codeline>
<codeline lineno="3940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>txt[k]<sp/>=<sp/>unicodeToUpper(line-&gt;normalized[k]);</highlight></codeline>
<codeline lineno="3941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3943"><highlight class="normal"><sp/><sp/><sp/><sp/>txt<sp/>=<sp/>line-&gt;normalized;</highlight></codeline>
<codeline lineno="3944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3945"><highlight class="normal"></highlight></codeline>
<codeline lineno="3946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>search<sp/>each<sp/>position<sp/>in<sp/>this<sp/>line</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>j<sp/>=<sp/>backward<sp/>?<sp/>m<sp/>-<sp/>len<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="3948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>txt<sp/>+<sp/>j;</highlight></codeline>
<codeline lineno="3949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(backward<sp/>?<sp/>j<sp/>&gt;=<sp/>0<sp/>:<sp/>j<sp/>&lt;=<sp/>m<sp/>-<sp/>len)<sp/>{</highlight></codeline>
<codeline lineno="3950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!wholeWord<sp/>||</highlight></codeline>
<codeline lineno="3951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((j<sp/>==<sp/>0<sp/>||<sp/>!unicodeTypeAlphaNum(txt[j<sp/>-<sp/>1]))<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(j<sp/>+<sp/>len<sp/>==<sp/>m<sp/>||<sp/>!unicodeTypeAlphaNum(txt[j<sp/>+<sp/>len]))))<sp/>{</highlight></codeline>
<codeline lineno="3953"><highlight class="normal"></highlight></codeline>
<codeline lineno="3954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>compare<sp/>the<sp/>strings</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>len;<sp/>++k)<sp/>{</highlight></codeline>
<codeline lineno="3956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p[k]<sp/>!=<sp/>s2[k])<sp/>{</highlight></codeline>
<codeline lineno="3957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3960"><highlight class="normal"></highlight></codeline>
<codeline lineno="3961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>found<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(k<sp/>==<sp/>len)<sp/>{</highlight></codeline>
<codeline lineno="3963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>where<sp/>s2<sp/>matches<sp/>a<sp/>subsequence<sp/>of<sp/>a<sp/>compatibility<sp/>equivalence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>decomposition,<sp/>highlight<sp/>the<sp/>entire<sp/>glyph,<sp/>since<sp/>we<sp/>don&apos;t<sp/>know</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>internal<sp/>layout<sp/>of<sp/>subglyph<sp/>components</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>normStart<sp/>=<sp/>line-&gt;normalized_idx[j];</highlight></codeline>
<codeline lineno="3967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>normAfterEnd<sp/>=<sp/>line-&gt;normalized_idx[j<sp/>+<sp/>len<sp/>-<sp/>1]<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="3968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(line-&gt;rot)<sp/>{</highlight></codeline>
<codeline lineno="3969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:</highlight></codeline>
<codeline lineno="3970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xMin1<sp/>=<sp/>line-&gt;edge[normStart];</highlight></codeline>
<codeline lineno="3971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xMax1<sp/>=<sp/>line-&gt;edge[normAfterEnd];</highlight></codeline>
<codeline lineno="3972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>yMin1<sp/>=<sp/>line-&gt;yMin;</highlight></codeline>
<codeline lineno="3973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>yMax1<sp/>=<sp/>line-&gt;yMax;</highlight></codeline>
<codeline lineno="3974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="3976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xMin1<sp/>=<sp/>line-&gt;xMin;</highlight></codeline>
<codeline lineno="3977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xMax1<sp/>=<sp/>line-&gt;xMax;</highlight></codeline>
<codeline lineno="3978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>yMin1<sp/>=<sp/>line-&gt;edge[normStart];</highlight></codeline>
<codeline lineno="3979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>yMax1<sp/>=<sp/>line-&gt;edge[normAfterEnd];</highlight></codeline>
<codeline lineno="3980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:</highlight></codeline>
<codeline lineno="3982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xMin1<sp/>=<sp/>line-&gt;edge[normAfterEnd];</highlight></codeline>
<codeline lineno="3983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xMax1<sp/>=<sp/>line-&gt;edge[normStart];</highlight></codeline>
<codeline lineno="3984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>yMin1<sp/>=<sp/>line-&gt;yMin;</highlight></codeline>
<codeline lineno="3985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>yMax1<sp/>=<sp/>line-&gt;yMax;</highlight></codeline>
<codeline lineno="3986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>3:</highlight></codeline>
<codeline lineno="3988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xMin1<sp/>=<sp/>line-&gt;xMin;</highlight></codeline>
<codeline lineno="3989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xMax1<sp/>=<sp/>line-&gt;xMax;</highlight></codeline>
<codeline lineno="3990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>yMin1<sp/>=<sp/>line-&gt;edge[normAfterEnd];</highlight></codeline>
<codeline lineno="3991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>yMax1<sp/>=<sp/>line-&gt;edge[normStart];</highlight></codeline>
<codeline lineno="3992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(backward)<sp/>{</highlight></codeline>
<codeline lineno="3995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((startAtTop<sp/>||</highlight></codeline>
<codeline lineno="3996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>yMin1<sp/>&lt;<sp/>yStart<sp/>||<sp/>(yMin1<sp/>==<sp/>yStart<sp/>&amp;&amp;<sp/>xMin1<sp/>&lt;<sp/>xStart))<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(stopAtBottom<sp/>||</highlight></codeline>
<codeline lineno="3998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>yMin1<sp/>&gt;<sp/>yStop<sp/>||<sp/>(yMin1<sp/>==<sp/>yStop<sp/>&amp;&amp;<sp/>xMin1<sp/>&gt;<sp/>xStop)))<sp/>{</highlight></codeline>
<codeline lineno="3999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!found<sp/>||</highlight></codeline>
<codeline lineno="4000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>yMin1<sp/>&gt;<sp/>yMin0<sp/>||<sp/>(yMin1<sp/>==<sp/>yMin0<sp/>&amp;&amp;<sp/>xMin1<sp/>&gt;<sp/>xMin0))<sp/>{</highlight></codeline>
<codeline lineno="4001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xMin0<sp/>=<sp/>xMin1;</highlight></codeline>
<codeline lineno="4002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xMax0<sp/>=<sp/>xMax1;</highlight></codeline>
<codeline lineno="4003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>yMin0<sp/>=<sp/>yMin1;</highlight></codeline>
<codeline lineno="4004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>yMax0<sp/>=<sp/>yMax1;</highlight></codeline>
<codeline lineno="4005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>found<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="4006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((startAtTop<sp/>||</highlight></codeline>
<codeline lineno="4010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>yMin1<sp/>&gt;<sp/>yStart<sp/>||<sp/>(yMin1<sp/>==<sp/>yStart<sp/>&amp;&amp;<sp/>xMin1<sp/>&gt;<sp/>xStart))<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="4011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(stopAtBottom<sp/>||</highlight></codeline>
<codeline lineno="4012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>yMin1<sp/>&lt;<sp/>yStop<sp/>||<sp/>(yMin1<sp/>==<sp/>yStop<sp/>&amp;&amp;<sp/>xMin1<sp/>&lt;<sp/>xStop)))<sp/>{</highlight></codeline>
<codeline lineno="4013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!found<sp/>||</highlight></codeline>
<codeline lineno="4014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>yMin1<sp/>&lt;<sp/>yMin0<sp/>||<sp/>(yMin1<sp/>==<sp/>yMin0<sp/>&amp;&amp;<sp/>xMin1<sp/>&lt;<sp/>xMin0))<sp/>{</highlight></codeline>
<codeline lineno="4015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xMin0<sp/>=<sp/>xMin1;</highlight></codeline>
<codeline lineno="4016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xMax0<sp/>=<sp/>xMax1;</highlight></codeline>
<codeline lineno="4017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>yMin0<sp/>=<sp/>yMin1;</highlight></codeline>
<codeline lineno="4018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>yMax0<sp/>=<sp/>yMax1;</highlight></codeline>
<codeline lineno="4019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>found<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="4020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4024"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4025"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(backward)<sp/>{</highlight></codeline>
<codeline lineno="4026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>--j;</highlight></codeline>
<codeline lineno="4027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>--p;</highlight></codeline>
<codeline lineno="4028"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++j;</highlight></codeline>
<codeline lineno="4030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++p;</highlight></codeline>
<codeline lineno="4031"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4033"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4034"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4035"><highlight class="normal"></highlight></codeline>
<codeline lineno="4036"><highlight class="normal"><sp/><sp/>gfree(s2);</highlight></codeline>
<codeline lineno="4037"><highlight class="normal"><sp/><sp/>gfree(reordered);</highlight></codeline>
<codeline lineno="4038"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!caseSensitive)<sp/>{</highlight></codeline>
<codeline lineno="4039"><highlight class="normal"><sp/><sp/><sp/><sp/>gfree(txt);</highlight></codeline>
<codeline lineno="4040"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4041"><highlight class="normal"></highlight></codeline>
<codeline lineno="4042"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(found)<sp/>{</highlight></codeline>
<codeline lineno="4043"><highlight class="normal"><sp/><sp/><sp/><sp/>*xMin<sp/>=<sp/>xMin0;</highlight></codeline>
<codeline lineno="4044"><highlight class="normal"><sp/><sp/><sp/><sp/>*xMax<sp/>=<sp/>xMax0;</highlight></codeline>
<codeline lineno="4045"><highlight class="normal"><sp/><sp/><sp/><sp/>*yMin<sp/>=<sp/>yMin0;</highlight></codeline>
<codeline lineno="4046"><highlight class="normal"><sp/><sp/><sp/><sp/>*yMax<sp/>=<sp/>yMax0;</highlight></codeline>
<codeline lineno="4047"><highlight class="normal"><sp/><sp/><sp/><sp/>lastFindXMin<sp/>=<sp/>xMin0;</highlight></codeline>
<codeline lineno="4048"><highlight class="normal"><sp/><sp/><sp/><sp/>lastFindYMin<sp/>=<sp/>yMin0;</highlight></codeline>
<codeline lineno="4049"><highlight class="normal"><sp/><sp/><sp/><sp/>haveLastFind<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="4050"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gTrue;</highlight></codeline>
<codeline lineno="4051"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4052"><highlight class="normal"></highlight></codeline>
<codeline lineno="4053"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="4054"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4055"><highlight class="normal"></highlight></codeline>
<codeline lineno="4056"><highlight class="normal"><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*TextPage::getText(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>xMin,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>yMin,</highlight></codeline>
<codeline lineno="4057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>xMax,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>yMax)<sp/>{</highlight></codeline>
<codeline lineno="4058"><highlight class="normal"><sp/><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*s;</highlight></codeline>
<codeline lineno="4059"><highlight class="normal"><sp/><sp/><ref refid="class_unicode_map" kindref="compound">UnicodeMap</ref><sp/>*uMap;</highlight></codeline>
<codeline lineno="4060"><highlight class="normal"><sp/><sp/><ref refid="class_text_block" kindref="compound">TextBlock</ref><sp/>*blk;</highlight></codeline>
<codeline lineno="4061"><highlight class="normal"><sp/><sp/><ref refid="class_text_line" kindref="compound">TextLine</ref><sp/>*line;</highlight></codeline>
<codeline lineno="4062"><highlight class="normal"><sp/><sp/><ref refid="class_text_line_frag" kindref="compound">TextLineFrag</ref><sp/>*frags;</highlight></codeline>
<codeline lineno="4063"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nFrags,<sp/>fragsSize;</highlight></codeline>
<codeline lineno="4064"><highlight class="normal"><sp/><sp/><ref refid="class_text_line_frag" kindref="compound">TextLineFrag</ref><sp/>*frag;</highlight></codeline>
<codeline lineno="4065"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>space[8],<sp/>eol[16];</highlight></codeline>
<codeline lineno="4066"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>spaceLen,<sp/>eolLen;</highlight></codeline>
<codeline lineno="4067"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lastRot;</highlight></codeline>
<codeline lineno="4068"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x,<sp/>y,<sp/>delta;</highlight></codeline>
<codeline lineno="4069"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>col,<sp/>idx0,<sp/>idx1,<sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="4070"><highlight class="normal"><sp/><sp/>GBool<sp/>multiLine,<sp/>oneRot;</highlight></codeline>
<codeline lineno="4071"><highlight class="normal"></highlight></codeline>
<codeline lineno="4072"><highlight class="normal"><sp/><sp/>s<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref>();</highlight></codeline>
<codeline lineno="4073"><highlight class="normal"></highlight></codeline>
<codeline lineno="4074"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>the<sp/>output<sp/>encoding</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4075"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(uMap<sp/>=<sp/>globalParams-&gt;getTextEncoding()))<sp/>{</highlight></codeline>
<codeline lineno="4076"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s;</highlight></codeline>
<codeline lineno="4077"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4078"><highlight class="normal"></highlight></codeline>
<codeline lineno="4079"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rawOrder)<sp/>{</highlight></codeline>
<codeline lineno="4080"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_text_word" kindref="compound">TextWord</ref>*<sp/><sp/>word;</highlight></codeline>
<codeline lineno="4081"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>mbc[16];</highlight></codeline>
<codeline lineno="4082"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>mbc_len;</highlight></codeline>
<codeline lineno="4083"><highlight class="normal"></highlight></codeline>
<codeline lineno="4084"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(word<sp/>=<sp/>rawWords;<sp/>word<sp/>&amp;&amp;<sp/>word<sp/>&lt;=<sp/>rawLastWord;<sp/>word<sp/>=<sp/>word-&gt;next)<sp/>{</highlight></codeline>
<codeline lineno="4085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>word-&gt;getLength();<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="4086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>gXMin,<sp/>gXMax,<sp/>gYMin,<sp/>gYMax;</highlight></codeline>
<codeline lineno="4087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>word-&gt;getCharBBox(j,<sp/>&amp;gXMin,<sp/>&amp;gYMin,<sp/>&amp;gXMax,<sp/>&amp;gYMax);</highlight></codeline>
<codeline lineno="4088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(xMin<sp/>&lt;=<sp/>gXMin<sp/>&amp;&amp;<sp/>gXMax<sp/>&lt;=<sp/>xMax<sp/>&amp;&amp;<sp/>yMin<sp/>&lt;=<sp/>gYMin<sp/>&amp;&amp;<sp/>gYMax<sp/>&lt;=<sp/>yMax)</highlight></codeline>
<codeline lineno="4089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mbc_len<sp/>=<sp/>uMap-&gt;mapUnicode(<sp/>*(word-&gt;getChar(j)),<sp/>mbc,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(mbc)<sp/>);</highlight></codeline>
<codeline lineno="4091"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;append(mbc,<sp/>mbc_len);</highlight></codeline>
<codeline lineno="4092"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4093"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4094"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4095"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s;</highlight></codeline>
<codeline lineno="4096"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4097"><highlight class="normal"></highlight></codeline>
<codeline lineno="4098"><highlight class="normal"><sp/><sp/>spaceLen<sp/>=<sp/>uMap-&gt;mapUnicode(0x20,<sp/>space,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(space));</highlight></codeline>
<codeline lineno="4099"><highlight class="normal"><sp/><sp/>eolLen<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>make<sp/>gcc<sp/>happy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4100"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(globalParams-&gt;getTextEOL())<sp/>{</highlight></codeline>
<codeline lineno="4101"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>eolUnix:</highlight></codeline>
<codeline lineno="4102"><highlight class="normal"><sp/><sp/><sp/><sp/>eolLen<sp/>=<sp/>uMap-&gt;mapUnicode(0x0a,<sp/>eol,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(eol));</highlight></codeline>
<codeline lineno="4103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4104"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>eolDOS:</highlight></codeline>
<codeline lineno="4105"><highlight class="normal"><sp/><sp/><sp/><sp/>eolLen<sp/>=<sp/>uMap-&gt;mapUnicode(0x0d,<sp/>eol,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(eol));</highlight></codeline>
<codeline lineno="4106"><highlight class="normal"><sp/><sp/><sp/><sp/>eolLen<sp/>+=<sp/>uMap-&gt;mapUnicode(0x0a,<sp/>eol<sp/>+<sp/>eolLen,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(eol)<sp/>-<sp/>eolLen);</highlight></codeline>
<codeline lineno="4107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4108"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>eolMac:</highlight></codeline>
<codeline lineno="4109"><highlight class="normal"><sp/><sp/><sp/><sp/>eolLen<sp/>=<sp/>uMap-&gt;mapUnicode(0x0d,<sp/>eol,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(eol));</highlight></codeline>
<codeline lineno="4110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4111"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4112"><highlight class="normal"></highlight></codeline>
<codeline lineno="4113"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//~<sp/>writing<sp/>mode<sp/>(horiz/vert)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4114"><highlight class="normal"></highlight></codeline>
<codeline lineno="4115"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>collect<sp/>the<sp/>line<sp/>fragments<sp/>that<sp/>are<sp/>in<sp/>the<sp/>rectangle</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4116"><highlight class="normal"><sp/><sp/>fragsSize<sp/>=<sp/>256;</highlight></codeline>
<codeline lineno="4117"><highlight class="normal"><sp/><sp/>frags<sp/>=<sp/>(<ref refid="class_text_line_frag" kindref="compound">TextLineFrag</ref><sp/>*)gmallocn(fragsSize,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="class_text_line_frag" kindref="compound">TextLineFrag</ref>));</highlight></codeline>
<codeline lineno="4118"><highlight class="normal"><sp/><sp/>nFrags<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4119"><highlight class="normal"><sp/><sp/>lastRot<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="4120"><highlight class="normal"><sp/><sp/>oneRot<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="4121"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nBlocks;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="4122"><highlight class="normal"><sp/><sp/><sp/><sp/>blk<sp/>=<sp/>blocks[i];</highlight></codeline>
<codeline lineno="4123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(xMin<sp/>&lt;<sp/>blk-&gt;xMax<sp/>&amp;&amp;<sp/>blk-&gt;xMin<sp/>&lt;<sp/>xMax<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="4124"><highlight class="normal"><sp/><sp/><sp/><sp/>yMin<sp/>&lt;<sp/>blk-&gt;yMax<sp/>&amp;&amp;<sp/>blk-&gt;yMin<sp/>&lt;<sp/>yMax)<sp/>{</highlight></codeline>
<codeline lineno="4125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(line<sp/>=<sp/>blk-&gt;lines;<sp/>line;<sp/>line<sp/>=<sp/>line-&gt;next)<sp/>{</highlight></codeline>
<codeline lineno="4126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(xMin<sp/>&lt;<sp/>line-&gt;xMax<sp/>&amp;&amp;<sp/>line-&gt;xMin<sp/>&lt;<sp/>xMax<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="4127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>yMin<sp/>&lt;<sp/>line-&gt;yMax<sp/>&amp;&amp;<sp/>line-&gt;yMin<sp/>&lt;<sp/>yMax)<sp/>{</highlight></codeline>
<codeline lineno="4128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>idx0<sp/>=<sp/>idx1<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="4129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(line-&gt;rot)<sp/>{</highlight></codeline>
<codeline lineno="4130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:</highlight></codeline>
<codeline lineno="4131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>=<sp/>0.5<sp/>*<sp/>(line-&gt;yMin<sp/>+<sp/>line-&gt;yMax);</highlight></codeline>
<codeline lineno="4132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(yMin<sp/>&lt;<sp/>y<sp/>&amp;&amp;<sp/>y<sp/>&lt;<sp/>yMax)<sp/>{</highlight></codeline>
<codeline lineno="4133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(j<sp/>&lt;<sp/>line-&gt;len)<sp/>{</highlight></codeline>
<codeline lineno="4135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(0.5<sp/>*<sp/>(line-&gt;edge[j]<sp/>+<sp/>line-&gt;edge[j+1])<sp/>&gt;<sp/>xMin)<sp/>{</highlight></codeline>
<codeline lineno="4136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idx0<sp/>=<sp/>j;</highlight></codeline>
<codeline lineno="4137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++j;</highlight></codeline>
<codeline lineno="4140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j<sp/>=<sp/>line-&gt;len<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="4142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(j<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="4143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(0.5<sp/>*<sp/>(line-&gt;edge[j]<sp/>+<sp/>line-&gt;edge[j+1])<sp/>&lt;<sp/>xMax)<sp/>{</highlight></codeline>
<codeline lineno="4144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idx1<sp/>=<sp/>j;</highlight></codeline>
<codeline lineno="4145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--j;</highlight></codeline>
<codeline lineno="4148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="4152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>0.5<sp/>*<sp/>(line-&gt;xMin<sp/>+<sp/>line-&gt;xMax);</highlight></codeline>
<codeline lineno="4153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(xMin<sp/>&lt;<sp/>x<sp/>&amp;&amp;<sp/>x<sp/>&lt;<sp/>xMax)<sp/>{</highlight></codeline>
<codeline lineno="4154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(j<sp/>&lt;<sp/>line-&gt;len)<sp/>{</highlight></codeline>
<codeline lineno="4156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(0.5<sp/>*<sp/>(line-&gt;edge[j]<sp/>+<sp/>line-&gt;edge[j+1])<sp/>&gt;<sp/>yMin)<sp/>{</highlight></codeline>
<codeline lineno="4157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idx0<sp/>=<sp/>j;</highlight></codeline>
<codeline lineno="4158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++j;</highlight></codeline>
<codeline lineno="4161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j<sp/>=<sp/>line-&gt;len<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="4163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(j<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="4164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(0.5<sp/>*<sp/>(line-&gt;edge[j]<sp/>+<sp/>line-&gt;edge[j+1])<sp/>&lt;<sp/>yMax)<sp/>{</highlight></codeline>
<codeline lineno="4165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idx1<sp/>=<sp/>j;</highlight></codeline>
<codeline lineno="4166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--j;</highlight></codeline>
<codeline lineno="4169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:</highlight></codeline>
<codeline lineno="4173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>=<sp/>0.5<sp/>*<sp/>(line-&gt;yMin<sp/>+<sp/>line-&gt;yMax);</highlight></codeline>
<codeline lineno="4174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(yMin<sp/>&lt;<sp/>y<sp/>&amp;&amp;<sp/>y<sp/>&lt;<sp/>yMax)<sp/>{</highlight></codeline>
<codeline lineno="4175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(j<sp/>&lt;<sp/>line-&gt;len)<sp/>{</highlight></codeline>
<codeline lineno="4177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(0.5<sp/>*<sp/>(line-&gt;edge[j]<sp/>+<sp/>line-&gt;edge[j+1])<sp/>&lt;<sp/>xMax)<sp/>{</highlight></codeline>
<codeline lineno="4178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idx0<sp/>=<sp/>j;</highlight></codeline>
<codeline lineno="4179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++j;</highlight></codeline>
<codeline lineno="4182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j<sp/>=<sp/>line-&gt;len<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="4184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(j<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="4185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(0.5<sp/>*<sp/>(line-&gt;edge[j]<sp/>+<sp/>line-&gt;edge[j+1])<sp/>&gt;<sp/>xMin)<sp/>{</highlight></codeline>
<codeline lineno="4186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idx1<sp/>=<sp/>j;</highlight></codeline>
<codeline lineno="4187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--j;</highlight></codeline>
<codeline lineno="4190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>3:</highlight></codeline>
<codeline lineno="4194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>0.5<sp/>*<sp/>(line-&gt;xMin<sp/>+<sp/>line-&gt;xMax);</highlight></codeline>
<codeline lineno="4195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(xMin<sp/>&lt;<sp/>x<sp/>&amp;&amp;<sp/>x<sp/>&lt;<sp/>xMax)<sp/>{</highlight></codeline>
<codeline lineno="4196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(j<sp/>&lt;<sp/>line-&gt;len)<sp/>{</highlight></codeline>
<codeline lineno="4198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(0.5<sp/>*<sp/>(line-&gt;edge[j]<sp/>+<sp/>line-&gt;edge[j+1])<sp/>&lt;<sp/>yMax)<sp/>{</highlight></codeline>
<codeline lineno="4199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idx0<sp/>=<sp/>j;</highlight></codeline>
<codeline lineno="4200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++j;</highlight></codeline>
<codeline lineno="4203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j<sp/>=<sp/>line-&gt;len<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="4205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(j<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="4206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(0.5<sp/>*<sp/>(line-&gt;edge[j]<sp/>+<sp/>line-&gt;edge[j+1])<sp/>&gt;<sp/>yMin)<sp/>{</highlight></codeline>
<codeline lineno="4207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idx1<sp/>=<sp/>j;</highlight></codeline>
<codeline lineno="4208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--j;</highlight></codeline>
<codeline lineno="4211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(idx0<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>idx1<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="4216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nFrags<sp/>==<sp/>fragsSize)<sp/>{</highlight></codeline>
<codeline lineno="4217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fragsSize<sp/>*=<sp/>2;</highlight></codeline>
<codeline lineno="4218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>frags<sp/>=<sp/>(<ref refid="class_text_line_frag" kindref="compound">TextLineFrag</ref><sp/>*)</highlight></codeline>
<codeline lineno="4219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>greallocn(frags,<sp/>fragsSize,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="class_text_line_frag" kindref="compound">TextLineFrag</ref>));</highlight></codeline>
<codeline lineno="4220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>frags[nFrags].init(line,<sp/>idx0,<sp/>idx1<sp/>-<sp/>idx0<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="4222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++nFrags;</highlight></codeline>
<codeline lineno="4223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lastRot<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>line-&gt;rot<sp/>!=<sp/>lastRot)<sp/>{</highlight></codeline>
<codeline lineno="4224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oneRot<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="4225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lastRot<sp/>=<sp/>line-&gt;rot;</highlight></codeline>
<codeline lineno="4227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4228"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4230"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4231"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4232"><highlight class="normal"></highlight></codeline>
<codeline lineno="4233"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>sort<sp/>the<sp/>fragments<sp/>and<sp/>generate<sp/>the<sp/>string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4234"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nFrags<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="4235"><highlight class="normal"></highlight></codeline>
<codeline lineno="4236"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nFrags;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="4237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>frags[i].computeCoords(oneRot);</highlight></codeline>
<codeline lineno="4238"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4239"><highlight class="normal"><sp/><sp/><sp/><sp/>assignColumns(frags,<sp/>nFrags,<sp/>oneRot);</highlight></codeline>
<codeline lineno="4240"><highlight class="normal"></highlight></codeline>
<codeline lineno="4241"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>all<sp/>lines<sp/>in<sp/>the<sp/>region<sp/>have<sp/>the<sp/>same<sp/>rotation,<sp/>use<sp/>it;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>otherwise,<sp/>use<sp/>the<sp/>page&apos;s<sp/>primary<sp/>rotation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4243"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(oneRot)<sp/>{</highlight></codeline>
<codeline lineno="4244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>qsort(frags,<sp/>nFrags,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="class_text_line_frag" kindref="compound">TextLineFrag</ref>),</highlight></codeline>
<codeline lineno="4245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;TextLineFrag::cmpYXLineRot);</highlight></codeline>
<codeline lineno="4246"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>qsort(frags,<sp/>nFrags,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="class_text_line_frag" kindref="compound">TextLineFrag</ref>),</highlight></codeline>
<codeline lineno="4248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;TextLineFrag::cmpYXPrimaryRot);</highlight></codeline>
<codeline lineno="4249"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4250"><highlight class="normal"><sp/><sp/><sp/><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4251"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>nFrags)<sp/>{</highlight></codeline>
<codeline lineno="4252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>delta<sp/>=<sp/>maxIntraLineDelta<sp/>*<sp/>frags[i].line-&gt;words-&gt;fontSize;</highlight></codeline>
<codeline lineno="4253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>i+1;</highlight></codeline>
<codeline lineno="4254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j<sp/>&lt;<sp/>nFrags<sp/>&amp;&amp;<sp/>fabs(frags[j].base<sp/>-<sp/>frags[i].base)<sp/>&lt;<sp/>delta;</highlight></codeline>
<codeline lineno="4255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++j)<sp/>;</highlight></codeline>
<codeline lineno="4256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>qsort(frags<sp/>+<sp/>i,<sp/>j<sp/>-<sp/>i,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="class_text_line_frag" kindref="compound">TextLineFrag</ref>),</highlight></codeline>
<codeline lineno="4257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oneRot<sp/>?<sp/>&amp;TextLineFrag::cmpXYColumnLineRot</highlight></codeline>
<codeline lineno="4258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>&amp;TextLineFrag::cmpXYColumnPrimaryRot);</highlight></codeline>
<codeline lineno="4259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>=<sp/>j;</highlight></codeline>
<codeline lineno="4260"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4261"><highlight class="normal"></highlight></codeline>
<codeline lineno="4262"><highlight class="normal"><sp/><sp/><sp/><sp/>col<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4263"><highlight class="normal"><sp/><sp/><sp/><sp/>multiLine<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="4264"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nFrags;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="4265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>frag<sp/>=<sp/>&amp;frags[i];</highlight></codeline>
<codeline lineno="4266"><highlight class="normal"></highlight></codeline>
<codeline lineno="4267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>insert<sp/>a<sp/>return</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(frag-&gt;col<sp/>&lt;<sp/>col<sp/>||</highlight></codeline>
<codeline lineno="4269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(i<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>fabs(frag-&gt;base<sp/>-<sp/>frags[i-1].base)<sp/>&gt;</highlight></codeline>
<codeline lineno="4270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maxIntraLineDelta<sp/>*<sp/>frags[i-1].line-&gt;words-&gt;fontSize))<sp/>{</highlight></codeline>
<codeline lineno="4271"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;append(eol,<sp/>eolLen);</highlight></codeline>
<codeline lineno="4272"><highlight class="normal"><sp/><sp/><sp/><sp/>col<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4273"><highlight class="normal"><sp/><sp/><sp/><sp/>multiLine<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="4274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4275"><highlight class="normal"></highlight></codeline>
<codeline lineno="4276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>column<sp/>alignment</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>col<sp/>&lt;<sp/>frag-&gt;col;<sp/>++col)<sp/>{</highlight></codeline>
<codeline lineno="4278"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;append(space,<sp/>spaceLen);</highlight></codeline>
<codeline lineno="4279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4280"><highlight class="normal"></highlight></codeline>
<codeline lineno="4281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>the<sp/>fragment<sp/>text</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>col<sp/>+=<sp/>dumpFragment(frag-&gt;line-&gt;text<sp/>+<sp/>frag-&gt;start,<sp/>frag-&gt;len,<sp/>uMap,<sp/>s);</highlight></codeline>
<codeline lineno="4283"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4284"><highlight class="normal"></highlight></codeline>
<codeline lineno="4285"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(multiLine)<sp/>{</highlight></codeline>
<codeline lineno="4286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;append(eol,<sp/>eolLen);</highlight></codeline>
<codeline lineno="4287"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4288"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4289"><highlight class="normal"></highlight></codeline>
<codeline lineno="4290"><highlight class="normal"><sp/><sp/>gfree(frags);</highlight></codeline>
<codeline lineno="4291"><highlight class="normal"><sp/><sp/>uMap-&gt;decRefCnt();</highlight></codeline>
<codeline lineno="4292"><highlight class="normal"></highlight></codeline>
<codeline lineno="4293"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s;</highlight></codeline>
<codeline lineno="4294"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4295"><highlight class="normal"></highlight></codeline>
<codeline lineno="4296" refid="class_text_selection_visitor" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_text_selection_visitor" kindref="compound">TextSelectionVisitor</ref><sp/>{</highlight></codeline>
<codeline lineno="4297"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="4298"><highlight class="normal"><sp/><sp/><ref refid="class_text_selection_visitor" kindref="compound">TextSelectionVisitor</ref><sp/>(<ref refid="class_text_page" kindref="compound">TextPage</ref><sp/>*page);</highlight></codeline>
<codeline lineno="4299"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>~<ref refid="class_text_selection_visitor" kindref="compound">TextSelectionVisitor</ref><sp/>()<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="4300"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>visitBlock<sp/>(<ref refid="class_text_block" kindref="compound">TextBlock</ref><sp/>*block,</highlight></codeline>
<codeline lineno="4301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_text_line" kindref="compound">TextLine</ref><sp/>*begin,</highlight></codeline>
<codeline lineno="4302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_text_line" kindref="compound">TextLine</ref><sp/>*end,</highlight></codeline>
<codeline lineno="4303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_p_d_f_rectangle" kindref="compound">PDFRectangle</ref><sp/>*selection)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4304"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>visitLine<sp/>(<ref refid="class_text_line" kindref="compound">TextLine</ref><sp/>*line,<sp/></highlight></codeline>
<codeline lineno="4305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_text_word" kindref="compound">TextWord</ref><sp/>*begin,</highlight></codeline>
<codeline lineno="4306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_text_word" kindref="compound">TextWord</ref><sp/>*end,</highlight></codeline>
<codeline lineno="4307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>edge_begin,</highlight></codeline>
<codeline lineno="4308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>edge_end,</highlight></codeline>
<codeline lineno="4309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_p_d_f_rectangle" kindref="compound">PDFRectangle</ref><sp/>*selection)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4310"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>visitWord<sp/>(<ref refid="class_text_word" kindref="compound">TextWord</ref><sp/>*word,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>begin,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>end,</highlight></codeline>
<codeline lineno="4311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_p_d_f_rectangle" kindref="compound">PDFRectangle</ref><sp/>*selection)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4312"><highlight class="normal"></highlight></codeline>
<codeline lineno="4313"><highlight class="normal"></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="4314"><highlight class="normal"><sp/><sp/><ref refid="class_text_page" kindref="compound">TextPage</ref><sp/>*page;</highlight></codeline>
<codeline lineno="4315"><highlight class="normal">};</highlight></codeline>
<codeline lineno="4316"><highlight class="normal"></highlight></codeline>
<codeline lineno="4317"><highlight class="normal">TextSelectionVisitor::TextSelectionVisitor<sp/>(<ref refid="class_text_page" kindref="compound">TextPage</ref><sp/>*page)</highlight></codeline>
<codeline lineno="4318"><highlight class="normal"><sp/><sp/>:<sp/>page(page)</highlight></codeline>
<codeline lineno="4319"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4320"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4321"><highlight class="normal"></highlight></codeline>
<codeline lineno="4322"><highlight class="normal"></highlight></codeline>
<codeline lineno="4323" refid="class_text_selection_dumper" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_text_selection_dumper" kindref="compound">TextSelectionDumper</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="class_text_selection_visitor" kindref="compound">TextSelectionVisitor</ref><sp/>{</highlight></codeline>
<codeline lineno="4324"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="4325"><highlight class="normal"><sp/><sp/><ref refid="class_text_selection_dumper" kindref="compound">TextSelectionDumper</ref>(<ref refid="class_text_page" kindref="compound">TextPage</ref><sp/>*page);</highlight></codeline>
<codeline lineno="4326"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>~<ref refid="class_text_selection_dumper" kindref="compound">TextSelectionDumper</ref>();</highlight></codeline>
<codeline lineno="4327"><highlight class="normal"></highlight></codeline>
<codeline lineno="4328"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>visitBlock<sp/>(<ref refid="class_text_block" kindref="compound">TextBlock</ref><sp/>*block,<sp/></highlight></codeline>
<codeline lineno="4329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_text_line" kindref="compound">TextLine</ref><sp/>*begin,</highlight></codeline>
<codeline lineno="4330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_text_line" kindref="compound">TextLine</ref><sp/>*end,</highlight></codeline>
<codeline lineno="4331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_p_d_f_rectangle" kindref="compound">PDFRectangle</ref><sp/>*selection)<sp/>{<sp/>};</highlight></codeline>
<codeline lineno="4332"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>visitLine<sp/>(<ref refid="class_text_line" kindref="compound">TextLine</ref><sp/>*line,</highlight></codeline>
<codeline lineno="4333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_text_word" kindref="compound">TextWord</ref><sp/>*begin,</highlight></codeline>
<codeline lineno="4334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_text_word" kindref="compound">TextWord</ref><sp/>*end,</highlight></codeline>
<codeline lineno="4335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>edge_begin,</highlight></codeline>
<codeline lineno="4336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>edge_end,</highlight></codeline>
<codeline lineno="4337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_p_d_f_rectangle" kindref="compound">PDFRectangle</ref><sp/>*selection);</highlight></codeline>
<codeline lineno="4338"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>visitWord<sp/>(<ref refid="class_text_word" kindref="compound">TextWord</ref><sp/>*word,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>begin,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>end,</highlight></codeline>
<codeline lineno="4339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_p_d_f_rectangle" kindref="compound">PDFRectangle</ref><sp/>*selection);</highlight></codeline>
<codeline lineno="4340"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>endPage();</highlight></codeline>
<codeline lineno="4341"><highlight class="normal"></highlight></codeline>
<codeline lineno="4342"><highlight class="normal"><sp/><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*getText(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4343"><highlight class="normal"><sp/><sp/><ref refid="class_goo_list" kindref="compound">GooList</ref><sp/>**takeWordList(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*nLines);</highlight></codeline>
<codeline lineno="4344"><highlight class="normal"></highlight></codeline>
<codeline lineno="4345"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="4346"><highlight class="normal"></highlight></codeline>
<codeline lineno="4347"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>startLine();</highlight></codeline>
<codeline lineno="4348"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>finishLine();</highlight></codeline>
<codeline lineno="4349"><highlight class="normal"></highlight></codeline>
<codeline lineno="4350"><highlight class="normal"><sp/><sp/><ref refid="class_goo_list" kindref="compound">GooList</ref><sp/>**lines;</highlight></codeline>
<codeline lineno="4351"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nLines,<sp/>linesSize;</highlight></codeline>
<codeline lineno="4352"><highlight class="normal"><sp/><sp/><ref refid="class_goo_list" kindref="compound">GooList</ref><sp/>*words;</highlight></codeline>
<codeline lineno="4353"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tableId;</highlight></codeline>
<codeline lineno="4354"><highlight class="normal"><sp/><sp/><ref refid="class_text_block" kindref="compound">TextBlock</ref><sp/>*currentBlock;</highlight></codeline>
<codeline lineno="4355"><highlight class="normal">};</highlight></codeline>
<codeline lineno="4356"><highlight class="normal"></highlight></codeline>
<codeline lineno="4357"><highlight class="normal">TextSelectionDumper::TextSelectionDumper(<ref refid="class_text_page" kindref="compound">TextPage</ref><sp/>*page)</highlight></codeline>
<codeline lineno="4358"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/><ref refid="class_text_selection_visitor" kindref="compound">TextSelectionVisitor</ref>(page)</highlight></codeline>
<codeline lineno="4359"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4360"><highlight class="normal"><sp/><sp/>linesSize<sp/>=<sp/>256;</highlight></codeline>
<codeline lineno="4361"><highlight class="normal"><sp/><sp/>lines<sp/>=<sp/>(<ref refid="class_goo_list" kindref="compound">GooList</ref><sp/>**)gmallocn(linesSize,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="class_goo_list" kindref="compound">GooList</ref><sp/>*));</highlight></codeline>
<codeline lineno="4362"><highlight class="normal"><sp/><sp/>nLines<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4363"><highlight class="normal"></highlight></codeline>
<codeline lineno="4364"><highlight class="normal"><sp/><sp/>tableId<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="4365"><highlight class="normal"><sp/><sp/>currentBlock<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="4366"><highlight class="normal"><sp/><sp/>words<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="4367"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4368"><highlight class="normal"></highlight></codeline>
<codeline lineno="4369"><highlight class="normal">TextSelectionDumper::~TextSelectionDumper()</highlight></codeline>
<codeline lineno="4370"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4371"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nLines;<sp/>i++)</highlight></codeline>
<codeline lineno="4372"><highlight class="normal"><sp/><sp/><sp/><sp/>deleteGooList(lines[i],<sp/><ref refid="class_text_word_selection" kindref="compound">TextWordSelection</ref>);</highlight></codeline>
<codeline lineno="4373"><highlight class="normal"><sp/><sp/>gfree(lines);</highlight></codeline>
<codeline lineno="4374"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4375"><highlight class="normal"></highlight></codeline>
<codeline lineno="4376"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TextSelectionDumper::startLine()</highlight></codeline>
<codeline lineno="4377"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4378"><highlight class="normal"><sp/><sp/>finishLine();</highlight></codeline>
<codeline lineno="4379"><highlight class="normal"><sp/><sp/>words<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_goo_list" kindref="compound">GooList</ref>();</highlight></codeline>
<codeline lineno="4380"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4381"><highlight class="normal"></highlight></codeline>
<codeline lineno="4382"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TextSelectionDumper::finishLine()</highlight></codeline>
<codeline lineno="4383"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4384"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nLines<sp/>==<sp/>linesSize)<sp/>{</highlight></codeline>
<codeline lineno="4385"><highlight class="normal"><sp/><sp/><sp/><sp/>linesSize<sp/>*=<sp/>2;</highlight></codeline>
<codeline lineno="4386"><highlight class="normal"><sp/><sp/><sp/><sp/>lines<sp/>=<sp/>(<ref refid="class_goo_list" kindref="compound">GooList</ref><sp/>**)grealloc(lines,<sp/>linesSize<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="class_goo_list" kindref="compound">GooList</ref><sp/>*));</highlight></codeline>
<codeline lineno="4387"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4388"><highlight class="normal"></highlight></codeline>
<codeline lineno="4389"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(words<sp/>&amp;&amp;<sp/>words-&gt;getLength()<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="4390"><highlight class="normal"><sp/><sp/><sp/><sp/>lines[nLines++]<sp/>=<sp/>words;</highlight></codeline>
<codeline lineno="4391"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(words)</highlight></codeline>
<codeline lineno="4392"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>words;</highlight></codeline>
<codeline lineno="4393"><highlight class="normal"><sp/><sp/>words<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="4394"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4395"><highlight class="normal"></highlight></codeline>
<codeline lineno="4396"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TextSelectionDumper::visitLine<sp/>(<ref refid="class_text_line" kindref="compound">TextLine</ref><sp/>*line,</highlight></codeline>
<codeline lineno="4397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_text_word" kindref="compound">TextWord</ref><sp/>*begin,</highlight></codeline>
<codeline lineno="4398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_text_word" kindref="compound">TextWord</ref><sp/>*end,</highlight></codeline>
<codeline lineno="4399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>edge_begin,</highlight></codeline>
<codeline lineno="4400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>edge_end,</highlight></codeline>
<codeline lineno="4401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_p_d_f_rectangle" kindref="compound">PDFRectangle</ref><sp/>*selection)</highlight></codeline>
<codeline lineno="4402"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4403"><highlight class="normal"><sp/><sp/><ref refid="class_text_line_frag" kindref="compound">TextLineFrag</ref><sp/>frag;</highlight></codeline>
<codeline lineno="4404"><highlight class="normal"></highlight></codeline>
<codeline lineno="4405"><highlight class="normal"><sp/><sp/>frag.init(line,<sp/>edge_begin,<sp/>edge_end<sp/>-<sp/>edge_begin);</highlight></codeline>
<codeline lineno="4406"><highlight class="normal"></highlight></codeline>
<codeline lineno="4407"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tableId<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>frag.line-&gt;blk-&gt;tableId<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="4408"><highlight class="normal"><sp/><sp/><sp/><sp/>finishLine();</highlight></codeline>
<codeline lineno="4409"><highlight class="normal"></highlight></codeline>
<codeline lineno="4410"><highlight class="normal"><sp/><sp/><sp/><sp/>tableId<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="4411"><highlight class="normal"><sp/><sp/><sp/><sp/>currentBlock<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="4412"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4413"><highlight class="normal"></highlight></codeline>
<codeline lineno="4414"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(frag.line-&gt;blk-&gt;tableId<sp/>&gt;=<sp/>0)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>a<sp/>table</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4415"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tableId<sp/>==<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="4416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tableId<sp/>=<sp/>frag.line-&gt;blk-&gt;tableId;</highlight></codeline>
<codeline lineno="4417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>currentBlock<sp/>=<sp/>frag.line-&gt;blk;</highlight></codeline>
<codeline lineno="4418"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4419"><highlight class="normal"></highlight></codeline>
<codeline lineno="4420"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(currentBlock<sp/>==<sp/>frag.line-&gt;blk)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>the<sp/>same<sp/>block</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>startLine();</highlight></codeline>
<codeline lineno="4422"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="comment">//<sp/>another<sp/>block</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(currentBlock-&gt;tableEnd)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>previous<sp/>block<sp/>ended<sp/>its<sp/>row</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>startLine();</highlight></codeline>
<codeline lineno="4425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>currentBlock<sp/>=<sp/>frag.line-&gt;blk;</highlight></codeline>
<codeline lineno="4427"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4428"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="comment">//<sp/>not<sp/>a<sp/>table</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4429"><highlight class="normal"><sp/><sp/><sp/><sp/>startLine();</highlight></codeline>
<codeline lineno="4430"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4431"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4432"><highlight class="normal"></highlight></codeline>
<codeline lineno="4433"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TextSelectionDumper::visitWord<sp/>(<ref refid="class_text_word" kindref="compound">TextWord</ref><sp/>*word,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>begin,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>end,</highlight></codeline>
<codeline lineno="4434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_p_d_f_rectangle" kindref="compound">PDFRectangle</ref><sp/>*selection)</highlight></codeline>
<codeline lineno="4435"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4436"><highlight class="normal"><sp/><sp/>words-&gt;append(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_text_word_selection" kindref="compound">TextWordSelection</ref>(word,<sp/>begin,<sp/>end));</highlight></codeline>
<codeline lineno="4437"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4438"><highlight class="normal"></highlight></codeline>
<codeline lineno="4439"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TextSelectionDumper::endPage()</highlight></codeline>
<codeline lineno="4440"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4441"><highlight class="normal"><sp/><sp/>finishLine();</highlight></codeline>
<codeline lineno="4442"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4443"><highlight class="normal"></highlight></codeline>
<codeline lineno="4444"><highlight class="normal"><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*TextSelectionDumper::getText<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="4445"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4446"><highlight class="normal"><sp/><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*text;</highlight></codeline>
<codeline lineno="4447"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="4448"><highlight class="normal"><sp/><sp/><ref refid="class_unicode_map" kindref="compound">UnicodeMap</ref><sp/>*uMap;</highlight></codeline>
<codeline lineno="4449"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>space[8],<sp/>eol[16];</highlight></codeline>
<codeline lineno="4450"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>spaceLen,<sp/>eolLen;</highlight></codeline>
<codeline lineno="4451"><highlight class="normal"></highlight></codeline>
<codeline lineno="4452"><highlight class="normal"><sp/><sp/>text<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref>();</highlight></codeline>
<codeline lineno="4453"><highlight class="normal"></highlight></codeline>
<codeline lineno="4454"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(uMap<sp/>=<sp/>globalParams-&gt;getTextEncoding()))</highlight></codeline>
<codeline lineno="4455"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>text;</highlight></codeline>
<codeline lineno="4456"><highlight class="normal"></highlight></codeline>
<codeline lineno="4457"><highlight class="normal"><sp/><sp/>spaceLen<sp/>=<sp/>uMap-&gt;mapUnicode(0x20,<sp/>space,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(space));</highlight></codeline>
<codeline lineno="4458"><highlight class="normal"><sp/><sp/>eolLen<sp/>=<sp/>uMap-&gt;mapUnicode(0x0a,<sp/>eol,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(eol));</highlight></codeline>
<codeline lineno="4459"><highlight class="normal"></highlight></codeline>
<codeline lineno="4460"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nLines;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="4461"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_goo_list" kindref="compound">GooList</ref><sp/>*lineWords<sp/>=<sp/>lines[i];</highlight></codeline>
<codeline lineno="4462"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>lineWords-&gt;getLength();<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="4463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_text_word_selection" kindref="compound">TextWordSelection</ref><sp/>*sel<sp/>=<sp/>(<ref refid="class_text_word_selection" kindref="compound">TextWordSelection</ref><sp/>*)lineWords-&gt;get(j);</highlight></codeline>
<codeline lineno="4464"><highlight class="normal"></highlight></codeline>
<codeline lineno="4465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>page-&gt;dumpFragment<sp/>(sel-&gt;word-&gt;text<sp/>+<sp/>sel-&gt;begin,<sp/>sel-&gt;end<sp/>-<sp/>sel-&gt;begin,<sp/>uMap,<sp/>text);</highlight></codeline>
<codeline lineno="4466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j<sp/>&lt;<sp/>lineWords-&gt;getLength()<sp/>-<sp/>1)</highlight></codeline>
<codeline lineno="4467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>text-&gt;append(space,<sp/>spaceLen);</highlight></codeline>
<codeline lineno="4468"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4469"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>nLines<sp/>-<sp/>1)</highlight></codeline>
<codeline lineno="4470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>text-&gt;append(eol,<sp/>eolLen);</highlight></codeline>
<codeline lineno="4471"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4472"><highlight class="normal"></highlight></codeline>
<codeline lineno="4473"><highlight class="normal"><sp/><sp/>uMap-&gt;decRefCnt();</highlight></codeline>
<codeline lineno="4474"><highlight class="normal"></highlight></codeline>
<codeline lineno="4475"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>text;</highlight></codeline>
<codeline lineno="4476"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4477"><highlight class="normal"></highlight></codeline>
<codeline lineno="4478"><highlight class="normal"><ref refid="class_goo_list" kindref="compound">GooList</ref><sp/>**TextSelectionDumper::takeWordList(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*nLinesOut)</highlight></codeline>
<codeline lineno="4479"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4480"><highlight class="normal"><sp/><sp/><ref refid="class_goo_list" kindref="compound">GooList</ref><sp/>**returnValue<sp/>=<sp/>lines;</highlight></codeline>
<codeline lineno="4481"><highlight class="normal"></highlight></codeline>
<codeline lineno="4482"><highlight class="normal"><sp/><sp/>*nLinesOut<sp/>=<sp/>nLines;</highlight></codeline>
<codeline lineno="4483"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nLines<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="4484"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="4485"><highlight class="normal"></highlight></codeline>
<codeline lineno="4486"><highlight class="normal"><sp/><sp/>nLines<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4487"><highlight class="normal"><sp/><sp/>lines<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="4488"><highlight class="normal"></highlight></codeline>
<codeline lineno="4489"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>returnValue;</highlight></codeline>
<codeline lineno="4490"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4491"><highlight class="normal"></highlight></codeline>
<codeline lineno="4492" refid="class_text_selection_sizer" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_text_selection_sizer" kindref="compound">TextSelectionSizer</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="class_text_selection_visitor" kindref="compound">TextSelectionVisitor</ref><sp/>{</highlight></codeline>
<codeline lineno="4493"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="4494"><highlight class="normal"><sp/><sp/><ref refid="class_text_selection_sizer" kindref="compound">TextSelectionSizer</ref>(<ref refid="class_text_page" kindref="compound">TextPage</ref><sp/>*page,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>scale);</highlight></codeline>
<codeline lineno="4495"><highlight class="normal"><sp/><sp/>~<ref refid="class_text_selection_sizer" kindref="compound">TextSelectionSizer</ref>()<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="4496"><highlight class="normal"></highlight></codeline>
<codeline lineno="4497"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>visitBlock<sp/>(<ref refid="class_text_block" kindref="compound">TextBlock</ref><sp/>*block,</highlight></codeline>
<codeline lineno="4498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_text_line" kindref="compound">TextLine</ref><sp/>*begin,</highlight></codeline>
<codeline lineno="4499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_text_line" kindref="compound">TextLine</ref><sp/>*end,</highlight></codeline>
<codeline lineno="4500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_p_d_f_rectangle" kindref="compound">PDFRectangle</ref><sp/>*selection)<sp/>{<sp/>};</highlight></codeline>
<codeline lineno="4501"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>visitLine<sp/>(<ref refid="class_text_line" kindref="compound">TextLine</ref><sp/>*line,<sp/></highlight></codeline>
<codeline lineno="4502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_text_word" kindref="compound">TextWord</ref><sp/>*begin,</highlight></codeline>
<codeline lineno="4503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_text_word" kindref="compound">TextWord</ref><sp/>*end,</highlight></codeline>
<codeline lineno="4504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>edge_begin,</highlight></codeline>
<codeline lineno="4505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>edge_end,</highlight></codeline>
<codeline lineno="4506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_p_d_f_rectangle" kindref="compound">PDFRectangle</ref><sp/>*selection);</highlight></codeline>
<codeline lineno="4507"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>visitWord<sp/>(<ref refid="class_text_word" kindref="compound">TextWord</ref><sp/>*word,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>begin,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>end,</highlight></codeline>
<codeline lineno="4508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_p_d_f_rectangle" kindref="compound">PDFRectangle</ref><sp/>*selection)<sp/>{<sp/>};</highlight></codeline>
<codeline lineno="4509"><highlight class="normal"></highlight></codeline>
<codeline lineno="4510"><highlight class="normal"><sp/><sp/><ref refid="class_goo_list" kindref="compound">GooList</ref><sp/>*getRegion<sp/>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>list;<sp/>}</highlight></codeline>
<codeline lineno="4511"><highlight class="normal"></highlight></codeline>
<codeline lineno="4512"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="4513"><highlight class="normal"><sp/><sp/><ref refid="class_goo_list" kindref="compound">GooList</ref><sp/>*list;</highlight></codeline>
<codeline lineno="4514"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>scale;</highlight></codeline>
<codeline lineno="4515"><highlight class="normal">};</highlight></codeline>
<codeline lineno="4516"><highlight class="normal"></highlight></codeline>
<codeline lineno="4517"><highlight class="normal">TextSelectionSizer::TextSelectionSizer(<ref refid="class_text_page" kindref="compound">TextPage</ref><sp/>*page,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>scale)</highlight></codeline>
<codeline lineno="4518"><highlight class="normal"><sp/><sp/>:<sp/><ref refid="class_text_selection_visitor" kindref="compound">TextSelectionVisitor</ref>(page),</highlight></codeline>
<codeline lineno="4519"><highlight class="normal"><sp/><sp/><sp/><sp/>scale(scale)</highlight></codeline>
<codeline lineno="4520"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4521"><highlight class="normal"><sp/><sp/>list<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_goo_list" kindref="compound">GooList</ref>();</highlight></codeline>
<codeline lineno="4522"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4523"><highlight class="normal"></highlight></codeline>
<codeline lineno="4524"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TextSelectionSizer::visitLine<sp/>(<ref refid="class_text_line" kindref="compound">TextLine</ref><sp/>*line,<sp/></highlight></codeline>
<codeline lineno="4525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_text_word" kindref="compound">TextWord</ref><sp/>*begin,</highlight></codeline>
<codeline lineno="4526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_text_word" kindref="compound">TextWord</ref><sp/>*end,</highlight></codeline>
<codeline lineno="4527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>edge_begin,</highlight></codeline>
<codeline lineno="4528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>edge_end,</highlight></codeline>
<codeline lineno="4529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_p_d_f_rectangle" kindref="compound">PDFRectangle</ref><sp/>*selection)</highlight></codeline>
<codeline lineno="4530"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4531"><highlight class="normal"><sp/><sp/><ref refid="class_p_d_f_rectangle" kindref="compound">PDFRectangle</ref><sp/>*rect;</highlight></codeline>
<codeline lineno="4532"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x1,<sp/>y1,<sp/>x2,<sp/>y2,<sp/>margin;</highlight></codeline>
<codeline lineno="4533"><highlight class="normal"></highlight></codeline>
<codeline lineno="4534"><highlight class="normal"><sp/><sp/>margin<sp/>=<sp/>(line-&gt;yMax<sp/>-<sp/>line-&gt;yMin)<sp/>/<sp/>8;</highlight></codeline>
<codeline lineno="4535"><highlight class="normal"><sp/><sp/>x1<sp/>=<sp/>line-&gt;edge[edge_begin];</highlight></codeline>
<codeline lineno="4536"><highlight class="normal"><sp/><sp/>y1<sp/>=<sp/>line-&gt;yMin<sp/>-<sp/>margin;</highlight></codeline>
<codeline lineno="4537"><highlight class="normal"><sp/><sp/>x2<sp/>=<sp/>line-&gt;edge[edge_end];</highlight></codeline>
<codeline lineno="4538"><highlight class="normal"><sp/><sp/>y2<sp/>=<sp/>line-&gt;yMax<sp/>+<sp/>margin;</highlight></codeline>
<codeline lineno="4539"><highlight class="normal"></highlight></codeline>
<codeline lineno="4540"><highlight class="normal"><sp/><sp/>rect<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_p_d_f_rectangle" kindref="compound">PDFRectangle</ref><sp/>(floor<sp/>(x1<sp/>*<sp/>scale),<sp/></highlight></codeline>
<codeline lineno="4541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>floor<sp/>(y1<sp/>*<sp/>scale),</highlight></codeline>
<codeline lineno="4542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ceil<sp/>(x2<sp/>*<sp/>scale),</highlight></codeline>
<codeline lineno="4543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ceil<sp/>(y2<sp/>*<sp/>scale));</highlight></codeline>
<codeline lineno="4544"><highlight class="normal"><sp/><sp/>list-&gt;append<sp/>(rect);</highlight></codeline>
<codeline lineno="4545"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4546"><highlight class="normal"></highlight></codeline>
<codeline lineno="4547"><highlight class="normal"></highlight></codeline>
<codeline lineno="4548" refid="class_text_selection_painter" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_text_selection_painter" kindref="compound">TextSelectionPainter</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="class_text_selection_visitor" kindref="compound">TextSelectionVisitor</ref><sp/>{</highlight></codeline>
<codeline lineno="4549"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="4550"><highlight class="normal"><sp/><sp/><ref refid="class_text_selection_painter" kindref="compound">TextSelectionPainter</ref>(<ref refid="class_text_page" kindref="compound">TextPage</ref><sp/>*page,</highlight></codeline>
<codeline lineno="4551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>scale,</highlight></codeline>
<codeline lineno="4552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rotation,</highlight></codeline>
<codeline lineno="4553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_output_dev" kindref="compound">OutputDev</ref><sp/>*out,</highlight></codeline>
<codeline lineno="4554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>*box_color,</highlight></codeline>
<codeline lineno="4555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>*glyph_color);</highlight></codeline>
<codeline lineno="4556"><highlight class="normal"><sp/><sp/>~<ref refid="class_text_selection_painter" kindref="compound">TextSelectionPainter</ref>();</highlight></codeline>
<codeline lineno="4557"><highlight class="normal"></highlight></codeline>
<codeline lineno="4558"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>visitBlock<sp/>(<ref refid="class_text_block" kindref="compound">TextBlock</ref><sp/>*block,</highlight></codeline>
<codeline lineno="4559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_text_line" kindref="compound">TextLine</ref><sp/>*begin,</highlight></codeline>
<codeline lineno="4560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_text_line" kindref="compound">TextLine</ref><sp/>*end,</highlight></codeline>
<codeline lineno="4561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_p_d_f_rectangle" kindref="compound">PDFRectangle</ref><sp/>*selection)<sp/>{<sp/>};</highlight></codeline>
<codeline lineno="4562"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>visitLine<sp/>(<ref refid="class_text_line" kindref="compound">TextLine</ref><sp/>*line,<sp/></highlight></codeline>
<codeline lineno="4563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_text_word" kindref="compound">TextWord</ref><sp/>*begin,</highlight></codeline>
<codeline lineno="4564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_text_word" kindref="compound">TextWord</ref><sp/>*end,</highlight></codeline>
<codeline lineno="4565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>edge_begin,</highlight></codeline>
<codeline lineno="4566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>edge_end,</highlight></codeline>
<codeline lineno="4567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_p_d_f_rectangle" kindref="compound">PDFRectangle</ref><sp/>*selection);</highlight></codeline>
<codeline lineno="4568"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>visitWord<sp/>(<ref refid="class_text_word" kindref="compound">TextWord</ref><sp/>*word,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>begin,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>end,</highlight></codeline>
<codeline lineno="4569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_p_d_f_rectangle" kindref="compound">PDFRectangle</ref><sp/>*selection);</highlight></codeline>
<codeline lineno="4570"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>endPage();</highlight></codeline>
<codeline lineno="4571"><highlight class="normal"></highlight></codeline>
<codeline lineno="4572"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="4573"><highlight class="normal"><sp/><sp/><ref refid="class_output_dev" kindref="compound">OutputDev</ref><sp/>*out;</highlight></codeline>
<codeline lineno="4574"><highlight class="normal"><sp/><sp/><ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>*glyph_color;</highlight></codeline>
<codeline lineno="4575"><highlight class="normal"><sp/><sp/><ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state;</highlight></codeline>
<codeline lineno="4576"><highlight class="normal"><sp/><sp/><ref refid="class_goo_list" kindref="compound">GooList</ref><sp/>*selectionList;</highlight></codeline>
<codeline lineno="4577"><highlight class="normal"><sp/><sp/><ref refid="class_matrix" kindref="compound">Matrix</ref><sp/>ctm,<sp/>ictm;</highlight></codeline>
<codeline lineno="4578"><highlight class="normal">};</highlight></codeline>
<codeline lineno="4579"><highlight class="normal"></highlight></codeline>
<codeline lineno="4580"><highlight class="normal">TextSelectionPainter::TextSelectionPainter(<ref refid="class_text_page" kindref="compound">TextPage</ref><sp/>*page,</highlight></codeline>
<codeline lineno="4581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>scale,</highlight></codeline>
<codeline lineno="4582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rotation,</highlight></codeline>
<codeline lineno="4583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_output_dev" kindref="compound">OutputDev</ref><sp/>*out,</highlight></codeline>
<codeline lineno="4584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>*box_color,</highlight></codeline>
<codeline lineno="4585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>*glyph_color)</highlight></codeline>
<codeline lineno="4586"><highlight class="normal"><sp/><sp/>:<sp/><ref refid="class_text_selection_visitor" kindref="compound">TextSelectionVisitor</ref>(page),</highlight></codeline>
<codeline lineno="4587"><highlight class="normal"><sp/><sp/><sp/><sp/>out(out),</highlight></codeline>
<codeline lineno="4588"><highlight class="normal"><sp/><sp/><sp/><sp/>glyph_color(glyph_color)</highlight></codeline>
<codeline lineno="4589"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4590"><highlight class="normal"><sp/><sp/><ref refid="class_p_d_f_rectangle" kindref="compound">PDFRectangle</ref><sp/>box(0,<sp/>0,<sp/>page-&gt;pageWidth,<sp/>page-&gt;pageHeight);</highlight></codeline>
<codeline lineno="4591"><highlight class="normal"></highlight></codeline>
<codeline lineno="4592"><highlight class="normal"><sp/><sp/>selectionList<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_goo_list" kindref="compound">GooList</ref>();</highlight></codeline>
<codeline lineno="4593"><highlight class="normal"><sp/><sp/>state<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_gfx_state" kindref="compound">GfxState</ref>(72<sp/>*<sp/>scale,<sp/>72<sp/>*<sp/>scale,<sp/>&amp;box,<sp/>rotation,<sp/>gFalse);</highlight></codeline>
<codeline lineno="4594"><highlight class="normal"></highlight></codeline>
<codeline lineno="4595"><highlight class="normal"><sp/><sp/>state-&gt;getCTM(&amp;ctm);</highlight></codeline>
<codeline lineno="4596"><highlight class="normal"><sp/><sp/>ctm.invertTo(&amp;ictm);</highlight></codeline>
<codeline lineno="4597"><highlight class="normal"></highlight></codeline>
<codeline lineno="4598"><highlight class="normal"><sp/><sp/>out-&gt;startPage(0,<sp/>state,<sp/>NULL);</highlight></codeline>
<codeline lineno="4599"><highlight class="normal"><sp/><sp/>out-&gt;setDefaultCTM<sp/>(state-&gt;getCTM());</highlight></codeline>
<codeline lineno="4600"><highlight class="normal"></highlight></codeline>
<codeline lineno="4601"><highlight class="normal"><sp/><sp/>state-&gt;setFillColorSpace(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_gfx_device_r_g_b_color_space" kindref="compound">GfxDeviceRGBColorSpace</ref>());</highlight></codeline>
<codeline lineno="4602"><highlight class="normal"><sp/><sp/>state-&gt;setFillColor(box_color);</highlight></codeline>
<codeline lineno="4603"><highlight class="normal"><sp/><sp/>out-&gt;updateFillColor(state);</highlight></codeline>
<codeline lineno="4604"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4605"><highlight class="normal"></highlight></codeline>
<codeline lineno="4606"><highlight class="normal">TextSelectionPainter::~TextSelectionPainter()</highlight></codeline>
<codeline lineno="4607"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4608"><highlight class="normal"><sp/><sp/>deleteGooList(selectionList,<sp/><ref refid="class_text_word_selection" kindref="compound">TextWordSelection</ref>);</highlight></codeline>
<codeline lineno="4609"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>state;</highlight></codeline>
<codeline lineno="4610"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4611"><highlight class="normal"></highlight></codeline>
<codeline lineno="4612"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TextSelectionPainter::visitLine<sp/>(<ref refid="class_text_line" kindref="compound">TextLine</ref><sp/>*line,</highlight></codeline>
<codeline lineno="4613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_text_word" kindref="compound">TextWord</ref><sp/>*begin,</highlight></codeline>
<codeline lineno="4614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_text_word" kindref="compound">TextWord</ref><sp/>*end,</highlight></codeline>
<codeline lineno="4615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>edge_begin,</highlight></codeline>
<codeline lineno="4616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>edge_end,</highlight></codeline>
<codeline lineno="4617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_p_d_f_rectangle" kindref="compound">PDFRectangle</ref><sp/>*selection)</highlight></codeline>
<codeline lineno="4618"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4619"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x1,<sp/>y1,<sp/>x2,<sp/>y2,<sp/>margin;</highlight></codeline>
<codeline lineno="4620"><highlight class="normal"></highlight></codeline>
<codeline lineno="4621"><highlight class="normal"><sp/><sp/>margin<sp/>=<sp/>(line-&gt;yMax<sp/>-<sp/>line-&gt;yMin)<sp/>/<sp/>8;</highlight></codeline>
<codeline lineno="4622"><highlight class="normal"><sp/><sp/>x1<sp/>=<sp/>floor<sp/>(line-&gt;edge[edge_begin]);</highlight></codeline>
<codeline lineno="4623"><highlight class="normal"><sp/><sp/>y1<sp/>=<sp/>floor<sp/>(line-&gt;yMin<sp/>-<sp/>margin);</highlight></codeline>
<codeline lineno="4624"><highlight class="normal"><sp/><sp/>x2<sp/>=<sp/>ceil<sp/>(line-&gt;edge[edge_end]);</highlight></codeline>
<codeline lineno="4625"><highlight class="normal"><sp/><sp/>y2<sp/>=<sp/>ceil<sp/>(line-&gt;yMax<sp/>+<sp/>margin);</highlight></codeline>
<codeline lineno="4626"><highlight class="normal"></highlight></codeline>
<codeline lineno="4627"><highlight class="normal"><sp/><sp/>ctm.transform(line-&gt;edge[edge_begin],<sp/>line-&gt;yMin<sp/>-<sp/>margin,<sp/>&amp;x1,<sp/>&amp;y1);</highlight></codeline>
<codeline lineno="4628"><highlight class="normal"><sp/><sp/>ctm.transform(line-&gt;edge[edge_end],<sp/>line-&gt;yMax<sp/>+<sp/>margin,<sp/>&amp;x2,<sp/>&amp;y2);</highlight></codeline>
<codeline lineno="4629"><highlight class="normal"></highlight></codeline>
<codeline lineno="4630"><highlight class="normal"><sp/><sp/>x1<sp/>=<sp/>floor<sp/>(x1);</highlight></codeline>
<codeline lineno="4631"><highlight class="normal"><sp/><sp/>y1<sp/>=<sp/>floor<sp/>(y1);</highlight></codeline>
<codeline lineno="4632"><highlight class="normal"><sp/><sp/>x2<sp/>=<sp/>ceil<sp/>(x2);</highlight></codeline>
<codeline lineno="4633"><highlight class="normal"><sp/><sp/>y2<sp/>=<sp/>ceil<sp/>(y2);</highlight></codeline>
<codeline lineno="4634"><highlight class="normal"></highlight></codeline>
<codeline lineno="4635"><highlight class="normal"><sp/><sp/>ictm.transform(x1,<sp/>y1,<sp/>&amp;x1,<sp/>&amp;y1);</highlight></codeline>
<codeline lineno="4636"><highlight class="normal"><sp/><sp/>ictm.transform(x2,<sp/>y2,<sp/>&amp;x2,<sp/>&amp;y2);</highlight></codeline>
<codeline lineno="4637"><highlight class="normal"></highlight></codeline>
<codeline lineno="4638"><highlight class="normal"><sp/><sp/>state-&gt;moveTo(x1,<sp/>y1);</highlight></codeline>
<codeline lineno="4639"><highlight class="normal"><sp/><sp/>state-&gt;lineTo(x2,<sp/>y1);</highlight></codeline>
<codeline lineno="4640"><highlight class="normal"><sp/><sp/>state-&gt;lineTo(x2,<sp/>y2);</highlight></codeline>
<codeline lineno="4641"><highlight class="normal"><sp/><sp/>state-&gt;lineTo(x1,<sp/>y2);</highlight></codeline>
<codeline lineno="4642"><highlight class="normal"><sp/><sp/>state-&gt;closePath();</highlight></codeline>
<codeline lineno="4643"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4644"><highlight class="normal"></highlight></codeline>
<codeline lineno="4645"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TextSelectionPainter::visitWord<sp/>(<ref refid="class_text_word" kindref="compound">TextWord</ref><sp/>*word,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>begin,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>end,</highlight></codeline>
<codeline lineno="4646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_p_d_f_rectangle" kindref="compound">PDFRectangle</ref><sp/>*selection)</highlight></codeline>
<codeline lineno="4647"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4648"><highlight class="normal"><sp/><sp/>selectionList-&gt;append(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_text_word_selection" kindref="compound">TextWordSelection</ref>(word,<sp/>begin,<sp/>end));</highlight></codeline>
<codeline lineno="4649"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4650"><highlight class="normal"></highlight></codeline>
<codeline lineno="4651"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TextSelectionPainter::endPage()</highlight></codeline>
<codeline lineno="4652"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4653"><highlight class="normal"><sp/><sp/>out-&gt;fill(state);</highlight></codeline>
<codeline lineno="4654"><highlight class="normal"></highlight></codeline>
<codeline lineno="4655"><highlight class="normal"><sp/><sp/>out-&gt;saveState(state);</highlight></codeline>
<codeline lineno="4656"><highlight class="normal"><sp/><sp/>out-&gt;clip(state);</highlight></codeline>
<codeline lineno="4657"><highlight class="normal"></highlight></codeline>
<codeline lineno="4658"><highlight class="normal"><sp/><sp/>state-&gt;clearPath();</highlight></codeline>
<codeline lineno="4659"><highlight class="normal"></highlight></codeline>
<codeline lineno="4660"><highlight class="normal"><sp/><sp/>state-&gt;setFillColor(glyph_color);</highlight></codeline>
<codeline lineno="4661"><highlight class="normal"><sp/><sp/>out-&gt;updateFillColor(state);</highlight></codeline>
<codeline lineno="4662"><highlight class="normal"></highlight></codeline>
<codeline lineno="4663"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>selectionList-&gt;getLength();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="4664"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_text_word_selection" kindref="compound">TextWordSelection</ref><sp/>*sel<sp/>=<sp/>(<ref refid="class_text_word_selection" kindref="compound">TextWordSelection</ref><sp/>*)<sp/>selectionList-&gt;get(i);</highlight></codeline>
<codeline lineno="4665"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>begin<sp/>=<sp/>sel-&gt;begin;</highlight></codeline>
<codeline lineno="4666"><highlight class="normal"></highlight></codeline>
<codeline lineno="4667"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(begin<sp/>&lt;<sp/>sel-&gt;end)<sp/>{</highlight></codeline>
<codeline lineno="4668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_text_font_info" kindref="compound">TextFontInfo</ref><sp/>*<ref refid="structfont" kindref="compound">font</ref><sp/>=<sp/>sel-&gt;word-&gt;font[begin];</highlight></codeline>
<codeline lineno="4669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>font-&gt;gfxFont-&gt;incRefCnt();</highlight></codeline>
<codeline lineno="4670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_matrix" kindref="compound">Matrix</ref><sp/>*mat<sp/>=<sp/>&amp;sel-&gt;word-&gt;textMat[begin];</highlight></codeline>
<codeline lineno="4671"><highlight class="normal"></highlight></codeline>
<codeline lineno="4672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;setTextMat(mat-&gt;m[0],<sp/>mat-&gt;m[1],<sp/>mat-&gt;m[2],<sp/>mat-&gt;m[3],<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="4673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;setFont(font-&gt;gfxFont,<sp/>1);</highlight></codeline>
<codeline lineno="4674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out-&gt;updateFont(state);</highlight></codeline>
<codeline lineno="4675"><highlight class="normal"></highlight></codeline>
<codeline lineno="4676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fEnd<sp/>=<sp/>begin<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="4677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(fEnd<sp/>&lt;<sp/>sel-&gt;end<sp/>&amp;&amp;<sp/>font-&gt;matches(sel-&gt;word-&gt;font[fEnd])<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="4678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mat-&gt;m[0]<sp/>==<sp/>sel-&gt;word-&gt;textMat[fEnd].m[0]<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="4679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mat-&gt;m[1]<sp/>==<sp/>sel-&gt;word-&gt;textMat[fEnd].m[1]<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="4680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mat-&gt;m[2]<sp/>==<sp/>sel-&gt;word-&gt;textMat[fEnd].m[2]<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="4681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mat-&gt;m[3]<sp/>==<sp/>sel-&gt;word-&gt;textMat[fEnd].m[3])</highlight></codeline>
<codeline lineno="4682"><highlight class="normal"><sp/><sp/><sp/><sp/>fEnd++;</highlight></codeline>
<codeline lineno="4683"><highlight class="normal"></highlight></codeline>
<codeline lineno="4684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>only<sp/>purpose<sp/>of<sp/>this<sp/>string<sp/>is<sp/>to<sp/>let<sp/>the<sp/>output<sp/>device<sp/>query</highlight></codeline>
<codeline lineno="4685"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>it&apos;s<sp/>length.<sp/><sp/>Might<sp/>want<sp/>to<sp/>change<sp/>this<sp/>interface<sp/>later.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>sel-&gt;word-&gt;charcode,<sp/>fEnd<sp/>-<sp/>begin);</highlight></codeline>
<codeline lineno="4687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out-&gt;beginString(state,<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4688"><highlight class="normal"></highlight></codeline>
<codeline lineno="4689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>begin;<sp/>i<sp/>&lt;<sp/>fEnd;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="4690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>!=<sp/>begin<sp/>&amp;&amp;<sp/>sel-&gt;word-&gt;charPos[i]<sp/>==<sp/>sel-&gt;word-&gt;charPos[i<sp/>-<sp/>1])</highlight></codeline>
<codeline lineno="4691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4692"><highlight class="normal"></highlight></codeline>
<codeline lineno="4693"><highlight class="normal"><sp/><sp/><sp/><sp/>out-&gt;drawChar(state,<sp/>sel-&gt;word-&gt;textMat[i].m[4],<sp/>sel-&gt;word-&gt;textMat[i].m[5],<sp/>0,<sp/>0,<sp/>0,<sp/>0,</highlight></codeline>
<codeline lineno="4694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sel-&gt;word-&gt;charcode[i],<sp/>1,<sp/>NULL,<sp/>0);</highlight></codeline>
<codeline lineno="4695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out-&gt;endString(state);</highlight></codeline>
<codeline lineno="4697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>string;</highlight></codeline>
<codeline lineno="4698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>begin<sp/>=<sp/>fEnd;</highlight></codeline>
<codeline lineno="4699"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4700"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4701"><highlight class="normal"></highlight></codeline>
<codeline lineno="4702"><highlight class="normal"><sp/><sp/>out-&gt;restoreState(state);</highlight></codeline>
<codeline lineno="4703"><highlight class="normal"><sp/><sp/>out-&gt;endPage<sp/>();</highlight></codeline>
<codeline lineno="4704"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4705"><highlight class="normal"></highlight></codeline>
<codeline lineno="4706"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TextWord::visitSelection(<ref refid="class_text_selection_visitor" kindref="compound">TextSelectionVisitor</ref><sp/>*visitor,</highlight></codeline>
<codeline lineno="4707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_p_d_f_rectangle" kindref="compound">PDFRectangle</ref><sp/>*selection,</highlight></codeline>
<codeline lineno="4708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SelectionStyle<sp/>style)</highlight></codeline>
<codeline lineno="4709"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4710"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>begin,<sp/>end;</highlight></codeline>
<codeline lineno="4711"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>mid;</highlight></codeline>
<codeline lineno="4712"><highlight class="normal"></highlight></codeline>
<codeline lineno="4713"><highlight class="normal"><sp/><sp/>begin<sp/>=<sp/>len;</highlight></codeline>
<codeline lineno="4714"><highlight class="normal"><sp/><sp/>end<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4715"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>len;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="4716"><highlight class="normal"><sp/><sp/><sp/><sp/>mid<sp/>=<sp/>(edge[i]<sp/>+<sp/>edge[i<sp/>+<sp/>1])<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="4717"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(selection-&gt;x1<sp/>&lt;<sp/>mid<sp/>||<sp/>selection-&gt;x2<sp/>&lt;<sp/>mid)</highlight></codeline>
<codeline lineno="4718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>begin)</highlight></codeline>
<codeline lineno="4719"><highlight class="normal"><sp/><sp/><sp/><sp/>begin<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="4720"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mid<sp/>&lt;<sp/>selection-&gt;x1<sp/>||<sp/>mid<sp/>&lt;<sp/>selection-&gt;x2)</highlight></codeline>
<codeline lineno="4721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>end<sp/>=<sp/>i<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="4722"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4723"><highlight class="normal"></highlight></codeline>
<codeline lineno="4724"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Skip<sp/>empty<sp/>selection.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4725"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(end<sp/>&lt;=<sp/>begin)</highlight></codeline>
<codeline lineno="4726"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4727"><highlight class="normal"></highlight></codeline>
<codeline lineno="4728"><highlight class="normal"><sp/><sp/>visitor-&gt;visitWord<sp/>(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>begin,<sp/>end,<sp/>selection);</highlight></codeline>
<codeline lineno="4729"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4730"><highlight class="normal"></highlight></codeline>
<codeline lineno="4731"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TextLine::visitSelection(<ref refid="class_text_selection_visitor" kindref="compound">TextSelectionVisitor</ref><sp/>*visitor,</highlight></codeline>
<codeline lineno="4732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_p_d_f_rectangle" kindref="compound">PDFRectangle</ref><sp/>*selection,</highlight></codeline>
<codeline lineno="4733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SelectionStyle<sp/>style)<sp/>{</highlight></codeline>
<codeline lineno="4734"><highlight class="normal"><sp/><sp/><ref refid="class_text_word" kindref="compound">TextWord</ref><sp/>*p,<sp/>*begin,<sp/>*end,<sp/>*current;</highlight></codeline>
<codeline lineno="4735"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>edge_begin,<sp/>edge_end;</highlight></codeline>
<codeline lineno="4736"><highlight class="normal"><sp/><sp/><ref refid="class_p_d_f_rectangle" kindref="compound">PDFRectangle</ref><sp/>child_selection;</highlight></codeline>
<codeline lineno="4737"><highlight class="normal"></highlight></codeline>
<codeline lineno="4738"><highlight class="normal"><sp/><sp/>begin<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="4739"><highlight class="normal"><sp/><sp/>end<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="4740"><highlight class="normal"><sp/><sp/>current<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="4741"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(p<sp/>=<sp/>words;<sp/>p<sp/>!=<sp/>NULL;<sp/>p<sp/>=<sp/>p-&gt;next)<sp/>{</highlight></codeline>
<codeline lineno="4742"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(blk-&gt;page-&gt;primaryLR)<sp/>{</highlight></codeline>
<codeline lineno="4743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((selection-&gt;x1<sp/>&lt;<sp/>p-&gt;xMax)<sp/>||</highlight></codeline>
<codeline lineno="4744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(selection-&gt;x2<sp/>&lt;<sp/>p-&gt;xMax))</highlight></codeline>
<codeline lineno="4745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(begin<sp/>==<sp/>NULL)<sp/></highlight></codeline>
<codeline lineno="4746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>begin<sp/>=<sp/>p;</highlight></codeline>
<codeline lineno="4747"><highlight class="normal"></highlight></codeline>
<codeline lineno="4748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(((selection-&gt;x1<sp/>&gt;<sp/>p-&gt;xMin)<sp/>||</highlight></codeline>
<codeline lineno="4749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(selection-&gt;x2<sp/>&gt;<sp/>p-&gt;xMin))<sp/>&amp;&amp;<sp/>(begin<sp/>!=<sp/>NULL))<sp/>{</highlight></codeline>
<codeline lineno="4750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>end<sp/>=<sp/>p-&gt;next;</highlight></codeline>
<codeline lineno="4751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current<sp/>=<sp/>p;</highlight></codeline>
<codeline lineno="4752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4753"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((selection-&gt;x1<sp/>&gt;<sp/>p-&gt;xMin)<sp/>||</highlight></codeline>
<codeline lineno="4755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(selection-&gt;x2<sp/>&gt;<sp/>p-&gt;xMin))</highlight></codeline>
<codeline lineno="4756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(begin<sp/>==<sp/>NULL)<sp/></highlight></codeline>
<codeline lineno="4757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>begin<sp/>=<sp/>p;</highlight></codeline>
<codeline lineno="4758"><highlight class="normal"></highlight></codeline>
<codeline lineno="4759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(((selection-&gt;x1<sp/>&lt;<sp/>p-&gt;xMax)<sp/>||</highlight></codeline>
<codeline lineno="4760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(selection-&gt;x2<sp/>&lt;<sp/>p-&gt;xMax))<sp/>&amp;&amp;<sp/>(begin<sp/>!=<sp/>NULL))<sp/>{</highlight></codeline>
<codeline lineno="4761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>end<sp/>=<sp/>p-&gt;next;</highlight></codeline>
<codeline lineno="4762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current<sp/>=<sp/>p;</highlight></codeline>
<codeline lineno="4763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4764"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4765"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4766"><highlight class="normal"></highlight></codeline>
<codeline lineno="4767"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!current)</highlight></codeline>
<codeline lineno="4768"><highlight class="normal"><sp/><sp/><sp/><sp/>current<sp/>=<sp/>begin;</highlight></codeline>
<codeline lineno="4769"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="4770"><highlight class="normal"><sp/><sp/>child_selection<sp/>=<sp/>*selection;</highlight></codeline>
<codeline lineno="4771"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(style<sp/>==<sp/>selectionStyleWord)<sp/>{</highlight></codeline>
<codeline lineno="4772"><highlight class="normal"><sp/><sp/><sp/><sp/>child_selection.x1<sp/>=<sp/>begin<sp/>?<sp/>begin-&gt;xMin<sp/>:<sp/>xMin;</highlight></codeline>
<codeline lineno="4773"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(end<sp/>&amp;&amp;<sp/>end-&gt;xMax<sp/>!=<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="4774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>child_selection.x2<sp/>=<sp/>current-&gt;xMax;</highlight></codeline>
<codeline lineno="4775"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>child_selection.x2<sp/>=<sp/>xMax;</highlight></codeline>
<codeline lineno="4777"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4778"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4779"><highlight class="normal"></highlight></codeline>
<codeline lineno="4780"><highlight class="normal"><sp/><sp/>edge_begin<sp/>=<sp/>len;</highlight></codeline>
<codeline lineno="4781"><highlight class="normal"><sp/><sp/>edge_end<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4782"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>len;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="4783"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>mid<sp/>=<sp/>(edge[i]<sp/>+<sp/>edge[i<sp/>+<sp/>1])<sp/>/<sp/><sp/>2;</highlight></codeline>
<codeline lineno="4784"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(child_selection.x1<sp/>&lt;<sp/>mid<sp/>||<sp/>child_selection.x2<sp/>&lt;<sp/>mid)</highlight></codeline>
<codeline lineno="4785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>edge_begin)</highlight></codeline>
<codeline lineno="4786"><highlight class="normal"><sp/><sp/><sp/><sp/>edge_begin<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="4787"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mid<sp/>&lt;<sp/>child_selection.x2<sp/>||<sp/>mid<sp/>&lt;<sp/>child_selection.x1)</highlight></codeline>
<codeline lineno="4788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>edge_end<sp/>=<sp/>i<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="4789"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4790"><highlight class="normal"></highlight></codeline>
<codeline lineno="4791"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Skip<sp/>empty<sp/>selection.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4792"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(edge_end<sp/>&lt;=<sp/>edge_begin)</highlight></codeline>
<codeline lineno="4793"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4794"><highlight class="normal"></highlight></codeline>
<codeline lineno="4795"><highlight class="normal"><sp/><sp/>visitor-&gt;visitLine<sp/>(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>begin,<sp/>end,<sp/>edge_begin,<sp/>edge_end,</highlight></codeline>
<codeline lineno="4796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;child_selection);</highlight></codeline>
<codeline lineno="4797"><highlight class="normal"></highlight></codeline>
<codeline lineno="4798"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(p<sp/>=<sp/>begin;<sp/>p<sp/>!=<sp/>end;<sp/>p<sp/>=<sp/>p-&gt;next)</highlight></codeline>
<codeline lineno="4799"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;visitSelection<sp/>(visitor,<sp/>&amp;child_selection,<sp/>style);</highlight></codeline>
<codeline lineno="4800"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4801"><highlight class="normal"></highlight></codeline>
<codeline lineno="4802"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TextBlock::visitSelection(<ref refid="class_text_selection_visitor" kindref="compound">TextSelectionVisitor</ref><sp/>*visitor,</highlight></codeline>
<codeline lineno="4803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_p_d_f_rectangle" kindref="compound">PDFRectangle</ref><sp/>*selection,</highlight></codeline>
<codeline lineno="4804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SelectionStyle<sp/>style)<sp/>{</highlight></codeline>
<codeline lineno="4805"><highlight class="normal"><sp/><sp/><ref refid="class_p_d_f_rectangle" kindref="compound">PDFRectangle</ref><sp/>child_selection;</highlight></codeline>
<codeline lineno="4806"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x[2],<sp/>y[2],<sp/>d,<sp/>best_d[2];</highlight></codeline>
<codeline lineno="4807"><highlight class="normal"><sp/><sp/><ref refid="class_text_line" kindref="compound">TextLine</ref><sp/>*p,<sp/>*best_line[2];</highlight></codeline>
<codeline lineno="4808"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>count<sp/>=<sp/>0,<sp/>best_count[2],<sp/>start,<sp/>stop;</highlight></codeline>
<codeline lineno="4809"><highlight class="normal"><sp/><sp/>GBool<sp/>all[2];</highlight></codeline>
<codeline lineno="4810"><highlight class="normal"></highlight></codeline>
<codeline lineno="4811"><highlight class="normal"><sp/><sp/>x[0]<sp/>=<sp/>selection-&gt;x1;</highlight></codeline>
<codeline lineno="4812"><highlight class="normal"><sp/><sp/>y[0]<sp/>=<sp/>selection-&gt;y1;</highlight></codeline>
<codeline lineno="4813"><highlight class="normal"><sp/><sp/>x[1]<sp/>=<sp/>selection-&gt;x2;</highlight></codeline>
<codeline lineno="4814"><highlight class="normal"><sp/><sp/>y[1]<sp/>=<sp/>selection-&gt;y2;</highlight></codeline>
<codeline lineno="4815"><highlight class="normal"></highlight></codeline>
<codeline lineno="4816"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>2;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="4817"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>first/last<sp/>lines<sp/>are<sp/>often<sp/>not<sp/>nearest</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4818"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>corners,<sp/>so<sp/>we<sp/>have<sp/>to<sp/>force<sp/>them<sp/>to<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4819"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>selected<sp/>when<sp/>the<sp/>selection<sp/>runs<sp/>outside<sp/>this</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4820"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>block.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4821"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(page-&gt;primaryLR)<sp/>{</highlight></codeline>
<codeline lineno="4822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>all[i]<sp/>=<sp/>x[i]<sp/>&gt;=<sp/>this-&gt;xMax<sp/>&amp;&amp;<sp/>y[i]<sp/>&gt;=<sp/>this-&gt;yMax;</highlight></codeline>
<codeline lineno="4823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x[i]<sp/>&lt;=<sp/>this-&gt;xMin<sp/>&amp;&amp;<sp/>y[i]<sp/>&lt;=<sp/>this-&gt;yMin)<sp/>{</highlight></codeline>
<codeline lineno="4824"><highlight class="normal"><sp/><sp/><sp/><sp/>best_line[i]<sp/>=<sp/>this-&gt;lines;</highlight></codeline>
<codeline lineno="4825"><highlight class="normal"><sp/><sp/><sp/><sp/>best_count[i]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="4826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4827"><highlight class="normal"><sp/><sp/><sp/><sp/>best_line[i]<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="4828"><highlight class="normal"><sp/><sp/><sp/><sp/>best_count[i]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4830"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>all[i]<sp/>=<sp/>x[i]<sp/>&lt;=<sp/>this-&gt;xMin<sp/>&amp;&amp;<sp/>y[i]<sp/>&gt;=<sp/>this-&gt;yMax;</highlight></codeline>
<codeline lineno="4832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x[i]<sp/>&gt;=<sp/>this-&gt;xMax<sp/>&amp;&amp;<sp/>y[i]<sp/>&lt;=<sp/>this-&gt;yMin)<sp/>{</highlight></codeline>
<codeline lineno="4833"><highlight class="normal"><sp/><sp/><sp/><sp/>best_line[i]<sp/>=<sp/>this-&gt;lines;</highlight></codeline>
<codeline lineno="4834"><highlight class="normal"><sp/><sp/><sp/><sp/>best_count[i]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="4835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4836"><highlight class="normal"><sp/><sp/><sp/><sp/>best_line[i]<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="4837"><highlight class="normal"><sp/><sp/><sp/><sp/>best_count[i]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4839"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4840"><highlight class="normal"><sp/><sp/><sp/><sp/>best_d[i]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4841"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4842"><highlight class="normal"></highlight></codeline>
<codeline lineno="4843"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>find<sp/>the<sp/>nearest<sp/>line<sp/>to<sp/>the<sp/>selection<sp/>points</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4844"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>using<sp/>the<sp/>manhattan<sp/>distance.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4845"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(p<sp/>=<sp/>this-&gt;lines;<sp/>p;<sp/>p<sp/>=<sp/>p-&gt;next)<sp/>{</highlight></codeline>
<codeline lineno="4846"><highlight class="normal"><sp/><sp/><sp/><sp/>count++;</highlight></codeline>
<codeline lineno="4847"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>2;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="4848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>d<sp/>=<sp/>fmax(p-&gt;xMin<sp/>-<sp/>x[i],<sp/>0.0)<sp/>+</highlight></codeline>
<codeline lineno="4849"><highlight class="normal"><sp/><sp/><sp/><sp/>fmax(x[i]<sp/>-<sp/>p-&gt;xMax,<sp/>0.0)<sp/>+</highlight></codeline>
<codeline lineno="4850"><highlight class="normal"><sp/><sp/><sp/><sp/>fmax(p-&gt;yMin<sp/>-<sp/>y[i],<sp/>0.0)<sp/>+</highlight></codeline>
<codeline lineno="4851"><highlight class="normal"><sp/><sp/><sp/><sp/>fmax(y[i]<sp/>-<sp/>p-&gt;yMax,<sp/>0.0);</highlight></codeline>
<codeline lineno="4852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!best_line[i]<sp/>||<sp/>all[i]<sp/>||</highlight></codeline>
<codeline lineno="4853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>d<sp/>&lt;<sp/>best_d[i])<sp/>{</highlight></codeline>
<codeline lineno="4854"><highlight class="normal"><sp/><sp/><sp/><sp/>best_line[i]<sp/>=<sp/>p;</highlight></codeline>
<codeline lineno="4855"><highlight class="normal"><sp/><sp/><sp/><sp/>best_count[i]<sp/>=<sp/>count;</highlight></codeline>
<codeline lineno="4856"><highlight class="normal"><sp/><sp/><sp/><sp/>best_d[i]<sp/>=<sp/>d;</highlight></codeline>
<codeline lineno="4857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4858"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4859"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4860"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>assert:<sp/>best<sp/>is<sp/>always<sp/>set.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4861"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!best_line[0]<sp/>||<sp/>!best_line[1])<sp/>{</highlight></codeline>
<codeline lineno="4862"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4863"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4864"><highlight class="normal"></highlight></codeline>
<codeline lineno="4865"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Now<sp/>decide<sp/>which<sp/>point<sp/>was<sp/>first.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4866"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(best_count[0]<sp/>&lt;<sp/>best_count[1]<sp/>||</highlight></codeline>
<codeline lineno="4867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(best_count[0]<sp/>==<sp/>best_count[1]<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="4868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y[0]<sp/>&lt;<sp/>y[1]))<sp/>{</highlight></codeline>
<codeline lineno="4869"><highlight class="normal"><sp/><sp/><sp/><sp/>start<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4870"><highlight class="normal"><sp/><sp/><sp/><sp/>stop<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="4871"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4872"><highlight class="normal"><sp/><sp/><sp/><sp/>start<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="4873"><highlight class="normal"><sp/><sp/><sp/><sp/>stop<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4874"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4875"><highlight class="normal"></highlight></codeline>
<codeline lineno="4876"><highlight class="normal"><sp/><sp/>visitor-&gt;visitBlock(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>best_line[start],<sp/>best_line[stop],<sp/>selection);</highlight></codeline>
<codeline lineno="4877"><highlight class="normal"></highlight></codeline>
<codeline lineno="4878"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(p<sp/>=<sp/>best_line[start];<sp/>p;<sp/>p<sp/>=<sp/>p-&gt;next)<sp/>{</highlight></codeline>
<codeline lineno="4879"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(page-&gt;primaryLR)<sp/>{</highlight></codeline>
<codeline lineno="4880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>child_selection.x1<sp/>=<sp/>p-&gt;xMin;</highlight></codeline>
<codeline lineno="4881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>child_selection.x2<sp/>=<sp/>p-&gt;xMax;</highlight></codeline>
<codeline lineno="4882"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>child_selection.x1<sp/>=<sp/>p-&gt;xMax;</highlight></codeline>
<codeline lineno="4884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>child_selection.x2<sp/>=<sp/>p-&gt;xMin;</highlight></codeline>
<codeline lineno="4885"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4886"><highlight class="normal"><sp/><sp/><sp/><sp/>child_selection.y1<sp/>=<sp/>p-&gt;yMin;</highlight></codeline>
<codeline lineno="4887"><highlight class="normal"><sp/><sp/><sp/><sp/>child_selection.y2<sp/>=<sp/>p-&gt;yMax;</highlight></codeline>
<codeline lineno="4888"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(style<sp/>==<sp/>selectionStyleLine)<sp/>{</highlight></codeline>
<codeline lineno="4889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p<sp/>==<sp/>best_line[start])<sp/>{</highlight></codeline>
<codeline lineno="4890"><highlight class="normal"><sp/><sp/><sp/><sp/>child_selection.x1<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4891"><highlight class="normal"><sp/><sp/><sp/><sp/>child_selection.y1<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p<sp/>==<sp/>best_line[stop])<sp/>{</highlight></codeline>
<codeline lineno="4894"><highlight class="normal"><sp/><sp/><sp/><sp/>child_selection.x2<sp/>=<sp/>page-&gt;pageWidth;</highlight></codeline>
<codeline lineno="4895"><highlight class="normal"><sp/><sp/><sp/><sp/>child_selection.y2<sp/>=<sp/>page-&gt;pageHeight;</highlight></codeline>
<codeline lineno="4896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4897"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p<sp/>==<sp/>best_line[start])<sp/>{</highlight></codeline>
<codeline lineno="4899"><highlight class="normal"><sp/><sp/><sp/><sp/>child_selection.x1<sp/>=<sp/>fmax(p-&gt;xMin,<sp/>fmin(p-&gt;xMax,<sp/>x[start]));</highlight></codeline>
<codeline lineno="4900"><highlight class="normal"><sp/><sp/><sp/><sp/>child_selection.y1<sp/>=<sp/>fmax(p-&gt;yMin,<sp/>fmin(p-&gt;yMax,<sp/>y[start]));</highlight></codeline>
<codeline lineno="4901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p<sp/>==<sp/>best_line[stop])<sp/>{</highlight></codeline>
<codeline lineno="4903"><highlight class="normal"><sp/><sp/><sp/><sp/>child_selection.x2<sp/>=<sp/>fmax(p-&gt;xMin,<sp/>fmin(p-&gt;xMax,<sp/>x[stop]));</highlight></codeline>
<codeline lineno="4904"><highlight class="normal"><sp/><sp/><sp/><sp/>child_selection.y2<sp/>=<sp/>fmax(p-&gt;yMin,<sp/>fmin(p-&gt;yMax,<sp/>y[stop]));</highlight></codeline>
<codeline lineno="4905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4906"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4907"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;visitSelection(visitor,<sp/>&amp;child_selection,<sp/>style);</highlight></codeline>
<codeline lineno="4908"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p<sp/>==<sp/>best_line[stop])<sp/>{</highlight></codeline>
<codeline lineno="4909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4910"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4911"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4912"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4913"><highlight class="normal"></highlight></codeline>
<codeline lineno="4914"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TextPage::visitSelection(<ref refid="class_text_selection_visitor" kindref="compound">TextSelectionVisitor</ref><sp/>*visitor,</highlight></codeline>
<codeline lineno="4915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_p_d_f_rectangle" kindref="compound">PDFRectangle</ref><sp/>*selection,</highlight></codeline>
<codeline lineno="4916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SelectionStyle<sp/>style)</highlight></codeline>
<codeline lineno="4917"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4918"><highlight class="normal"><sp/><sp/><ref refid="class_p_d_f_rectangle" kindref="compound">PDFRectangle</ref><sp/>child_selection;</highlight></codeline>
<codeline lineno="4919"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x[2],<sp/>y[2],<sp/>d,<sp/>best_d[2];</highlight></codeline>
<codeline lineno="4920"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>xMin,<sp/>yMin,<sp/>xMax,<sp/>yMax;</highlight></codeline>
<codeline lineno="4921"><highlight class="normal"><sp/><sp/><ref refid="class_text_flow" kindref="compound">TextFlow</ref><sp/>*flow,<sp/>*best_flow[2];</highlight></codeline>
<codeline lineno="4922"><highlight class="normal"><sp/><sp/><ref refid="class_text_block" kindref="compound">TextBlock</ref><sp/>*blk,<sp/>*best_block[2];</highlight></codeline>
<codeline lineno="4923"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>count<sp/>=<sp/>0,<sp/>best_count[2],<sp/>start,<sp/>stop;</highlight></codeline>
<codeline lineno="4924"><highlight class="normal"></highlight></codeline>
<codeline lineno="4925"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!flows)</highlight></codeline>
<codeline lineno="4926"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4927"><highlight class="normal"></highlight></codeline>
<codeline lineno="4928"><highlight class="normal"><sp/><sp/>x[0]<sp/>=<sp/>selection-&gt;x1;</highlight></codeline>
<codeline lineno="4929"><highlight class="normal"><sp/><sp/>y[0]<sp/>=<sp/>selection-&gt;y1;</highlight></codeline>
<codeline lineno="4930"><highlight class="normal"><sp/><sp/>x[1]<sp/>=<sp/>selection-&gt;x2;</highlight></codeline>
<codeline lineno="4931"><highlight class="normal"><sp/><sp/>y[1]<sp/>=<sp/>selection-&gt;y2;</highlight></codeline>
<codeline lineno="4932"><highlight class="normal"></highlight></codeline>
<codeline lineno="4933"><highlight class="normal"><sp/><sp/>xMin<sp/>=<sp/>pageWidth;</highlight></codeline>
<codeline lineno="4934"><highlight class="normal"><sp/><sp/>yMin<sp/>=<sp/>pageHeight;</highlight></codeline>
<codeline lineno="4935"><highlight class="normal"><sp/><sp/>xMax<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="4936"><highlight class="normal"><sp/><sp/>yMax<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="4937"><highlight class="normal"></highlight></codeline>
<codeline lineno="4938"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>2;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="4939"><highlight class="normal"><sp/><sp/><sp/><sp/>best_block[i]<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="4940"><highlight class="normal"><sp/><sp/><sp/><sp/>best_flow[i]<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="4941"><highlight class="normal"><sp/><sp/><sp/><sp/>best_count[i]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4942"><highlight class="normal"><sp/><sp/><sp/><sp/>best_d[i]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4943"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4944"><highlight class="normal"></highlight></codeline>
<codeline lineno="4945"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>find<sp/>the<sp/>nearest<sp/>blocks<sp/>to<sp/>the<sp/>selection<sp/>points</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4946"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>using<sp/>the<sp/>manhattan<sp/>distance.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4947"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(flow<sp/>=<sp/>flows;<sp/>flow;<sp/>flow<sp/>=<sp/>flow-&gt;next)<sp/>{</highlight></codeline>
<codeline lineno="4948"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(blk<sp/>=<sp/>flow-&gt;blocks;<sp/>blk;<sp/>blk<sp/>=<sp/>blk-&gt;next)<sp/>{</highlight></codeline>
<codeline lineno="4949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>count++;</highlight></codeline>
<codeline lineno="4950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>first/last<sp/>blocks<sp/>in<sp/>reading<sp/>order<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>often<sp/>not<sp/>the<sp/>closest<sp/>to<sp/>the<sp/>page<sp/>corners;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>track<sp/>the<sp/>corners,<sp/>force<sp/>those<sp/>blocks<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>be<sp/>selected<sp/>if<sp/>the<sp/>selection<sp/>runs<sp/>across</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>multiple<sp/>pages.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xMin<sp/>=<sp/>fmin(xMin,<sp/>blk-&gt;xMin);</highlight></codeline>
<codeline lineno="4956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>yMin<sp/>=<sp/>fmin(yMin,<sp/>blk-&gt;yMin);</highlight></codeline>
<codeline lineno="4957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xMax<sp/>=<sp/>fmax(xMax,<sp/>blk-&gt;xMax);</highlight></codeline>
<codeline lineno="4958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>yMax<sp/>=<sp/>fmax(yMax,<sp/>blk-&gt;yMax);</highlight></codeline>
<codeline lineno="4959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>2;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="4960"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>fmax(blk-&gt;xMin<sp/>-<sp/>x[i],<sp/>0.0)<sp/>+</highlight></codeline>
<codeline lineno="4961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fmax(x[i]<sp/>-<sp/>blk-&gt;xMax,<sp/>0.0)<sp/>+</highlight></codeline>
<codeline lineno="4962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fmax(blk-&gt;yMin<sp/>-<sp/>y[i],<sp/>0.0)<sp/>+</highlight></codeline>
<codeline lineno="4963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fmax(y[i]<sp/>-<sp/>blk-&gt;yMax,<sp/>0.0);</highlight></codeline>
<codeline lineno="4964"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!best_block[i]<sp/>||</highlight></codeline>
<codeline lineno="4965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d<sp/>&lt;<sp/>best_d[i]<sp/>||</highlight></codeline>
<codeline lineno="4966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(!blk-&gt;next<sp/>&amp;&amp;<sp/>!flow-&gt;next<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="4967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x[i]<sp/>&gt;=<sp/>fmin(xMax,<sp/>pageWidth)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="4968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y[i]<sp/>&gt;=<sp/>fmin(yMax,<sp/>pageHeight)))<sp/>{</highlight></codeline>
<codeline lineno="4969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>best_block[i]<sp/>=<sp/>blk;</highlight></codeline>
<codeline lineno="4970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>best_flow[i]<sp/>=<sp/>flow;</highlight></codeline>
<codeline lineno="4971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>best_count[i]<sp/>=<sp/>count;</highlight></codeline>
<codeline lineno="4972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>best_d[i]<sp/>=<sp/>d;</highlight></codeline>
<codeline lineno="4973"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4975"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4976"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4977"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>2;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="4978"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(primaryLR)<sp/>{</highlight></codeline>
<codeline lineno="4979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x[i]<sp/>&lt;<sp/>xMin<sp/>&amp;&amp;<sp/>y[i]<sp/>&lt;<sp/>yMin)<sp/>{</highlight></codeline>
<codeline lineno="4980"><highlight class="normal"><sp/><sp/><sp/><sp/>best_block[i]<sp/>=<sp/>flows-&gt;blocks;</highlight></codeline>
<codeline lineno="4981"><highlight class="normal"><sp/><sp/><sp/><sp/>best_flow[i]<sp/>=<sp/>flows;</highlight></codeline>
<codeline lineno="4982"><highlight class="normal"><sp/><sp/><sp/><sp/>best_count[i]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="4983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4984"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x[i]<sp/>&gt;<sp/>xMax<sp/>&amp;&amp;<sp/>y[i]<sp/>&lt;<sp/>yMin)<sp/>{</highlight></codeline>
<codeline lineno="4986"><highlight class="normal"><sp/><sp/><sp/><sp/>best_block[i]<sp/>=<sp/>flows-&gt;blocks;</highlight></codeline>
<codeline lineno="4987"><highlight class="normal"><sp/><sp/><sp/><sp/>best_flow[i]<sp/>=<sp/>flows;</highlight></codeline>
<codeline lineno="4988"><highlight class="normal"><sp/><sp/><sp/><sp/>best_count[i]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="4989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4990"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4991"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4992"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>assert:<sp/>best<sp/>is<sp/>always<sp/>set.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4993"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!best_block[0]<sp/>||<sp/>!best_block[1])<sp/>{</highlight></codeline>
<codeline lineno="4994"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4995"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4996"><highlight class="normal"></highlight></codeline>
<codeline lineno="4997"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Now<sp/>decide<sp/>which<sp/>point<sp/>was<sp/>first.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4998"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(best_count[0]<sp/>&lt;<sp/>best_count[1]<sp/>||</highlight></codeline>
<codeline lineno="4999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(best_count[0]<sp/>==<sp/>best_count[1]<sp/>&amp;&amp;<sp/>y[0]<sp/>&lt;<sp/>y[1]))<sp/>{</highlight></codeline>
<codeline lineno="5000"><highlight class="normal"><sp/><sp/><sp/><sp/>start<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5001"><highlight class="normal"><sp/><sp/><sp/><sp/>stop<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="5002"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5003"><highlight class="normal"><sp/><sp/><sp/><sp/>start<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="5004"><highlight class="normal"><sp/><sp/><sp/><sp/>stop<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5005"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5006"><highlight class="normal"></highlight></codeline>
<codeline lineno="5007"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(flow<sp/>=<sp/>best_flow[start];<sp/>flow;<sp/>flow<sp/>=<sp/>flow-&gt;next)<sp/>{</highlight></codeline>
<codeline lineno="5008"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flow<sp/>==<sp/>best_flow[start])<sp/>{</highlight></codeline>
<codeline lineno="5009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>blk<sp/>=<sp/>best_block[start];</highlight></codeline>
<codeline lineno="5010"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>blk<sp/>=<sp/>flow-&gt;blocks;</highlight></codeline>
<codeline lineno="5012"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5013"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>blk;<sp/>blk<sp/>=<sp/>blk-&gt;next)<sp/>{</highlight></codeline>
<codeline lineno="5014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(primaryLR)<sp/>{</highlight></codeline>
<codeline lineno="5015"><highlight class="normal"><sp/><sp/><sp/><sp/>child_selection.x1<sp/>=<sp/>blk-&gt;xMin;</highlight></codeline>
<codeline lineno="5016"><highlight class="normal"><sp/><sp/><sp/><sp/>child_selection.x2<sp/>=<sp/>blk-&gt;xMax;</highlight></codeline>
<codeline lineno="5017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5018"><highlight class="normal"><sp/><sp/><sp/><sp/>child_selection.x1<sp/>=<sp/>blk-&gt;xMax;</highlight></codeline>
<codeline lineno="5019"><highlight class="normal"><sp/><sp/><sp/><sp/>child_selection.x2<sp/>=<sp/>blk-&gt;xMin;</highlight></codeline>
<codeline lineno="5020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>child_selection.y1<sp/>=<sp/>blk-&gt;yMin;</highlight></codeline>
<codeline lineno="5022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>child_selection.y2<sp/>=<sp/>blk-&gt;yMax;</highlight></codeline>
<codeline lineno="5023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(blk<sp/>==<sp/>best_block[start])<sp/>{</highlight></codeline>
<codeline lineno="5024"><highlight class="normal"><sp/><sp/><sp/><sp/>child_selection.x1<sp/>=<sp/>fmax(blk-&gt;xMin,<sp/>fmin(blk-&gt;xMax,<sp/>x[start]));</highlight></codeline>
<codeline lineno="5025"><highlight class="normal"><sp/><sp/><sp/><sp/>child_selection.y1<sp/>=<sp/>fmax(blk-&gt;yMin,<sp/>fmin(blk-&gt;yMax,<sp/>y[start]));</highlight></codeline>
<codeline lineno="5026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(blk<sp/>==<sp/>best_block[stop])<sp/>{</highlight></codeline>
<codeline lineno="5028"><highlight class="normal"><sp/><sp/><sp/><sp/>child_selection.x2<sp/>=<sp/>fmax(blk-&gt;xMin,<sp/>fmin(blk-&gt;xMax,<sp/>x[stop]));</highlight></codeline>
<codeline lineno="5029"><highlight class="normal"><sp/><sp/><sp/><sp/>child_selection.y2<sp/>=<sp/>fmax(blk-&gt;yMin,<sp/>fmin(blk-&gt;yMax,<sp/>y[stop]));</highlight></codeline>
<codeline lineno="5030"><highlight class="normal"><sp/><sp/><sp/><sp/>blk-&gt;visitSelection(visitor,<sp/>&amp;child_selection,<sp/>style);</highlight></codeline>
<codeline lineno="5031"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>blk-&gt;visitSelection(visitor,<sp/>&amp;child_selection,<sp/>style);</highlight></codeline>
<codeline lineno="5034"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5035"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5036"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5037"><highlight class="normal"></highlight></codeline>
<codeline lineno="5038"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TextPage::drawSelection(<ref refid="class_output_dev" kindref="compound">OutputDev</ref><sp/>*out,</highlight></codeline>
<codeline lineno="5039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>scale,</highlight></codeline>
<codeline lineno="5040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rotation,</highlight></codeline>
<codeline lineno="5041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_p_d_f_rectangle" kindref="compound">PDFRectangle</ref><sp/>*selection,</highlight></codeline>
<codeline lineno="5042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SelectionStyle<sp/>style,</highlight></codeline>
<codeline lineno="5043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>*glyph_color,<sp/><ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>*box_color)</highlight></codeline>
<codeline lineno="5044"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5045"><highlight class="normal"><sp/><sp/><ref refid="class_text_selection_painter" kindref="compound">TextSelectionPainter</ref><sp/>painter(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>scale,<sp/>rotation,<sp/></highlight></codeline>
<codeline lineno="5046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out,<sp/>box_color,<sp/>glyph_color);</highlight></codeline>
<codeline lineno="5047"><highlight class="normal"></highlight></codeline>
<codeline lineno="5048"><highlight class="normal"><sp/><sp/>visitSelection(&amp;painter,<sp/>selection,<sp/>style);</highlight></codeline>
<codeline lineno="5049"><highlight class="normal"><sp/><sp/>painter.endPage();</highlight></codeline>
<codeline lineno="5050"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5051"><highlight class="normal"></highlight></codeline>
<codeline lineno="5052"><highlight class="normal"><ref refid="class_goo_list" kindref="compound">GooList</ref><sp/>*TextPage::getSelectionRegion(<ref refid="class_p_d_f_rectangle" kindref="compound">PDFRectangle</ref><sp/>*selection,</highlight></codeline>
<codeline lineno="5053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SelectionStyle<sp/>style,</highlight></codeline>
<codeline lineno="5054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>scale)<sp/>{</highlight></codeline>
<codeline lineno="5055"><highlight class="normal"><sp/><sp/><ref refid="class_text_selection_sizer" kindref="compound">TextSelectionSizer</ref><sp/>sizer(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>scale);</highlight></codeline>
<codeline lineno="5056"><highlight class="normal"></highlight></codeline>
<codeline lineno="5057"><highlight class="normal"><sp/><sp/>visitSelection(&amp;sizer,<sp/>selection,<sp/>style);</highlight></codeline>
<codeline lineno="5058"><highlight class="normal"></highlight></codeline>
<codeline lineno="5059"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sizer.getRegion();</highlight></codeline>
<codeline lineno="5060"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5061"><highlight class="normal"></highlight></codeline>
<codeline lineno="5062"><highlight class="normal"><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*TextPage::getSelectionText(<ref refid="class_p_d_f_rectangle" kindref="compound">PDFRectangle</ref><sp/>*selection,</highlight></codeline>
<codeline lineno="5063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SelectionStyle<sp/>style)</highlight></codeline>
<codeline lineno="5064"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5065"><highlight class="normal"><sp/><sp/><ref refid="class_text_selection_dumper" kindref="compound">TextSelectionDumper</ref><sp/>dumper(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5066"><highlight class="normal"></highlight></codeline>
<codeline lineno="5067"><highlight class="normal"><sp/><sp/>visitSelection(&amp;dumper,<sp/>selection,<sp/>style);</highlight></codeline>
<codeline lineno="5068"><highlight class="normal"><sp/><sp/>dumper.endPage();</highlight></codeline>
<codeline lineno="5069"><highlight class="normal"></highlight></codeline>
<codeline lineno="5070"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dumper.getText();</highlight></codeline>
<codeline lineno="5071"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5072"><highlight class="normal"></highlight></codeline>
<codeline lineno="5073"><highlight class="normal"><ref refid="class_goo_list" kindref="compound">GooList</ref><sp/>**TextPage::getSelectionWords(<ref refid="class_p_d_f_rectangle" kindref="compound">PDFRectangle</ref><sp/>*selection,</highlight></codeline>
<codeline lineno="5074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SelectionStyle<sp/>style,</highlight></codeline>
<codeline lineno="5075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*nLines)</highlight></codeline>
<codeline lineno="5076"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5077"><highlight class="normal"><sp/><sp/><ref refid="class_text_selection_dumper" kindref="compound">TextSelectionDumper</ref><sp/>dumper(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5078"><highlight class="normal"></highlight></codeline>
<codeline lineno="5079"><highlight class="normal"><sp/><sp/>visitSelection(&amp;dumper,<sp/>selection,<sp/>style);</highlight></codeline>
<codeline lineno="5080"><highlight class="normal"><sp/><sp/>dumper.endPage();</highlight></codeline>
<codeline lineno="5081"><highlight class="normal"></highlight></codeline>
<codeline lineno="5082"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dumper.takeWordList(nLines);</highlight></codeline>
<codeline lineno="5083"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5084"><highlight class="normal"></highlight></codeline>
<codeline lineno="5085"><highlight class="normal">GBool<sp/>TextPage::findCharRange(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pos,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>length,</highlight></codeline>
<codeline lineno="5086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*xMin,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*yMin,</highlight></codeline>
<codeline lineno="5087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*xMax,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*yMax)<sp/>{</highlight></codeline>
<codeline lineno="5088"><highlight class="normal"><sp/><sp/><ref refid="class_text_block" kindref="compound">TextBlock</ref><sp/>*blk;</highlight></codeline>
<codeline lineno="5089"><highlight class="normal"><sp/><sp/><ref refid="class_text_line" kindref="compound">TextLine</ref><sp/>*line;</highlight></codeline>
<codeline lineno="5090"><highlight class="normal"><sp/><sp/><ref refid="class_text_word" kindref="compound">TextWord</ref><sp/>*word;</highlight></codeline>
<codeline lineno="5091"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>xMin0,<sp/>xMax0,<sp/>yMin0,<sp/>yMax0;</highlight></codeline>
<codeline lineno="5092"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>xMin1,<sp/>xMax1,<sp/>yMin1,<sp/>yMax1;</highlight></codeline>
<codeline lineno="5093"><highlight class="normal"><sp/><sp/>GBool<sp/>first;</highlight></codeline>
<codeline lineno="5094"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j0,<sp/>j1;</highlight></codeline>
<codeline lineno="5095"><highlight class="normal"></highlight></codeline>
<codeline lineno="5096"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rawOrder)<sp/>{</highlight></codeline>
<codeline lineno="5097"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="5098"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5099"><highlight class="normal"></highlight></codeline>
<codeline lineno="5100"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//~<sp/>this<sp/>doesn&apos;t<sp/>correctly<sp/>handle<sp/>ranges<sp/>split<sp/>across<sp/>multiple<sp/>lines</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5101"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//~<sp/>(the<sp/>highlighted<sp/>region<sp/>is<sp/>the<sp/>bounding<sp/>box<sp/>of<sp/>all<sp/>the<sp/>parts<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5102"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//~<sp/>the<sp/>range)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5103"><highlight class="normal"><sp/><sp/>first<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="5104"><highlight class="normal"><sp/><sp/>xMin0<sp/>=<sp/>xMax0<sp/>=<sp/>yMin0<sp/>=<sp/>yMax0<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>make<sp/>gcc<sp/>happy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5105"><highlight class="normal"><sp/><sp/>xMin1<sp/>=<sp/>xMax1<sp/>=<sp/>yMin1<sp/>=<sp/>yMax1<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>make<sp/>gcc<sp/>happy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5106"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nBlocks;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="5107"><highlight class="normal"><sp/><sp/><sp/><sp/>blk<sp/>=<sp/>blocks[i];</highlight></codeline>
<codeline lineno="5108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(line<sp/>=<sp/>blk-&gt;lines;<sp/>line;<sp/>line<sp/>=<sp/>line-&gt;next)<sp/>{</highlight></codeline>
<codeline lineno="5109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(word<sp/>=<sp/>line-&gt;words;<sp/>word;<sp/>word<sp/>=<sp/>word-&gt;next)<sp/>{</highlight></codeline>
<codeline lineno="5110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pos<sp/>&lt;<sp/>word-&gt;charPos[word-&gt;len]<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="5111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pos<sp/>+<sp/>length<sp/>&gt;<sp/>word-&gt;charPos[0])<sp/>{</highlight></codeline>
<codeline lineno="5112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j0<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j0<sp/>&lt;<sp/>word-&gt;len<sp/>&amp;&amp;<sp/>pos<sp/>&gt;=<sp/>word-&gt;charPos[j0<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="5114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++j0)<sp/>;</highlight></codeline>
<codeline lineno="5115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j1<sp/>=<sp/>word-&gt;len<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="5116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j1<sp/>&gt;<sp/>j0<sp/>&amp;&amp;<sp/>pos<sp/>+<sp/>length<sp/>&lt;=<sp/>word-&gt;charPos[j1];</highlight></codeline>
<codeline lineno="5117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--j1)<sp/>;</highlight></codeline>
<codeline lineno="5118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(line-&gt;rot)<sp/>{</highlight></codeline>
<codeline lineno="5119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:</highlight></codeline>
<codeline lineno="5120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xMin1<sp/>=<sp/>word-&gt;edge[j0];</highlight></codeline>
<codeline lineno="5121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xMax1<sp/>=<sp/>word-&gt;edge[j1<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="5122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>yMin1<sp/>=<sp/>word-&gt;yMin;</highlight></codeline>
<codeline lineno="5123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>yMax1<sp/>=<sp/>word-&gt;yMax;</highlight></codeline>
<codeline lineno="5124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="5126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xMin1<sp/>=<sp/>word-&gt;xMin;</highlight></codeline>
<codeline lineno="5127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xMax1<sp/>=<sp/>word-&gt;xMax;</highlight></codeline>
<codeline lineno="5128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>yMin1<sp/>=<sp/>word-&gt;edge[j0];</highlight></codeline>
<codeline lineno="5129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>yMax1<sp/>=<sp/>word-&gt;edge[j1<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="5130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:</highlight></codeline>
<codeline lineno="5132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xMin1<sp/>=<sp/>word-&gt;edge[j1<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="5133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xMax1<sp/>=<sp/>word-&gt;edge[j0];</highlight></codeline>
<codeline lineno="5134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>yMin1<sp/>=<sp/>word-&gt;yMin;</highlight></codeline>
<codeline lineno="5135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>yMax1<sp/>=<sp/>word-&gt;yMax;</highlight></codeline>
<codeline lineno="5136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>3:</highlight></codeline>
<codeline lineno="5138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xMin1<sp/>=<sp/>word-&gt;xMin;</highlight></codeline>
<codeline lineno="5139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xMax1<sp/>=<sp/>word-&gt;xMax;</highlight></codeline>
<codeline lineno="5140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>yMin1<sp/>=<sp/>word-&gt;edge[j1<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="5141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>yMax1<sp/>=<sp/>word-&gt;edge[j0];</highlight></codeline>
<codeline lineno="5142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(first<sp/>||<sp/>xMin1<sp/>&lt;<sp/>xMin0)<sp/>{</highlight></codeline>
<codeline lineno="5145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xMin0<sp/>=<sp/>xMin1;</highlight></codeline>
<codeline lineno="5146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(first<sp/>||<sp/>xMax1<sp/>&gt;<sp/>xMax0)<sp/>{</highlight></codeline>
<codeline lineno="5148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xMax0<sp/>=<sp/>xMax1;</highlight></codeline>
<codeline lineno="5149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(first<sp/>||<sp/>yMin1<sp/>&lt;<sp/>yMin0)<sp/>{</highlight></codeline>
<codeline lineno="5151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>yMin0<sp/>=<sp/>yMin1;</highlight></codeline>
<codeline lineno="5152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(first<sp/>||<sp/>yMax1<sp/>&gt;<sp/>yMax0)<sp/>{</highlight></codeline>
<codeline lineno="5154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>yMax0<sp/>=<sp/>yMax1;</highlight></codeline>
<codeline lineno="5155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>first<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="5157"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5159"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5160"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5161"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!first)<sp/>{</highlight></codeline>
<codeline lineno="5162"><highlight class="normal"><sp/><sp/><sp/><sp/>*xMin<sp/>=<sp/>xMin0;</highlight></codeline>
<codeline lineno="5163"><highlight class="normal"><sp/><sp/><sp/><sp/>*xMax<sp/>=<sp/>xMax0;</highlight></codeline>
<codeline lineno="5164"><highlight class="normal"><sp/><sp/><sp/><sp/>*yMin<sp/>=<sp/>yMin0;</highlight></codeline>
<codeline lineno="5165"><highlight class="normal"><sp/><sp/><sp/><sp/>*yMax<sp/>=<sp/>yMax0;</highlight></codeline>
<codeline lineno="5166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gTrue;</highlight></codeline>
<codeline lineno="5167"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5168"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="5169"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5170"><highlight class="normal"></highlight></codeline>
<codeline lineno="5171"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TextPage::dump(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*outputStream,<sp/>TextOutputFunc<sp/>outputFunc,</highlight></codeline>
<codeline lineno="5172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GBool<sp/>physLayout)<sp/>{</highlight></codeline>
<codeline lineno="5173"><highlight class="normal"><sp/><sp/><ref refid="class_unicode_map" kindref="compound">UnicodeMap</ref><sp/>*uMap;</highlight></codeline>
<codeline lineno="5174"><highlight class="normal"><sp/><sp/><ref refid="class_text_flow" kindref="compound">TextFlow</ref><sp/>*flow;</highlight></codeline>
<codeline lineno="5175"><highlight class="normal"><sp/><sp/><ref refid="class_text_block" kindref="compound">TextBlock</ref><sp/>*blk;</highlight></codeline>
<codeline lineno="5176"><highlight class="normal"><sp/><sp/><ref refid="class_text_line" kindref="compound">TextLine</ref><sp/>*line;</highlight></codeline>
<codeline lineno="5177"><highlight class="normal"><sp/><sp/><ref refid="class_text_line_frag" kindref="compound">TextLineFrag</ref><sp/>*frags;</highlight></codeline>
<codeline lineno="5178"><highlight class="normal"><sp/><sp/><ref refid="class_text_word" kindref="compound">TextWord</ref><sp/>*word;</highlight></codeline>
<codeline lineno="5179"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nFrags,<sp/>fragsSize;</highlight></codeline>
<codeline lineno="5180"><highlight class="normal"><sp/><sp/><ref refid="class_text_line_frag" kindref="compound">TextLineFrag</ref><sp/>*frag;</highlight></codeline>
<codeline lineno="5181"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>space[8],<sp/>eol[16],<sp/>eop[8];</highlight></codeline>
<codeline lineno="5182"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>spaceLen,<sp/>eolLen,<sp/>eopLen;</highlight></codeline>
<codeline lineno="5183"><highlight class="normal"><sp/><sp/>GBool<sp/>pageBreaks;</highlight></codeline>
<codeline lineno="5184"><highlight class="normal"><sp/><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*s;</highlight></codeline>
<codeline lineno="5185"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>delta;</highlight></codeline>
<codeline lineno="5186"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>col,<sp/>i,<sp/>j,<sp/>d,<sp/>n;</highlight></codeline>
<codeline lineno="5187"><highlight class="normal"></highlight></codeline>
<codeline lineno="5188"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>the<sp/>output<sp/>encoding</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5189"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(uMap<sp/>=<sp/>globalParams-&gt;getTextEncoding()))<sp/>{</highlight></codeline>
<codeline lineno="5190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5191"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5192"><highlight class="normal"><sp/><sp/>spaceLen<sp/>=<sp/>uMap-&gt;mapUnicode(0x20,<sp/>space,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(space));</highlight></codeline>
<codeline lineno="5193"><highlight class="normal"><sp/><sp/>eolLen<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>make<sp/>gcc<sp/>happy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5194"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(globalParams-&gt;getTextEOL())<sp/>{</highlight></codeline>
<codeline lineno="5195"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>eolUnix:</highlight></codeline>
<codeline lineno="5196"><highlight class="normal"><sp/><sp/><sp/><sp/>eolLen<sp/>=<sp/>uMap-&gt;mapUnicode(0x0a,<sp/>eol,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(eol));</highlight></codeline>
<codeline lineno="5197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5198"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>eolDOS:</highlight></codeline>
<codeline lineno="5199"><highlight class="normal"><sp/><sp/><sp/><sp/>eolLen<sp/>=<sp/>uMap-&gt;mapUnicode(0x0d,<sp/>eol,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(eol));</highlight></codeline>
<codeline lineno="5200"><highlight class="normal"><sp/><sp/><sp/><sp/>eolLen<sp/>+=<sp/>uMap-&gt;mapUnicode(0x0a,<sp/>eol<sp/>+<sp/>eolLen,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(eol)<sp/>-<sp/>eolLen);</highlight></codeline>
<codeline lineno="5201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5202"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>eolMac:</highlight></codeline>
<codeline lineno="5203"><highlight class="normal"><sp/><sp/><sp/><sp/>eolLen<sp/>=<sp/>uMap-&gt;mapUnicode(0x0d,<sp/>eol,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(eol));</highlight></codeline>
<codeline lineno="5204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5205"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5206"><highlight class="normal"><sp/><sp/>eopLen<sp/>=<sp/>uMap-&gt;mapUnicode(0x0c,<sp/>eop,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(eop));</highlight></codeline>
<codeline lineno="5207"><highlight class="normal"><sp/><sp/>pageBreaks<sp/>=<sp/>globalParams-&gt;getTextPageBreaks();</highlight></codeline>
<codeline lineno="5208"><highlight class="normal"></highlight></codeline>
<codeline lineno="5209"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//~<sp/>writing<sp/>mode<sp/>(horiz/vert)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5210"><highlight class="normal"></highlight></codeline>
<codeline lineno="5211"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>output<sp/>the<sp/>page<sp/>in<sp/>raw<sp/>(content<sp/>stream)<sp/>order</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5212"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rawOrder)<sp/>{</highlight></codeline>
<codeline lineno="5213"><highlight class="normal"></highlight></codeline>
<codeline lineno="5214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(word<sp/>=<sp/>rawWords;<sp/>word;<sp/>word<sp/>=<sp/>word-&gt;next)<sp/>{</highlight></codeline>
<codeline lineno="5215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref>();</highlight></codeline>
<codeline lineno="5216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dumpFragment(word-&gt;text,<sp/>word-&gt;len,<sp/>uMap,<sp/>s);</highlight></codeline>
<codeline lineno="5217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(*outputFunc)(outputStream,<sp/>s-&gt;getCString(),<sp/>s-&gt;getLength());</highlight></codeline>
<codeline lineno="5218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>s;</highlight></codeline>
<codeline lineno="5219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(word-&gt;next<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="5220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fabs(word-&gt;next-&gt;base<sp/>-<sp/>word-&gt;base)<sp/>&lt;</highlight></codeline>
<codeline lineno="5221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maxIntraLineDelta<sp/>*<sp/>word-&gt;fontSize<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="5222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>word-&gt;next-&gt;xMin<sp/>&gt;</highlight></codeline>
<codeline lineno="5223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>word-&gt;xMax<sp/>-<sp/>minDupBreakOverlap<sp/>*<sp/>word-&gt;fontSize)<sp/>{</highlight></codeline>
<codeline lineno="5224"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(word-&gt;next-&gt;xMin<sp/>&gt;<sp/>word-&gt;xMax<sp/>+<sp/>minWordSpacing<sp/>*<sp/>word-&gt;fontSize)<sp/>{</highlight></codeline>
<codeline lineno="5225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(*outputFunc)(outputStream,<sp/>space,<sp/>spaceLen);</highlight></codeline>
<codeline lineno="5226"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5228"><highlight class="normal"><sp/><sp/><sp/><sp/>(*outputFunc)(outputStream,<sp/>eol,<sp/>eolLen);</highlight></codeline>
<codeline lineno="5229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5230"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5231"><highlight class="normal"></highlight></codeline>
<codeline lineno="5232"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>output<sp/>the<sp/>page,<sp/>maintaining<sp/>the<sp/>original<sp/>physical<sp/>layout</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5233"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(physLayout)<sp/>{</highlight></codeline>
<codeline lineno="5234"><highlight class="normal"></highlight></codeline>
<codeline lineno="5235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>collect<sp/>the<sp/>line<sp/>fragments<sp/>for<sp/>the<sp/>page<sp/>and<sp/>sort<sp/>them</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5236"><highlight class="normal"><sp/><sp/><sp/><sp/>fragsSize<sp/>=<sp/>256;</highlight></codeline>
<codeline lineno="5237"><highlight class="normal"><sp/><sp/><sp/><sp/>frags<sp/>=<sp/>(<ref refid="class_text_line_frag" kindref="compound">TextLineFrag</ref><sp/>*)gmallocn(fragsSize,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="class_text_line_frag" kindref="compound">TextLineFrag</ref>));</highlight></codeline>
<codeline lineno="5238"><highlight class="normal"><sp/><sp/><sp/><sp/>nFrags<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5239"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nBlocks;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="5240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>blk<sp/>=<sp/>blocks[i];</highlight></codeline>
<codeline lineno="5241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(line<sp/>=<sp/>blk-&gt;lines;<sp/>line;<sp/>line<sp/>=<sp/>line-&gt;next)<sp/>{</highlight></codeline>
<codeline lineno="5242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nFrags<sp/>==<sp/>fragsSize)<sp/>{</highlight></codeline>
<codeline lineno="5243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fragsSize<sp/>*=<sp/>2;</highlight></codeline>
<codeline lineno="5244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>frags<sp/>=<sp/>(<ref refid="class_text_line_frag" kindref="compound">TextLineFrag</ref><sp/>*)greallocn(frags,</highlight></codeline>
<codeline lineno="5245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fragsSize,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="class_text_line_frag" kindref="compound">TextLineFrag</ref>));</highlight></codeline>
<codeline lineno="5246"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5247"><highlight class="normal"><sp/><sp/><sp/><sp/>frags[nFrags].init(line,<sp/>0,<sp/>line-&gt;len);</highlight></codeline>
<codeline lineno="5248"><highlight class="normal"><sp/><sp/><sp/><sp/>frags[nFrags].computeCoords(gTrue);</highlight></codeline>
<codeline lineno="5249"><highlight class="normal"><sp/><sp/><sp/><sp/>++nFrags;</highlight></codeline>
<codeline lineno="5250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5251"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5252"><highlight class="normal"><sp/><sp/><sp/><sp/>qsort(frags,<sp/>nFrags,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="class_text_line_frag" kindref="compound">TextLineFrag</ref>),<sp/>&amp;TextLineFrag::cmpYXPrimaryRot);</highlight></codeline>
<codeline lineno="5253"><highlight class="normal"><sp/><sp/><sp/><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5254"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>nFrags)<sp/>{</highlight></codeline>
<codeline lineno="5255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>delta<sp/>=<sp/>maxIntraLineDelta<sp/>*<sp/>frags[i].line-&gt;words-&gt;fontSize;</highlight></codeline>
<codeline lineno="5256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>i+1;</highlight></codeline>
<codeline lineno="5257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j<sp/>&lt;<sp/>nFrags<sp/>&amp;&amp;<sp/>fabs(frags[j].base<sp/>-<sp/>frags[i].base)<sp/>&lt;<sp/>delta;</highlight></codeline>
<codeline lineno="5258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++j)<sp/>;</highlight></codeline>
<codeline lineno="5259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>qsort(frags<sp/>+<sp/>i,<sp/>j<sp/>-<sp/>i,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="class_text_line_frag" kindref="compound">TextLineFrag</ref>),</highlight></codeline>
<codeline lineno="5260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;TextLineFrag::cmpXYColumnPrimaryRot);</highlight></codeline>
<codeline lineno="5261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>=<sp/>j;</highlight></codeline>
<codeline lineno="5262"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5263"><highlight class="normal"></highlight></codeline>
<codeline lineno="5264"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>0<sp/>//<sp/>for<sp/>debugging</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5265"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;***<sp/>line<sp/>fragments<sp/>***\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5266"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nFrags;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="5267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>frag<sp/>=<sp/>&amp;frags[i];</highlight></codeline>
<codeline lineno="5268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;frag:<sp/>x=%.2f..%.2f<sp/>y=%.2f..%.2f<sp/>base=%.2f<sp/>&apos;&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="5269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>frag-&gt;xMin,<sp/>frag-&gt;xMax,<sp/>frag-&gt;yMin,<sp/>frag-&gt;yMax,<sp/>frag-&gt;base);</highlight></codeline>
<codeline lineno="5270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(n<sp/>=<sp/>0;<sp/>n<sp/>&lt;<sp/>frag-&gt;len;<sp/>++n)<sp/>{</highlight></codeline>
<codeline lineno="5271"><highlight class="normal"><sp/><sp/><sp/><sp/>fputc(frag-&gt;line-&gt;text[frag-&gt;start<sp/>+<sp/>n]<sp/>&amp;<sp/>0xff,<sp/>stdout);</highlight></codeline>
<codeline lineno="5272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;&apos;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5274"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5275"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5276"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5277"><highlight class="normal"></highlight></codeline>
<codeline lineno="5278"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>generate<sp/>output</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5279"><highlight class="normal"><sp/><sp/><sp/><sp/>col<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5280"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nFrags;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="5281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>frag<sp/>=<sp/>&amp;frags[i];</highlight></codeline>
<codeline lineno="5282"><highlight class="normal"></highlight></codeline>
<codeline lineno="5283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>column<sp/>alignment</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>col<sp/>&lt;<sp/>frag-&gt;col;<sp/>++col)<sp/>{</highlight></codeline>
<codeline lineno="5285"><highlight class="normal"><sp/><sp/><sp/><sp/>(*outputFunc)(outputStream,<sp/>space,<sp/>spaceLen);</highlight></codeline>
<codeline lineno="5286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5287"><highlight class="normal"></highlight></codeline>
<codeline lineno="5288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>print<sp/>the<sp/>line</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref>();</highlight></codeline>
<codeline lineno="5290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>col<sp/>+=<sp/>dumpFragment(frag-&gt;line-&gt;text<sp/>+<sp/>frag-&gt;start,<sp/>frag-&gt;len,<sp/>uMap,<sp/>s);</highlight></codeline>
<codeline lineno="5291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(*outputFunc)(outputStream,<sp/>s-&gt;getCString(),<sp/>s-&gt;getLength());</highlight></codeline>
<codeline lineno="5292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>s;</highlight></codeline>
<codeline lineno="5293"><highlight class="normal"></highlight></codeline>
<codeline lineno="5294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>print<sp/>one<sp/>or<sp/>more<sp/>returns<sp/>if<sp/>necessary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>==<sp/>nFrags<sp/>-<sp/>1<sp/>||</highlight></codeline>
<codeline lineno="5296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>frags[i+1].col<sp/>&lt;<sp/>col<sp/>||</highlight></codeline>
<codeline lineno="5297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fabs(frags[i+1].base<sp/>-<sp/>frag-&gt;base)<sp/>&gt;</highlight></codeline>
<codeline lineno="5298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maxIntraLineDelta<sp/>*<sp/>frag-&gt;line-&gt;words-&gt;fontSize)<sp/>{</highlight></codeline>
<codeline lineno="5299"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>nFrags<sp/>-<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="5300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>d<sp/>=<sp/>(int)((frags[i+1].base<sp/>-<sp/>frag-&gt;base)<sp/>/</highlight></codeline>
<codeline lineno="5301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>frag-&gt;line-&gt;words-&gt;fontSize);</highlight></codeline>
<codeline lineno="5302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(d<sp/>&lt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="5303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="5304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(d<sp/>&gt;<sp/>5)<sp/>{</highlight></codeline>
<codeline lineno="5305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d<sp/>=<sp/>5;</highlight></codeline>
<codeline lineno="5306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5307"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>d<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="5309"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5310"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>d<sp/>&gt;<sp/>0;<sp/>--d)<sp/>{</highlight></codeline>
<codeline lineno="5311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(*outputFunc)(outputStream,<sp/>eol,<sp/>eolLen);</highlight></codeline>
<codeline lineno="5312"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5313"><highlight class="normal"><sp/><sp/><sp/><sp/>col<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5315"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5316"><highlight class="normal"></highlight></codeline>
<codeline lineno="5317"><highlight class="normal"><sp/><sp/><sp/><sp/>gfree(frags);</highlight></codeline>
<codeline lineno="5318"><highlight class="normal"></highlight></codeline>
<codeline lineno="5319"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>output<sp/>the<sp/>page,<sp/>&quot;undoing&quot;<sp/>the<sp/>layout</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5320"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5321"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(flow<sp/>=<sp/>flows;<sp/>flow;<sp/>flow<sp/>=<sp/>flow-&gt;next)<sp/>{</highlight></codeline>
<codeline lineno="5322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(blk<sp/>=<sp/>flow-&gt;blocks;<sp/>blk;<sp/>blk<sp/>=<sp/>blk-&gt;next)<sp/>{</highlight></codeline>
<codeline lineno="5323"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(line<sp/>=<sp/>blk-&gt;lines;<sp/>line;<sp/>line<sp/>=<sp/>line-&gt;next)<sp/>{</highlight></codeline>
<codeline lineno="5324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>line-&gt;len;</highlight></codeline>
<codeline lineno="5325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(line-&gt;hyphenated<sp/>&amp;&amp;<sp/>(line-&gt;next<sp/>||<sp/>blk-&gt;next))<sp/>{</highlight></codeline>
<codeline lineno="5326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--n;</highlight></codeline>
<codeline lineno="5327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref>();</highlight></codeline>
<codeline lineno="5329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dumpFragment(line-&gt;text,<sp/>n,<sp/>uMap,<sp/>s);</highlight></codeline>
<codeline lineno="5330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(*outputFunc)(outputStream,<sp/>s-&gt;getCString(),<sp/>s-&gt;getLength());</highlight></codeline>
<codeline lineno="5331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>s;</highlight></codeline>
<codeline lineno="5332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>output<sp/>a<sp/>newline<sp/>when<sp/>a<sp/>hyphen<sp/>is<sp/>not<sp/>suppressed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>==<sp/>line-&gt;len)<sp/>{</highlight></codeline>
<codeline lineno="5334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*outputFunc)(outputStream,<sp/>eol,<sp/>eolLen);</highlight></codeline>
<codeline lineno="5335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5336"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(*outputFunc)(outputStream,<sp/>eol,<sp/>eolLen);</highlight></codeline>
<codeline lineno="5339"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5340"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5341"><highlight class="normal"></highlight></codeline>
<codeline lineno="5342"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>end<sp/>of<sp/>page</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5343"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pageBreaks)<sp/>{</highlight></codeline>
<codeline lineno="5344"><highlight class="normal"><sp/><sp/><sp/><sp/>(*outputFunc)(outputStream,<sp/>eop,<sp/>eopLen);</highlight></codeline>
<codeline lineno="5345"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5346"><highlight class="normal"></highlight></codeline>
<codeline lineno="5347"><highlight class="normal"><sp/><sp/>uMap-&gt;decRefCnt();</highlight></codeline>
<codeline lineno="5348"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5349"><highlight class="normal"></highlight></codeline>
<codeline lineno="5350"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TextPage::setMergeCombining(GBool<sp/>merge)<sp/>{</highlight></codeline>
<codeline lineno="5351"><highlight class="normal"><sp/><sp/>mergeCombining<sp/>=<sp/>merge;</highlight></codeline>
<codeline lineno="5352"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5353"><highlight class="normal"></highlight></codeline>
<codeline lineno="5354"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TextPage::assignColumns(<ref refid="class_text_line_frag" kindref="compound">TextLineFrag</ref><sp/>*frags,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nFrags,<sp/>GBool<sp/>oneRot)<sp/>{</highlight></codeline>
<codeline lineno="5355"><highlight class="normal"><sp/><sp/><ref refid="class_text_line_frag" kindref="compound">TextLineFrag</ref><sp/>*frag0,<sp/>*frag1;</highlight></codeline>
<codeline lineno="5356"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rot,<sp/>col1,<sp/>col2,<sp/>i,<sp/>j,<sp/>k;</highlight></codeline>
<codeline lineno="5357"><highlight class="normal"></highlight></codeline>
<codeline lineno="5358"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>all<sp/>text<sp/>in<sp/>the<sp/>region<sp/>has<sp/>the<sp/>same<sp/>rotation<sp/>--<sp/>recompute<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5359"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>column<sp/>numbers<sp/>based<sp/>only<sp/>on<sp/>the<sp/>text<sp/>in<sp/>the<sp/>region</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5360"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(oneRot)<sp/>{</highlight></codeline>
<codeline lineno="5361"><highlight class="normal"><sp/><sp/><sp/><sp/>qsort(frags,<sp/>nFrags,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="class_text_line_frag" kindref="compound">TextLineFrag</ref>),<sp/>&amp;TextLineFrag::cmpXYLineRot);</highlight></codeline>
<codeline lineno="5362"><highlight class="normal"><sp/><sp/><sp/><sp/>rot<sp/>=<sp/>frags[0].line-&gt;rot;</highlight></codeline>
<codeline lineno="5363"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nFrags;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="5364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>frag0<sp/>=<sp/>&amp;frags[i];</highlight></codeline>
<codeline lineno="5365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>col1<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>i;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="5367"><highlight class="normal"><sp/><sp/><sp/><sp/>frag1<sp/>=<sp/>&amp;frags[j];</highlight></codeline>
<codeline lineno="5368"><highlight class="normal"><sp/><sp/><sp/><sp/>col2<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>make<sp/>gcc<sp/>happy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5369"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(rot)<sp/>{</highlight></codeline>
<codeline lineno="5370"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:</highlight></codeline>
<codeline lineno="5371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(frag0-&gt;xMin<sp/>&gt;=<sp/>frag1-&gt;xMax)<sp/>{</highlight></codeline>
<codeline lineno="5372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>col2<sp/>=<sp/>frag1-&gt;col<sp/>+<sp/>(frag1-&gt;line-&gt;col[frag1-&gt;start<sp/>+<sp/>frag1-&gt;len]<sp/>-</highlight></codeline>
<codeline lineno="5373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>frag1-&gt;line-&gt;col[frag1-&gt;start])<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="5374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k<sp/>=<sp/>frag1-&gt;start;</highlight></codeline>
<codeline lineno="5376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k<sp/>&lt;<sp/>frag1-&gt;start<sp/>+<sp/>frag1-&gt;len<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="5377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>frag0-&gt;xMin<sp/>&gt;=<sp/>0.5<sp/>*<sp/>(frag1-&gt;line-&gt;edge[k]<sp/>+</highlight></codeline>
<codeline lineno="5378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>frag1-&gt;line-&gt;edge[k+1]);</highlight></codeline>
<codeline lineno="5379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++k)<sp/>;</highlight></codeline>
<codeline lineno="5380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>col2<sp/>=<sp/>frag1-&gt;col<sp/>+</highlight></codeline>
<codeline lineno="5381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>frag1-&gt;line-&gt;col[k]<sp/>-<sp/>frag1-&gt;line-&gt;col[frag1-&gt;start];</highlight></codeline>
<codeline lineno="5382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5384"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="5385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(frag0-&gt;yMin<sp/>&gt;=<sp/>frag1-&gt;yMax)<sp/>{</highlight></codeline>
<codeline lineno="5386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>col2<sp/>=<sp/>frag1-&gt;col<sp/>+<sp/>(frag1-&gt;line-&gt;col[frag1-&gt;start<sp/>+<sp/>frag1-&gt;len]<sp/>-</highlight></codeline>
<codeline lineno="5387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>frag1-&gt;line-&gt;col[frag1-&gt;start])<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="5388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k<sp/>=<sp/>frag1-&gt;start;</highlight></codeline>
<codeline lineno="5390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k<sp/>&lt;<sp/>frag1-&gt;start<sp/>+<sp/>frag1-&gt;len<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="5391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>frag0-&gt;yMin<sp/>&gt;=<sp/>0.5<sp/>*<sp/>(frag1-&gt;line-&gt;edge[k]<sp/>+</highlight></codeline>
<codeline lineno="5392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>frag1-&gt;line-&gt;edge[k+1]);</highlight></codeline>
<codeline lineno="5393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++k)<sp/>;</highlight></codeline>
<codeline lineno="5394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>col2<sp/>=<sp/>frag1-&gt;col<sp/>+</highlight></codeline>
<codeline lineno="5395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>frag1-&gt;line-&gt;col[k]<sp/>-<sp/>frag1-&gt;line-&gt;col[frag1-&gt;start];</highlight></codeline>
<codeline lineno="5396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5398"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:</highlight></codeline>
<codeline lineno="5399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(frag0-&gt;xMax<sp/>&lt;=<sp/>frag1-&gt;xMin)<sp/>{</highlight></codeline>
<codeline lineno="5400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>col2<sp/>=<sp/>frag1-&gt;col<sp/>+<sp/>(frag1-&gt;line-&gt;col[frag1-&gt;start<sp/>+<sp/>frag1-&gt;len]<sp/>-</highlight></codeline>
<codeline lineno="5401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>frag1-&gt;line-&gt;col[frag1-&gt;start])<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="5402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k<sp/>=<sp/>frag1-&gt;start;</highlight></codeline>
<codeline lineno="5404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k<sp/>&lt;<sp/>frag1-&gt;start<sp/>+<sp/>frag1-&gt;len<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="5405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>frag0-&gt;xMax<sp/>&lt;=<sp/>0.5<sp/>*<sp/>(frag1-&gt;line-&gt;edge[k]<sp/>+</highlight></codeline>
<codeline lineno="5406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>frag1-&gt;line-&gt;edge[k+1]);</highlight></codeline>
<codeline lineno="5407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++k)<sp/>;</highlight></codeline>
<codeline lineno="5408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>col2<sp/>=<sp/>frag1-&gt;col<sp/>+</highlight></codeline>
<codeline lineno="5409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>frag1-&gt;line-&gt;col[k]<sp/>-<sp/>frag1-&gt;line-&gt;col[frag1-&gt;start];</highlight></codeline>
<codeline lineno="5410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5412"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>3:</highlight></codeline>
<codeline lineno="5413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(frag0-&gt;yMax<sp/>&lt;=<sp/>frag1-&gt;yMin)<sp/>{</highlight></codeline>
<codeline lineno="5414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>col2<sp/>=<sp/>frag1-&gt;col<sp/>+<sp/>(frag1-&gt;line-&gt;col[frag1-&gt;start<sp/>+<sp/>frag1-&gt;len]<sp/>-</highlight></codeline>
<codeline lineno="5415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>frag1-&gt;line-&gt;col[frag1-&gt;start])<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="5416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k<sp/>=<sp/>frag1-&gt;start;</highlight></codeline>
<codeline lineno="5418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k<sp/>&lt;<sp/>frag1-&gt;start<sp/>+<sp/>frag1-&gt;len<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="5419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>frag0-&gt;yMax<sp/>&lt;=<sp/>0.5<sp/>*<sp/>(frag1-&gt;line-&gt;edge[k]<sp/>+</highlight></codeline>
<codeline lineno="5420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>frag1-&gt;line-&gt;edge[k+1]);</highlight></codeline>
<codeline lineno="5421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++k)<sp/>;</highlight></codeline>
<codeline lineno="5422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>col2<sp/>=<sp/>frag1-&gt;col<sp/>+</highlight></codeline>
<codeline lineno="5423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>frag1-&gt;line-&gt;col[k]<sp/>-<sp/>frag1-&gt;line-&gt;col[frag1-&gt;start];</highlight></codeline>
<codeline lineno="5424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5426"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5427"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(col2<sp/>&gt;<sp/>col1)<sp/>{</highlight></codeline>
<codeline lineno="5428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>col1<sp/>=<sp/>col2;</highlight></codeline>
<codeline lineno="5429"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>frag0-&gt;col<sp/>=<sp/>col1;</highlight></codeline>
<codeline lineno="5432"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5433"><highlight class="normal"></highlight></codeline>
<codeline lineno="5434"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>region<sp/>includes<sp/>text<sp/>at<sp/>different<sp/>rotations<sp/>--<sp/>use<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5435"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>globally<sp/>assigned<sp/>column<sp/>numbers,<sp/>offset<sp/>by<sp/>the<sp/>minimum<sp/>column</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5436"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>number<sp/>(i.e.,<sp/>shift<sp/>everything<sp/>over<sp/>to<sp/>column<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5437"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5438"><highlight class="normal"><sp/><sp/><sp/><sp/>col1<sp/>=<sp/>frags[0].col;</highlight></codeline>
<codeline lineno="5439"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>nFrags;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="5440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(frags[i].col<sp/>&lt;<sp/>col1)<sp/>{</highlight></codeline>
<codeline lineno="5441"><highlight class="normal"><sp/><sp/><sp/><sp/>col1<sp/>=<sp/>frags[i].col;</highlight></codeline>
<codeline lineno="5442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5443"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5444"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nFrags;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="5445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>frags[i].col<sp/>-=<sp/>col1;</highlight></codeline>
<codeline lineno="5446"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5447"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5448"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5449"><highlight class="normal"></highlight></codeline>
<codeline lineno="5450"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>TextPage::dumpFragment(Unicode<sp/>*text,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len,<sp/><ref refid="class_unicode_map" kindref="compound">UnicodeMap</ref><sp/>*uMap,</highlight></codeline>
<codeline lineno="5451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*s)<sp/>{</highlight></codeline>
<codeline lineno="5452"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(uMap-&gt;isUnicode())<sp/>{</highlight></codeline>
<codeline lineno="5453"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>reorderText(text,<sp/>len,<sp/>uMap,<sp/>primaryLR,<sp/>s,<sp/>NULL);</highlight></codeline>
<codeline lineno="5454"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5455"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nCols<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5456"><highlight class="normal"></highlight></codeline>
<codeline lineno="5457"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buf[8];</highlight></codeline>
<codeline lineno="5458"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>buflen<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5459"><highlight class="normal"></highlight></codeline>
<codeline lineno="5460"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>len;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="5461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>buflen<sp/>=<sp/>uMap-&gt;mapUnicode(text[i],<sp/>buf,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(buf));</highlight></codeline>
<codeline lineno="5462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;append(buf,<sp/>buflen);</highlight></codeline>
<codeline lineno="5463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nCols<sp/>+=<sp/>buflen;</highlight></codeline>
<codeline lineno="5464"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5465"><highlight class="normal"></highlight></codeline>
<codeline lineno="5466"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nCols;</highlight></codeline>
<codeline lineno="5467"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5468"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5469"><highlight class="normal"></highlight></codeline>
<codeline lineno="5470"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>TEXTOUT_WORD_LIST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5471"><highlight class="normal"><ref refid="class_text_word_list" kindref="compound">TextWordList</ref><sp/>*TextPage::makeWordList(GBool<sp/>physLayout)<sp/>{</highlight></codeline>
<codeline lineno="5472"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_text_word_list" kindref="compound">TextWordList</ref>(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>physLayout);</highlight></codeline>
<codeline lineno="5473"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5474"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5475"><highlight class="normal"></highlight></codeline>
<codeline lineno="5476"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5477"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ActualText</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5478"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5479"><highlight class="normal">ActualText::ActualText(<ref refid="class_text_page" kindref="compound">TextPage</ref><sp/>*out)<sp/>{</highlight></codeline>
<codeline lineno="5480"><highlight class="normal"><sp/><sp/>out-&gt;incRefCnt();</highlight></codeline>
<codeline lineno="5481"><highlight class="normal"><sp/><sp/>text<sp/>=<sp/>out;</highlight></codeline>
<codeline lineno="5482"><highlight class="normal"><sp/><sp/>actualText<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="5483"><highlight class="normal"><sp/><sp/>actualTextNBytes<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5484"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5485"><highlight class="normal"></highlight></codeline>
<codeline lineno="5486"><highlight class="normal">ActualText::~ActualText()<sp/>{</highlight></codeline>
<codeline lineno="5487"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(actualText)</highlight></codeline>
<codeline lineno="5488"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>actualText;</highlight></codeline>
<codeline lineno="5489"><highlight class="normal"><sp/><sp/>text-&gt;decRefCnt();</highlight></codeline>
<codeline lineno="5490"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5491"><highlight class="normal"></highlight></codeline>
<codeline lineno="5492"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ActualText::addChar(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y,</highlight></codeline>
<codeline lineno="5493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dx,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dy,</highlight></codeline>
<codeline lineno="5494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CharCode<sp/>c,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nBytes,<sp/>Unicode<sp/>*u,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>uLen)<sp/>{</highlight></codeline>
<codeline lineno="5495"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!actualText)<sp/>{</highlight></codeline>
<codeline lineno="5496"><highlight class="normal"><sp/><sp/><sp/><sp/>text-&gt;addChar(state,<sp/>x,<sp/>y,<sp/>dx,<sp/>dy,<sp/>c,<sp/>nBytes,<sp/>u,<sp/>uLen);</highlight></codeline>
<codeline lineno="5497"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5498"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5499"><highlight class="normal"></highlight></codeline>
<codeline lineno="5500"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Inside<sp/>ActualText<sp/>span.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5501"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!actualTextNBytes)<sp/>{</highlight></codeline>
<codeline lineno="5502"><highlight class="normal"><sp/><sp/><sp/><sp/>actualTextX0<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="5503"><highlight class="normal"><sp/><sp/><sp/><sp/>actualTextY0<sp/>=<sp/>y;</highlight></codeline>
<codeline lineno="5504"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5505"><highlight class="normal"><sp/><sp/>actualTextX1<sp/>=<sp/>x<sp/>+<sp/>dx;</highlight></codeline>
<codeline lineno="5506"><highlight class="normal"><sp/><sp/>actualTextY1<sp/>=<sp/>y<sp/>+<sp/>dy;</highlight></codeline>
<codeline lineno="5507"><highlight class="normal"><sp/><sp/>actualTextNBytes<sp/>+=<sp/>nBytes;</highlight></codeline>
<codeline lineno="5508"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5509"><highlight class="normal"></highlight></codeline>
<codeline lineno="5510"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ActualText::begin(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state,<sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*text)<sp/>{</highlight></codeline>
<codeline lineno="5511"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(actualText)</highlight></codeline>
<codeline lineno="5512"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>actualText;</highlight></codeline>
<codeline lineno="5513"><highlight class="normal"><sp/><sp/>actualText<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref>(text);</highlight></codeline>
<codeline lineno="5514"><highlight class="normal"><sp/><sp/>actualTextNBytes<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5515"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5516"><highlight class="normal"></highlight></codeline>
<codeline lineno="5517"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ActualText::end(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state)<sp/>{</highlight></codeline>
<codeline lineno="5518"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>ActualText<sp/>span<sp/>closed.<sp/>Output<sp/>the<sp/>span<sp/>text<sp/>and<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5519"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>extents<sp/>of<sp/>all<sp/>the<sp/>glyphs<sp/>inside<sp/>the<sp/>span</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5520"><highlight class="normal"></highlight></codeline>
<codeline lineno="5521"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(actualTextNBytes)<sp/>{</highlight></codeline>
<codeline lineno="5522"><highlight class="normal"><sp/><sp/><sp/><sp/>Unicode<sp/>*uni<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="5523"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>length;</highlight></codeline>
<codeline lineno="5524"><highlight class="normal"></highlight></codeline>
<codeline lineno="5525"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>now<sp/>that<sp/>we<sp/>have<sp/>the<sp/>position<sp/>info<sp/>for<sp/>all<sp/>of<sp/>the<sp/>text<sp/>inside</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5526"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>marked<sp/>content<sp/>span,<sp/>we<sp/>feed<sp/>the<sp/>&quot;ActualText&quot;<sp/>back<sp/>through</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5527"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>text-&gt;addChar()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5528"><highlight class="normal"><sp/><sp/><sp/><sp/>length<sp/>=<sp/>TextStringToUCS4(actualText,<sp/>&amp;uni);</highlight></codeline>
<codeline lineno="5529"><highlight class="normal"><sp/><sp/><sp/><sp/>text-&gt;addChar(state,<sp/>actualTextX0,<sp/>actualTextY0,</highlight></codeline>
<codeline lineno="5530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>actualTextX1<sp/>-<sp/>actualTextX0,<sp/>actualTextY1<sp/>-<sp/>actualTextY0,</highlight></codeline>
<codeline lineno="5531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/>actualTextNBytes,<sp/>uni,<sp/>length);</highlight></codeline>
<codeline lineno="5532"><highlight class="normal"><sp/><sp/><sp/><sp/>gfree(uni);</highlight></codeline>
<codeline lineno="5533"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5534"><highlight class="normal"></highlight></codeline>
<codeline lineno="5535"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>actualText;</highlight></codeline>
<codeline lineno="5536"><highlight class="normal"><sp/><sp/>actualText<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="5537"><highlight class="normal"><sp/><sp/>actualTextNBytes<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5538"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5539"><highlight class="normal"></highlight></codeline>
<codeline lineno="5540"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5541"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TextOutputDev</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5542"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5543"><highlight class="normal"></highlight></codeline>
<codeline lineno="5544"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TextOutputDev_outputToFile(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*stream,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*text,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len)<sp/>{</highlight></codeline>
<codeline lineno="5545"><highlight class="normal"><sp/><sp/>fwrite(text,<sp/>1,<sp/>len,<sp/>(FILE<sp/>*)stream);</highlight></codeline>
<codeline lineno="5546"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5547"><highlight class="normal"></highlight></codeline>
<codeline lineno="5548"><highlight class="normal">TextOutputDev::TextOutputDev(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fileName,<sp/>GBool<sp/>physLayoutA,</highlight></codeline>
<codeline lineno="5549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>fixedPitchA,<sp/>GBool<sp/>rawOrderA,</highlight></codeline>
<codeline lineno="5550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GBool<sp/>append)<sp/>{</highlight></codeline>
<codeline lineno="5551"><highlight class="normal"><sp/><sp/>text<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="5552"><highlight class="normal"><sp/><sp/>physLayout<sp/>=<sp/>physLayoutA;</highlight></codeline>
<codeline lineno="5553"><highlight class="normal"><sp/><sp/>fixedPitch<sp/>=<sp/>physLayout<sp/>?<sp/>fixedPitchA<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="5554"><highlight class="normal"><sp/><sp/>rawOrder<sp/>=<sp/>rawOrderA;</highlight></codeline>
<codeline lineno="5555"><highlight class="normal"><sp/><sp/>doHTML<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="5556"><highlight class="normal"><sp/><sp/>ok<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="5557"><highlight class="normal"></highlight></codeline>
<codeline lineno="5558"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>open<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5559"><highlight class="normal"><sp/><sp/>needClose<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="5560"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fileName)<sp/>{</highlight></codeline>
<codeline lineno="5561"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!strcmp(fileName,<sp/></highlight><highlight class="stringliteral">&quot;-&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="5562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>outputStream<sp/>=<sp/>stdout;</highlight></codeline>
<codeline lineno="5563"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_WIN32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>keep<sp/>DOS<sp/>from<sp/>munging<sp/>the<sp/>end-of-line<sp/>characters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>setmode(fileno(stdout),<sp/>O_BINARY);</highlight></codeline>
<codeline lineno="5566"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5567"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((outputStream<sp/>=<sp/>fopen(fileName,<sp/>append<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;ab&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;wb&quot;</highlight><highlight class="normal">)))<sp/>{</highlight></codeline>
<codeline lineno="5568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>needClose<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="5569"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error(errIO,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Couldn&apos;t<sp/>open<sp/>text<sp/>file<sp/>&apos;{0:s}&apos;&quot;</highlight><highlight class="normal">,<sp/>fileName);</highlight></codeline>
<codeline lineno="5571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ok<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="5572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>actualText<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="5573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5574"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5575"><highlight class="normal"><sp/><sp/><sp/><sp/>outputFunc<sp/>=<sp/>&amp;TextOutputDev_outputToFile;</highlight></codeline>
<codeline lineno="5576"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5577"><highlight class="normal"><sp/><sp/><sp/><sp/>outputStream<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="5578"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5579"><highlight class="normal"></highlight></codeline>
<codeline lineno="5580"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>up<sp/>text<sp/>object</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5581"><highlight class="normal"><sp/><sp/>text<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_text_page" kindref="compound">TextPage</ref>(rawOrderA);</highlight></codeline>
<codeline lineno="5582"><highlight class="normal"><sp/><sp/>actualText<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_actual_text" kindref="compound">ActualText</ref>(text);</highlight></codeline>
<codeline lineno="5583"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5584"><highlight class="normal"></highlight></codeline>
<codeline lineno="5585"><highlight class="normal">TextOutputDev::TextOutputDev(TextOutputFunc<sp/>func,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*stream,</highlight></codeline>
<codeline lineno="5586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GBool<sp/>physLayoutA,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>fixedPitchA,</highlight></codeline>
<codeline lineno="5587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GBool<sp/>rawOrderA)<sp/>{</highlight></codeline>
<codeline lineno="5588"><highlight class="normal"><sp/><sp/>outputFunc<sp/>=<sp/>func;</highlight></codeline>
<codeline lineno="5589"><highlight class="normal"><sp/><sp/>outputStream<sp/>=<sp/>stream;</highlight></codeline>
<codeline lineno="5590"><highlight class="normal"><sp/><sp/>needClose<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="5591"><highlight class="normal"><sp/><sp/>physLayout<sp/>=<sp/>physLayoutA;</highlight></codeline>
<codeline lineno="5592"><highlight class="normal"><sp/><sp/>fixedPitch<sp/>=<sp/>physLayout<sp/>?<sp/>fixedPitchA<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="5593"><highlight class="normal"><sp/><sp/>rawOrder<sp/>=<sp/>rawOrderA;</highlight></codeline>
<codeline lineno="5594"><highlight class="normal"><sp/><sp/>doHTML<sp/>=<sp/>gFalse;</highlight></codeline>
<codeline lineno="5595"><highlight class="normal"><sp/><sp/>text<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_text_page" kindref="compound">TextPage</ref>(rawOrderA);</highlight></codeline>
<codeline lineno="5596"><highlight class="normal"><sp/><sp/>actualText<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_actual_text" kindref="compound">ActualText</ref>(text);</highlight></codeline>
<codeline lineno="5597"><highlight class="normal"><sp/><sp/>ok<sp/>=<sp/>gTrue;</highlight></codeline>
<codeline lineno="5598"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5599"><highlight class="normal"></highlight></codeline>
<codeline lineno="5600"><highlight class="normal">TextOutputDev::~TextOutputDev()<sp/>{</highlight></codeline>
<codeline lineno="5601"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(needClose)<sp/>{</highlight></codeline>
<codeline lineno="5602"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>MACOS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5603"><highlight class="normal"><sp/><sp/><sp/><sp/>ICS_MapRefNumAndAssign((</highlight><highlight class="keywordtype">short</highlight><highlight class="normal">)((FILE<sp/>*)outputStream)-&gt;handle);</highlight></codeline>
<codeline lineno="5604"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5605"><highlight class="normal"><sp/><sp/><sp/><sp/>fclose((FILE<sp/>*)outputStream);</highlight></codeline>
<codeline lineno="5606"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5607"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(text)<sp/>{</highlight></codeline>
<codeline lineno="5608"><highlight class="normal"><sp/><sp/><sp/><sp/>text-&gt;decRefCnt();</highlight></codeline>
<codeline lineno="5609"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5610"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>actualText;</highlight></codeline>
<codeline lineno="5611"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5612"><highlight class="normal"></highlight></codeline>
<codeline lineno="5613"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TextOutputDev::startPage(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pageNum,<sp/><ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state,<sp/><ref refid="class_x_ref" kindref="compound">XRef</ref><sp/>*xref)<sp/>{</highlight></codeline>
<codeline lineno="5614"><highlight class="normal"><sp/><sp/>text-&gt;startPage(state);</highlight></codeline>
<codeline lineno="5615"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5616"><highlight class="normal"></highlight></codeline>
<codeline lineno="5617"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TextOutputDev::endPage()<sp/>{</highlight></codeline>
<codeline lineno="5618"><highlight class="normal"><sp/><sp/>text-&gt;endPage();</highlight></codeline>
<codeline lineno="5619"><highlight class="normal"><sp/><sp/>text-&gt;coalesce(physLayout,<sp/>fixedPitch,<sp/>doHTML);</highlight></codeline>
<codeline lineno="5620"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(outputStream)<sp/>{</highlight></codeline>
<codeline lineno="5621"><highlight class="normal"><sp/><sp/><sp/><sp/>text-&gt;dump(outputStream,<sp/>outputFunc,<sp/>physLayout);</highlight></codeline>
<codeline lineno="5622"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5623"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5624"><highlight class="normal"></highlight></codeline>
<codeline lineno="5625"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TextOutputDev::restoreState(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state)<sp/>{</highlight></codeline>
<codeline lineno="5626"><highlight class="normal"><sp/><sp/>text-&gt;updateFont(state);</highlight></codeline>
<codeline lineno="5627"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5628"><highlight class="normal"></highlight></codeline>
<codeline lineno="5629"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TextOutputDev::updateFont(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state)<sp/>{</highlight></codeline>
<codeline lineno="5630"><highlight class="normal"><sp/><sp/>text-&gt;updateFont(state);</highlight></codeline>
<codeline lineno="5631"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5632"><highlight class="normal"></highlight></codeline>
<codeline lineno="5633"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TextOutputDev::beginString(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state,<sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*s)<sp/>{</highlight></codeline>
<codeline lineno="5634"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5635"><highlight class="normal"></highlight></codeline>
<codeline lineno="5636"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TextOutputDev::endString(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state)<sp/>{</highlight></codeline>
<codeline lineno="5637"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5638"><highlight class="normal"></highlight></codeline>
<codeline lineno="5639"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TextOutputDev::drawChar(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y,</highlight></codeline>
<codeline lineno="5640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dx,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dy,</highlight></codeline>
<codeline lineno="5641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>originX,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>originY,</highlight></codeline>
<codeline lineno="5642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CharCode<sp/>c,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nBytes,<sp/>Unicode<sp/>*u,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>uLen)<sp/>{</highlight></codeline>
<codeline lineno="5643"><highlight class="normal"><sp/><sp/>actualText-&gt;addChar(state,<sp/>x,<sp/>y,<sp/>dx,<sp/>dy,<sp/>c,<sp/>nBytes,<sp/>u,<sp/>uLen);</highlight></codeline>
<codeline lineno="5644"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5645"><highlight class="normal"></highlight></codeline>
<codeline lineno="5646"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TextOutputDev::incCharCount(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nChars)<sp/>{</highlight></codeline>
<codeline lineno="5647"><highlight class="normal"><sp/><sp/>text-&gt;incCharCount(nChars);</highlight></codeline>
<codeline lineno="5648"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5649"><highlight class="normal"></highlight></codeline>
<codeline lineno="5650"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TextOutputDev::beginActualText(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state,<sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*text)</highlight></codeline>
<codeline lineno="5651"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5652"><highlight class="normal"><sp/><sp/>actualText-&gt;begin(state,<sp/>text);</highlight></codeline>
<codeline lineno="5653"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5654"><highlight class="normal"></highlight></codeline>
<codeline lineno="5655"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TextOutputDev::endActualText(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state)</highlight></codeline>
<codeline lineno="5656"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5657"><highlight class="normal"><sp/><sp/>actualText-&gt;end(state);</highlight></codeline>
<codeline lineno="5658"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5659"><highlight class="normal"></highlight></codeline>
<codeline lineno="5660"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TextOutputDev::stroke(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state)<sp/>{</highlight></codeline>
<codeline lineno="5661"><highlight class="normal"><sp/><sp/><ref refid="class_gfx_path" kindref="compound">GfxPath</ref><sp/>*path;</highlight></codeline>
<codeline lineno="5662"><highlight class="normal"><sp/><sp/><ref refid="class_gfx_subpath" kindref="compound">GfxSubpath</ref><sp/>*subpath;</highlight></codeline>
<codeline lineno="5663"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x[2],<sp/>y[2];</highlight></codeline>
<codeline lineno="5664"><highlight class="normal"></highlight></codeline>
<codeline lineno="5665"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!doHTML)<sp/>{</highlight></codeline>
<codeline lineno="5666"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5667"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5668"><highlight class="normal"><sp/><sp/>path<sp/>=<sp/>state-&gt;getPath();</highlight></codeline>
<codeline lineno="5669"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(path-&gt;getNumSubpaths()<sp/>!=<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="5670"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5671"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5672"><highlight class="normal"><sp/><sp/>subpath<sp/>=<sp/>path-&gt;getSubpath(0);</highlight></codeline>
<codeline lineno="5673"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(subpath-&gt;getNumPoints()<sp/>!=<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="5674"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5675"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5676"><highlight class="normal"><sp/><sp/>state-&gt;transform(subpath-&gt;getX(0),<sp/>subpath-&gt;getY(0),<sp/>&amp;x[0],<sp/>&amp;y[0]);</highlight></codeline>
<codeline lineno="5677"><highlight class="normal"><sp/><sp/>state-&gt;transform(subpath-&gt;getX(1),<sp/>subpath-&gt;getY(1),<sp/>&amp;x[1],<sp/>&amp;y[1]);</highlight></codeline>
<codeline lineno="5678"><highlight class="normal"></highlight></codeline>
<codeline lineno="5679"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>look<sp/>for<sp/>a<sp/>vertical<sp/>or<sp/>horizontal<sp/>line</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5680"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x[0]<sp/>==<sp/>x[1]<sp/>||<sp/>y[0]<sp/>==<sp/>y[1])<sp/>{</highlight></codeline>
<codeline lineno="5681"><highlight class="normal"><sp/><sp/><sp/><sp/>text-&gt;addUnderline(x[0],<sp/>y[0],<sp/>x[1],<sp/>y[1]);</highlight></codeline>
<codeline lineno="5682"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5683"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5684"><highlight class="normal"></highlight></codeline>
<codeline lineno="5685"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TextOutputDev::fill(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state)<sp/>{</highlight></codeline>
<codeline lineno="5686"><highlight class="normal"><sp/><sp/><ref refid="class_gfx_path" kindref="compound">GfxPath</ref><sp/>*path;</highlight></codeline>
<codeline lineno="5687"><highlight class="normal"><sp/><sp/><ref refid="class_gfx_subpath" kindref="compound">GfxSubpath</ref><sp/>*subpath;</highlight></codeline>
<codeline lineno="5688"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x[5],<sp/>y[5];</highlight></codeline>
<codeline lineno="5689"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rx0,<sp/>ry0,<sp/>rx1,<sp/>ry1,<sp/>t;</highlight></codeline>
<codeline lineno="5690"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="5691"><highlight class="normal"></highlight></codeline>
<codeline lineno="5692"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!doHTML)<sp/>{</highlight></codeline>
<codeline lineno="5693"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5694"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5695"><highlight class="normal"><sp/><sp/>path<sp/>=<sp/>state-&gt;getPath();</highlight></codeline>
<codeline lineno="5696"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(path-&gt;getNumSubpaths()<sp/>!=<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="5697"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5698"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5699"><highlight class="normal"><sp/><sp/>subpath<sp/>=<sp/>path-&gt;getSubpath(0);</highlight></codeline>
<codeline lineno="5700"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(subpath-&gt;getNumPoints()<sp/>!=<sp/>5)<sp/>{</highlight></codeline>
<codeline lineno="5701"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5702"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5703"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>5;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="5704"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(subpath-&gt;getCurve(i))<sp/>{</highlight></codeline>
<codeline lineno="5705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5706"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5707"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;transform(subpath-&gt;getX(i),<sp/>subpath-&gt;getY(i),<sp/>&amp;x[i],<sp/>&amp;y[i]);</highlight></codeline>
<codeline lineno="5708"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5709"><highlight class="normal"></highlight></codeline>
<codeline lineno="5710"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>look<sp/>for<sp/>a<sp/>rectangle</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5711"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x[0]<sp/>==<sp/>x[1]<sp/>&amp;&amp;<sp/>y[1]<sp/>==<sp/>y[2]<sp/>&amp;&amp;<sp/>x[2]<sp/>==<sp/>x[3]<sp/>&amp;&amp;<sp/>y[3]<sp/>==<sp/>y[4]<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="5712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>x[0]<sp/>==<sp/>x[4]<sp/>&amp;&amp;<sp/>y[0]<sp/>==<sp/>y[4])<sp/>{</highlight></codeline>
<codeline lineno="5713"><highlight class="normal"><sp/><sp/><sp/><sp/>rx0<sp/>=<sp/>x[0];</highlight></codeline>
<codeline lineno="5714"><highlight class="normal"><sp/><sp/><sp/><sp/>ry0<sp/>=<sp/>y[0];</highlight></codeline>
<codeline lineno="5715"><highlight class="normal"><sp/><sp/><sp/><sp/>rx1<sp/>=<sp/>x[2];</highlight></codeline>
<codeline lineno="5716"><highlight class="normal"><sp/><sp/><sp/><sp/>ry1<sp/>=<sp/>y[1];</highlight></codeline>
<codeline lineno="5717"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y[0]<sp/>==<sp/>y[1]<sp/>&amp;&amp;<sp/>x[1]<sp/>==<sp/>x[2]<sp/>&amp;&amp;<sp/>y[2]<sp/>==<sp/>y[3]<sp/>&amp;&amp;<sp/>x[3]<sp/>==<sp/>x[4]<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="5718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x[0]<sp/>==<sp/>x[4]<sp/>&amp;&amp;<sp/>y[0]<sp/>==<sp/>y[4])<sp/>{</highlight></codeline>
<codeline lineno="5719"><highlight class="normal"><sp/><sp/><sp/><sp/>rx0<sp/>=<sp/>x[0];</highlight></codeline>
<codeline lineno="5720"><highlight class="normal"><sp/><sp/><sp/><sp/>ry0<sp/>=<sp/>y[0];</highlight></codeline>
<codeline lineno="5721"><highlight class="normal"><sp/><sp/><sp/><sp/>rx1<sp/>=<sp/>x[1];</highlight></codeline>
<codeline lineno="5722"><highlight class="normal"><sp/><sp/><sp/><sp/>ry1<sp/>=<sp/>y[2];</highlight></codeline>
<codeline lineno="5723"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5724"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5725"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5726"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rx1<sp/>&lt;<sp/>rx0)<sp/>{</highlight></codeline>
<codeline lineno="5727"><highlight class="normal"><sp/><sp/><sp/><sp/>t<sp/>=<sp/>rx0;</highlight></codeline>
<codeline lineno="5728"><highlight class="normal"><sp/><sp/><sp/><sp/>rx0<sp/>=<sp/>rx1;</highlight></codeline>
<codeline lineno="5729"><highlight class="normal"><sp/><sp/><sp/><sp/>rx1<sp/>=<sp/>t;</highlight></codeline>
<codeline lineno="5730"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5731"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ry1<sp/>&lt;<sp/>ry0)<sp/>{</highlight></codeline>
<codeline lineno="5732"><highlight class="normal"><sp/><sp/><sp/><sp/>t<sp/>=<sp/>ry0;</highlight></codeline>
<codeline lineno="5733"><highlight class="normal"><sp/><sp/><sp/><sp/>ry0<sp/>=<sp/>ry1;</highlight></codeline>
<codeline lineno="5734"><highlight class="normal"><sp/><sp/><sp/><sp/>ry1<sp/>=<sp/>t;</highlight></codeline>
<codeline lineno="5735"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5736"><highlight class="normal"></highlight></codeline>
<codeline lineno="5737"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>skinny<sp/>horizontal<sp/>rectangle</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5738"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ry1<sp/>-<sp/>ry0<sp/>&lt;<sp/>rx1<sp/>-<sp/>rx0)<sp/>{</highlight></codeline>
<codeline lineno="5739"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ry1<sp/>-<sp/>ry0<sp/>&lt;<sp/>maxUnderlineWidth)<sp/>{</highlight></codeline>
<codeline lineno="5740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ry0<sp/>=<sp/>0.5<sp/>*<sp/>(ry0<sp/>+<sp/>ry1);</highlight></codeline>
<codeline lineno="5741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>text-&gt;addUnderline(rx0,<sp/>ry0,<sp/>rx1,<sp/>ry0);</highlight></codeline>
<codeline lineno="5742"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5743"><highlight class="normal"></highlight></codeline>
<codeline lineno="5744"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>skinny<sp/>vertical<sp/>rectangle</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5745"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5746"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rx1<sp/>-<sp/>rx0<sp/>&lt;<sp/>maxUnderlineWidth)<sp/>{</highlight></codeline>
<codeline lineno="5747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rx0<sp/>=<sp/>0.5<sp/>*<sp/>(rx0<sp/>+<sp/>rx1);</highlight></codeline>
<codeline lineno="5748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>text-&gt;addUnderline(rx0,<sp/>ry0,<sp/>rx0,<sp/>ry1);</highlight></codeline>
<codeline lineno="5749"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5750"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5751"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5752"><highlight class="normal"></highlight></codeline>
<codeline lineno="5753"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TextOutputDev::eoFill(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state)<sp/>{</highlight></codeline>
<codeline lineno="5754"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!doHTML)<sp/>{</highlight></codeline>
<codeline lineno="5755"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5756"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5757"><highlight class="normal"><sp/><sp/>fill(state);</highlight></codeline>
<codeline lineno="5758"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5759"><highlight class="normal"></highlight></codeline>
<codeline lineno="5760"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TextOutputDev::processLink(<ref refid="class_annot_link" kindref="compound">AnnotLink</ref><sp/>*link)<sp/>{</highlight></codeline>
<codeline lineno="5761"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x1,<sp/>y1,<sp/>x2,<sp/>y2;</highlight></codeline>
<codeline lineno="5762"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>xMin,<sp/>yMin,<sp/>xMax,<sp/>yMax,<sp/>x,<sp/>y;</highlight></codeline>
<codeline lineno="5763"><highlight class="normal"></highlight></codeline>
<codeline lineno="5764"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!doHTML)<sp/>{</highlight></codeline>
<codeline lineno="5765"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5766"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5767"><highlight class="normal"><sp/><sp/>link-&gt;getRect(&amp;x1,<sp/>&amp;y1,<sp/>&amp;x2,<sp/>&amp;y2);</highlight></codeline>
<codeline lineno="5768"><highlight class="normal"><sp/><sp/>cvtUserToDev(x1,<sp/>y1,<sp/>&amp;x,<sp/>&amp;y);</highlight></codeline>
<codeline lineno="5769"><highlight class="normal"><sp/><sp/>xMin<sp/>=<sp/>xMax<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="5770"><highlight class="normal"><sp/><sp/>yMin<sp/>=<sp/>yMax<sp/>=<sp/>y;</highlight></codeline>
<codeline lineno="5771"><highlight class="normal"><sp/><sp/>cvtUserToDev(x1,<sp/>y2,<sp/>&amp;x,<sp/>&amp;y);</highlight></codeline>
<codeline lineno="5772"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>&lt;<sp/>xMin)<sp/>{</highlight></codeline>
<codeline lineno="5773"><highlight class="normal"><sp/><sp/><sp/><sp/>xMin<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="5774"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>&gt;<sp/>xMax)<sp/>{</highlight></codeline>
<codeline lineno="5775"><highlight class="normal"><sp/><sp/><sp/><sp/>xMax<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="5776"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5777"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y<sp/>&lt;<sp/>yMin)<sp/>{</highlight></codeline>
<codeline lineno="5778"><highlight class="normal"><sp/><sp/><sp/><sp/>yMin<sp/>=<sp/>y;</highlight></codeline>
<codeline lineno="5779"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y<sp/>&gt;<sp/>yMax)<sp/>{</highlight></codeline>
<codeline lineno="5780"><highlight class="normal"><sp/><sp/><sp/><sp/>yMax<sp/>=<sp/>y;</highlight></codeline>
<codeline lineno="5781"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5782"><highlight class="normal"><sp/><sp/>cvtUserToDev(x2,<sp/>y1,<sp/>&amp;x,<sp/>&amp;y);</highlight></codeline>
<codeline lineno="5783"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>&lt;<sp/>xMin)<sp/>{</highlight></codeline>
<codeline lineno="5784"><highlight class="normal"><sp/><sp/><sp/><sp/>xMin<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="5785"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>&gt;<sp/>xMax)<sp/>{</highlight></codeline>
<codeline lineno="5786"><highlight class="normal"><sp/><sp/><sp/><sp/>xMax<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="5787"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5788"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y<sp/>&lt;<sp/>yMin)<sp/>{</highlight></codeline>
<codeline lineno="5789"><highlight class="normal"><sp/><sp/><sp/><sp/>yMin<sp/>=<sp/>y;</highlight></codeline>
<codeline lineno="5790"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y<sp/>&gt;<sp/>yMax)<sp/>{</highlight></codeline>
<codeline lineno="5791"><highlight class="normal"><sp/><sp/><sp/><sp/>yMax<sp/>=<sp/>y;</highlight></codeline>
<codeline lineno="5792"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5793"><highlight class="normal"><sp/><sp/>cvtUserToDev(x2,<sp/>y2,<sp/>&amp;x,<sp/>&amp;y);</highlight></codeline>
<codeline lineno="5794"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>&lt;<sp/>xMin)<sp/>{</highlight></codeline>
<codeline lineno="5795"><highlight class="normal"><sp/><sp/><sp/><sp/>xMin<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="5796"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>&gt;<sp/>xMax)<sp/>{</highlight></codeline>
<codeline lineno="5797"><highlight class="normal"><sp/><sp/><sp/><sp/>xMax<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="5798"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5799"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y<sp/>&lt;<sp/>yMin)<sp/>{</highlight></codeline>
<codeline lineno="5800"><highlight class="normal"><sp/><sp/><sp/><sp/>yMin<sp/>=<sp/>y;</highlight></codeline>
<codeline lineno="5801"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y<sp/>&gt;<sp/>yMax)<sp/>{</highlight></codeline>
<codeline lineno="5802"><highlight class="normal"><sp/><sp/><sp/><sp/>yMax<sp/>=<sp/>y;</highlight></codeline>
<codeline lineno="5803"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5804"><highlight class="normal"><sp/><sp/>text-&gt;addLink(xMin,<sp/>yMin,<sp/>xMax,<sp/>yMax,<sp/>link);</highlight></codeline>
<codeline lineno="5805"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5806"><highlight class="normal"></highlight></codeline>
<codeline lineno="5807"><highlight class="normal">GBool<sp/>TextOutputDev::findText(Unicode<sp/>*s,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len,</highlight></codeline>
<codeline lineno="5808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GBool<sp/>startAtTop,<sp/>GBool<sp/>stopAtBottom,</highlight></codeline>
<codeline lineno="5809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GBool<sp/>startAtLast,<sp/>GBool<sp/>stopAtLast,</highlight></codeline>
<codeline lineno="5810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GBool<sp/>caseSensitive,<sp/>GBool<sp/>backward,</highlight></codeline>
<codeline lineno="5811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GBool<sp/>wholeWord,</highlight></codeline>
<codeline lineno="5812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*xMin,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*yMin,</highlight></codeline>
<codeline lineno="5813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*xMax,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*yMax)<sp/>{</highlight></codeline>
<codeline lineno="5814"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>text-&gt;findText(s,<sp/>len,<sp/>startAtTop,<sp/>stopAtBottom,</highlight></codeline>
<codeline lineno="5815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>startAtLast,<sp/>stopAtLast,</highlight></codeline>
<codeline lineno="5816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>caseSensitive,<sp/>backward,<sp/>wholeWord,</highlight></codeline>
<codeline lineno="5817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xMin,<sp/>yMin,<sp/>xMax,<sp/>yMax);</highlight></codeline>
<codeline lineno="5818"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5819"><highlight class="normal"></highlight></codeline>
<codeline lineno="5820"><highlight class="normal"><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*TextOutputDev::getText(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>xMin,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>yMin,</highlight></codeline>
<codeline lineno="5821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>xMax,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>yMax)<sp/>{</highlight></codeline>
<codeline lineno="5822"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>text-&gt;getText(xMin,<sp/>yMin,<sp/>xMax,<sp/>yMax);</highlight></codeline>
<codeline lineno="5823"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5824"><highlight class="normal"></highlight></codeline>
<codeline lineno="5825"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TextOutputDev::drawSelection(<ref refid="class_output_dev" kindref="compound">OutputDev</ref><sp/>*out,</highlight></codeline>
<codeline lineno="5826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>scale,</highlight></codeline>
<codeline lineno="5827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rotation,</highlight></codeline>
<codeline lineno="5828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_p_d_f_rectangle" kindref="compound">PDFRectangle</ref><sp/>*selection,</highlight></codeline>
<codeline lineno="5829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SelectionStyle<sp/>style,</highlight></codeline>
<codeline lineno="5830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>*glyph_color,<sp/><ref refid="struct_gfx_color" kindref="compound">GfxColor</ref><sp/>*box_color)<sp/>{</highlight></codeline>
<codeline lineno="5831"><highlight class="normal"><sp/><sp/>text-&gt;drawSelection(out,<sp/>scale,<sp/>rotation,<sp/>selection,<sp/>style,<sp/>glyph_color,<sp/>box_color);</highlight></codeline>
<codeline lineno="5832"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5833"><highlight class="normal"></highlight></codeline>
<codeline lineno="5834"><highlight class="normal"><ref refid="class_goo_list" kindref="compound">GooList</ref><sp/>*TextOutputDev::getSelectionRegion(<ref refid="class_p_d_f_rectangle" kindref="compound">PDFRectangle</ref><sp/>*selection,</highlight></codeline>
<codeline lineno="5835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SelectionStyle<sp/>style,</highlight></codeline>
<codeline lineno="5836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>scale)<sp/>{</highlight></codeline>
<codeline lineno="5837"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>text-&gt;getSelectionRegion(selection,<sp/>style,<sp/>scale);</highlight></codeline>
<codeline lineno="5838"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5839"><highlight class="normal"></highlight></codeline>
<codeline lineno="5840"><highlight class="normal"><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*TextOutputDev::getSelectionText(<ref refid="class_p_d_f_rectangle" kindref="compound">PDFRectangle</ref><sp/>*selection,</highlight></codeline>
<codeline lineno="5841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SelectionStyle<sp/>style)</highlight></codeline>
<codeline lineno="5842"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5843"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>text-&gt;getSelectionText(selection,<sp/>style);</highlight></codeline>
<codeline lineno="5844"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5845"><highlight class="normal"></highlight></codeline>
<codeline lineno="5846"><highlight class="normal">GBool<sp/>TextOutputDev::findCharRange(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pos,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>length,</highlight></codeline>
<codeline lineno="5847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*xMin,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*yMin,</highlight></codeline>
<codeline lineno="5848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*xMax,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*yMax)<sp/>{</highlight></codeline>
<codeline lineno="5849"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>text-&gt;findCharRange(pos,<sp/>length,<sp/>xMin,<sp/>yMin,<sp/>xMax,<sp/>yMax);</highlight></codeline>
<codeline lineno="5850"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5851"><highlight class="normal"></highlight></codeline>
<codeline lineno="5852"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TextOutputDev::setMergeCombining(GBool<sp/>merge)<sp/>{</highlight></codeline>
<codeline lineno="5853"><highlight class="normal"><sp/><sp/>text-&gt;setMergeCombining(merge);</highlight></codeline>
<codeline lineno="5854"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5855"><highlight class="normal"></highlight></codeline>
<codeline lineno="5856"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>TEXTOUT_WORD_LIST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5857"><highlight class="normal"><ref refid="class_text_word_list" kindref="compound">TextWordList</ref><sp/>*TextOutputDev::makeWordList()<sp/>{</highlight></codeline>
<codeline lineno="5858"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>text-&gt;makeWordList(physLayout);</highlight></codeline>
<codeline lineno="5859"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5860"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5861"><highlight class="normal"></highlight></codeline>
<codeline lineno="5862"><highlight class="normal"><ref refid="class_text_page" kindref="compound">TextPage</ref><sp/>*TextOutputDev::takeText()<sp/>{</highlight></codeline>
<codeline lineno="5863"><highlight class="normal"><sp/><sp/><ref refid="class_text_page" kindref="compound">TextPage</ref><sp/>*ret;</highlight></codeline>
<codeline lineno="5864"><highlight class="normal"></highlight></codeline>
<codeline lineno="5865"><highlight class="normal"><sp/><sp/>ret<sp/>=<sp/>text;</highlight></codeline>
<codeline lineno="5866"><highlight class="normal"><sp/><sp/>text<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_text_page" kindref="compound">TextPage</ref>(rawOrder);</highlight></codeline>
<codeline lineno="5867"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="5868"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="thirdparty/poppler/poppler/TextOutputDev.cc"/>
  </compounddef>
</doxygen>
