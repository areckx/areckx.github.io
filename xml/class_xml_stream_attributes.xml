<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="class_xml_stream_attributes" kind="class" language="C++" prot="public">
    <compoundname>XmlStreamAttributes</compoundname>
    <basecompoundref prot="public" virt="non-virtual">QVector&lt; XmlStreamAttribute &gt;</basecompoundref>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_xml_stream_attributes_1ac39118a46119329954cf1e402111836c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>XmlStreamAttributes::XmlStreamAttributes</definition>
        <argsstring>()</argsstring>
        <name>XmlStreamAttributes</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/xmlstream/xmlstream.h" line="107" column="1" bodyfile="thirdparty/xmlstream/xmlstream.h" bodystart="107" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="class_xml_stream_attributes_1ac13c28528742b32ef4c4684f8c39941b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QStringRef</type>
        <definition>QStringRef XmlStreamAttributes::value</definition>
        <argsstring>(const QString &amp;namespaceUri, const QString &amp;name) const</argsstring>
        <name>value</name>
        <param>
          <type>const QString &amp;</type>
          <declname>namespaceUri</declname>
        </param>
        <param>
          <type>const QString &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the value of the attribute <emphasis>name</emphasis> in the namespace described with <emphasis>namespaceUri</emphasis>, or an empty string reference if the attribute is not defined. The <emphasis>namespaceUri</emphasis> can be empty. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/xmlstream/xmlstream.h" line="108" column="1" bodyfile="thirdparty/xmlstream/xmlstream.cpp" bodystart="2667" bodyend="2675"/>
      </memberdef>
      <memberdef kind="function" id="class_xml_stream_attributes_1a6b298362365a1199b9287dbbcbcf39c0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QStringRef</type>
        <definition>QStringRef XmlStreamAttributes::value</definition>
        <argsstring>(const QString &amp;namespaceUri, QLatin1String name) const</argsstring>
        <name>value</name>
        <param>
          <type>const QString &amp;</type>
          <declname>namespaceUri</declname>
        </param>
        <param>
          <type>QLatin1String</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. Returns the value of the attribute <emphasis>name</emphasis> in the namespace described with <emphasis>namespaceUri</emphasis>, or an empty string reference if the attribute is not defined. The <emphasis>namespaceUri</emphasis> can be empty. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/xmlstream/xmlstream.h" line="109" column="1" bodyfile="thirdparty/xmlstream/xmlstream.cpp" bodystart="2682" bodyend="2690"/>
      </memberdef>
      <memberdef kind="function" id="class_xml_stream_attributes_1ac782842988173fa01be24dd38c7c4605" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QStringRef</type>
        <definition>QStringRef XmlStreamAttributes::value</definition>
        <argsstring>(QLatin1String namespaceUri, QLatin1String name) const</argsstring>
        <name>value</name>
        <param>
          <type>QLatin1String</type>
          <declname>namespaceUri</declname>
        </param>
        <param>
          <type>QLatin1String</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. Returns the value of the attribute <emphasis>name</emphasis> in the namespace described with <emphasis>namespaceUri</emphasis>, or an empty string reference if the attribute is not defined. The <emphasis>namespaceUri</emphasis> can be empty. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/xmlstream/xmlstream.h" line="110" column="1" bodyfile="thirdparty/xmlstream/xmlstream.cpp" bodystart="2697" bodyend="2705"/>
      </memberdef>
      <memberdef kind="function" id="class_xml_stream_attributes_1adeb02e3a2e49bbf7a32066fe6780016b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QStringRef</type>
        <definition>QStringRef XmlStreamAttributes::value</definition>
        <argsstring>(const QString &amp;qualifiedName) const</argsstring>
        <name>value</name>
        <param>
          <type>const QString &amp;</type>
          <declname>qualifiedName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para><para>Returns the value of the attribute with qualified name <emphasis>qualifiedName</emphasis> , or an empty string reference if the attribute is not defined. A qualified name is the raw name of an attribute in the XML data. It consists of the namespace prefix, followed by colon, followed by the attribute&apos;s local name. Since the namespace prefix is not unique (the same prefix can point to different namespaces and different prefixes can point to the same namespace), you shouldn&apos;t use qualified names, but a resolved namespaceUri and the attribute&apos;s local name. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/xmlstream/xmlstream.h" line="111" column="1" bodyfile="thirdparty/xmlstream/xmlstream.cpp" bodystart="2719" bodyend="2727"/>
      </memberdef>
      <memberdef kind="function" id="class_xml_stream_attributes_1ac783484006b66fe5c4af1c0f6aba1976" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QStringRef</type>
        <definition>QStringRef XmlStreamAttributes::value</definition>
        <argsstring>(QLatin1String qualifiedName) const</argsstring>
        <name>value</name>
        <param>
          <type>QLatin1String</type>
          <declname>qualifiedName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para><para>Returns the value of the attribute with qualified name <emphasis>qualifiedName</emphasis> , or an empty string reference if the attribute is not defined. A qualified name is the raw name of an attribute in the XML data. It consists of the namespace prefix, followed by colon, followed by the attribute&apos;s local name. Since the namespace prefix is not unique (the same prefix can point to different namespaces and different prefixes can point to the same namespace), you shouldn&apos;t use qualified names, but a resolved namespaceUri and the attribute&apos;s local name. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/xmlstream/xmlstream.h" line="112" column="1" bodyfile="thirdparty/xmlstream/xmlstream.cpp" bodystart="2741" bodyend="2749"/>
      </memberdef>
      <memberdef kind="function" id="class_xml_stream_attributes_1a51a667e3daddcea19ec85d51f0da6d6b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XmlStreamAttributes::append</definition>
        <argsstring>(const QString &amp;namespaceUri, const QString &amp;name, const QString &amp;value)</argsstring>
        <name>append</name>
        <param>
          <type>const QString &amp;</type>
          <declname>namespaceUri</declname>
        </param>
        <param>
          <type>const QString &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const QString &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Appends a new attribute with <emphasis>name</emphasis> in the namespace described with <emphasis>namespaceUri</emphasis>, and value <emphasis>value</emphasis>. The <emphasis>namespaceUri</emphasis> can be empty. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/xmlstream/xmlstream.h" line="113" column="1" bodyfile="thirdparty/xmlstream/xmlstream.cpp" bodystart="2755" bodyend="2758"/>
      </memberdef>
      <memberdef kind="function" id="class_xml_stream_attributes_1a062ae122b7c39f5993cfcf0cd30a4942" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XmlStreamAttributes::append</definition>
        <argsstring>(const QString &amp;qualifiedName, const QString &amp;value)</argsstring>
        <name>append</name>
        <param>
          <type>const QString &amp;</type>
          <declname>qualifiedName</declname>
        </param>
        <param>
          <type>const QString &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. Appends a new attribute with qualified name <emphasis>qualifiedName</emphasis> and value <emphasis>value</emphasis>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/xmlstream/xmlstream.h" line="114" column="1" bodyfile="thirdparty/xmlstream/xmlstream.cpp" bodystart="2764" bodyend="2767"/>
      </memberdef>
      <memberdef kind="function" id="class_xml_stream_attributes_1a19c0aee6f2a399a8b830441260d46b84" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool XmlStreamAttributes::hasAttribute</definition>
        <argsstring>(const QString &amp;qualifiedName) const</argsstring>
        <name>hasAttribute</name>
        <param>
          <type>const QString &amp;</type>
          <declname>qualifiedName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>4.5</para></simplesect>
Returns <computeroutput>true</computeroutput> if this <ref refid="class_xml_stream_attributes" kindref="compound">XmlStreamAttributes</ref> has an attribute whose qualified name is <emphasis>qualifiedName</emphasis>; otherwise returns <computeroutput>false</computeroutput>.</para><para>Note that this is not namespace aware. For instance, if this <ref refid="class_xml_stream_attributes" kindref="compound">XmlStreamAttributes</ref> contains an attribute whose lexical name is &quot;xlink:href&quot; this doesn&apos;t tell that an attribute named <computeroutput>href</computeroutput> in the XLink namespace is present, since the <computeroutput>xlink</computeroutput> prefix can be bound to any namespace. Use the overload that takes a namespace URI and a local name as parameter, for namespace aware code. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/xmlstream/xmlstream.h" line="116" column="1" bodyfile="thirdparty/xmlstream/xmlstream.h" bodystart="116" bodyend="119"/>
      </memberdef>
      <memberdef kind="function" id="class_xml_stream_attributes_1a78238cc4e8a5e44594cb78d048e18500" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool XmlStreamAttributes::hasAttribute</definition>
        <argsstring>(QLatin1String qualifiedName) const</argsstring>
        <name>hasAttribute</name>
        <param>
          <type>QLatin1String</type>
          <declname>qualifiedName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. <simplesect kind="since"><para>4.5 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/xmlstream/xmlstream.h" line="121" column="1" bodyfile="thirdparty/xmlstream/xmlstream.h" bodystart="121" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="class_xml_stream_attributes_1a86109339929f05fa1b8755f482fd19d9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool XmlStreamAttributes::hasAttribute</definition>
        <argsstring>(const QString &amp;namespaceUri, const QString &amp;name) const</argsstring>
        <name>hasAttribute</name>
        <param>
          <type>const QString &amp;</type>
          <declname>namespaceUri</declname>
        </param>
        <param>
          <type>const QString &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. <simplesect kind="since"><para>4.5</para></simplesect>
Returns <computeroutput>true</computeroutput> if this <ref refid="class_xml_stream_attributes" kindref="compound">XmlStreamAttributes</ref> has an attribute whose namespace URI and name correspond to <emphasis>namespaceUri</emphasis> and <emphasis>name</emphasis>; otherwise returns <computeroutput>false</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="thirdparty/xmlstream/xmlstream.h" line="126" column="1" bodyfile="thirdparty/xmlstream/xmlstream.h" bodystart="126" bodyend="129"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The <ref refid="class_xml_stream_attributes" kindref="compound">XmlStreamAttributes</ref> class represents a vector of <ref refid="class_xml_stream_attribute" kindref="compound">XmlStreamAttribute</ref>. </para>    </briefdescription>
    <detaileddescription>
<para>QtCore <simplesect kind="since"><para>4.3  Attributes are returned by a <ref refid="class_xml_stream_reader" kindref="compound">XmlStreamReader</ref> in {<ref refid="class_xml_stream_reader_1aaa89a6baad93837857847a3ec5d7710a" kindref="member">XmlStreamReader::attributes()</ref>} {attributes()} when the reader reports a  {XmlStreamReader::StartElement}{start element}. The class can also be used with a <ref refid="class_xml_stream_writer" kindref="compound">XmlStreamWriter</ref> as an argument to  {<ref refid="class_xml_stream_writer_1a401845495b28fcc27a7f491ac402ea47" kindref="member">XmlStreamWriter::writeAttributes()</ref>}{writeAttributes()}.</para></simplesect>
The convenience function <ref refid="class_xml_stream_attributes_1ac13c28528742b32ef4c4684f8c39941b" kindref="member">value()</ref> loops over the vector and returns an attribute value for a given namespaceUri and an attribute&apos;s name.</para><para>New attributes can be added with <ref refid="class_xml_stream_attributes_1a51a667e3daddcea19ec85d51f0da6d6b" kindref="member">append()</ref>. </para>    </detaileddescription>
    <inheritancegraph>
      <node id="21006">
        <label>XmlStreamAttributes</label>
        <link refid="class_xml_stream_attributes"/>
        <childnode refid="21007" relation="public-inheritance">
        </childnode>
      </node>
      <node id="21007">
        <label>QVector&lt; XmlStreamAttribute &gt;</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="21008">
        <label>XmlStreamAttributes</label>
        <link refid="class_xml_stream_attributes"/>
        <childnode refid="21009" relation="public-inheritance">
        </childnode>
      </node>
      <node id="21009">
        <label>QVector&lt; XmlStreamAttribute &gt;</label>
      </node>
    </collaborationgraph>
    <location file="thirdparty/xmlstream/xmlstream.h" line="105" column="1" bodyfile="thirdparty/xmlstream/xmlstream.h" bodystart="104" bodyend="137"/>
    <listofallmembers>
      <member refid="class_xml_stream_attributes_1a51a667e3daddcea19ec85d51f0da6d6b" prot="public" virt="non-virtual"><scope>XmlStreamAttributes</scope><name>append</name></member>
      <member refid="class_xml_stream_attributes_1a062ae122b7c39f5993cfcf0cd30a4942" prot="public" virt="non-virtual"><scope>XmlStreamAttributes</scope><name>append</name></member>
      <member refid="class_xml_stream_attributes_1a19c0aee6f2a399a8b830441260d46b84" prot="public" virt="non-virtual"><scope>XmlStreamAttributes</scope><name>hasAttribute</name></member>
      <member refid="class_xml_stream_attributes_1a78238cc4e8a5e44594cb78d048e18500" prot="public" virt="non-virtual"><scope>XmlStreamAttributes</scope><name>hasAttribute</name></member>
      <member refid="class_xml_stream_attributes_1a86109339929f05fa1b8755f482fd19d9" prot="public" virt="non-virtual"><scope>XmlStreamAttributes</scope><name>hasAttribute</name></member>
      <member refid="class_xml_stream_attributes_1ac13c28528742b32ef4c4684f8c39941b" prot="public" virt="non-virtual"><scope>XmlStreamAttributes</scope><name>value</name></member>
      <member refid="class_xml_stream_attributes_1a6b298362365a1199b9287dbbcbcf39c0" prot="public" virt="non-virtual"><scope>XmlStreamAttributes</scope><name>value</name></member>
      <member refid="class_xml_stream_attributes_1ac782842988173fa01be24dd38c7c4605" prot="public" virt="non-virtual"><scope>XmlStreamAttributes</scope><name>value</name></member>
      <member refid="class_xml_stream_attributes_1adeb02e3a2e49bbf7a32066fe6780016b" prot="public" virt="non-virtual"><scope>XmlStreamAttributes</scope><name>value</name></member>
      <member refid="class_xml_stream_attributes_1ac783484006b66fe5c4af1c0f6aba1976" prot="public" virt="non-virtual"><scope>XmlStreamAttributes</scope><name>value</name></member>
      <member refid="class_xml_stream_attributes_1ac39118a46119329954cf1e402111836c" prot="public" virt="non-virtual"><scope>XmlStreamAttributes</scope><name>XmlStreamAttributes</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
