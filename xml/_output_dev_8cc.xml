<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="_output_dev_8cc" kind="file" language="C++">
    <compoundname>OutputDev.cc</compoundname>
    <includes local="no">config.h</includes>
    <includes local="no">stddef.h</includes>
    <includes refid="_object_8h" local="yes">Object.h</includes>
    <includes refid="_stream_8h" local="yes">Stream.h</includes>
    <includes refid="_gfx_state_8h" local="yes">GfxState.h</includes>
    <includes refid="_output_dev_8h" local="yes">OutputDev.h</includes>
    <includes refid="_goo_hash_8h" local="yes">goo/GooHash.h</includes>
    <incdepgraph>
      <node id="88534">
        <label>stdarg.h</label>
      </node>
      <node id="88544">
        <label>Function.h</label>
        <link refid="_function_8h_source"/>
        <childnode refid="88529" relation="include">
        </childnode>
        <childnode refid="88525" relation="include">
        </childnode>
        <childnode refid="88526" relation="include">
        </childnode>
      </node>
      <node id="88545">
        <label>assert.h</label>
      </node>
      <node id="88543">
        <label>GfxState.h</label>
        <link refid="_gfx_state_8h_source"/>
        <childnode refid="88530" relation="include">
        </childnode>
        <childnode refid="88529" relation="include">
        </childnode>
        <childnode refid="88525" relation="include">
        </childnode>
        <childnode refid="88544" relation="include">
        </childnode>
        <childnode refid="88545" relation="include">
        </childnode>
        <childnode refid="88546" relation="include">
        </childnode>
      </node>
      <node id="88535">
        <label>stdlib.h</label>
      </node>
      <node id="88531">
        <label>goo/gmem.h</label>
        <link refid="gmem_8h_source"/>
        <childnode refid="88527" relation="include">
        </childnode>
        <childnode refid="88530" relation="include">
        </childnode>
      </node>
      <node id="88538">
        <label>Array.h</label>
        <link refid="_array_8h_source"/>
        <childnode refid="88530" relation="include">
        </childnode>
        <childnode refid="88525" relation="include">
        </childnode>
        <childnode refid="88539" relation="include">
        </childnode>
      </node>
      <node id="88546">
        <label>map</label>
      </node>
      <node id="88537">
        <label>Error.h</label>
        <link refid="_error_8h_source"/>
        <childnode refid="88534" relation="include">
        </childnode>
        <childnode refid="88530" relation="include">
        </childnode>
        <childnode refid="88529" relation="include">
        </childnode>
        <childnode refid="88532" relation="include">
        </childnode>
      </node>
      <node id="88541">
        <label>Dict.h</label>
        <link refid="_dict_8h_source"/>
        <childnode refid="88530" relation="include">
        </childnode>
        <childnode refid="88525" relation="include">
        </childnode>
        <childnode refid="88539" relation="include">
        </childnode>
      </node>
      <node id="88524">
        <label>stddef.h</label>
      </node>
      <node id="88533">
        <label>limits.h</label>
      </node>
      <node id="88530">
        <label>poppler-config.h</label>
        <link refid="poppler-config_8h_source"/>
        <childnode refid="88527" relation="include">
        </childnode>
      </node>
      <node id="88536">
        <label>goo/GooLikely.h</label>
        <link refid="_goo_likely_8h_source"/>
      </node>
      <node id="88542">
        <label>Stream.h</label>
        <link refid="_stream_8h_source"/>
        <childnode refid="88530" relation="include">
        </childnode>
        <childnode refid="88527" relation="include">
        </childnode>
        <childnode refid="88529" relation="include">
        </childnode>
        <childnode refid="88525" relation="include">
        </childnode>
        <childnode refid="88539" relation="include">
        </childnode>
      </node>
      <node id="88540">
        <label>pthread.h</label>
      </node>
      <node id="88549">
        <label>PopplerCache.h</label>
        <link refid="_poppler_cache_8h_source"/>
        <childnode refid="88525" relation="include">
        </childnode>
      </node>
      <node id="88528">
        <label>string.h</label>
      </node>
      <node id="88532">
        <label>goo/GooString.h</label>
        <link refid="_goo_string_8h_source"/>
        <childnode refid="88533" relation="include">
        </childnode>
        <childnode refid="88534" relation="include">
        </childnode>
        <childnode refid="88535" relation="include">
        </childnode>
        <childnode refid="88529" relation="include">
        </childnode>
      </node>
      <node id="88525">
        <label>Object.h</label>
        <link refid="_object_8h_source"/>
        <childnode refid="88526" relation="include">
        </childnode>
        <childnode refid="88527" relation="include">
        </childnode>
        <childnode refid="88528" relation="include">
        </childnode>
        <childnode refid="88529" relation="include">
        </childnode>
        <childnode refid="88531" relation="include">
        </childnode>
        <childnode refid="88532" relation="include">
        </childnode>
        <childnode refid="88536" relation="include">
        </childnode>
        <childnode refid="88537" relation="include">
        </childnode>
        <childnode refid="88538" relation="include">
        </childnode>
        <childnode refid="88541" relation="include">
        </childnode>
        <childnode refid="88542" relation="include">
        </childnode>
      </node>
      <node id="88547">
        <label>OutputDev.h</label>
        <link refid="_output_dev_8h_source"/>
        <childnode refid="88530" relation="include">
        </childnode>
        <childnode refid="88529" relation="include">
        </childnode>
        <childnode refid="88548" relation="include">
        </childnode>
        <childnode refid="88525" relation="include">
        </childnode>
        <childnode refid="88549" relation="include">
        </childnode>
      </node>
      <node id="88539">
        <label>goo/GooMutex.h</label>
        <link refid="_goo_mutex_8h_source"/>
        <childnode refid="88540" relation="include">
        </childnode>
      </node>
      <node id="88548">
        <label>CharTypes.h</label>
        <link refid="_char_types_8h_source"/>
      </node>
      <node id="88522">
        <label>thirdparty/poppler/poppler/OutputDev.cc</label>
        <link refid="_output_dev_8cc"/>
        <childnode refid="88523" relation="include">
        </childnode>
        <childnode refid="88524" relation="include">
        </childnode>
        <childnode refid="88525" relation="include">
        </childnode>
        <childnode refid="88542" relation="include">
        </childnode>
        <childnode refid="88543" relation="include">
        </childnode>
        <childnode refid="88547" relation="include">
        </childnode>
        <childnode refid="88550" relation="include">
        </childnode>
      </node>
      <node id="88529">
        <label>goo/gtypes.h</label>
        <link refid="gtypes_8h_source"/>
        <childnode refid="88530" relation="include">
        </childnode>
      </node>
      <node id="88526">
        <label>set</label>
      </node>
      <node id="88523">
        <label>config.h</label>
      </node>
      <node id="88527">
        <label>stdio.h</label>
      </node>
      <node id="88550">
        <label>goo/GooHash.h</label>
        <link refid="_goo_hash_8h_source"/>
        <childnode refid="88529" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//========================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>OutputDev.cc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>1996-2003<sp/>Glyph<sp/>&amp;<sp/>Cog,<sp/>LLC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//========================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//========================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Modified<sp/>under<sp/>the<sp/>Poppler<sp/>project<sp/>-<sp/>http://poppler.freedesktop.org</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>All<sp/>changes<sp/>made<sp/>under<sp/>the<sp/>Poppler<sp/>project<sp/>to<sp/>this<sp/>file<sp/>are<sp/>licensed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>under<sp/>GPL<sp/>version<sp/>2<sp/>or<sp/>later</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2005<sp/>Jonathan<sp/>Blandford<sp/>&lt;jrb@redhat.com&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2006<sp/>Thorkild<sp/>Stray<sp/>&lt;thorkild@ifi.uio.no&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2007<sp/>Adrian<sp/>Johnson<sp/>&lt;ajohnson@redneon.com&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2009<sp/>Carlos<sp/>Garcia<sp/>Campos<sp/>&lt;carlosgc@gnome.org&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2009,<sp/>2012,<sp/>2013<sp/>Albert<sp/>Astals<sp/>Cid<sp/>&lt;aacid@kde.org&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2012<sp/>Thomas<sp/>Freitag<sp/>&lt;Thomas.Freitag@alfa.de&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//<sp/>To<sp/>see<sp/>a<sp/>description<sp/>of<sp/>the<sp/>changes<sp/>please<sp/>see<sp/>the<sp/>Changelog<sp/>file<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//<sp/>came<sp/>with<sp/>your<sp/>tarball<sp/>or<sp/>type<sp/>make<sp/>ChangeLog<sp/>if<sp/>you<sp/>are<sp/>building<sp/>from<sp/>git</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">//========================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;config.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>USE_GCC_PRAGMAS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>implementation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stddef.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Object.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Stream.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;GfxState.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;OutputDev.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;goo/GooHash.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="comment">//<sp/>OutputDev</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>OutputDev::setDefaultCTM(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*ctm)<sp/>{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>det;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>6;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>defCTM[i]<sp/>=<sp/>ctm[i];</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/>det<sp/>=<sp/>1<sp/>/<sp/>(defCTM[0]<sp/>*<sp/>defCTM[3]<sp/>-<sp/>defCTM[1]<sp/>*<sp/>defCTM[2]);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/>defICTM[0]<sp/>=<sp/>defCTM[3]<sp/>*<sp/>det;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/>defICTM[1]<sp/>=<sp/>-defCTM[1]<sp/>*<sp/>det;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/>defICTM[2]<sp/>=<sp/>-defCTM[2]<sp/>*<sp/>det;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/>defICTM[3]<sp/>=<sp/>defCTM[0]<sp/>*<sp/>det;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/>defICTM[4]<sp/>=<sp/>(defCTM[2]<sp/>*<sp/>defCTM[5]<sp/>-<sp/>defCTM[3]<sp/>*<sp/>defCTM[4])<sp/>*<sp/>det;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/>defICTM[5]<sp/>=<sp/>(defCTM[1]<sp/>*<sp/>defCTM[4]<sp/>-<sp/>defCTM[0]<sp/>*<sp/>defCTM[5])<sp/>*<sp/>det;</highlight></codeline>
<codeline lineno="59"><highlight class="normal">}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>OutputDev::cvtDevToUser(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dx,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dy,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*ux,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*uy)<sp/>{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/>*ux<sp/>=<sp/>defICTM[0]<sp/>*<sp/>dx<sp/>+<sp/>defICTM[2]<sp/>*<sp/>dy<sp/>+<sp/>defICTM[4];</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/>*uy<sp/>=<sp/>defICTM[1]<sp/>*<sp/>dx<sp/>+<sp/>defICTM[3]<sp/>*<sp/>dy<sp/>+<sp/>defICTM[5];</highlight></codeline>
<codeline lineno="64"><highlight class="normal">}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>OutputDev::cvtUserToDev(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ux,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>uy,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*dx,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*dy)<sp/>{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/>*dx<sp/>=<sp/>(int)(defCTM[0]<sp/>*<sp/>ux<sp/>+<sp/>defCTM[2]<sp/>*<sp/>uy<sp/>+<sp/>defCTM[4]<sp/>+<sp/>0.5);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/>*dy<sp/>=<sp/>(int)(defCTM[1]<sp/>*<sp/>ux<sp/>+<sp/>defCTM[3]<sp/>*<sp/>uy<sp/>+<sp/>defCTM[5]<sp/>+<sp/>0.5);</highlight></codeline>
<codeline lineno="69"><highlight class="normal">}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>OutputDev::updateAll(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state)<sp/>{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/>updateLineDash(state);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/>updateFlatness(state);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/>updateLineJoin(state);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/>updateLineCap(state);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/>updateMiterLimit(state);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/>updateLineWidth(state);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/>updateStrokeAdjust(state);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/>updateFillColorSpace(state);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/>updateFillColor(state);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/>updateStrokeColorSpace(state);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/>updateStrokeColor(state);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/>updateBlendMode(state);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/>updateFillOpacity(state);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/>updateStrokeOpacity(state);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/>updateFillOverprint(state);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/>updateStrokeOverprint(state);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/>updateTransfer(state);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/>updateFont(state);</highlight></codeline>
<codeline lineno="90"><highlight class="normal">}</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal">GBool<sp/>OutputDev::beginType3Char(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y,</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dx,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dy,</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CharCode<sp/>code,<sp/>Unicode<sp/>*u,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>uLen)<sp/>{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gFalse;</highlight></codeline>
<codeline lineno="96"><highlight class="normal">}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>OutputDev::drawImageMask(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state,<sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>*ref,<sp/><ref refid="class_stream" kindref="compound">Stream</ref><sp/>*str,</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>width,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>height,<sp/>GBool<sp/>invert,</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GBool<sp/>interpolate,<sp/>GBool<sp/>inlineImg)<sp/>{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(inlineImg)<sp/>{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>str-&gt;reset();</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>j<sp/>=<sp/>height<sp/>*<sp/>((width<sp/>+<sp/>7)<sp/>/<sp/>8);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>j;<sp/>++i)</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>str-&gt;getChar();</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>str-&gt;close();</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="110"><highlight class="normal">}</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>OutputDev::setSoftMaskFromImageMask(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state,</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>*ref,<sp/><ref refid="class_stream" kindref="compound">Stream</ref><sp/>*str,</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>width,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>height,<sp/>GBool<sp/>invert,</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GBool<sp/>inlineImg,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*baseMatrix)<sp/>{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/>drawImageMask(state,<sp/>ref,<sp/>str,<sp/>width,<sp/>height,<sp/>invert,<sp/>gFalse,<sp/>inlineImg);</highlight></codeline>
<codeline lineno="117"><highlight class="normal">}</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>OutputDev::unsetSoftMaskFromImageMask(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*baseMatrix)<sp/>{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="121"><highlight class="normal">}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>OutputDev::drawImage(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state,<sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>*ref,<sp/><ref refid="class_stream" kindref="compound">Stream</ref><sp/>*str,</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>width,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>height,<sp/><ref refid="class_gfx_image_color_map" kindref="compound">GfxImageColorMap</ref><sp/>*colorMap,</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GBool<sp/>interpolate,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*maskColors,<sp/>GBool<sp/>inlineImg)<sp/>{</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(inlineImg)<sp/>{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>str-&gt;reset();</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>j<sp/>=<sp/>height<sp/>*<sp/>((width<sp/>*<sp/>colorMap-&gt;getNumPixelComps()<sp/>*</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>colorMap-&gt;getBits()<sp/>+<sp/>7)<sp/>/<sp/>8);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>j;<sp/>++i)</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>str-&gt;getChar();</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>str-&gt;close();</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="136"><highlight class="normal">}</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>OutputDev::drawMaskedImage(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state,<sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>*ref,<sp/><ref refid="class_stream" kindref="compound">Stream</ref><sp/>*str,</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>width,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>height,</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_gfx_image_color_map" kindref="compound">GfxImageColorMap</ref><sp/>*colorMap,</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GBool<sp/>interpolate,</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_stream" kindref="compound">Stream</ref><sp/>*maskStr,</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maskWidth,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maskHeight,</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GBool<sp/>maskInvert,</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GBool<sp/>maskInterpolate)<sp/>{</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/>drawImage(state,<sp/>ref,<sp/>str,<sp/>width,<sp/>height,<sp/>colorMap,<sp/>interpolate,<sp/>NULL,<sp/>gFalse);</highlight></codeline>
<codeline lineno="147"><highlight class="normal">}</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>OutputDev::drawSoftMaskedImage(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state,<sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>*ref,<sp/><ref refid="class_stream" kindref="compound">Stream</ref><sp/>*str,</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>width,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>height,</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_gfx_image_color_map" kindref="compound">GfxImageColorMap</ref><sp/>*colorMap,</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GBool<sp/>interpolate,</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_stream" kindref="compound">Stream</ref><sp/>*maskStr,</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maskWidth,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maskHeight,</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_gfx_image_color_map" kindref="compound">GfxImageColorMap</ref><sp/>*maskColorMap,</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GBool<sp/>maskInterpolate)<sp/>{</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/>drawImage(state,<sp/>ref,<sp/>str,<sp/>width,<sp/>height,<sp/>colorMap,<sp/>interpolate,<sp/>NULL,<sp/>gFalse);</highlight></codeline>
<codeline lineno="158"><highlight class="normal">}</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>OutputDev::endMarkedContent(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state)<sp/>{</highlight></codeline>
<codeline lineno="161"><highlight class="normal">}</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>OutputDev::beginMarkedContent(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/><ref refid="class_dict" kindref="compound">Dict</ref><sp/>*properties)<sp/>{</highlight></codeline>
<codeline lineno="164"><highlight class="normal">}</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>OutputDev::markPoint(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name)<sp/>{</highlight></codeline>
<codeline lineno="167"><highlight class="normal">}</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>OutputDev::markPoint(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/><ref refid="class_dict" kindref="compound">Dict</ref><sp/>*properties)<sp/>{</highlight></codeline>
<codeline lineno="170"><highlight class="normal">}</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>OPI_SUPPORT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>OutputDev::opiBegin(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state,<sp/><ref refid="class_dict" kindref="compound">Dict</ref><sp/>*opiDict)<sp/>{</highlight></codeline>
<codeline lineno="175"><highlight class="normal">}</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>OutputDev::opiEnd(<ref refid="class_gfx_state" kindref="compound">GfxState</ref><sp/>*state,<sp/><ref refid="class_dict" kindref="compound">Dict</ref><sp/>*opiDict)<sp/>{</highlight></codeline>
<codeline lineno="178"><highlight class="normal">}</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>OutputDev::startProfile()<sp/>{</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(profileHash)</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>profileHash;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/>profileHash<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_goo_hash" kindref="compound">GooHash</ref><sp/>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="186"><highlight class="normal">}</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><ref refid="class_goo_hash" kindref="compound">GooHash</ref><sp/>*OutputDev::endProfile()<sp/>{</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><ref refid="class_goo_hash" kindref="compound">GooHash</ref><sp/>*profile<sp/>=<sp/>profileHash;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/>profileHash<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>profile;</highlight></codeline>
<codeline lineno="194"><highlight class="normal">}</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>USE_CMS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><ref refid="class_poppler_cache" kindref="compound">PopplerCache</ref><sp/>*OutputDev::getIccColorSpaceCache()</highlight></codeline>
<codeline lineno="198"><highlight class="normal">{</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;iccColorSpaceCache;</highlight></codeline>
<codeline lineno="200"><highlight class="normal">}</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="thirdparty/poppler/poppler/OutputDev.cc"/>
  </compounddef>
</doxygen>
