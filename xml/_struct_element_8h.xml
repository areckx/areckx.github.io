<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="_struct_element_8h" kind="file" language="C++">
    <compoundname>StructElement.h</compoundname>
    <includes refid="gtypes_8h" local="yes">goo/gtypes.h</includes>
    <includes refid="_goo_string_8h" local="yes">goo/GooString.h</includes>
    <includes refid="_marked_content_output_dev_8h" local="yes">MarkedContentOutputDev.h</includes>
    <includes refid="_object_8h" local="yes">Object.h</includes>
    <includes local="no">vector</includes>
    <includes local="no">set</includes>
    <includedby refid="_struct_tree_root_8h" local="yes">thirdparty/poppler/poppler/StructTreeRoot.h</includedby>
    <includedby refid="_struct_element_8cc" local="yes">thirdparty/poppler/poppler/StructElement.cc</includedby>
    <includedby refid="_struct_tree_root_8cc" local="yes">thirdparty/poppler/poppler/StructTreeRoot.cc</includedby>
    <incdepgraph>
      <node id="90255">
        <label>stdarg.h</label>
      </node>
      <node id="90273">
        <label>Function.h</label>
        <link refid="_function_8h_source"/>
        <childnode refid="90250" relation="include">
        </childnode>
        <childnode refid="90261" relation="include">
        </childnode>
        <childnode refid="90262" relation="include">
        </childnode>
      </node>
      <node id="90274">
        <label>assert.h</label>
      </node>
      <node id="90272">
        <label>GfxState.h</label>
        <link refid="_gfx_state_8h_source"/>
        <childnode refid="90251" relation="include">
        </childnode>
        <childnode refid="90250" relation="include">
        </childnode>
        <childnode refid="90261" relation="include">
        </childnode>
        <childnode refid="90273" relation="include">
        </childnode>
        <childnode refid="90274" relation="include">
        </childnode>
        <childnode refid="90275" relation="include">
        </childnode>
      </node>
      <node id="90276">
        <label>GfxFont.h</label>
        <link refid="_gfx_font_8h_source"/>
        <childnode refid="90250" relation="include">
        </childnode>
        <childnode refid="90253" relation="include">
        </childnode>
        <childnode refid="90261" relation="include">
        </childnode>
        <childnode refid="90260" relation="include">
        </childnode>
      </node>
      <node id="90249">
        <label>thirdparty/poppler/poppler/StructElement.h</label>
        <link refid="_struct_element_8h"/>
        <childnode refid="90250" relation="include">
        </childnode>
        <childnode refid="90253" relation="include">
        </childnode>
        <childnode refid="90257" relation="include">
        </childnode>
        <childnode refid="90261" relation="include">
        </childnode>
        <childnode refid="90277" relation="include">
        </childnode>
        <childnode refid="90262" relation="include">
        </childnode>
      </node>
      <node id="90256">
        <label>stdlib.h</label>
      </node>
      <node id="90258">
        <label>goo/gmem.h</label>
        <link refid="gmem_8h_source"/>
        <childnode refid="90252" relation="include">
        </childnode>
        <childnode refid="90251" relation="include">
        </childnode>
      </node>
      <node id="90266">
        <label>Array.h</label>
        <link refid="_array_8h_source"/>
        <childnode refid="90251" relation="include">
        </childnode>
        <childnode refid="90261" relation="include">
        </childnode>
        <childnode refid="90267" relation="include">
        </childnode>
      </node>
      <node id="90257">
        <label>MarkedContentOutputDev.h</label>
        <link refid="_marked_content_output_dev_8h_source"/>
        <childnode refid="90250" relation="include">
        </childnode>
        <childnode refid="90258" relation="include">
        </childnode>
        <childnode refid="90259" relation="include">
        </childnode>
        <childnode refid="90272" relation="include">
        </childnode>
        <childnode refid="90276" relation="include">
        </childnode>
        <childnode refid="90277" relation="include">
        </childnode>
      </node>
      <node id="90275">
        <label>map</label>
      </node>
      <node id="90265">
        <label>Error.h</label>
        <link refid="_error_8h_source"/>
        <childnode refid="90255" relation="include">
        </childnode>
        <childnode refid="90251" relation="include">
        </childnode>
        <childnode refid="90250" relation="include">
        </childnode>
        <childnode refid="90253" relation="include">
        </childnode>
      </node>
      <node id="90269">
        <label>Dict.h</label>
        <link refid="_dict_8h_source"/>
        <childnode refid="90251" relation="include">
        </childnode>
        <childnode refid="90261" relation="include">
        </childnode>
        <childnode refid="90267" relation="include">
        </childnode>
      </node>
      <node id="90254">
        <label>limits.h</label>
      </node>
      <node id="90251">
        <label>poppler-config.h</label>
        <link refid="poppler-config_8h_source"/>
        <childnode refid="90252" relation="include">
        </childnode>
      </node>
      <node id="90264">
        <label>goo/GooLikely.h</label>
        <link refid="_goo_likely_8h_source"/>
      </node>
      <node id="90270">
        <label>Stream.h</label>
        <link refid="_stream_8h_source"/>
        <childnode refid="90251" relation="include">
        </childnode>
        <childnode refid="90252" relation="include">
        </childnode>
        <childnode refid="90250" relation="include">
        </childnode>
        <childnode refid="90261" relation="include">
        </childnode>
        <childnode refid="90267" relation="include">
        </childnode>
      </node>
      <node id="90268">
        <label>pthread.h</label>
      </node>
      <node id="90271">
        <label>PopplerCache.h</label>
        <link refid="_poppler_cache_8h_source"/>
        <childnode refid="90261" relation="include">
        </childnode>
      </node>
      <node id="90263">
        <label>string.h</label>
      </node>
      <node id="90253">
        <label>goo/GooString.h</label>
        <link refid="_goo_string_8h_source"/>
        <childnode refid="90254" relation="include">
        </childnode>
        <childnode refid="90255" relation="include">
        </childnode>
        <childnode refid="90256" relation="include">
        </childnode>
        <childnode refid="90250" relation="include">
        </childnode>
      </node>
      <node id="90261">
        <label>Object.h</label>
        <link refid="_object_8h_source"/>
        <childnode refid="90262" relation="include">
        </childnode>
        <childnode refid="90252" relation="include">
        </childnode>
        <childnode refid="90263" relation="include">
        </childnode>
        <childnode refid="90250" relation="include">
        </childnode>
        <childnode refid="90258" relation="include">
        </childnode>
        <childnode refid="90253" relation="include">
        </childnode>
        <childnode refid="90264" relation="include">
        </childnode>
        <childnode refid="90265" relation="include">
        </childnode>
        <childnode refid="90266" relation="include">
        </childnode>
        <childnode refid="90269" relation="include">
        </childnode>
        <childnode refid="90270" relation="include">
        </childnode>
      </node>
      <node id="90277">
        <label>vector</label>
      </node>
      <node id="90259">
        <label>OutputDev.h</label>
        <link refid="_output_dev_8h_source"/>
        <childnode refid="90251" relation="include">
        </childnode>
        <childnode refid="90250" relation="include">
        </childnode>
        <childnode refid="90260" relation="include">
        </childnode>
        <childnode refid="90261" relation="include">
        </childnode>
        <childnode refid="90271" relation="include">
        </childnode>
      </node>
      <node id="90267">
        <label>goo/GooMutex.h</label>
        <link refid="_goo_mutex_8h_source"/>
        <childnode refid="90268" relation="include">
        </childnode>
      </node>
      <node id="90260">
        <label>CharTypes.h</label>
        <link refid="_char_types_8h_source"/>
      </node>
      <node id="90250">
        <label>goo/gtypes.h</label>
        <link refid="gtypes_8h_source"/>
        <childnode refid="90251" relation="include">
        </childnode>
      </node>
      <node id="90262">
        <label>set</label>
      </node>
      <node id="90252">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="90278">
        <label>thirdparty/poppler/poppler/StructElement.h</label>
        <link refid="_struct_element_8h"/>
        <childnode refid="90279" relation="include">
        </childnode>
        <childnode refid="90281" relation="include">
        </childnode>
        <childnode refid="90282" relation="include">
        </childnode>
      </node>
      <node id="90281">
        <label>thirdparty/poppler/poppler/StructElement.cc</label>
        <link refid="_struct_element_8cc_source"/>
      </node>
      <node id="90280">
        <label>thirdparty/poppler/poppler/Catalog.cc</label>
        <link refid="_catalog_8cc_source"/>
      </node>
      <node id="90282">
        <label>thirdparty/poppler/poppler/StructTreeRoot.cc</label>
        <link refid="_struct_tree_root_8cc_source"/>
      </node>
      <node id="90279">
        <label>thirdparty/poppler/poppler/StructTreeRoot.h</label>
        <link refid="_struct_tree_root_8h_source"/>
        <childnode refid="90280" relation="include">
        </childnode>
        <childnode refid="90281" relation="include">
        </childnode>
        <childnode refid="90282" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="class_attribute" prot="public">Attribute</innerclass>
    <innerclass refid="class_struct_element" prot="public">StructElement</innerclass>
    <innerclass refid="struct_struct_element_1_1_struct_data" prot="private">StructElement::StructData</innerclass>
    <innerclass refid="struct_struct_element_1_1_content_data" prot="private">StructElement::ContentData</innerclass>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//========================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>StructElement.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>file<sp/>is<sp/>licensed<sp/>under<sp/>the<sp/>GPLv2<sp/>or<sp/>later</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>2013,<sp/>2014<sp/>Igalia<sp/>S.L.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>2014<sp/>Luigi<sp/>Scarso<sp/>&lt;luigi.scarso@gmail.com&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>2014<sp/>Albert<sp/>Astals<sp/>Cid<sp/>&lt;aacid@kde.org&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//========================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>STRUCTELEMENT_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STRUCTELEMENT_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>USE_GCC_PRAGMAS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>interface</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;goo/gtypes.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;goo/GooString.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;MarkedContentOutputDev.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Object.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;set&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_goo_string" kindref="compound">GooString</ref>;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_dict" kindref="compound">Dict</ref>;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_struct_element" kindref="compound">StructElement</ref>;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_struct_tree_root" kindref="compound">StructTreeRoot</ref>;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33" refid="class_attribute" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_attribute" kindref="compound">Attribute</ref><sp/>{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>Type<sp/>{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>Unknown<sp/>=<sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Uninitialized,<sp/>parsing<sp/>error,<sp/>etc.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>UserProperty,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>User<sp/>defined<sp/>attribute<sp/>(i.e.<sp/>non-standard)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Common<sp/>standard<sp/>attributes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>Placement,<sp/>WritingMode,<sp/>BackgroundColor,<sp/>BorderColor,<sp/>BorderStyle,</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>BorderThickness,<sp/>Color,<sp/>Padding,</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Block<sp/>element<sp/>standard<sp/>attributes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>SpaceBefore,<sp/>SpaceAfter,<sp/>StartIndent,<sp/>EndIndent,<sp/>TextIndent,<sp/>TextAlign,</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>BBox,<sp/>Width,<sp/>Height,<sp/>BlockAlign,<sp/>InlineAlign,<sp/>TBorderStyle,<sp/>TPadding,</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Inline<sp/>element<sp/>standard<sp/>attributes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>BaselineShift,<sp/>LineHeight,<sp/>TextDecorationColor,<sp/>TextDecorationThickness,</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>TextDecorationType,<sp/>RubyAlign,<sp/>RubyPosition,<sp/>GlyphOrientationVertical,</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Column-only<sp/>standard<sp/>attributes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>ColumnCount,<sp/>ColumnGap,<sp/>ColumnWidths,</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>List-only<sp/>standard<sp/>attributes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>ListNumbering,</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>PrintField-only<sp/>standard<sp/>attributes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>Role,<sp/>checked,<sp/>Desc,</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Table-only<sp/>standard<sp/>attributes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>RowSpan,<sp/>ColSpan,<sp/>Headers,<sp/>Scope,<sp/>Summary,</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>Owner<sp/>{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>UnknownOwner<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>User-defined<sp/>attributes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>UserProperties,</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Standard<sp/>attributes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>Layout,<sp/>List,<sp/>PrintField,<sp/>Table,</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Translation<sp/>to<sp/>other<sp/>formats</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>XML_1_00,<sp/>HTML_3_20,<sp/>HTML_4_01,<sp/>OEB_1_00,<sp/>RTF_1_05,<sp/>CSS_1_00,<sp/>CSS_2_00,</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Creates<sp/>a<sp/>standard<sp/>attribute.<sp/>The<sp/>name<sp/>is<sp/>predefined,<sp/>and<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>value<sp/>is<sp/>type-checked<sp/>to<sp/>conform<sp/>to<sp/>the<sp/>PDF<sp/>specification.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><ref refid="class_attribute" kindref="compound">Attribute</ref>(Type<sp/>type,<sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>*value);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Creates<sp/>an<sp/>UserProperty<sp/>attribute,<sp/>with<sp/>an<sp/>arbitrary<sp/>name<sp/>and<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><ref refid="class_attribute" kindref="compound">Attribute</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nameLen,<sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>*value);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/>GBool<sp/>isOk()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>type<sp/>!=<sp/>Unknown;<sp/>}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Name,<sp/>type<sp/>and<sp/>value<sp/>can<sp/>be<sp/>set<sp/>only<sp/>on<sp/>construction.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/>Type<sp/>getType()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>type;<sp/>}</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/>Owner<sp/>getOwner()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>owner;<sp/>}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*getTypeName()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*getOwnerName()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>*getValue()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;value;<sp/>}</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>*getDefaultValue(Type<sp/>type);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>caller<sp/>gets<sp/>the<sp/>ownership<sp/>of<sp/>the<sp/>return<sp/>GooString<sp/>and<sp/>is<sp/>responsible<sp/>of<sp/>deleting<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*getName()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>type<sp/>==<sp/>UserProperty<sp/>?<sp/>name.copy()<sp/>:<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref>(getTypeName());<sp/>}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>revision<sp/>is<sp/>optional,<sp/>and<sp/>defaults<sp/>to<sp/>zero.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/>Guint<sp/>getRevision()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>revision;<sp/>}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setRevision(Guint<sp/>revisionA)<sp/>{<sp/>revision<sp/>=<sp/>revisionA;<sp/>}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Hidden<sp/>elements<sp/>should<sp/>not<sp/>be<sp/>displayed<sp/>by<sp/>the<sp/>user<sp/>agent</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/>GBool<sp/>isHidden()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hidden;<sp/>}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setHidden(GBool<sp/>hiddenA)<sp/>{<sp/>hidden<sp/>=<sp/>hiddenA;<sp/>}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>formatted<sp/>value<sp/>may<sp/>be<sp/>in<sp/>the<sp/>PDF,<sp/>or<sp/>be<sp/>left<sp/>undefined<sp/>(NULL).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>In<sp/>the<sp/>later<sp/>case<sp/>the<sp/>user<sp/>agent<sp/>should<sp/>provide<sp/>a<sp/>default<sp/>representation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*getFormattedValue()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>formatted<sp/>?<sp/>formatted-&gt;getCString()<sp/>:<sp/>NULL;<sp/>}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setFormattedValue(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*formattedA);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/>~<ref refid="class_attribute" kindref="compound">Attribute</ref>();</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/>Type<sp/>type;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/>Owner<sp/>owner;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/>Guint<sp/>revision;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">mutable</highlight><highlight class="normal"><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>name;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">mutable</highlight><highlight class="normal"><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>value;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/>GBool<sp/>hidden;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*formatted;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/>GBool<sp/>checkType(<ref refid="class_struct_element" kindref="compound">StructElement</ref><sp/>*element<sp/>=<sp/>NULL);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>Type<sp/>getTypeForName(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/><ref refid="class_struct_element" kindref="compound">StructElement</ref><sp/>*element<sp/>=<sp/>NULL);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="class_attribute" kindref="compound">Attribute</ref><sp/>*parseUserProperty(<ref refid="class_dict" kindref="compound">Dict</ref><sp/>*property);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_struct_element" kindref="compound">StructElement</ref>;</highlight></codeline>
<codeline lineno="123"><highlight class="normal">};</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126" refid="class_struct_element" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_struct_element" kindref="compound">StructElement</ref><sp/>{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>Type<sp/>{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>Unknown<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>MCID,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>MCID<sp/>reference,<sp/>used<sp/>internally</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>OBJR,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Object<sp/>reference,<sp/>used<sp/>internally</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>Document,<sp/>Part,<sp/>Art,<sp/>Sect,<sp/>Div,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Structural<sp/>elements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>Span,<sp/>Quote,<sp/>Note,<sp/>Reference,<sp/>BibEntry,<sp/></highlight><highlight class="comment">//<sp/>Inline<sp/>elements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>Code,<sp/>Link,<sp/><ref refid="class_annot" kindref="compound">Annot</ref>,</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>BlockQuote,<sp/>Caption,<sp/>NonStruct,</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>TOC,<sp/>TOCI,<sp/>Index,<sp/>Private,</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>P,<sp/>H,<sp/>H1,<sp/>H2,<sp/>H3,<sp/>H4,<sp/>H5,<sp/>H6,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Paragraph-like</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>L,<sp/>LI,<sp/>Lbl,<sp/>LBody,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>List<sp/>elements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>Table,<sp/>TR,<sp/>TH,<sp/>TD,<sp/>THead,<sp/>TFoot,<sp/>TBody,<sp/></highlight><highlight class="comment">//<sp/>Table<sp/>elements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>Ruby,<sp/>RB,<sp/>RT,<sp/>RP,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Ruby<sp/>text<sp/>elements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>Warichu,<sp/>WT,<sp/>WP,</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>Figure,<sp/>Formula,<sp/><ref refid="class_form" kindref="compound">Form</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Illustration-like<sp/>elements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_ref" kindref="compound">Ref</ref><sp/>InvalidRef;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*getTypeName()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/>Type<sp/>getType()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>type;<sp/>}</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/>GBool<sp/>isOk()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>type<sp/>!=<sp/>Unknown;<sp/>}</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/>GBool<sp/>isBlock()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/>GBool<sp/>isInline()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/>GBool<sp/>isGrouping()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>GBool<sp/>isContent()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(type<sp/>==<sp/>MCID)<sp/>||<sp/>isObjectRef();<sp/>}</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>GBool<sp/>isObjectRef()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(type<sp/>==<sp/>OBJR<sp/>&amp;&amp;<sp/>c-&gt;ref.num<sp/>!=<sp/>-1<sp/>&amp;&amp;<sp/>c-&gt;ref.gen<sp/>!=<sp/>-1);<sp/>}</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>getMCID()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>c-&gt;mcid;<sp/>}</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><ref refid="struct_ref" kindref="compound">Ref</ref><sp/>getObjectRef()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>c-&gt;ref;<sp/>}</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><ref refid="struct_ref" kindref="compound">Ref</ref><sp/>getParentRef()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>isContent()<sp/>?<sp/>parent-&gt;getParentRef()<sp/>:<sp/>s-&gt;parentRef.getRef();<sp/>}</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/>GBool<sp/>hasPageRef()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/>GBool<sp/>getPageRef(<ref refid="struct_ref" kindref="compound">Ref</ref>&amp;<sp/>ref)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><ref refid="class_struct_tree_root" kindref="compound">StructTreeRoot</ref><sp/>*getStructTreeRoot()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>treeRoot;<sp/>}</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Optional<sp/>element<sp/>identifier.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*getID()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>isContent()<sp/>?<sp/>NULL<sp/>:<sp/>s-&gt;id;<sp/>}</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*getID()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>isContent()<sp/>?<sp/>NULL<sp/>:<sp/>s-&gt;id;<sp/>}</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Optional<sp/>ISO<sp/>language<sp/>name,<sp/>e.g.<sp/>en_US</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*getLanguage()<sp/>{</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!isContent()<sp/>&amp;&amp;<sp/>s-&gt;language)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s-&gt;language;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>parent<sp/>?<sp/>parent-&gt;getLanguage()<sp/>:<sp/>NULL;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*getLanguage()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!isContent()<sp/>&amp;&amp;<sp/>s-&gt;language)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s-&gt;language;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>parent<sp/>?<sp/>parent-&gt;getLanguage()<sp/>:<sp/>NULL;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Optional<sp/>revision<sp/>number,<sp/>defaults<sp/>to<sp/>zero.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/>Guint<sp/>getRevision()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>isContent()<sp/>?<sp/>0<sp/>:<sp/>s-&gt;revision;<sp/>}</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setRevision(Guint<sp/>revision)<sp/>{<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isContent())<sp/>s-&gt;revision<sp/>=<sp/>revision;<sp/>}</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Optional<sp/>element<sp/>title,<sp/>in<sp/>human-readable<sp/>form.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*getTitle()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>isContent()<sp/>?<sp/>NULL<sp/>:<sp/>s-&gt;title;<sp/>}</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*getTitle()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>isContent()<sp/>?<sp/>NULL<sp/>:<sp/>s-&gt;title;<sp/>}</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Optional<sp/>element<sp/>expanded<sp/>abbreviation<sp/>text.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*getExpandedAbbr()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>isContent()<sp/>?<sp/>NULL<sp/>:<sp/>s-&gt;expandedAbbr;<sp/>}</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*getExpandedAbbr()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>isContent()<sp/>?<sp/>NULL<sp/>:<sp/>s-&gt;expandedAbbr;<sp/>}</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>getNumChildren()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>isContent()<sp/>?<sp/>0<sp/>:<sp/>s-&gt;elements.size();<sp/>}</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_struct_element" kindref="compound">StructElement</ref><sp/>*getChild(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>isContent()<sp/>?<sp/>NULL<sp/>:<sp/>s-&gt;elements.at(i);<sp/>}</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><ref refid="class_struct_element" kindref="compound">StructElement</ref><sp/>*getChild(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>isContent()<sp/>?<sp/>NULL<sp/>:<sp/>s-&gt;elements.at(i);<sp/>}</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>appendChild(<ref refid="class_struct_element" kindref="compound">StructElement</ref><sp/>*element)<sp/>{</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!isContent()<sp/>&amp;&amp;<sp/>element<sp/>&amp;&amp;<sp/>element-&gt;isOk())<sp/>{</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;elements.push_back(element);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>getNumAttributes()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>isContent()<sp/>?<sp/>0<sp/>:<sp/>s-&gt;attributes.size();<sp/>}</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_attribute" kindref="compound">Attribute</ref><sp/>*getAttribute(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>isContent()<sp/>?<sp/>NULL<sp/>:<sp/>s-&gt;attributes.at(i);<sp/>}</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><ref refid="class_attribute" kindref="compound">Attribute</ref><sp/>*getAttribute(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>isContent()<sp/>?<sp/>NULL<sp/>:<sp/>s-&gt;attributes.at(i);<sp/>}</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>appendAttribute(<ref refid="class_attribute" kindref="compound">Attribute</ref><sp/>*attribute)<sp/>{</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!isContent()<sp/>&amp;&amp;<sp/>attribute)<sp/>{</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;attributes.push_back(attribute);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_attribute" kindref="compound">Attribute</ref>*<sp/>findAttribute(Attribute::Type<sp/>attributeType,<sp/>GBool<sp/>inherit<sp/>=<sp/>gFalse,</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Attribute::Owner<sp/>owner<sp/>=<sp/>Attribute::UnknownOwner)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*getAltText()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>isContent()<sp/>?<sp/>NULL<sp/>:<sp/>s-&gt;altText;<sp/>}</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*getAltText()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>isContent()<sp/>?<sp/>NULL<sp/>:<sp/>s-&gt;altText;<sp/>}</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*getActualText()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>isContent()<sp/>?<sp/>NULL<sp/>:<sp/>s-&gt;actualText;<sp/>}</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*getActualText()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>isContent()<sp/>?<sp/>NULL<sp/>:<sp/>s-&gt;actualText;<sp/>}</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Content<sp/>text<sp/>referenced<sp/>by<sp/>the<sp/>element:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>-<sp/>For<sp/>MCID<sp/>reference<sp/>elements,<sp/>this<sp/>is<sp/>just<sp/>the<sp/>text<sp/>of<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>corresponding<sp/>marked<sp/>content<sp/>object<sp/>in<sp/>the<sp/>page<sp/>stream,<sp/>regardless</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>of<sp/>the<sp/>setting<sp/>of<sp/>the<sp/>&quot;recursive&quot;<sp/>flag.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>-<sp/>For<sp/>other<sp/>elements,<sp/>if<sp/>the<sp/>&quot;recursive&quot;<sp/>flag<sp/>is<sp/>set,<sp/>the<sp/>text</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>enclosed<sp/>by<sp/>*all*<sp/>the<sp/>child<sp/>MCID<sp/>reference<sp/>elements<sp/>of<sp/>the<sp/>subtree</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>is<sp/>returned.<sp/>The<sp/>text<sp/>is<sp/>assembled<sp/>by<sp/>traversing<sp/>the<sp/>leaf<sp/>MCID</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>reference<sp/>elements<sp/>in<sp/>logical<sp/>order.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>-<sp/>In<sp/>any<sp/>other<sp/>case,<sp/>the<sp/>function<sp/>returns<sp/>NULL.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>new<sp/>string<sp/>is<sp/>returned,<sp/>and<sp/>the<sp/>ownership<sp/>passed<sp/>to<sp/>the<sp/>caller.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*getText(GBool<sp/>recursive<sp/>=<sp/>gTrue)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>appendSubTreeText(NULL,<sp/>recursive);</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TextSpanArray<sp/>getTextSpans()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!isContent())</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TextSpanArray();</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_marked_content_output_dev" kindref="compound">MarkedContentOutputDev</ref><sp/>mcdev(getMCID());</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>getTextSpansInternal(mcdev);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/>~<ref refid="class_struct_element" kindref="compound">StructElement</ref>();</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref>*<sp/>appendSubTreeText(<ref refid="class_goo_string" kindref="compound">GooString</ref><sp/>*</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,<sp/>GBool<sp/>recursive)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TextSpanArray&amp;<sp/>getTextSpansInternal(<ref refid="class_marked_content_output_dev" kindref="compound">MarkedContentOutputDev</ref>&amp;<sp/>mcdev)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::vector&lt;Attribute*&gt;<sp/><sp/><sp/><sp/><sp/>AttrPtrArray;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::vector&lt;StructElement*&gt;<sp/>ElemPtrArray;</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">StructData<sp/>{</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parentRef;</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/><sp/><sp/>*altText;</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/><sp/><sp/>*actualText;</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/><sp/><sp/>*id;</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/><sp/><sp/>*title;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/><sp/><sp/>*expandedAbbr;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_goo_string" kindref="compound">GooString</ref><sp/><sp/><sp/>*language;</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/>Guint<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>revision;</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/>ElemPtrArray<sp/>elements;</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/>AttrPtrArray<sp/>attributes;</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/>StructData();</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/>~StructData();</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Data<sp/>in<sp/>content<sp/>elements<sp/>(MCID,<sp/>MCR)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ContentData<sp/>{</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mcid;</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_ref" kindref="compound">Ref</ref><sp/>ref;</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/>ContentData(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mcidA):<sp/>mcid(mcidA)<sp/>{}</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/>ContentData(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_ref" kindref="compound">Ref</ref>&amp;<sp/>r)<sp/>{<sp/>ref.num<sp/>=<sp/>r.num;<sp/>ref.gen<sp/>=<sp/>r.gen;<sp/>}</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Common<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/>Type<sp/>type;</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><ref refid="class_struct_tree_root" kindref="compound">StructTreeRoot</ref><sp/>*treeRoot;</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><ref refid="class_struct_element" kindref="compound">StructElement</ref><sp/>*parent;</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">mutable</highlight><highlight class="normal"><sp/><ref refid="class_object" kindref="compound">Object</ref><sp/>pageRef;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/>StructData<sp/><sp/>*s;</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/>ContentData<sp/>*c;</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><ref refid="class_struct_element" kindref="compound">StructElement</ref>(<ref refid="class_dict" kindref="compound">Dict</ref><sp/>*elementDict,<sp/><ref refid="class_struct_tree_root" kindref="compound">StructTreeRoot</ref><sp/>*treeRootA,<sp/><ref refid="class_struct_element" kindref="compound">StructElement</ref><sp/>*parentA,<sp/>std::set&lt;int&gt;<sp/>&amp;seen);</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><ref refid="class_struct_element" kindref="compound">StructElement</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mcid,<sp/><ref refid="class_struct_tree_root" kindref="compound">StructTreeRoot</ref><sp/>*treeRootA,<sp/><ref refid="class_struct_element" kindref="compound">StructElement</ref><sp/>*parentA);</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><ref refid="class_struct_element" kindref="compound">StructElement</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_ref" kindref="compound">Ref</ref><sp/>&amp;ref,<sp/><ref refid="class_struct_tree_root" kindref="compound">StructTreeRoot</ref><sp/>*treeRootA,<sp/><ref refid="class_struct_element" kindref="compound">StructElement</ref><sp/>*parentA);</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>parse(<ref refid="class_dict" kindref="compound">Dict</ref>*<sp/>elementDict);</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><ref refid="class_struct_element" kindref="compound">StructElement</ref>*<sp/>parseChild(<ref refid="class_object" kindref="compound">Object</ref><sp/>*ref,<sp/><ref refid="class_object" kindref="compound">Object</ref>*<sp/>childObj,<sp/>std::set&lt;int&gt;<sp/>&amp;seen);</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>parseChildren(<ref refid="class_dict" kindref="compound">Dict</ref>*<sp/>element,<sp/>std::set&lt;int&gt;<sp/>&amp;seen);</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>parseAttributes(<ref refid="class_dict" kindref="compound">Dict</ref><sp/>*element,<sp/>GBool<sp/>keepExisting<sp/>=<sp/>gFalse);</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_struct_tree_root" kindref="compound">StructTreeRoot</ref>;</highlight></codeline>
<codeline lineno="307"><highlight class="normal">};</highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="thirdparty/poppler/poppler/StructElement.h"/>
  </compounddef>
</doxygen>
